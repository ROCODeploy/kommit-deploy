
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':5001/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
var Main = (function () {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function select_option(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked') || select.options[0];
        return selected_option && selected_option.__value;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.29.4' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
    }

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var main = createCommonjsModule(function (module, exports) {
    (function(global, factory) {
    	 factory(exports) ;
    }(commonjsGlobal, (function(exports) {
    	const mod = {

    		OLSKInternationalDefaultIdentifier () {
    			return 'i18n';
    		},

    		OLSKInternationalIsTranslationFileBasename (inputData) {
    			if (typeof inputData !== 'string') {
    				return false;
    			}

    			if (!inputData.split('.').pop().match(/ya?ml/i)) {
    				return false;
    			}

    			if (inputData.split('.').shift() !== mod.OLSKInternationalDefaultIdentifier()) {
    				return false;
    			}

    			if (!mod._OLSKInternationalLanguageID(inputData)) {
    				return false;
    			}

    			return true;
    		},

    		OLSKInternationalLanguageID (inputData) {
    			if (!mod.OLSKInternationalIsTranslationFileBasename(inputData)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return mod._OLSKInternationalLanguageID(inputData);
    		},

    		OLSKInternationalSimplifiedLanguageCode (inputData) {
    			if (typeof inputData !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return inputData.split('-').shift();
    		},

    		_OLSKInternationalLanguageID (inputData) {
    			var elements = inputData.split('.');

    			elements.pop();
    			elements.shift();

    			return elements.pop();
    		},

    		OLSKInternationalLocalizedString (translationKey, translationDictionary) {
    			if (typeof translationDictionary !== 'object' || translationDictionary === null) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			var localizedString = translationDictionary[translationKey];

    			if (!localizedString) {
    				localizedString = 'TRANSLATION_MISSING';
    				console.log([
    					localizedString,
    					translationKey,
    					]);
    			}

    			return localizedString;
    		},

    		OLSKInternationalLocalizedStringCallback (dictionary, fallbackLocales) {
    			if (typeof dictionary !== 'object' || dictionary === null) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (!Array.isArray(fallbackLocales)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			const _locales = Object.keys(dictionary).reverse().concat(...fallbackLocales.map(function (e) {
    					return [mod.OLSKInternationalSimplifiedLanguageCode(e), e]
    				}).reverse());

    			return function (signature, requestLocales) {
    				if (!Array.isArray(requestLocales)) {
    					throw new Error('OLSKErrorInputNotValid');
    				}

    				let locales = _locales.concat(...requestLocales.map(function (e) {
    					return [mod.OLSKInternationalSimplifiedLanguageCode(e), e]
    				}).reverse(), []);

    				let outputData;

    				while (!outputData && locales.length) {
    					outputData = (dictionary[locales.pop()] || {})[signature];
    				}

    				if (!outputData) {
    					console.log([outputData = 'TRANSLATION_MISSING', signature].join(' '));
    				}

    				return outputData;				
    			};
    		},

    		_OLSKInternationalPaths (cwd, filter) {
    			if (typeof cwd !== 'string' || !cwd.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			const _require = commonjsRequire;

    			return _require().sync(`**/*${ mod.OLSKInternationalDefaultIdentifier() }*.y*(a)ml`, {
    				cwd,
    				realpath: true,
    			}).filter(function (e) {
    				if (!filter) {
    					return true;
    				}

    				return !e.match(filter);
    			}).filter(function (e) {
    				return mod.OLSKInternationalIsTranslationFileBasename(_require().basename(e));
    			});
    		},

    		_OLSKInternationalConstructedDictionary (inputData) {
    			if (!Array.isArray(inputData)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			const _require = commonjsRequire;

    			return inputData.reduce(function (coll, item) {
    				const key = mod.OLSKInternationalLanguageID(_require().basename(item));

    				coll[key] = Object.assign(coll[key] || {}, _require().safeLoad(_require().readFileSync(item, 'utf8')));

    				return coll;
    			}, {});
    		},

    		OLSKInternationalDictionary (cwd) {
    			return this._OLSKInternationalConstructedDictionary(this._OLSKInternationalPaths(cwd));
    		},

    		_OLSKInternationalCompilationObject (cwd, languageID) {
    			const _require = commonjsRequire;

    			return this._OLSKInternationalPaths(cwd, /node_modules|__external/).filter(function (e) {
    				if (!languageID) {
    					return true;
    				}

    				return mod.OLSKInternationalLanguageID(_require().basename(e)) === languageID;
    			}).reduce(function (coll, item) {
    				return Object.assign(coll, {
    					[item]: _require().safeLoad(_require().readFileSync(item, 'utf8')),
    				});
    			}, {});
    		},

    		_OLSKInternationalCompilationFilePath (cwd) {
    			if (typeof cwd !== 'string' || !cwd.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}
    			const _require = commonjsRequire;

    			return _require().join(cwd, '__compiled', mod.OLSKInternationalDefaultIdentifier() + '-compilation.yml')
    		},

    		OLSKInternationalWriteCompilationFile (cwd, languageID) {
    			const _require = commonjsRequire;

    			const data = _require().safeDump(this._OLSKInternationalCompilationObject(cwd, languageID));

    			const outputDirectory = _require().dirname(mod._OLSKInternationalCompilationFilePath(cwd));

    			if (!_require().existsSync(outputDirectory)){
    				_require().mkdirSync(outputDirectory);
    			}

    			_require().writeFileSync(mod._OLSKInternationalCompilationFilePath(cwd), data);
    		},

    		OLSKInternationalSpreadCompilationFile (cwd, languageID) {
    			if (typeof cwd !== 'string' || !cwd.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			const _require = commonjsRequire;

    			const compilation = _require().safeLoad(_require().readFileSync(mod._OLSKInternationalCompilationFilePath(cwd), 'utf8'));

    			Object.keys(compilation).map(function (e) {
    				return _require().writeFileSync(e, _require().safeDump(compilation[e]));
    			});
    		},

    		OLSKInternationalAddControllerLanguageCode (cwd, languageID) {
    			if (typeof cwd !== 'string' || !cwd.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof languageID !== 'string' || !languageID.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			const _require = commonjsRequire;

    			_require().sync('controller.js', {
    				cwd,
    				matchBase: true,
    				realpath: true,
    			}).forEach(function (file) {
    				if (file.match(/.*(\.git|DS_Store|node_modules|vendor|__\w+)\/.*/i)) {
    					return
    				}

    				const item = _require();

    				if (typeof item.OLSKControllerRoutes !== 'function') {
    					return;
    				}

    				if (!(function(inputData) {
    					if (Array.isArray(inputData)) {
    						return inputData;
    					}
    					return Object.entries(inputData).reduce(function (coll, item) {
    						return coll.concat(Object.assign(item[1], {
    							OLSKRouteSignature: item[0],
    						}));
    					}, []);
    				})(item.OLSKControllerRoutes()).filter(function (e) {
    					return e.OLSKRouteLanguages;
    				}).filter(function (e) {
    					return !e.OLSKRouteLanguages.includes(languageID);
    				}).length) {
    					return
    				}
    				const match = _require().readFileSync(file, 'utf8').match(/OLSKRouteLanguages: \[.*\]/g);

    				if (!match) {
    					throw new Error(`invalid OLSKRouteLanguages syntax in ${ e }`);
    				}

    				match.map(function (e) {
    					const match = e.match(/\[.*\]/);
    					return _require().writeFileSync(file, _require().readFileSync(file, 'utf8').replace(/OLSKRouteLanguages: \[.*\]/, `OLSKRouteLanguages: ['${JSON.parse(match[0].replace(/\'/g, '"')).concat(languageID).join('\', \'')}']`));
    				});
    			});

    			if (process.argv[2].endsWith('olsk-i18n-add')) {
    				process.exit();
    			}
    		},

    	};
    	
    	Object.assign(exports, mod);

    	Object.defineProperty(exports, '__esModule', {
    		value: true
    	});

    })));
    });

    var OLSKInternational = unwrapExports(main);

    var main$1 = createCommonjsModule(function (module, exports) {
    (function(global, factory) {
    	 factory(exports) ;
    }(commonjsGlobal, (function(exports) {
    	const mod = {

    		OLSKStringWithFormat (inputData) {
    			if (typeof inputData !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			var substitutions = Object.values(arguments).slice(1);

    			if (!substitutions.length) {
    				return inputData;
    			}

    			var formattedString = inputData;

    			(inputData.match(/%@/g) || []).forEach(function(e, i) {
    				formattedString = formattedString.replace(e, substitutions[i]);
    			});

    			mod._OLSKStringAllMatchesWithRegexAndString(/%\$(\d*)@/g, inputData).forEach(function(e) {
    				formattedString = formattedString.replace(e[0], substitutions[e[1] - 1]);
    			});

    			return formattedString;
    		},

    		_OLSKStringAllMatchesWithRegexAndString (regex, string) {
    			var matches = [];

    			var match = regex.exec(string);

    			while (match != null) {
    				matches.push(match);

    				match = regex.exec(string);
    			}

    			return matches;
    		},

    		OLSKStringReplaceTokens (param1, param2) {
    			if (typeof param1 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param2 !== 'object' || param2 === null) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return Object.entries(param2).reduce(function (coll, item) {
    				return coll.replace(new RegExp(item.shift(), 'g'), item.pop());
    			}, param1);
    		},

    		OLSKStringPatch (param1, param2, param3) {
    			if (typeof param1 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param2 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param3 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (!param1.includes(param2) && !param1.includes(param3)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (param3.includes(param2)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return param1.split(param2).join(param3);
    		},

    		OLSKStringMatch (param1, param2) {
    			if (typeof param1 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param2 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			// Searching and sorting text with diacritical marks in JavaScript | Thread Engineering https://thread.engineering/2018-08-29-searching-and-sorting-text-with-diacritical-marks-in-javascript/
    			return param2.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '').includes(param1.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, ''));
    		},

    		OLSKStringSnippet (inputData) {
    			if (typeof inputData !== 'string') {
    				throw new Error('KVCErrorInputNotValid');
    			}

    			return inputData.length <= 100 ? inputData : inputData.slice(0, 100).split(' ').slice(0, -1).join(' ').concat('…');
    		},

    	};

    	Object.assign(exports, mod);

    	Object.defineProperty(exports, '__esModule', {
    		value: true
    	});

    })));
    });

    var OLSKString = unwrapExports(main$1);

    var main$2 = createCommonjsModule(function (module, exports) {

    //_ OLSKTestingFakeRequest

    exports.OLSKTestingFakeRequest = function(inputData = {}) {
    	console.warn('OLSKTestingFakeRequest DEPRECATED');
    	return Object.assign({}, inputData);
    };

    //_ OLSKTestingFakeRequestForSession

    exports.OLSKTestingFakeRequestForSession = function(inputData = {}) {
    	console.warn('OLSKTestingFakeRequestForSession DEPRECATED');
    	return exports.OLSKTestingFakeRequest({
    		session: inputData,
    	});
    };

    //_ OLSKTestingFakeRequestForHeaders

    exports.OLSKTestingFakeRequestForHeaders = function(inputData = {}) {
    	console.warn('OLSKTestingFakeRequestForHeaders DEPRECATED');
    	return exports.OLSKTestingFakeRequest({
    		headers: inputData,
    	});
    };

    //_ OLSKTestingFakeResponse

    exports.OLSKTestingFakeResponse = function(inputData = {}) {
    	console.warn('OLSKTestingFakeResponse DEPRECATED');
    	return Object.assign({}, inputData);
    };

    //_ OLSKTestingFakeResponseForLocals

    exports.OLSKTestingFakeResponseForLocals = function(inputData = {}) {
    	console.warn('OLSKTestingFakeResponseForLocals DEPRECATED');
    	return exports.OLSKTestingFakeResponse({
    		locals: inputData,
    	});
    };

    //_ OLSKTestingFakeResponseForJSON

    exports.OLSKTestingFakeResponseForJSON = function() {
    	console.warn('OLSKTestingFakeResponseForJSON DEPRECATED');
    	return exports.OLSKTestingFakeResponse({
    		json: function(inputData) {
    			return inputData;
    		},
    	});
    };

    //_ OLSKTestingFakeResponseForRender

    exports.OLSKTestingFakeResponseForRender = function(callback) {
    	console.warn('OLSKTestingFakeResponseForRender DEPRECATED');
    	if (typeof callback !== 'function') {
    		throw new Error('OLSKErrorInputNotValid');
    	}

    	return exports.OLSKTestingFakeResponse({
    		render: callback,
    	});
    };

    //_ OLSKTestingFakeResponseForRedirect

    exports.OLSKTestingFakeResponseForRedirect = function() {
    	console.warn('OLSKTestingFakeResponseForRedirect DEPRECATED');
    	return exports.OLSKTestingFakeResponse({
    		redirect: function(inputData) {
    			return inputData;
    		},
    	});
    };

    //_ OLSKTestingFakeResponseForStatus

    exports.OLSKTestingFakeResponseForStatus = function() {
    	console.warn('OLSKTestingFakeResponseForStatus DEPRECATED');
    	var res = Object.assign(exports.OLSKTestingFakeResponseForJSON(), {
    		status: function(inputData) {
    			res.statusCode = inputData;

    			return;
    		},
    	});

    	return res;
    };

    //_ OLSKTestingFakeNext

    exports.OLSKTestingFakeNext = function() {
    	console.warn('OLSKTestingFakeNext DEPRECATED');
    	return function(inputData) {
    		return typeof inputData === 'undefined' ? 'RETURNED_UNDEFINED' : inputData;
    	};
    };

    //_ _OLSKTestingMochaReplaceES6Import

    exports._OLSKTestingMochaReplaceES6Import = function(inputData) {
    	const exportable = [];
    	
    	inputData = inputData
    		.replace(/^import \* as (\w+) from ['"]([^'"]+)['"];?/gm, 'var $1 = require("$2");')
    		// .replace(/^import (\w+) from ['"]([^'"]+)['"];?/gm, 'var {default: $1} = require("$2");')
    		.replace(/^import (\w+) from ['"]([^'"]+)['"];?/gm, 'var _$1 = require("$2"); const $1 = _$1.default || _$1')
    		.replace(/^import {([^}]+)} from ['"](.+)['"];?/gm, 'var {$1} = require("$2");')
    		.replace(/^export default /gm, 'exports.default = ')
    		.replace(/^export (const|let|var|class|function) (\w+)/gm, (match, type, name) => {
    			exportable.push(name);
    			return `${type} ${name}`;
    		})
    		.replace(/^export \{([^}]+)\}(?: from ['"]([^'"]+)['"];?)?/gm, (match, names, source) => {
    			names.split(',').filter(Boolean).forEach(name => {
    				exportable.push(name);
    			});

    			return source ? `const { ${names} } = require("${source}");` : '';
    		})
    		.replace(/^export function (\w+)/gm, 'exports.$1 = function $1');

    	exportable.forEach(name => {
    		inputData += `\nexports.${name} = ${name};`;
    	});

    	return inputData;
    };

    exports.OLSK_TESTING_BEHAVIOUR = function () {
    	if (typeof navigator === 'undefined') {
    		return false;
    	}

    	return navigator.appName === 'Zombie';
    };
    });
    var main_1 = main$2.OLSKTestingFakeRequest;
    var main_2 = main$2.OLSKTestingFakeRequestForSession;
    var main_3 = main$2.OLSKTestingFakeRequestForHeaders;
    var main_4 = main$2.OLSKTestingFakeResponse;
    var main_5 = main$2.OLSKTestingFakeResponseForLocals;
    var main_6 = main$2.OLSKTestingFakeResponseForJSON;
    var main_7 = main$2.OLSKTestingFakeResponseForRender;
    var main_8 = main$2.OLSKTestingFakeResponseForRedirect;
    var main_9 = main$2.OLSKTestingFakeResponseForStatus;
    var main_10 = main$2.OLSKTestingFakeNext;
    var main_11 = main$2._OLSKTestingMochaReplaceES6Import;
    var main_12 = main$2.OLSK_TESTING_BEHAVIOUR;

    var main$3 = createCommonjsModule(function (module, exports) {
    const uFlatten = function (inputData) {
    	return [].concat.apply([], inputData);
    };

    const mod = {

    	OLSKRemoteStorageJSONSchema (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			type: 'object',
    			properties: Object.entries(inputData).reduce(function (coll, [key, val]) {
    				coll[key] = {};

    				coll[key].type = mod._OLSKRemoteStorageInferredType([...val].shift()).replace('filled', 'string');

    				if (coll[key].type === 'date') {
    					coll[key].type = 'string';
    					coll[key].format = 'date-time';
    				}

    				return coll;
    			}, {}),
    			required: Object.entries(inputData).filter(function ([key, val]) {
    				return !val.includes('__RSOptional');
    			}).map(function ([key, val]) {
    				return key;
    			}),
    		};
    	},

    	_OLSKRemoteStorageInferredType (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return inputData.replace(/\w+ErrorNot/, '').toLowerCase();
    	},

    	OLSKRemoteStorageChangeDelegateMethods () {
    		return [
    			'OLSKChangeDelegateCreate',
    			'OLSKChangeDelegateUpdate',
    			'OLSKChangeDelegateDelete',
    			'OLSKChangeDelegateConflict',
    		];
    	},

    	OLSKRemoteStorageChangeDelegateProperty (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			return;
    		}

    		if (inputData.origin === 'remote' && typeof inputData.oldValue === 'undefined' && typeof inputData.newValue !== 'undefined') {
    			return 'OLSKChangeDelegateCreate';
    		}

    		if (inputData.origin === 'remote' && typeof inputData.oldValue !== 'undefined' && typeof inputData.newValue !== 'undefined') {
    			return 'OLSKChangeDelegateUpdate';
    		}

    		if (inputData.origin === 'remote' && typeof inputData.oldValue !== 'undefined' && typeof inputData.newValue === 'undefined') {
    			return 'OLSKChangeDelegateDelete';
    		}

    		if (inputData.origin === 'conflict') {
    			return 'OLSKChangeDelegateConflict';
    		}

    		return;
    	},

    	OLSKRemoteStorageChangeDelegateInput (inputData) {
    		console.log('OLSKRemoteStorageChangeDelegateInput DEPRECATED: use OLSKRemoteStorageChangeDelegateData');
    		
    		if (!mod.OLSKRemoteStorageChangeDelegateMethods().includes(inputData)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return inputData === 'OLSKChangeDelegateDelete' ? 'oldValue' : 'newValue';
    	},

    	OLSKRemoteStorageChangeDelegateData (param1, param2) {
    		if (!mod.OLSKRemoteStorageChangeDelegateMethods().includes(param1)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!param2.origin) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (param1 === 'OLSKChangeDelegateConflict') {
    			return param2;
    		}

    		return param2[param1 === 'OLSKChangeDelegateDelete' ? 'oldValue' : 'newValue'];
    	},

    	OLSKRemoteStorageChangeDelegateConflictSelectRecent (inputData) {
    		if (inputData.origin !== 'conflict') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (Object.entries(inputData.oldValue).filter(function (e) {
    			if (!e[0].match('ModificationDate')) {
    				return false;
    			}

    			return e[1] > inputData.newValue[e[0]];
    		}).length) {
    			return inputData.oldValue;
    		}

    		return inputData.newValue;
    	},

    	OLSKRemoteStorageStatus (param1, param2, OLSKLocalized = function (inputData) {
    		return inputData;
    	}) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param1.on !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		param1.on('connected', function () {
    			param2(OLSKLocalized('OLSKRemoteStorageStatusOnline'));
    		});

    		let isOffline;
    		param1.on('network-offline', function () {
    			param2(OLSKLocalized('OLSKRemoteStorageStatusNetworkOffline'));

    			isOffline = true;
    		});

    		param1.on('network-online', function () {
    			param2(OLSKLocalized('OLSKRemoteStorageStatusOnline'));

    			isOffline = false;
    		});

    		param1.on('error', function (inputData) {
    			if (isOffline && inputData.message === 'Sync failed: Network request failed.') {
    				return;
    			}

    			param2(OLSKLocalized('OLSKRemoteStorageStatusError'));
    		});

    		param1.on('disconnected', function () {
    			param2('');
    		});
    	},

    	OLSKRemoteStorageIsCollection (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof inputData.OLSKRemoteStorageCollectionName !== 'string') {
    			return false;
    		}

    		if (inputData.OLSKRemoteStorageCollectionName.trim() === '') {
    			return false;
    		}

    		if (typeof inputData.OLSKRemoteStorageCollectionExports !== 'object' || inputData.OLSKRemoteStorageCollectionExports === null) {
    			return false;
    		}

    		return true;
    	},

    	OLSKRemoteStorageDataModuleGenerator (kModuleName, options = {}) {
    		if (typeof kModuleName !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!kModuleName.trim()) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return function (inputData) {
    			if (!Array.isArray(inputData)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return {
    				name: kModuleName,
    				builder (privateClient, publicClient) {
    					const __DEBUG = {

    						__TestWriteFileText (param1, param2) {
    							if (!mod._OLSKRemoteStorageIsPath(param1)) {
    								throw new Error('OLSKErrorInputNotValid');
    							}

    							if (typeof param2 !== 'string') {
    								throw new Error('OLSKErrorInputNotValid');
    							}

    							return privateClient.storeFile('text/plain', param1, param2);
    						},
    						
    						async __TestReadFileText (inputData) {
    							if (!mod._OLSKRemoteStorageIsPath(inputData)) {
    								return Promise.reject(new Error('OLSKErrorInputNotValid'));
    							}

    							return (await privateClient.getFile(inputData, false)).data;
    						},
    						
    						__TestWriteObject (param1, param2) {
    							if (!mod._OLSKRemoteStorageIsPath(param1)) {
    								throw new Error('OLSKErrorInputNotValid');
    							}

    							if (typeof param2 !== 'object' || param2 === null) {
    								throw new Error('OLSKErrorInputNotValid');
    							}

    							return mod.OLSKRemoteStorageWriteObject(privateClient, param1, param2);
    						},
    						
    						async __TestReadObject (inputData) {
    							if (!mod._OLSKRemoteStorageIsPath(inputData)) {
    								return Promise.reject(new Error('OLSKErrorInputNotValid'));
    							}

    							return await privateClient.getObject(inputData, false);
    						},
    						
    						async __OLSKRemoteStorageReset () {
    							return await Promise.all((await mod.OLSKRemoteStorageListingRecursive(privateClient, '')).map(async function (path) {
    								return await privateClient.remove(path);
    							}));
    						},
    						
    						__OLSKRemoteStoragePrivateClient () {
    							return privateClient;
    						},
    						
    						__OLSKRemoteStoragePublicClient () {
    							return publicClient;
    						},
    						
    					};

    					const __HOTFIX = {

    						__OLSKRemoteStorageHotfixPlungeData () {
    							return mod.OLSKRemoteStorageObjectsRecursive(privateClient, '', 0);
    						},

    						__OLSKRemoteStorageHotfixFlushData () {
    							return privateClient.flush(`/${ kModuleName }/`)
    						},
    						
    					};

    					return {
    						exports: inputData.reduce(function (coll, item) {
    							const collection = item(privateClient, publicClient, item.OLSKChangeDelegate);

    							if (!mod.OLSKRemoteStorageIsCollection(collection)) {
    								throw new Error('OLSKErrorInputNotValid');
    							}

    							coll[collection.OLSKRemoteStorageCollectionName] = collection.OLSKRemoteStorageCollectionExports;

    							return coll;
    						}, Object.assign(options.OLSKOptionIncludeDebug ? { __DEBUG } : {}, { __HOTFIX })),
    					};
    				},
    			};
    		};
    	},

    	_OLSKRemoteStorageIsPath (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return !!inputData.trim();
    	},

    	async OLSKRemoteStorageListing (privateClient, inputData) {
    		return uFlatten(await Promise.all(uFlatten([inputData]).map(async function (path) {
    			if (typeof path !== 'string') {
    				return Promise.reject(new Error('OLSKErrorInputNotValid'));
    			}

    			try {
    				return await Object.keys(await privateClient.getListing(path, false)).map(function (e) {
    					return path + e;
    				});
    			} catch {}

    			return [];
    		})));
    	},

    	async OLSKRemoteStorageListingRecursive (privateClient, inputData) {
    		return uFlatten(await Promise.all((await mod.OLSKRemoteStorageListing(privateClient, inputData)).map(async function (e) {
    			return e.slice(-1) == '/' ? await mod.OLSKRemoteStorageListingRecursive(privateClient, e) : e;
    		})));
    	},

    	async OLSKRemoteStorageObjects (privateClient, inputData) {
    		if (typeof inputData !== 'string') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		return Object.entries(await privateClient.getAll(inputData, false)).reduce(function (coll, item) {
    			if (item[0].includes('/')) {
    				coll.folders.push(item[0]);
    			} else {
    				coll.objects.push(item[1]);
    			}

    			return coll;
    		}, {
    			objects: [],
    			folders: [],
    		});
    	},

    	async OLSKRemoteStorageObjectsRecursive (privateClient, inputData, cacheAge = false) {
    		if (typeof inputData !== 'string') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		return await Object.entries(await privateClient.getAll(inputData, cacheAge)).reduce(async function (coll, item) {
    			const _coll = await coll;

    			if (item[0].includes('/')) {
    				return Promise.resolve(Object.assign(_coll, await mod.OLSKRemoteStorageObjectsRecursive(privateClient, inputData + item[0])));
    			}

    			if (item[1] !== true) { // #remotestorage-cache-true
    				_coll[inputData + item[0]] = item[1];
    			}

    			return Promise.resolve(_coll);
    		}, Promise.resolve({}))
    	},

    	_TestWriteFileText (storageModule, param1, param2) {
    		return storageModule.__DEBUG.__TestWriteFileText(param1, param2);
    	},

    	_TestReadFileText (storageModule, inputData) {
    		return storageModule.__DEBUG.__TestReadFileText(inputData);
    	},

    	_TestWriteObject (storageModule, param1, param2) {
    		return storageModule.__DEBUG.__TestWriteObject(param1, param2);
    	},

    	_TestReadObject (storageModule, param1, param2) {
    		return storageModule.__DEBUG.__TestReadObject(param1, param2);
    	},

    	_TestReset (storageModule) {
    		return storageModule.__DEBUG.__OLSKRemoteStorageReset();
    	},

    	_OLSKRemoteStoragePrivateClient (storageModule) {
    		return storageModule.__DEBUG.__OLSKRemoteStoragePrivateClient();
    	},

    	_OLSKRemoteStoragePublicClient (storageModule) {
    		return storageModule.__DEBUG.__OLSKRemoteStoragePublicClient();
    	},

    	OLSKRemoteStorageSafeCopy (inputData) {
    		return Object.keys(inputData).reduce(function (coll, item) {
    			if (item[0] !== '$') {
    				coll[item] = inputData[item];
    			}

    			return coll
    		}, {});
    	},

    	OLSKRemoteStoragePreJSONSchemaValidate (inputData) {
    		for (const key in inputData) {
    			if (key.slice(-4) === 'Date') {
    				if (inputData[key] instanceof Date) {
    					inputData[key] = inputData[key].toISOString();
    				} else {
    					console.error('! OLSKRemoteStoragePreJSONSchemaValidateNotDate', key, inputData[key]);
    				}
    			} else if (Array.isArray(inputData[key])) {
    				inputData[key].map(mod.OLSKRemoteStoragePreJSONSchemaValidate);
    			}
    		}

    		return inputData;
    	},

    	OLSKRemoteStoragePostJSONParse (inputData) {
    		if (!inputData) {
    			return inputData;
    		}

    		if (Array.isArray(inputData)) {
    			return inputData.map(mod.OLSKRemoteStoragePostJSONParse);
    		}

    		for (const key in inputData) {
    			if (key.slice(-4) === 'Date') {
    				inputData[key] = new Date(inputData[key]);
    			} else if (Array.isArray(inputData[key])) {
    				inputData[key].map(mod.OLSKRemoteStoragePostJSONParse);
    			} else if (typeof inputData[key] === 'object') {
    				mod.OLSKRemoteStoragePostJSONParse(inputData[key]);
    			}
    		}

    		return inputData;
    	},

    	async OLSKRemoteStorageWriteObject (privateClient, param1, param2) {
    		if (!mod._OLSKRemoteStorageIsPath(param1)) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof param2 !== 'object' || param2 === null) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		await privateClient.storeFile('application/json', param1, JSON.stringify(mod.OLSKRemoteStorageSafeCopy(param2)));

    		return param2;
    	},

    	async OLSKRemoteStorageReadObject (privateClient, inputData) {
    		if (!mod._OLSKRemoteStorageIsPath(inputData)) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		return mod.OLSKRemoteStoragePostJSONParse(await privateClient.getObject(inputData, false));
    	},

    	OLSKRemoteStorageQueryFunction (param1, param2, param3, param4) {
    		if (typeof param1 !== 'function' || !param1.prototype) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'object' || param2 === null || !param2.name) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param4 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return function (inputData) {
    			if (typeof inputData !== 'function') {
    				throw new Error('OLSKErrorInputNotValid');
    			}
    			const storageClient = new (param1)({
    				cache: false,
    				modules: [param2],
    			});

    			storageClient.access.claim(param2.name, 'rw');

    			storageClient.stopSync();

    			return new Promise(function (res, rej) {
    				let didReject, outputData;

    				storageClient.on('error', function (err) {
    					if (didReject) {
    						return;
    					}

    					didReject = true;
    					return rej(err);
    				});

    				storageClient.on('connected', async function () {
    					try {
    						outputData = await inputData(storageClient);
    					} catch (e) {
    						didReject = true;
    						return rej(e);
    					}

    					res(outputData);
    					
    					return storageClient.disconnect();
    				});

    				storageClient.connect(param3, param4);
    			});
    		};
    	},

    	OLSKRemoteStorageLauncherFakeItemProxy () {
    		return {
    			LCHRecipeName: 'OLSKRemoteStorageLauncherFakeItemProxy',
    			LCHRecipeCallback () {},
    		};
    	},

    	OLSKRemoteStorageLauncherItemOpenLoginLink (param1, param2, OLSKLocalized) {
    		if (!param1.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!param2.remote) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKRemoteStorageLauncherItemOpenLoginLink',
    			LCHRecipeName: OLSKLocalized('OLSKRemoteStorageLauncherItemOpenLoginLinkText'),
    			LCHRecipeCallback () {
    				const item = param1.prompt(OLSKLocalized('OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText'));

    				if (!item) {
    					return;
    				}

    				param1.location.href = item;
    				param1.location.reload();
    			},
    			LCHRecipeIsExcluded () {
    				return !!param2.connected;
    			},
    		};
    	},

    	OLSKRemoteStorageLauncherFakeItemConnected (inputData) {
    		return {
    			LCHRecipeName: 'OLSKRemoteStorageLauncherFakeItemConnected',
    			LCHRecipeCallback () {
    				Object.assign(inputData, {
    					connected: true,
    					remote: Object.assign(inputData.remote, {
    						userAddress: 'alfa',
    						token: 'bravo',
    					}),
    				});
    			},
    		};
    	},

    	OLSKRemoteStorageLauncherItemCopyLoginLink (param1, param2, OLSKLocalized) {
    		if (!param1.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!param2.remote) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKRemoteStorageLauncherItemCopyLoginLink',
    			LCHRecipeName: OLSKLocalized('OLSKRemoteStorageLauncherItemCopyLoginLinkText'),
    			LCHRecipeCallback () {
    				return this.api.LCHCopyToClipboard(`${ param1.location.href }#remotestorage=${ param2.remote.userAddress }&access_token=${ param2.remote.token }`.replace(/#+/g, '#'));
    			},
    			LCHRecipeIsExcluded () {
    				return !param2.connected;
    			},
    		};
    	},

    	OLSKRemoteStorageLauncherItemDebugFlushData (param1, param2, OLSKLocalized) {
    		if (!param1.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!param2.remote) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKRemoteStorageLauncherItemDebugFlushData',
    			LCHRecipeName: OLSKLocalized('OLSKRemoteStorageLauncherItemDebugFlushDataText'),
    			async LCHRecipeCallback () {
    				if (!param1.confirm(OLSKLocalized('OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText'))) {
    					return;
    				}

    				await Promise.all(Object.getOwnPropertyNames(param2).filter(function (e) {
    					return param2[e].__HOTFIX;
    				}).map(function (e) {
    					return param2[e].__HOTFIX.__OLSKRemoteStorageHotfixFlushData();
    				}));

    				return new Promise(function (res, rej) {
    					setTimeout(function() {
    						res(param1.location.reload());
    					}, 1000);
    				});
    			},
    			LCHRecipeIsExcluded () {
    				return !param2.connected;
    			},
    		};
    	},

    	OLSKRemoteStorageRecipes (param1, param2, param3, param4) {
    		if (!param1.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (!param2.remote) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param4 !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [
    			mod.OLSKRemoteStorageLauncherFakeItemProxy(),
    			mod.OLSKRemoteStorageLauncherItemOpenLoginLink(param1, param2, param3),
    			mod.OLSKRemoteStorageLauncherFakeItemConnected(param2),
    			mod.OLSKRemoteStorageLauncherItemCopyLoginLink(param1, param2, param3),
    			mod.OLSKRemoteStorageLauncherItemDebugFlushData(param1, param2, param3),
    		].filter(function (e) {
    			if (param4) {
    				return true;
    			}

    			return !(e.LCHRecipeSignature || e.LCHRecipeName).match(/Fake/);
    		});
    	},

    };

    Object.assign(exports, mod);
    });

    var main_1$1 = createCommonjsModule(function (module, exports) {
    const main = {

    	OLSKServiceWorkerModule (param1, param2, param3, param4) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param1.addEventListener !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'object' || param2 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2.keys !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const mod = {

    			// VALUE

    			_ValueSelf: param1,
    			_ValueCaches: param2,
    			_ValueFetch: param3,
    			_ValuePersistenceCacheURLs: [],

    			// DATA

    			_DataVersionCacheName: 'OLSKServiceWorkerVersionCache-VERSION_ID_TOKEN',
    			_DataPersistenceCacheName: 'OLSKServiceWorkerPersistenceCache',
    			_DataOriginPage: 'ORIGIN_PAGE_PATH_TOKEN',

    			// CONTROL

    			async ControlClearCache () {
    				return Promise.all(
    					(await mod._ValueCaches.keys()).filter(function (e) {
    						return e !== mod._DataPersistenceCacheName;
    					}).map(function (e) {
    						return mod._ValueCaches.delete(e);
    					})
    				);
    			},

    			ControlAddPersistenceCacheURL (inputData) {
    				if (typeof inputData !== 'string') {
    					throw new Error('OLSKErrorInputNotValid');
    				}

    				if (mod._ValuePersistenceCacheURLs.includes(inputData)) {
    					return;
    				}

    				mod._ValuePersistenceCacheURLs.push(inputData);
    			},

    			// MESSAGE

    			OLSKServiceWorkerDidActivate (event) {
    				event.waitUntil(mod.ControlClearCache());
    			},

    			async OLSKServiceWorkerDidFetch (event) {
    				if (event.request.method !== 'GET') {
    					return;
    				}

    				if (event.request.url.match('sw.js')) {
    					return;
    				}

    				if (event.request.mode === 'cors' && !mod._ValuePersistenceCacheURLs.includes(event.request.url)) {
    					return;
    				}

    				if (event.request.mode === 'navigate' && !event.request.url.includes(mod._DataOriginPage)) {
    					return;
    				}

    				if (event.request.mode !== 'navigate' && !event.request.referrer.includes(mod._DataOriginPage)) {
    					return;
    				}

    				// if (!(event.request.referrer.match(/ORIGIN_PAGE_PATH_TOKEN/) && event.request.mode === 'no-cors') && !event.request.url.match(/ORIGIN_PAGE_PATH_TOKEN/)) {
    				// 	return console.log('ignoring referrer', event.request);
    				// };

    				return event.respondWith(async function() {
    					const cacheResponse = await mod._ValueCaches.match(event.request);

    					if (cacheResponse) {
    						return cacheResponse;
    					}

    					const networkResponse = param4 ? await fetch(event.request) : await mod._ValueFetch(event.request);

    					if (networkResponse.status === 200) {
    						(await mod._ValueCaches.open(mod._ValuePersistenceCacheURLs.includes(event.request.url) ? mod._DataPersistenceCacheName : mod._DataVersionCacheName)).put(event.request, networkResponse.clone());
    					}

    					return networkResponse;
    				}());
    			},

    			async OLSKServiceWorkerDidReceiveMessage (event) {
    				const OLSKMessageSignature = event.data.OLSKMessageSignature || event.data;

    				if (typeof OLSKMessageSignature !== 'string') {
    					return;
    				}

    				if (!OLSKMessageSignature.startsWith('OLSKServiceWorker_')) {
    					return;
    				}

    				return event.source.postMessage({
    					OLSKMessageSignature,
    					OLSKMessageArguments: event.data.OLSKMessageArguments,
    					OLSKMessageResponse: await mod[OLSKMessageSignature](...[].concat(event.data.OLSKMessageArguments || [])),
    				});
    			},

    			OLSKServiceWorker_ClearVersionCache () {
    				return mod.ControlClearCache();
    			},

    			OLSKServiceWorker_SkipWaiting () {
    				return mod._ValueSelf.skipWaiting();
    			},

    			OLSKServiceWorker_AddPersistenceCacheURL (inputData) {
    				return mod.ControlAddPersistenceCacheURL(inputData);
    			},
    		
    		};
    		
    		return mod;
    	},

    	OLSKServiceWorkerInitialization (param1, param2) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param1.addEventListener !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'object' || param2 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2.OLSKServiceWorkerDidReceiveMessage !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		param1.addEventListener('activate', param2.OLSKServiceWorkerDidActivate);
    		param1.addEventListener('fetch', param2.OLSKServiceWorkerDidFetch);
    		param1.addEventListener('message', param2.OLSKServiceWorkerDidReceiveMessage);
    	},

    	OLSKServiceWorkerViewTemplate () {
    		return `(function() {
			const mod = (function ${ main.OLSKServiceWorkerModule.toString() })(self, caches, fetch, true);

			(function ${ main.OLSKServiceWorkerInitialization.toString() })(self, mod);
		})();`;
    	},

    	OLSKServiceWorkerView (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof inputData.VERSION_ID_TOKEN !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!inputData.VERSION_ID_TOKEN) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (inputData.VERSION_ID_TOKEN.match(/\s/)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof inputData.ORIGIN_PAGE_PATH_TOKEN !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!inputData.ORIGIN_PAGE_PATH_TOKEN) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return main.OLSKServiceWorkerViewTemplate()
    			.split('VERSION_ID_TOKEN').join(inputData.VERSION_ID_TOKEN)
    			.split('ORIGIN_PAGE_PATH_TOKEN').join(inputData.ORIGIN_PAGE_PATH_TOKEN);
    	},

    	OLSKServiceWorkerLauncherFakeItemProxy () {
    		return {
    			LCHRecipeName: 'OLSKServiceWorkerLauncherFakeItemProxy',
    			LCHRecipeCallback () {},
    		};
    	},

    	OLSKServiceWorkerLauncherItemDebugForceUpdate (param1, param2, OLSKLocalized) {
    		if (!param1.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!param2.serviceWorker) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKServiceWorkerLauncherItemDebugForceUpdate',
    			LCHRecipeName: OLSKLocalized('OLSKServiceWorkerLauncherItemDebugForceUpdateText'),
    			async LCHRecipeCallback () {
    				const item = await param2.serviceWorker.getRegistration();

    				if (item.waiting) {
    					return item.waiting.postMessage('OLSKServiceWorker_SkipWaiting');
    				}

    				param2.serviceWorker.controller.postMessage('OLSKServiceWorker_ClearVersionCache');

    				param1.location.reload();
    			},
    		};
    	},

    	OLSKServiceWorkerRecipes (param1, param2, param3, param4) {
    		if (!param1.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (!param2.serviceWorker) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param4 !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [
    			main.OLSKServiceWorkerLauncherFakeItemProxy(),
    			main.OLSKServiceWorkerLauncherItemDebugForceUpdate(param1, param2, param3),
    		].filter(function (e) {
    			if (param4) {
    				return true;
    			}

    			return !(e.LCHRecipeSignature || e.LCHRecipeName).match(/Fake/);
    		});
    	},
    	
    };

    Object.assign(exports, main);
    });

    function createError(message) {
        var err = new Error(message);
        err.source = "ulid";
        return err;
    }
    // These values should NEVER change. If
    // they do, we're no longer making ulids!
    var ENCODING = "0123456789ABCDEFGHJKMNPQRSTVWXYZ"; // Crockford's Base32
    var ENCODING_LEN = ENCODING.length;
    var TIME_MAX = Math.pow(2, 48) - 1;
    var TIME_LEN = 10;
    var RANDOM_LEN = 16;
    function randomChar(prng) {
        var rand = Math.floor(prng() * ENCODING_LEN);
        if (rand === ENCODING_LEN) {
            rand = ENCODING_LEN - 1;
        }
        return ENCODING.charAt(rand);
    }
    function encodeTime(now, len) {
        if (isNaN(now)) {
            throw new Error(now + " must be a number");
        }
        if (now > TIME_MAX) {
            throw createError("cannot encode time greater than " + TIME_MAX);
        }
        if (now < 0) {
            throw createError("time must be positive");
        }
        if (Number.isInteger(now) === false) {
            throw createError("time must be an integer");
        }
        var mod = void 0;
        var str = "";
        for (; len > 0; len--) {
            mod = now % ENCODING_LEN;
            str = ENCODING.charAt(mod) + str;
            now = (now - mod) / ENCODING_LEN;
        }
        return str;
    }
    function encodeRandom(len, prng) {
        var str = "";
        for (; len > 0; len--) {
            str = randomChar(prng) + str;
        }
        return str;
    }
    function detectPrng() {
        var allowInsecure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var root = arguments[1];

        if (!root) {
            root = typeof window !== "undefined" ? window : null;
        }
        var browserCrypto = root && (root.crypto || root.msCrypto);
        if (browserCrypto) {
            return function () {
                var buffer = new Uint8Array(1);
                browserCrypto.getRandomValues(buffer);
                return buffer[0] / 0xff;
            };
        } else {
            try {
                var nodeCrypto = require("crypto");
                return function () {
                    return nodeCrypto.randomBytes(1).readUInt8() / 0xff;
                };
            } catch (e) {}
        }
        if (allowInsecure) {
            return function () {
                return Math.random();
            };
        }
        throw createError("secure crypto unusable, insecure Math.random not allowed");
    }
    function factory(currPrng) {
        if (!currPrng) {
            currPrng = detectPrng();
        }
        return function ulid(seedTime) {
            if (isNaN(seedTime)) {
                seedTime = Date.now();
            }
            return encodeTime(seedTime, TIME_LEN) + encodeRandom(RANDOM_LEN, currPrng);
        };
    }

    const mod = {

    	KOMDeckModelErrorsFor(inputData, options = {}) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const errors = {};

    		if (typeof inputData.KOMDeckID !== 'string') {
    			errors.KOMDeckID = [
    				'KOMErrorNotString',
    			];
    		} else if (inputData.KOMDeckID.trim() === '') {
    			errors.KOMDeckID = [
    				'KOMErrorNotFilled',
    			];
    		}

    		if (typeof inputData.KOMDeckName !== 'string') {
    			errors.KOMDeckName = [
    				'KOMErrorNotString',
    			];
    		}

    		if (!(inputData.KOMDeckCreationDate instanceof Date) || Number.isNaN(inputData.KOMDeckCreationDate.getTime())) {
    			errors.KOMDeckCreationDate = [
    				'KOMErrorNotDate',
    			];
    		}

    		if (!(inputData.KOMDeckModificationDate instanceof Date) || Number.isNaN(inputData.KOMDeckModificationDate.getTime())) {
    			errors.KOMDeckModificationDate = [
    				'KOMErrorNotDate',
    			];
    		}

    		if (inputData.KOMDeckAudioIsEnabled !== undefined) {
    			if (typeof inputData.KOMDeckAudioIsEnabled !== 'boolean') {
    				errors.KOMDeckAudioIsEnabled = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		if (inputData.KOMDeckFrontSpeechIsEnabled !== undefined) {
    			if (typeof inputData.KOMDeckFrontSpeechIsEnabled !== 'boolean') {
    				errors.KOMDeckFrontSpeechIsEnabled = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		if (inputData.KOMDeckRearSpeechIsEnabled !== undefined) {
    			if (typeof inputData.KOMDeckRearSpeechIsEnabled !== 'boolean') {
    				errors.KOMDeckRearSpeechIsEnabled = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		if (inputData.KOMDeckFrontLanguageCode !== undefined) {
    			if (typeof inputData.KOMDeckFrontLanguageCode !== 'string') {
    				errors.KOMDeckFrontLanguageCode = [
    					'KOMErrorNotString',
    				];
    			}
    		}

    		if (inputData.KOMDeckRearLanguageCode !== undefined) {
    			if (typeof inputData.KOMDeckRearLanguageCode !== 'string') {
    				errors.KOMDeckRearLanguageCode = [
    					'KOMErrorNotString',
    				];
    			}
    		}

    		if (inputData.KOMDeckRetireCardsMonths !== undefined) {
    			const error = (function() {
    				if (typeof inputData.KOMDeckRetireCardsMonths !== 'number') {
    					return [
    						'KOMErrorNotNumber',
    					];
    				}

    				if (parseInt(inputData.KOMDeckRetireCardsMonths) !== inputData.KOMDeckRetireCardsMonths) {
    					return [
    						'KOMErrorNotInteger',
    					];
    				}

    				if (inputData.KOMDeckRetireCardsMonths < 0) {
    					return [
    						'KOMErrorNotValid',
    					];
    				}
    			})();

    			if (error) {
    				errors.KOMDeckRetireCardsMonths = error;
    			}		}

    		if (inputData.KOMDeckIsForwardOnly !== undefined) {
    			if (typeof inputData.KOMDeckIsForwardOnly !== 'boolean') {
    				errors.KOMDeckIsForwardOnly = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		return Object.entries(errors).length ? errors : null;
    	},

    };

    const mod$1 = {

    	KOMDeckStorageCollectionName() {
    		return 'kom_decks';
    	},

    	KOMDeckStorageCollectionPath() {
    		return mod$1.KOMDeckStorageCollectionName() + '/';
    	},

    	KOMDeckStorageFolderPath(inputData) {
    		if (!inputData) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return mod$1.KOMDeckStorageCollectionPath() + inputData + '/';
    	},

    	KOMDeckStorageObjectPath(inputData) {
    		if (!inputData) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return mod$1.KOMDeckStorageFolderPath(inputData) + 'main';
    	},

    	KOMDeckStorageMatch(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData === mod$1.KOMDeckStorageObjectPath(inputData.split('/')[1]);
    	},

    	KOMDeckStorageBuild(privateClient, publicClient, changeDelegate) {
    		privateClient.on('change', function (event) {
    			if (!changeDelegate) {
    				return;
    			}

    			if (!mod$1.KOMDeckStorageMatch(event.relativePath)) {
    				return;
    			}

    			const delegateMethod = main$3.OLSKRemoteStorageChangeDelegateProperty(event);

    			if (!delegateMethod) {
    				return;
    			}

    			if (typeof changeDelegate[delegateMethod] !== 'function') {
    				return console.warn(`${ delegateMethod } not function`);
    			}

    			changeDelegate[delegateMethod](main$3.OLSKRemoteStoragePostJSONParse(event[main$3.OLSKRemoteStorageChangeDelegateInput(delegateMethod)]));
    		});

    		const OLSKRemoteStorageCollectionExports = {

    			async _KOMDeckStorageWrite(inputData) {
    				if (typeof inputData !== 'object' || inputData === null) {
    					return Promise.reject(new Error('KOMErrorInputNotValid'));
    				}

    				let errors = mod.KOMDeckModelErrorsFor(inputData);
    				if (errors) {
    					return Promise.resolve({
    						KOMErrors: errors,
    					});
    				}

    				try {
    					return main$3.OLSKRemoteStorageWriteObject(privateClient, mod$1.KOMDeckStorageObjectPath(inputData.KOMDeckID), inputData);
    				} catch (e) {
    					return Promise.reject(e);
    				}
    			},

    			async _KOMDeckStorageList() {
    				return (await Promise.all(Object.keys(await privateClient.getAll(mod$1.KOMDeckStorageCollectionPath(), false)).map(function (e) {
    					return privateClient.getObject(mod$1.KOMDeckStorageObjectPath(e.slice(0, -1)), false);
    				}))).reduce(function (coll, item) {
    					if (item) {
    						coll[item.KOMDeckID] = main$3.OLSKRemoteStoragePostJSONParse(item);
    					}

    					return coll;
    				}, {});
    			},

    			_KOMDeckStorageDelete(inputData) {
    				if (mod.KOMDeckModelErrorsFor(inputData)) {
    					throw new Error('KOMErrorInputNotValid');
    				}

    				return privateClient.remove(mod$1.KOMDeckStorageObjectPath(inputData.KOMDeckID));
    			},

    			_KOMDeckStorageObjectsRecursive(inputData) {
    				return main$3.OLSKRemoteStorageObjectsRecursive(privateClient, mod$1.KOMDeckStorageFolderPath(inputData.KOMDeckID));
    			},

    		};

    		return {
    			OLSKRemoteStorageCollectionName: mod$1.KOMDeckStorageCollectionName(),
    			OLSKRemoteStorageCollectionExports,
    		};
    	},

    	KOMDeckStorageWrite(storageClient, inputData) {
    		return storageClient.kommit[mod$1.KOMDeckStorageCollectionName()]._KOMDeckStorageWrite(inputData);
    	},

    	KOMDeckStorageList(storageClient) {
    		return storageClient.kommit[mod$1.KOMDeckStorageCollectionName()]._KOMDeckStorageList();
    	},

    	KOMDeckStorageDelete(storageClient, inputData) {
    		return storageClient.kommit[mod$1.KOMDeckStorageCollectionName()]._KOMDeckStorageDelete(inputData);
    	},

    	KOMDeckStorageObjectsRecursive(storageClient, inputData) {
    		return storageClient.kommit[mod$1.KOMDeckStorageCollectionName()]._KOMDeckStorageObjectsRecursive(inputData);
    	},

    };

    const mod$2 = {

    	KOMCardModelErrorsFor(inputData, options = {}) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const errors = {};

    		if (typeof inputData.KOMCardID !== 'string') {
    			errors.KOMCardID = [
    				'KOMErrorNotString',
    			];
    		} else if (inputData.KOMCardID.trim() === '') {
    			errors.KOMCardID = [
    				'KOMErrorNotFilled',
    			];
    		}

    		if (typeof inputData.KOMCardDeckID !== 'string') {
    			errors.KOMCardDeckID = [
    				'KOMErrorNotString',
    			];
    		} else if (inputData.KOMCardDeckID.trim() === '') {
    			errors.KOMCardDeckID = [
    				'KOMErrorNotFilled',
    			];
    		}

    		if (typeof inputData.KOMCardFrontText !== 'string') {
    			errors.KOMCardFrontText = [
    				'KOMErrorNotString',
    			];
    		}

    		if (typeof inputData.KOMCardRearText !== 'string') {
    			errors.KOMCardRearText = [
    				'KOMErrorNotString',
    			];
    		}

    		if (!(inputData.KOMCardCreationDate instanceof Date) || Number.isNaN(inputData.KOMCardCreationDate.getTime())) {
    			errors.KOMCardCreationDate = [
    				'KOMErrorNotDate',
    			];
    		}

    		if (!(inputData.KOMCardModificationDate instanceof Date) || Number.isNaN(inputData.KOMCardModificationDate.getTime())) {
    			errors.KOMCardModificationDate = [
    				'KOMErrorNotDate',
    			];
    		}

    		if (inputData.KOMCardNotes !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (typeof inputData.KOMCardNotes !== 'string') {
    				errors.KOMCardNotes = [
    					'KOMErrorNotString',
    				];
    			}
    		}

    		if (inputData.KOMCardFrontAudio !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (typeof inputData.KOMCardFrontAudio !== 'boolean') {
    				errors.KOMCardFrontAudio = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		if (inputData.KOMCardRearAudio !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (typeof inputData.KOMCardRearAudio !== 'boolean') {
    				errors.KOMCardRearAudio = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		if (inputData.KOMCardTags !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (!Array.isArray(inputData.KOMCardTags)) {
    				errors.KOMCardTags = [
    					'KOMErrorNotArray',
    				];
    			}
    		}

    		if (inputData.KOMCardIsRetired !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (typeof inputData.KOMCardIsRetired !== 'boolean') {
    				errors.KOMCardIsRetired = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		return Object.entries(errors).length ? errors : null;
    	},

    	KOMCardModelAudioFields() {
    		return [
    			'KOMCardFrontAudio',
    			'KOMCardRearAudio',
    		];
    	},

    };

    const mod$3 = {

    	uFakeDeck(inputData) {
    		return {
    			KOMDeckID: inputData.split('/')[1],
    			KOMDeckName: '',
    			KOMDeckCreationDate: new Date(),
    			KOMDeckModificationDate: new Date(),
    		};
    	},

    	uFakeCard(inputData) {
    		return {
    			KOMCardID: inputData.split('/')[4],
    			KOMCardDeckID: inputData.split('/')[1],
    			KOMCardFrontText: '',
    			KOMCardRearText: '',
    			KOMCardCreationDate: new Date(inputData.split('/')[3]),
    			KOMCardModificationDate: new Date(),
    		};
    	},

    	KOMCardStorageCollectionName() {
    		return 'kom_cards';
    	},

    	KOMCardStorageCollectionPath(inputData) {
    		return mod$1.KOMDeckStorageFolderPath(inputData) + mod$3.KOMCardStorageCollectionName() + '/';
    	},

    	KOMCardStorageFolderPath(inputData) {
    		if (mod$2.KOMCardModelErrorsFor(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return mod$3.KOMCardStorageCollectionPath(inputData.KOMCardDeckID) + inputData.KOMCardCreationDate.toJSON().split('T').shift() + '/' + inputData.KOMCardID + '/';
    	},

    	KOMCardStorageObjectPath(inputData) {
    		return mod$3.KOMCardStorageFolderPath(inputData) + 'main';
    	},

    	KOMCardStorageAudioPathFront(inputData) {
    		return mod$3.KOMCardStorageFolderPath(inputData) + 'side-front/audio';
    	},

    	KOMCardStorageAudioPathRear(inputData) {
    		return mod$3.KOMCardStorageFolderPath(inputData) + 'side-rear/audio';
    	},

    	KOMCardStorageMatch(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}
    		
    		if (inputData.split('/').length < 4) {
    			return false;
    		}

    		return inputData === mod$3.KOMCardStorageObjectPath(mod$3.uFakeCard(inputData), mod$3.uFakeDeck(inputData));
    	},

    	KOMCardStorageBuild(privateClient, publicClient, changeDelegate) {
    		privateClient.on('change', function (event) {
    			if (!changeDelegate) {
    				return;
    			}

    			if (!mod$3.KOMCardStorageMatch(event.relativePath)) {
    				return;
    			}

    			const delegateMethod = main$3.OLSKRemoteStorageChangeDelegateProperty(event);

    			if (!delegateMethod) {
    				return;
    			}

    			if (typeof changeDelegate[delegateMethod] !== 'function') {
    				return console.warn(`${ delegateMethod } not function`);
    			}

    			changeDelegate[delegateMethod](main$3.OLSKRemoteStoragePostJSONParse(main$3.OLSKRemoteStorageChangeDelegateData(delegateMethod, event)));
    		});

    		const OLSKRemoteStorageCollectionExports = {

    			async _KOMCardStorageWrite(inputData) {
    				if (typeof inputData !== 'object' || inputData === null) {
    					return Promise.reject(new Error('KOMErrorInputNotValid'));
    				}

    				let errors = mod$2.KOMCardModelErrorsFor(inputData);
    				if (errors) {
    					return Promise.resolve({
    						KOMErrors: errors,
    					});
    				}

    				try {
    					return main$3.OLSKRemoteStorageWriteObject(privateClient, mod$3.KOMCardStorageObjectPath(inputData), inputData);
    				} catch (e) {
    					return Promise.reject(e);
    				}
    			},

    			async _KOMCardStorageList(inputData) {
    				return Object.entries(await main$3.OLSKRemoteStorageObjectsRecursive(privateClient, mod$3.KOMCardStorageCollectionPath(inputData.KOMDeckID))).reduce(function (coll, item) {
    					if (mod$3.KOMCardStorageMatch(item[0])) {
    						coll[item[1].KOMCardID] = main$3.OLSKRemoteStoragePostJSONParse(item[1]);
    					}

    					return coll;
    				}, {});
    				return (await Promise.all((await main$3.OLSKRemoteStorageListingRecursive(privateClient, mod$3.KOMCardStorageCollectionPath(inputData.KOMDeckID))).filter(mod$3.KOMCardStorageMatch).map(function (e) {
    					return privateClient.getObject(e, false);
    				}))).reduce(function (coll, item) {
    					if (item) {
    						coll[item.KOMCardID] = main$3.OLSKRemoteStoragePostJSONParse(item);
    					}

    					return coll;
    				}, {});
    			},

    			async _KOMCardStorageDelete(inputData) {
    				if (mod$2.KOMCardModelErrorsFor(inputData)) {
    					return Promise.reject(new Error('KOMErrorInputNotValid'));
    				}

    				return (await Promise.all((await main$3.OLSKRemoteStorageListingRecursive(privateClient, mod$3.KOMCardStorageFolderPath(inputData))).map(function (path) {
    					return privateClient.remove(path);
    				}))).pop();
    			},

    			async _KOMCardStorageFileWrite(param1, param2) {
    				if (!(param1 instanceof Blob)) {
    					return Promise.reject(new Error('KOMErrorInputNotValid'));
    				}

    				if (typeof param2 !== 'string') {
    					return Promise.reject(new Error('KOMErrorInputNotValid'));
    				}

    				await privateClient.storeFile(param1.type, param2, typeof global !== 'undefined' && global.KOMTestingStorageClient ? param1 : await new Promise(function (res, rej) {
    					const reader = new FileReader();

    					reader.onload = function () {
    						res(reader.result);
    					};

    					reader.readAsArrayBuffer(param1);
    				}));

    				return param1;
    			},

    			async _KOMCardStorageFileRead(inputData) {
    				if (typeof inputData !== 'string') {
    					return Promise.reject(new Error('KOMErrorInputNotValid'));
    				}

    				const file = await privateClient.getFile(inputData);

    				if (!file.data) {
    					return null;
    				}

    				return new Blob([file.data], {
    					type: file.contentType
    				});
    			},

    			_KOMCardStorageFileDelete(inputData) {
    				if (typeof inputData !== 'string') {
    					return Promise.reject(new Error('KOMErrorInputNotValid'));
    				}

    				return privateClient.remove(inputData);
    			},

    		};

    		return {
    			OLSKRemoteStorageCollectionName: mod$3.KOMCardStorageCollectionName(),
    			OLSKRemoteStorageCollectionExports,
    		};
    	},

    	KOMCardStorageWrite(storageClient, inputData) {
    		return storageClient.kommit[mod$3.KOMCardStorageCollectionName()]._KOMCardStorageWrite(inputData);
    	},

    	KOMCardStorageList(storageClient, inputData) {
    		return storageClient.kommit[mod$3.KOMCardStorageCollectionName()]._KOMCardStorageList(inputData);
    	},

    	KOMCardStorageDelete(storageClient, inputData) {
    		return storageClient.kommit[mod$3.KOMCardStorageCollectionName()]._KOMCardStorageDelete(inputData);
    	},

    	KOMCardStorageFileWrite(storageClient, param1, param2) {
    		return storageClient.kommit[mod$3.KOMCardStorageCollectionName()]._KOMCardStorageFileWrite(param1, param2);
    	},

    	KOMCardStorageFileRead(storageClient, inputData) {
    		return storageClient.kommit[mod$3.KOMCardStorageCollectionName()]._KOMCardStorageFileRead(inputData);
    	},

    	KOMCardStorageFileDelete(storageClient, inputData) {
    		return storageClient.kommit[mod$3.KOMCardStorageCollectionName()]._KOMCardStorageFileDelete(inputData);
    	},

    };

    const uniqueID = typeof require === 'undefined' && navigator.appName === 'Zombie' ? factory(detectPrng(true)) : factory();

    const mod$4 = {

    	async KOMCardActionCreate(storageClient, param1, param2) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		if (mod.KOMDeckModelErrorsFor(param2)) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		const creationDate = new Date();

    		return await mod$3.KOMCardStorageWrite(storageClient, Object.assign({
    			KOMCardID: uniqueID(),
    			KOMCardDeckID: param2.KOMDeckID,
    			KOMCardCreationDate: creationDate,
    			KOMCardModificationDate: creationDate,
    		}, param1), param2);
    	},

    	async KOMCardActionUpdate(storageClient, inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		return await mod$3.KOMCardStorageWrite(storageClient, Object.assign(inputData, {
    			KOMCardModificationDate: new Date(),
    		}));
    	},

    	async KOMCardActionDelete(storageClient, inputData) {
    		return await mod$3.KOMCardStorageDelete(storageClient, inputData);
    	},

    	async KOMCardActionList(storageClient, inputData) {
    		return Object.values(await mod$3.KOMCardStorageList(storageClient, inputData));
    	},

    	async KOMCardActionAudioCapture(storageClient, param1, param2, param3, param4) {
    		if (!mod$2.KOMCardModelAudioFields().includes(param1)) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		if (!param2 || !(param2 instanceof Blob)) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		if (mod$2.KOMCardModelErrorsFor(param3)) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		if (mod.KOMDeckModelErrorsFor(param4)) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		await mod$3.KOMCardStorageFileWrite(storageClient, param2, param1 === 'KOMCardFrontAudio' ? mod$3.KOMCardStorageAudioPathFront(param3, param4) : mod$3.KOMCardStorageAudioPathRear(param3, param4));

    		param3[param1] = true;

    		return param3;
    	},

    	async KOMCardActionAudioClear(storageClient, param1, param2, param3) {
    		if (!mod$2.KOMCardModelAudioFields().includes(param1)) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		if (mod$2.KOMCardModelErrorsFor(param2)) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		if (mod.KOMDeckModelErrorsFor(param3)) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		await mod$3.KOMCardStorageFileDelete(storageClient, param1 === 'KOMCardFrontAudio' ? mod$3.KOMCardStorageAudioPathFront(param2, param3) : mod$3.KOMCardStorageAudioPathRear(param2, param3));

    		delete param2[param1];

    		return param2;
    	},

    	async KOMCardActionAudioFetch(storageClient, param1, param2, param3) {
    		if (!mod$2.KOMCardModelAudioFields().includes(param1)) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		if (mod$2.KOMCardModelErrorsFor(param2)) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		if (mod.KOMDeckModelErrorsFor(param3)) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		return await mod$3.KOMCardStorageFileRead(storageClient, param1 === 'KOMCardFrontAudio' ? mod$3.KOMCardStorageAudioPathFront(param2, param3) : mod$3.KOMCardStorageAudioPathRear(param2, param3));
    	},

    	async KOMCardActionAudioList(storageClient, param1, param2) {
    		if (mod$2.KOMCardModelErrorsFor(param1)) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		if (mod.KOMDeckModelErrorsFor(param2)) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		return mod$2.KOMCardModelAudioFields().reduce(function (coll, item) {
    			if (!coll[item]) {
    				delete coll[item];
    			}

    			return coll;
    		}, {
    			KOMCardFrontAudio: await mod$3.KOMCardStorageFileRead(storageClient, mod$3.KOMCardStorageAudioPathFront(param1, param2)),
    			KOMCardRearAudio: await mod$3.KOMCardStorageFileRead(storageClient, mod$3.KOMCardStorageAudioPathRear(param1, param2)),
    		});
    	},

    };

    const mod$5 = {

    	KOMSharedGroupingDay(inputData) {
    		if (!(inputData instanceof Date) || Number.isNaN(inputData.getTime())) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return (new Date(inputData.valueOf() - (inputData.getTimezoneOffset() / 60 + 4) * 1000 * 60 * 60)).toJSON().slice(0, 10);
    	},

    	KOMSharedColorScheme() {
    		return [
    			'#252525',
    			'#636363',
    			'#969696',
    			'#cccccc',
    			'#f7f7f7',
    		];
    	},

    	KOMSharedColorUnseen () {
    		return mod$5.KOMSharedColorScheme()[0];
    	},

    	KOMSharedColorRelearning () {
    		return mod$5.KOMSharedColorScheme()[1];
    	},

    	KOMSharedColorDeveloping () {
    		return mod$5.KOMSharedColorScheme()[2];
    	},

    	KOMSharedColorMature () {
    		return mod$5.KOMSharedColorScheme()[3];
    	},

    	KOMSharedColorRetired () {
    		return mod$5.KOMSharedColorScheme()[4];
    	},

    };

    const mod$6 = {

    	KOMSpacingModelIdentifier(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!inputData.includes('-')) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.split('-').shift();
    	},

    	KOMSpacingModelLabel(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!inputData.includes('-')) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.split('-').pop();
    	},

    	KOMSpacingModelLabelForward() {
    		return 'forward';
    	},

    	KOMSpacingModelLabelBackward() {
    		return 'backward';
    	},

    	KOMSpacingModelErrorsFor(inputData, options = {}) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const errors = {};

    		if (typeof inputData.KOMSpacingID !== 'string') {
    			errors.KOMSpacingID = [
    				'KOMErrorNotString',
    			];
    		} else if (!inputData.KOMSpacingID.includes('-')) {
    			errors.KOMSpacingID = [
    				'KOMErrorNotSeparated',
    			];
    		} else if (!mod$6.KOMSpacingModelIdentifier(inputData.KOMSpacingID)) {
    			errors.KOMSpacingID = [
    				'KOMErrorNotFilled',
    			];
    		} else if (![mod$6.KOMSpacingModelLabelForward(), mod$6.KOMSpacingModelLabelBackward()].includes(mod$6.KOMSpacingModelLabel(inputData.KOMSpacingID))) {
    			errors.KOMSpacingID = [
    				'KOMErrorNotLabelled',
    			];
    		}

    		if (!Array.isArray(inputData.KOMSpacingChronicles)) {
    			errors.KOMSpacingChronicles = [
    				'KOMErrorNotArray',
    			];
    		}

    		if (inputData.KOMSpacingDrawDate !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (!(inputData.KOMSpacingDrawDate instanceof Date) || Number.isNaN(inputData.KOMSpacingDrawDate.getTime())) {
    				errors.KOMSpacingDrawDate = [
    					'KOMErrorNotDate',
    				];
    			}
    		}

    		if (inputData.KOMSpacingFlipDate !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (!(inputData.KOMSpacingFlipDate instanceof Date) || Number.isNaN(inputData.KOMSpacingFlipDate.getTime())) {
    				errors.KOMSpacingFlipDate = [
    					'KOMErrorNotDate',
    				];
    			}
    		}

    		if (inputData.KOMSpacingDueDate !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (!(inputData.KOMSpacingDueDate instanceof Date) || Number.isNaN(inputData.KOMSpacingDueDate.getTime())) {
    				errors.KOMSpacingDueDate = [
    					'KOMErrorNotDate',
    				];
    			}
    		}

    		if (inputData.KOMSpacingIsLearning !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (typeof inputData.KOMSpacingIsLearning !== 'boolean') {
    				errors.KOMSpacingIsLearning = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		if (inputData.KOMSpacingInterval !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (typeof inputData.KOMSpacingInterval !== 'number') {
    				errors.KOMSpacingInterval = [
    					'KOMErrorNotNumber',
    				];
    			}
    		}

    		if (inputData.KOMSpacingMultiplier !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (typeof inputData.KOMSpacingMultiplier !== 'number') {
    				errors.KOMSpacingMultiplier = [
    					'KOMErrorNotNumber',
    				];
    			}
    		}

    		if (inputData.$KOMSpacingCard !== undefined) {
    			if (mod$2.KOMCardModelErrorsFor(inputData.$KOMSpacingCard)) {
    				errors.$KOMSpacingCard = [
    					'KOMErrorNotValid',
    				];
    			}
    		}

    		return Object.entries(errors).length ? errors : null;
    	},

    	KOMSpacingModelIsBackward(inputData) {
    		if (mod$6.KOMSpacingModelErrorsFor(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return mod$6.KOMSpacingModelLabel(inputData.KOMSpacingID) === mod$6.KOMSpacingModelLabelBackward();
    	},

    	KOMSpacingModelIsUnseen(inputData) {
    		if (mod$6.KOMSpacingModelErrorsFor(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return !inputData.KOMSpacingDueDate;
    	},

    	KOMSpacingModelIsLearning(inputData) {
    		if (mod$6.KOMSpacingModelErrorsFor(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return !!inputData.KOMSpacingIsLearning;
    	},

    	KOMSpacingModelIsReviewing(inputData) {
    		if (mod$6.KOMSpacingModelErrorsFor(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (inputData.KOMSpacingIsLearning) {
    			return false;
    		}

    		return !!inputData.KOMSpacingInterval;
    	},

    	KOMSpacingModelMatureThreshold() {
    		return 21;
    	},

    	KOMSpacingModelIsDeveloping(inputData) {
    		if (mod$6.KOMSpacingModelErrorsFor(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!inputData.KOMSpacingInterval) {
    			return false;
    		}

    		return inputData.KOMSpacingInterval < mod$6.KOMSpacingModelMatureThreshold();
    	},

    	KOMSpacingModelIsMature(inputData) {
    		if (mod$6.KOMSpacingModelErrorsFor(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!inputData.KOMSpacingInterval) {
    			return false;
    		}

    		return inputData.KOMSpacingInterval >= mod$6.KOMSpacingModelMatureThreshold();
    	},

    	KOMSpacingModelFilterUnique(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		let cards = [];
    		return inputData.filter(function (e, i, coll) {
    			const id = mod$6.KOMSpacingModelIdentifier(e.KOMSpacingID);

    			if (cards.includes(id)) {
    				return false;
    			}

    			cards.push(id);

    			return true;
    		});
    	},

    	KOMSpacingModelGroupByStatus(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.reduce(function (coll, item) {
    			coll.KOMSpacingGroupingTotal.push(item);

    			if ((item.$KOMSpacingCard || {}).KOMCardIsRetired) {
    				coll.KOMSpacingGroupingRetired.push(item);
    				
    				return coll;
    			}

    			if (mod$6.KOMSpacingModelIsUnseen(item)) {
    				coll.KOMSpacingGroupingUnseen.push(item);
    			}

    			if (mod$6.KOMSpacingModelIsDeveloping(item)) {
    				coll.KOMSpacingGroupingDeveloping.push(item);
    			}

    			if (mod$6.KOMSpacingModelIsMature(item)) {
    				coll.KOMSpacingGroupingMature.push(item);
    			}
    			
    			return coll;
    		}, {
    			KOMSpacingGroupingTotal: [],
    			KOMSpacingGroupingUnseen: [],
    			KOMSpacingGroupingDeveloping: [],
    			KOMSpacingGroupingMature: [],
    			KOMSpacingGroupingRetired: [],
    		});
    	},

    	KOMSpacingModelGroupChroniclesByStatus(param1, param2) {
    		if (!Array.isArray(param1)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!param2.match(/\d\d\d\d-\d\d-\d\d/)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return param1.reduce(function (coll, item) {
    			const chronicles = item.KOMSpacingChronicles.filter(function (e) {
    				return mod$5.KOMSharedGroupingDay(e.KOMChronicleResponseDate) === param2;
    			});

    			if (chronicles.includes(item.KOMSpacingChronicles[0])) {
    				const match = chronicles.find((e) => e.KOMChronicleInterval);
    				coll.KOMChronicleGroupingLearning.push(...chronicles.splice(0, match ? chronicles.indexOf(match) : chronicles.length));
    			}

    			coll.KOMChronicleGroupingDeveloping.push(...chronicles.filter(function (e) {
    				return e.KOMChronicleInterval < mod$6.KOMSpacingModelMatureThreshold();
    			}));

    			coll.KOMChronicleGroupingMature.push(...chronicles.filter(function (e) {
    				return e.KOMChronicleInterval >= mod$6.KOMSpacingModelMatureThreshold();
    			}));

    			coll.KOMChronicleGroupingRelearning.push(...chronicles.filter(function (e) {
    				return !e.KOMChronicleInterval;
    			}));

    			return coll;
    		}, {
    			KOMChronicleGroupingLearning: [],
    			KOMChronicleGroupingRelearning: [],
    			KOMChronicleGroupingDeveloping: [],
    			KOMChronicleGroupingMature: [],
    		});
    	},

    };

    const mod$7 = {

    	KOMSpacingStorageCollectionName() {
    		return 'kom_spacings';
    	},

    	KOMSpacingStoragePathForward(param1, param2) {
    		if (mod.KOMDeckModelErrorsFor(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return mod$3.KOMCardStorageObjectPath(param1, param2).replace('main', 'spacing-forward');
    	},

    	KOMSpacingStoragePathBackward(param1, param2) {
    		if (mod.KOMDeckModelErrorsFor(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return mod$3.KOMCardStorageObjectPath(param1, param2).replace('main', 'spacing-backward');
    	},

    	KOMSpacingStorageMatch(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (inputData.split('/').length < 4) {
    			return false;
    		}

    		return [
    			mod$7.KOMSpacingStoragePathForward(mod$3.uFakeCard(inputData), mod$3.uFakeDeck(inputData)),
    			mod$7.KOMSpacingStoragePathBackward(mod$3.uFakeCard(inputData), mod$3.uFakeDeck(inputData)),
    		].includes(inputData);
    	},

    	KOMSpacingStorageBuild(privateClient, publicClient, changeDelegate) {
    		privateClient.on('change', function (event) {
    			if (!changeDelegate) {
    				return;
    			}

    			if (!mod$7.KOMSpacingStorageMatch(event.relativePath)) {
    				return;
    			}

    			const delegateMethod = main$3.OLSKRemoteStorageChangeDelegateProperty(event);

    			if (!delegateMethod) {
    				return;
    			}

    			if (typeof changeDelegate[delegateMethod] !== 'function') {
    				return console.warn(`${ delegateMethod } not function`);
    			}

    			changeDelegate[delegateMethod](Object.assign(main$3.OLSKRemoteStoragePostJSONParse(event[main$3.OLSKRemoteStorageChangeDelegateInput(delegateMethod)]), {
    				$KOMSpacingDeckID: mod$3.uFakeDeck(event.relativePath).KOMDeckID,
    			}));
    		});

    		const OLSKRemoteStorageCollectionExports = {

    			_KOMSpacingStorageWrite(param1, param2, param3) {
    				if (typeof param1 !== 'object' || param1 === null) {
    					return Promise.reject(new Error('KOMErrorInputNotValid'));
    				}

    				let errors = mod$6.KOMSpacingModelErrorsFor(param1);
    				if (errors) {
    					return Promise.resolve({
    						KOMErrors: errors,
    					});
    				}

    				try {
    					return main$3.OLSKRemoteStorageWriteObject(privateClient, (mod$6.KOMSpacingModelIsBackward(param1) ? mod$7.KOMSpacingStoragePathBackward : mod$7.KOMSpacingStoragePathForward)(param2, param3), param1)
    				} catch (e) {
    					return Promise.reject(e);
    				}
    			},

    			async _KOMSpacingStorageList(param1, param2) {
    				if (mod.KOMDeckModelErrorsFor(param2)) {
    					throw new Error('KOMErrorInputNotValid');
    				}

    				const result = await privateClient.getAll(mod$3.KOMCardStorageFolderPath(param1, param2), false);

    				for (let key in result) {
    					if (result[key] === true) { // #remotestorage-cache-true
    						delete result[key];
    					}
    				}

    				return {
    					KOMCardSpacingForward: main$3.OLSKRemoteStoragePostJSONParse(result['spacing-forward'] || {
    						KOMSpacingID: `${ param1.KOMCardID }-forward`,
    						KOMSpacingChronicles: [],
    					}),
    					KOMCardSpacingBackward: main$3.OLSKRemoteStoragePostJSONParse(result['spacing-backward'] || {
    						KOMSpacingID: `${ param1.KOMCardID }-backward`,
    						KOMSpacingChronicles: [],
    					}),
    				};
    			},

    			_KOMSpacingStorageDelete(param1, param2, param3) {
    				if (mod$6.KOMSpacingModelErrorsFor(param1)) {
    					throw new Error('KOMErrorInputNotValid');
    				}

    				return privateClient.remove((mod$6.KOMSpacingModelIsBackward(param1) ? mod$7.KOMSpacingStoragePathBackward : mod$7.KOMSpacingStoragePathForward)(param2, param3));
    			},

    		};

    		return {
    			OLSKRemoteStorageCollectionName: mod$7.KOMSpacingStorageCollectionName(),
    			OLSKRemoteStorageCollectionExports,
    		};
    	},

    	KOMSpacingStorageWrite(storageClient, param1, param2, param3) {
    		return storageClient.kommit[mod$7.KOMSpacingStorageCollectionName()]._KOMSpacingStorageWrite(param1, param2, param3);
    	},

    	KOMSpacingStorageList(storageClient, param1, param2) {
    		return storageClient.kommit[mod$7.KOMSpacingStorageCollectionName()]._KOMSpacingStorageList(param1, param2);
    	},

    	KOMSpacingStorageDelete(storageClient, param1, param2, param3) {
    		return storageClient.kommit[mod$7.KOMSpacingStorageCollectionName()]._KOMSpacingStorageDelete(param1, param2, param3);
    	},

    };

    const uniqueID$1 = typeof require === 'undefined' && navigator.appName === 'Zombie' ? factory(detectPrng(true)) : factory();

    const mod$8 = {

    	async KOMDeckActionCreate(storageClient, inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		const creationDate = new Date();

    		return await mod$1.KOMDeckStorageWrite(storageClient, Object.assign({
    			KOMDeckID: uniqueID$1(),
    			KOMDeckCreationDate: creationDate,
    			KOMDeckModificationDate: creationDate,
    		}, inputData));
    	},

    	async KOMDeckActionUpdate(storageClient, inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		return await mod$1.KOMDeckStorageWrite(storageClient, Object.assign(inputData, {
    			KOMDeckModificationDate: new Date(),
    		}));
    	},

    	async KOMDeckActionDelete(storageClient, inputData) {
    		await Promise.all((await mod$4.KOMCardActionList(storageClient, inputData)).map(function (e) {
    			return mod$4.KOMCardActionDelete(storageClient, e, inputData);
    		}));

    		return await mod$1.KOMDeckStorageDelete(storageClient, inputData);
    	},

    	async KOMDeckActionList(storageClient) {
    		return Object.values(await mod$1.KOMDeckStorageList(storageClient));
    	},

    	async KOMDeckActionFetchObjects(storageClient, param1, param2 = false) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		if (typeof param2 !== 'boolean') {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		const objectsMap = Object.entries(await mod$1.KOMDeckStorageObjectsRecursive(storageClient, param1));

    		const cards = objectsMap.reduce(function (coll, item) {
    			if (mod$3.KOMCardStorageMatch(item[0])) {
    				return coll.concat(main$3.OLSKRemoteStoragePostJSONParse(item[1]));
    			}

    			return coll;
    		}, []);

    		const spacings = objectsMap.reduce(function (coll, item) {
    			if (mod$7.KOMSpacingStorageMatch(item[0])) {
    				coll[mod$6.KOMSpacingModelIdentifier(item[1].KOMSpacingID)] = (coll[mod$6.KOMSpacingModelIdentifier(item[1].KOMSpacingID)] || []).concat(main$3.OLSKRemoteStoragePostJSONParse(item[1]));
    			}

    			return coll;
    		}, {});

    		await Promise.all(cards.map(async function (e) {
    			if ((spacings[e.KOMCardID] || []).length === 2) {
    				return;
    			}

    			spacings[e.KOMCardID] = Object.values(await mod$7.KOMSpacingStorageList(storageClient, e, param1));
    		}));

    		return {
    			$KOMDeckCards: cards,
    			$KOMDeckSpacings: [].concat(...(param2 ? cards.filter(function (e) {
    				return ![e.KOMCardFrontText, e.KOMCardRearText].join(',').includes('???');
    			}) : cards).map(function (card) {
    				return (spacings[card.KOMCardID] || []).map(function (e) {
    					return Object.assign(e, {
    						$KOMSpacingCard: card,
    					});
    				});
    			})).filter(function (e) {
    				if (param1.KOMDeckIsForwardOnly && mod$6.KOMSpacingModelIsBackward(e)) {
    					return false;
    				}

    				return true;
    			}),
    		};
    	},

    };

    const mod$9 = {

    	KOM_DataModuleName () {
    		return 'kommit';
    	},

    	KOM_DataModule(inputData, options) {
    		return main$3.OLSKRemoteStorageDataModuleGenerator(mod$9.KOM_DataModuleName(), options)(inputData);
    	},

    	KOM_DataImport (storageClient, inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!inputData.length) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return Promise.all(inputData.map(async function (e) {
    			if (!Array.isArray(e.$KOMDeckCards)) {
    				return Promise.reject(new Error('KOMErrorInputNotValid'));
    			}

    			const deck = await mod$8.KOMDeckActionCreate(storageClient, e);

    			if (deck.KOMErrors) {
    				// console.log('KOMErrorInputNotValid', deck.KOMErrors, e);
    				return Promise.reject(new Error('KOMErrorInputNotValid'));
    			}

    			await Promise.all(e.$KOMDeckCards.map(async function (e) {
    				const card = await mod$4.KOMCardActionCreate(storageClient, e, deck);

    				if (card.KOMErrors) {
    					// console.log('KOMErrorInputNotValid', card.KOMErrors, e);
    					return Promise.reject(new Error('KOMErrorInputNotValid'));
    				}

    				const spacings = await mod$7.KOMSpacingStorageList(storageClient, card, deck);

    				return Promise.all(['$KOMCardSpacingForward', '$KOMCardSpacingBackward'].map(async function (e) {
    					if (!card[e]) {
    						return Promise.resolve();
    					}

    					const spacing = await mod$7.KOMSpacingStorageWrite(storageClient, Object.assign(card[e], {
    						KOMSpacingID: spacings[e.slice(1)].KOMSpacingID,
    					}), card, deck);

    					if (spacing.KOMErrors) {
    						// console.log('KOMErrorInputNotValid', spacing.KOMErrors, card[e]);
    						return Promise.reject(new Error('KOMErrorInputNotValid'));
    					}

    					return spacing;
    				}));
    			}));

    			delete deck.$KOMDeckCards;

    			return deck;
    		}));
    	},

    	KOM_DataExport (storageClient, inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!inputData.length) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return Promise.all(inputData.map(async function (deck) {
    			return Object.assign(main$3.OLSKRemoteStorageSafeCopy(deck), {
    				$KOMDeckCards: await Promise.all((await mod$4.KOMCardActionList(storageClient, deck)).map(async function (e) {
    					return Object.entries(await mod$7.KOMSpacingStorageList(storageClient, e, deck)).reduce(function (coll, item) {
    						if (item[1].KOMSpacingChronicles.length) {
    							coll['$' + item[0]] = item[1];
    						}

    						return coll;
    					}, e);
    				})),
    			});
    		}));
    	},

    };

    const mod$a = {

    	KOMSettingModelErrorsFor (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const errors = {};

    		if (typeof inputData.KOMSettingKey !== 'string') {
    			errors.KOMSettingKey = [
    				'KOMErrorNotString',
    			];
    		} else if (inputData.KOMSettingKey.trim() === '') {
    			errors.KOMSettingKey = [
    				'KOMErrorNotFilled',
    			];
    		}

    		if (typeof inputData.KOMSettingValue !== 'string') {
    			errors.KOMSettingValue = [
    				'KOMErrorNotString',
    			];
    		}

    		return Object.entries(errors).length ? errors : null;
    	},

    };

    const mod$b = {

    	uFakeSetting(inputData) {
    		return {
    			KOMSettingKey: inputData.split('/')[1],
    			KOMSettingValue: '',
    		};
    	},

    	KOMSettingStorageCollectionName () {
    		return 'kom_settings';
    	},

    	KOMSettingStorageCollectionPath () {
    		return mod$b.KOMSettingStorageCollectionName() + '/';
    	},

    	KOMSettingStorageObjectPath (inputData) {
    		if (mod$a.KOMSettingModelErrorsFor(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return mod$b.KOMSettingStorageCollectionPath() + inputData.KOMSettingKey;
    	},

    	KOMSettingStorageMatch(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData === mod$b.KOMSettingStorageObjectPath(mod$b.uFakeSetting(inputData));
    	},

    	KOMSettingStorageBuild (privateClient, publicClient, changeDelegate) {
    		const OLSKRemoteStorageCollectionExports = {

    			async _KOMSettingStorageWrite (inputData) {
    				if (typeof inputData !== 'object' || inputData === null) {
    					return Promise.reject(new Error('KOMErrorInputNotValid'));
    				}

    				let errors = mod$a.KOMSettingModelErrorsFor(inputData);
    				if (errors) {
    					return Promise.resolve({
    						KOMErrors: errors,
    					});
    				}

    				try {
    					return main$3.OLSKRemoteStorageWriteObject(privateClient, mod$b.KOMSettingStorageObjectPath(inputData), inputData)
    				} catch (e) {
    					return Promise.reject(e);
    				}
    			},

    			_KOMSettingStorageRead (inputData) {
    				if (typeof inputData !== 'string') {
    					throw new Error('KOMErrorInputNotValid');
    				}

    				return privateClient.getObject(mod$b.KOMSettingStorageObjectPath({
    					KOMSettingKey: inputData,
    					KOMSettingValue: '',
    				}), false);
    			},

    			_KOMSettingStorageList () {
    				return privateClient.getAll(mod$b.KOMSettingStorageCollectionPath(), false);
    			},

    			_KOMSettingStorageDelete (inputData) {
    				if (typeof inputData !== 'string') {
    					throw new Error('KOMErrorInputNotValid');
    				}

    				return privateClient.remove(mod$b.KOMSettingStorageObjectPath({
    					KOMSettingKey: inputData,
    					KOMSettingValue: '',
    				}));
    			},
    			
    		};

    		return {
    			OLSKRemoteStorageCollectionName: mod$b.KOMSettingStorageCollectionName(),
    			OLSKRemoteStorageCollectionExports,
    		};
    	},

    	KOMSettingStorageWrite (storageClient, inputData) {
    		return storageClient.kommit[mod$b.KOMSettingStorageCollectionName()]._KOMSettingStorageWrite(inputData);
    	},

    	KOMSettingStorageRead (storageClient, inputData) {
    		return storageClient.kommit[mod$b.KOMSettingStorageCollectionName()]._KOMSettingStorageRead(inputData);
    	},

    	KOMSettingStorageList (storageClient) {
    		return storageClient.kommit[mod$b.KOMSettingStorageCollectionName()]._KOMSettingStorageList();
    	},

    	KOMSettingStorageDelete (storageClient, inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return storageClient.kommit[mod$b.KOMSettingStorageCollectionName()]._KOMSettingStorageDelete(inputData);
    	},

    };

    var remotestorage = createCommonjsModule(function (module, exports) {
    /*! remotestorage.js 1.2.3, https://remotestorage.io, MIT licensed */
    !function(e,t){module.exports=t();}(commonjsGlobal,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n});},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=17)}([function(e,t,r){(function(t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o={logError:function(e){"string"==typeof e?console.error(e):console.error(e.message,e.stack);},globalContext:"undefined"!=typeof window?window:"object"===("undefined"==typeof self?"undefined":n(self))?self:t,getGlobalContext:function(){return "undefined"!=typeof window?window:"object"===("undefined"==typeof self?"undefined":n(self))?self:t},extend:function(e){var t=Array.prototype.slice.call(arguments,1);return t.forEach((function(t){for(var r in t)e[r]=t[r];})),e},containingFolder:function(e){if(""===e)return "/";if(!e)throw"Path not given!";return e.replace(/\/+/g,"/").replace(/[^\/]+\/?$/,"")},isFolder:function(e){return "/"===e.substr(-1)},isDocument:function(e){return !o.isFolder(e)},baseName:function(e){var t=e.split("/");return o.isFolder(e)?t[t.length-2]+"/":t[t.length-1]},cleanPath:function(e){return e.replace(/\/+/g,"/").split("/").map(encodeURIComponent).join("/").replace(/'/g,"%27")},bindAll:function(e){for(var t in this)"function"==typeof e[t]&&(e[t]=e[t].bind(e));},equal:function(e,t,r){var i;if(r=r||[],n(e)!==n(t))return !1;if("number"==typeof e||"boolean"==typeof e||"string"==typeof e)return e===t;if("function"==typeof e)return e.toString()===t.toString();if(e instanceof ArrayBuffer&&t instanceof ArrayBuffer&&(e=new Uint8Array(e),t=new Uint8Array(t)),e instanceof Array){if(e.length!==t.length)return !1;for(var s=0,a=e.length;s<a;s++)if(!o.equal(e[s],t[s],r))return !1}else{for(i in e)if(e.hasOwnProperty(i)&&!(i in t))return !1;for(i in t)if(t.hasOwnProperty(i)){if(!(i in e))return !1;var u;if("object"===n(t[i])){if(r.indexOf(t[i])>=0)continue;(u=r.slice()).push(t[i]);}if(!o.equal(e[i],t[i],u))return !1}}return !0},deepClone:function(e){var t;return void 0===e?void 0:(function e(t,r){var o,i;if("object"===n(t)&&!Array.isArray(t)&&null!==t)for(o in t)"object"===n(t[o])&&null!==t[o]&&("[object ArrayBuffer]"===t[o].toString()?(r[o]=new ArrayBuffer(t[o].byteLength),i=new Int8Array(t[o]),new Int8Array(r[o]).set(i)):e(t[o],r[o]));}(e,t=JSON.parse(JSON.stringify(e))),t)},pathsFromRoot:function(e){for(var t=[e],r=e.replace(/\/$/,"").split("/");r.length>1;)r.pop(),t.push(r.join("/")+"/");return t},localStorageAvailable:function(){var e=o.getGlobalContext();if(!("localStorage"in e))return !1;try{return e.localStorage.setItem("rs-check",1),e.localStorage.removeItem("rs-check"),!0}catch(e){return !1}},getJSONFromLocalStorage:function(e){var t=o.getGlobalContext();try{return JSON.parse(t.localStorage.getItem(e))}catch(e){}},shouldBeTreatedAsBinary:function(e,t){return t&&t.match(/charset=binary/)||/[\x00-\x08\x0E-\x1F\uFFFD]/.test(e)},getTextFromArrayBuffer:function(e,n){return new Promise((function(i){if("undefined"==typeof Blob){var s=new r(new Uint8Array(e));i(s.toString(n));}else{var a;if(o.globalContext.BlobBuilder=o.globalContext.BlobBuilder||o.globalContext.WebKitBlobBuilder,void 0!==o.globalContext.BlobBuilder){var u=new t.BlobBuilder;u.append(e),a=u.getBlob();}else a=new Blob([e]);var c=new FileReader;"function"==typeof c.addEventListener?c.addEventListener("loadend",(function(e){i(e.target.result);})):c.onloadend=function(e){i(e.target.result);},c.readAsText(a,n);}}))}};e.exports=o;}).call(this,r(10),r(18).Buffer);},function(e,t,r){var n=r(3);e.exports=function(){n.logging&&console.log.apply(console,arguments);};},function(e,t,r){var n=r(1),o={addEventListener:function(e,t){if("string"!=typeof e)throw new Error("Argument eventName should be a string");if("function"!=typeof t)throw new Error("Argument handler should be a function");n("[Eventhandling] Adding event listener",e),this._validateEvent(e),this._handlers[e].push(t);},removeEventListener:function(e,t){this._validateEvent(e);for(var r=this._handlers[e].length,n=0;n<r;n++)if(this._handlers[e][n]===t)return void this._handlers[e].splice(n,1)},_emit:function(e){this._validateEvent(e);var t=Array.prototype.slice.call(arguments,1);this._handlers[e].slice().forEach((function(e){e.apply(this,t);}));},_validateEvent:function(e){if(!(e in this._handlers))throw new Error("Unknown event: "+e)},_delegateEvent:function(e,t){t.on(e,function(t){this._emit(e,t);}.bind(this));},_addEvent:function(e){this._handlers[e]=[];}};o.on=o.addEventListener,o.off=o.removeEventListener,e.exports=function(e){var t=Array.prototype.slice.call(arguments,1);for(var r in o)e[r]=o[r];e._handlers={},t.forEach((function(t){e._addEvent(t);}));};},function(e,t){var r={cache:!0,changeEvents:{local:!0,window:!1,remote:!0,conflict:!0},cordovaRedirectUri:void 0,logging:!1,modules:[],backgroundSyncInterval:6e4,disableFeatures:[],discoveryTimeout:1e4,isBackground:!1,requestTimeout:3e4,syncInterval:1e4};e.exports=r;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=r(1),i=r(0);function s(e){var t,r=e||u.getLocation().href,n=r.indexOf("#");if(-1!==n&&-1!==(t=r.substring(n+1)).indexOf("="))return t.split("&").reduce((function(e,t){var r=t.split("=");if("state"===r[0]&&r[1].match(/rsDiscovery/)){var n=decodeURIComponent(r[1]),o=n.substr(n.indexOf("rsDiscovery=")).split("&")[0].split("=")[1];e.rsDiscovery=JSON.parse(atob(o)),(n=n.replace(new RegExp("&?rsDiscovery="+o),"")).length>0&&(e.state=n);}else e[decodeURIComponent(r[0])]=decodeURIComponent(r[1]);return e}),{})}var a,u=function e(t,r){var n=r.authURL,s=r.scope,a=r.redirectUri,u=r.clientId;if(o("[Authorize] authURL = ",n,"scope = ",s,"redirectUri = ",a,"clientId = ",u),!i.localStorageAvailable()&&"remotestorage"===t.backend){a+=a.indexOf("#")>0?"&":"#";var c={userAddress:t.remote.userAddress,href:t.remote.href,storageApi:t.remote.storageApi,properties:t.remote.properties};a+="rsDiscovery="+btoa(JSON.stringify(c));}var l=function(e,t,r,n){var o=t.indexOf("#"),i=e;return i+=e.indexOf("?")>0?"&":"?",i+="redirect_uri="+encodeURIComponent(t.replace(/#.*$/,"")),i+="&scope="+encodeURIComponent(r),i+="&client_id="+encodeURIComponent(n),-1!==o&&o+1!==t.length&&(i+="&state="+encodeURIComponent(t.substring(o+1))),i+="&response_type=token"}(n,a,s,u);if(i.globalContext.cordova)return e.openWindow(l,a,"location=yes,clearsessioncache=yes,clearcache=yes").then((function(e){t.remote.configure({token:e.access_token});}));e.setLocation(l);};u.IMPLIED_FAKE_TOKEN=!1,u.Unauthorized=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.name="Unauthorized",this.message=void 0===e?"App authorization expired or revoked.":e,void 0!==t.code&&(this.code=t.code),this.stack=(new Error).stack;},u.Unauthorized.prototype=Object.create(Error.prototype),u.Unauthorized.prototype.constructor=u.Unauthorized,u.getLocation=function(){return document.location},u.setLocation=function(e){if("string"==typeof e)document.location.href=e;else{if("object"!==n(e))throw"Invalid location "+e;document.location=e;}},u.openWindow=function(e,t,r){return new Promise((function(n,o){var i=open(e,"_blank",r);if(!i||i.closed)return o("Authorization popup was blocked");var a=function(){return o("Authorization was canceled")};i.addEventListener("loadstart",(function(e){if(0===e.url.indexOf(t)){i.removeEventListener("exit",a),i.close();var r=s(e.url);return r?n(r):o("Authorization error")}})),i.addEventListener("exit",a);}))},u._rs_supported=function(){return "undefined"!=typeof document},u._rs_init=function(e){a=function(){var n=!1;if(r){if(r.error)throw"access_denied"===r.error?new u.Unauthorized("Authorization failed: access denied",{code:"access_denied"}):new u.Unauthorized("Authorization failed: ".concat(r.error));r.rsDiscovery&&e.remote.configure(r.rsDiscovery),r.access_token&&(e.remote.configure({token:r.access_token}),n=!0),r.remotestorage&&(e.connect(r.remotestorage),n=!0),r.state&&(t=u.getLocation(),u.setLocation(t.href.split("#")[0]+"#"+r.state));}n||e.remote.stopWaitingForToken();};var t,r=s();r.access_token&&((t=u.getLocation()).hash=""),e.on("features-loaded",a);},u._rs_cleanup=function(e){e.removeEventListener("features-loaded",a);},e.exports=u;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=r(2),i=r(0),s=r(3),a=r(22),u=r(23),c=u.SchemaNotFound,l=function(e,t){if("/"!==t[t.length-1])throw"Not a folder: "+t;"/"===t&&(this.makePath=function(e){return ("/"===e[0]?"":"/")+e}),this.storage=e,this.base=t;var r=this.base.split("/");r.length>2?this.moduleName=r[1]:this.moduleName="root",o(this,"change"),this.on=this.on.bind(this),e.onChange(this.base,this._fireChange.bind(this));};l.Types=u,l.prototype={scope:function(e){return new l(this.storage,this.makePath(e))},getListing:function(e,t){if("string"!=typeof e)e="";else if(e.length>0&&"/"!==e[e.length-1])return Promise.reject("Not a folder: "+e);return this.storage.get(this.makePath(e),t).then((function(e){return 404===e.statusCode?{}:e.body}))},getAll:function(e,t){if("string"!=typeof e)e="";else if(e.length>0&&"/"!==e[e.length-1])return Promise.reject("Not a folder: "+e);return this.storage.get(this.makePath(e),t).then(function(r){if(404===r.statusCode)return {};if("object"===n(r.body)){var o=Object.keys(r.body);if(0===o.length)return {};var i=o.map(function(o){return this.storage.get(this.makePath(e+o),t).then((function(e){if("string"==typeof e.body)try{e.body=JSON.parse(e.body);}catch(e){}"object"===n(e.body)&&(r.body[o]=e.body);}))}.bind(this));return Promise.all(i).then((function(){return r.body}))}}.bind(this))},getFile:function(e,t){return "string"!=typeof e?Promise.reject("Argument 'path' of baseClient.getFile must be a string"):this.storage.get(this.makePath(e),t).then((function(e){return {data:e.body,contentType:e.contentType,revision:e.revision}}))},storeFile:function(e,t,r){return "string"!=typeof e?Promise.reject("Argument 'mimeType' of baseClient.storeFile must be a string"):"string"!=typeof t?Promise.reject("Argument 'path' of baseClient.storeFile must be a string"):"string"!=typeof r&&"object"!==n(r)?Promise.reject("Argument 'body' of baseClient.storeFile must be a string, ArrayBuffer, or ArrayBufferView"):(this.storage.access.checkPathPermission(this.makePath(t),"rw")||console.warn("WARNING: Editing a document to which only read access ('r') was claimed"),this.storage.put(this.makePath(t),r,e).then(function(e){return 200===e.statusCode||201===e.statusCode?e.revision:Promise.reject("Request (PUT "+this.makePath(t)+") failed with status: "+e.statusCode)}.bind(this)))},getObject:function(e,t){return "string"!=typeof e?Promise.reject("Argument 'path' of baseClient.getObject must be a string"):this.storage.get(this.makePath(e),t).then(function(t){if("object"===n(t.body))return t.body;if("string"==typeof t.body)try{return JSON.parse(t.body)}catch(t){throw"Not valid JSON: "+this.makePath(e)}else if(void 0!==t.body&&200===t.statusCode)return Promise.reject("Not an object: "+this.makePath(e))}.bind(this))},storeObject:function(e,t,r){if("string"!=typeof e)return Promise.reject("Argument 'typeAlias' of baseClient.storeObject must be a string");if("string"!=typeof t)return Promise.reject("Argument 'path' of baseClient.storeObject must be a string");if("object"!==n(r))return Promise.reject("Argument 'object' of baseClient.storeObject must be an object");this._attachType(r,e);try{var o=this.validate(r);if(!o.valid)return Promise.reject(o)}catch(e){return Promise.reject(e)}return this.storage.put(this.makePath(t),JSON.stringify(r),"application/json; charset=UTF-8").then(function(e){return 200===e.statusCode||201===e.statusCode?e.revision:Promise.reject("Request (PUT "+this.makePath(t)+") failed with status: "+e.statusCode)}.bind(this))},remove:function(e){return "string"!=typeof e?Promise.reject("Argument 'path' of baseClient.remove must be a string"):(this.storage.access.checkPathPermission(this.makePath(e),"rw")||console.warn("WARNING: Removing a document to which only read access ('r') was claimed"),this.storage.delete(this.makePath(e)))},getItemURL:function(e){if("string"!=typeof e)throw"Argument 'path' of baseClient.getItemURL must be a string";return this.storage.connected?(e=this._cleanPath(this.makePath(e)),this.storage.remote.href+e):void 0},cache:function(e,t){if("string"!=typeof e)throw"Argument 'path' of baseClient.cache must be a string";if(void 0===t)t="ALL";else if("string"!=typeof t)throw"Argument 'strategy' of baseClient.cache must be a string or undefined";if("FLUSH"!==t&&"SEEN"!==t&&"ALL"!==t)throw'Argument \'strategy\' of baseclient.cache must be one of ["FLUSH", "SEEN", "ALL"]';return this.storage.caching.set(this.makePath(e),t),this},flush:function(e){return this.storage.local.flush(e)},declareType:function(e,t,r){r||(r=t,t=this._defaultTypeURI(e)),l.Types.declare(this.moduleName,e,t,r);},validate:function(e){var t=l.Types.getSchema(e["@context"]);if(t)return a.validateResult(e,t);throw new c(e["@context"])},schemas:{configurable:!0,get:function(){return l.Types.inScope(this.moduleName)}},_defaultTypeURI:function(e){return "http://remotestorage.io/spec/modules/"+encodeURIComponent(this.moduleName)+"/"+encodeURIComponent(e)},_attachType:function(e,t){e["@context"]=l.Types.resolveAlias(this.moduleName+"/"+t)||this._defaultTypeURI(t);},makePath:function(e){return this.base+(e||"")},_fireChange:function(e){s.changeEvents[e.origin]&&(["new","old","lastCommon"].forEach((function(t){if((!e[t+"ContentType"]||/^application\/(.*)json(.*)/.exec(e[t+"ContentType"]))&&"string"==typeof e[t+"Value"])try{e[t+"Value"]=JSON.parse(e[t+"Value"]);}catch(e){}})),this._emit("change",e));},_cleanPath:i.cleanPath},l._rs_init=function(){},e.exports=l;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o,i,s=r(1),a=r(0),u=r(2),c=r(4),l=r(3),h="remotestorage:wireclient",f={"draft-dejong-remotestorage-00":2,"draft-dejong-remotestorage-01":3,"draft-dejong-remotestorage-02":4,"https://www.w3.org/community/rww/wiki/read-write-web-00#simple":1};if("function"==typeof ArrayBufferView)i=function(e){return e&&e instanceof ArrayBufferView};else{var d=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];i=function(e){for(var t=0;t<8;t++)if(e instanceof d[t])return !0;return !1};}var p=a.isFolder,m=a.cleanPath,y=a.shouldBeTreatedAsBinary,g=a.getJSONFromLocalStorage,v=a.getTextFromArrayBuffer;function b(e){return "string"!=typeof e?e:"*"===e?"*":'"'+e+'"'}function _(e){return "string"!=typeof e?e:e.replace(/^["']|["']$/g,"")}var w=function(e){if(this.rs=e,this.connected=!1,u(this,"connected","not-connected"),o){var t=g(h);t&&setTimeout(function(){this.configure(t);}.bind(this),0);}this._revisionCache={},this.connected&&setTimeout(this._emit.bind(this),0,"connected");};w.prototype={_request:function(e,t,r,n,o,i,a){if(("PUT"===e||"DELETE"===e)&&"/"===t[t.length-1])return Promise.reject("Don't "+e+" on directories!");var u,l=this;return r!==c.IMPLIED_FAKE_TOKEN&&(n.Authorization="Bearer "+r),this.rs._emit("wire-busy",{method:e,isFolder:p(t)}),w.request(e,t,{body:o,headers:n,responseType:"arraybuffer"}).then((function(r){if(l.online||(l.online=!0,l.rs._emit("network-online")),l.rs._emit("wire-done",{method:e,isFolder:p(t),success:!0}),o=r.status,[401,403,404,412].indexOf(o)>=0)return s("[WireClient] Error response status",r.status),u=i?_(r.getResponseHeader("ETag")):void 0,401===r.status&&l.rs._emit("error",new c.Unauthorized),Promise.resolve({statusCode:r.status,revision:u});if(function(e){return [201,204,304].indexOf(e)>=0}(r.status)||200===r.status&&"GET"!==e)return u=_(r.getResponseHeader("ETag")),s("[WireClient] Successful request",u),Promise.resolve({statusCode:r.status,revision:u});var n=r.getResponseHeader("Content-Type");u=i?_(r.getResponseHeader("ETag")):200===r.status?a:void 0;var o,h=function(e){var t,r="UTF-8";return e&&(t=e.match(/charset=(.+)$/))&&(r=t[1]),r}(n);return y(r.response,n)?(s("[WireClient] Successful request with unknown or binary mime-type",u),Promise.resolve({statusCode:r.status,body:r.response,contentType:n,revision:u})):v(r.response,h).then((function(e){return s("[WireClient] Successful request",u),Promise.resolve({statusCode:r.status,body:e,contentType:n,revision:u})}))}),(function(r){return l.online&&(l.online=!1,l.rs._emit("network-offline")),l.rs._emit("wire-done",{method:e,isFolder:p(t),success:!1}),Promise.reject(r)}))},configure:function(e){if("object"!==n(e))throw new Error("WireClient configure settings parameter should be an object");void 0!==e.userAddress&&(this.userAddress=e.userAddress),void 0!==e.href&&(this.href=e.href),void 0!==e.storageApi&&(this.storageApi=e.storageApi),void 0!==e.token&&(this.token=e.token),void 0!==e.properties&&(this.properties=e.properties),void 0!==this.storageApi&&(this._storageApi=f[this.storageApi]||5,this.supportsRevs=this._storageApi>=2),this.href&&this.token?(this.connected=!0,this.online=!0,this._emit("connected")):this.connected=!1,o&&(localStorage[h]=JSON.stringify({userAddress:this.userAddress,href:this.href,storageApi:this.storageApi,token:this.token,properties:this.properties}));},stopWaitingForToken:function(){this.connected||this._emit("not-connected");},get:function(e,t){var r=this;if(!this.connected)return Promise.reject("not connected (path: "+e+")");t||(t={});var o={};return this.supportsRevs&&t.ifNoneMatch&&(o["If-None-Match"]=b(t.ifNoneMatch)),this._request("GET",this.href+m(e),this.token,o,void 0,this.supportsRevs,this._revisionCache[e]).then((function(t){if(!p(e))return Promise.resolve(t);var o,i={};if(void 0!==t.body)try{t.body=JSON.parse(t.body);}catch(t){return Promise.reject("Folder description at "+r.href+m(e)+" is not JSON")}if(200===t.statusCode&&"object"===n(t.body)){if(0===Object.keys(t.body).length)t.statusCode=404;else if("http://remotestorage.io/spec/folder-description"===(o=t.body)["@context"]&&"object"===n(o.items)){for(var s in t.body.items)r._revisionCache[e+s]=t.body.items[s].ETag;i=t.body.items;}else Object.keys(t.body).forEach((function(n){r._revisionCache[e+n]=t.body[n],i[n]={ETag:t.body[n]};}));return t.body=i,Promise.resolve(t)}return Promise.resolve(t)}))},put:function(e,t,r,n){if(!this.connected)return Promise.reject("not connected (path: "+e+")");n||(n={}),!r.match(/charset=/)&&(t instanceof ArrayBuffer||i(t))&&(r+="; charset=binary");var o={"Content-Type":r};return this.supportsRevs&&(n.ifMatch&&(o["If-Match"]=b(n.ifMatch)),n.ifNoneMatch&&(o["If-None-Match"]=b(n.ifNoneMatch))),this._request("PUT",this.href+m(e),this.token,o,t,this.supportsRevs)},delete:function(e,t){if(!this.connected)throw new Error("not connected (path: "+e+")");t||(t={});var r={};return this.supportsRevs&&t.ifMatch&&(r["If-Match"]=b(t.ifMatch)),this._request("DELETE",this.href+m(e),this.token,r,void 0,this.supportsRevs)}},w.isArrayBufferView=i,w.request=function(e,t,r){return "function"==typeof fetch?w._fetchRequest(e,t,r):"function"==typeof XMLHttpRequest?w._xhrRequest(e,t,r):(s("[WireClient] add a polyfill for fetch or XMLHttpRequest"),Promise.reject("[WireClient] add a polyfill for fetch or XMLHttpRequest"))},w._fetchRequest=function(e,t,r){var n,o,i={};"function"==typeof AbortController&&(o=new AbortController);var a=fetch(t,{method:e,headers:r.headers,body:r.body,signal:o?o.signal:void 0}).then((function(e){switch(s("[WireClient fetch]",e),e.headers.forEach((function(e,t){i[t.toUpperCase()]=e;})),n={readyState:4,status:e.status,statusText:e.statusText,response:void 0,getResponseHeader:function(e){return i[e.toUpperCase()]||null},responseType:r.responseType,responseURL:t},r.responseType){case"arraybuffer":return e.arrayBuffer();case"blob":return e.blob();case"json":return e.json();case void 0:case"":case"text":return e.text();default:throw new Error("responseType 'document' is not currently supported using fetch")}})).then((function(e){return n.response=e,r.responseType&&"text"!==r.responseType||(n.responseText=e),n})),u=new Promise((function(e,t){setTimeout((function(){t("timeout"),o&&o.abort();}),l.requestTimeout);}));return Promise.race([a,u])},w._xhrRequest=function(e,t,r){return new Promise((function(o,a){s("[WireClient]",e,t);var u=!1,c=setTimeout((function(){u=!0,a("timeout");}),l.requestTimeout),h=new XMLHttpRequest;if(h.open(e,t,!0),r.responseType&&(h.responseType=r.responseType),r.headers)for(var f in r.headers)h.setRequestHeader(f,r.headers[f]);h.onload=function(){u||(clearTimeout(c),o(h));},h.onerror=function(e){u||(clearTimeout(c),a(e));};var d=r.body;"object"===n(d)&&!i(d)&&d instanceof ArrayBuffer&&(d=new Uint8Array(d)),h.send(d);}))},Object.defineProperty(w.prototype,"storageType",{get:function(){if(this.storageApi){var e=this.storageApi.match(/draft-dejong-(remotestorage-\d\d)/);return e?e[1]:"2012.04"}}}),w._rs_init=function(e){o=a.localStorageAvailable(),e.remote=new w(e),this.online=!0;},w._rs_supported=function(){return "function"==typeof fetch||"function"==typeof XMLHttpRequest},w._rs_cleanup=function(){o&&delete localStorage[h];},e.exports=w;},function(e,t,r){function n(e,t){return !t||"object"!==c(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function o(e){var t="function"==typeof Map?new Map:void 0;return (o=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n);}function n(){return s(e,arguments,u(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),a(n,e)})(e)}function i(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return !1}}function s(e,t,r){return (s=i()?Reflect.construct:function(e,t,r){var n=[null];n.push.apply(n,t);var o=new(Function.bind.apply(e,n));return r&&a(o,r.prototype),o}).apply(null,arguments)}function a(e,t){return (a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){return (u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e){return (c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}var f,d,p=r(0),m=p.isFolder,y=p.isDocument,g=p.equal,v=p.deepClone,b=p.pathsFromRoot,_=r(12),w=r(2),P=r(1),E=r(4),S=r(3);function T(e,t,r){return {action:e,path:t,promise:r}}function A(e,t){return e.common.revision!==t&&(!e.remote||e.remote.revision!==t)}function R(e){return e.common&&e.common.revision}var k=function(){function e(t){var r=this;l(this,e),this.rs=t,this._tasks={},this._running={},this._timeStarted={},this.numThreads=10,this.rs.local.onDiff((function(e){r.addTask(e),r.doTasks();})),this.rs.caching.onActivate((function(e){r.addTask(e),r.doTasks();})),w(this,"done","req-done");}var t,r,n;return t=e,n=[{key:"_rs_init",value:function(t){f=function(){P("[Sync] syncCycleCb calling syncCycle"),_.isBrowser()&&function(e){function t(t){var r,n;r=e.getCurrentSyncInterval(),S.isBackground=!t,n=e.getCurrentSyncInterval(),e._emit("sync-interval-change",{oldValue:r,newValue:n});}_.on("background",(function(){return t(!1)})),_.on("foreground",(function(){return t(!0)}));}(t),t.sync||(t.sync=new e(t),t.syncStopped&&(P("[Sync] Instantiating sync stopped"),t.sync.stopped=!0,delete t.syncStopped)),P("[Sync] syncCycleCb calling syncCycle"),t.syncCycle();},d=function(){t.removeEventListener("connected",d),t.startSync();},t.on("ready",f),t.on("connected",d);}},{key:"_rs_cleanup",value:function(e){e.stopSync(),e.removeEventListener("ready",f),e.removeEventListener("connected",d),e.sync=void 0,delete e.sync;}}],(r=[{key:"now",value:function(){return (new Date).getTime()}},{key:"queueGetRequest",value:function(e){var t=this;return new Promise((function(r,n){t.rs.remote.connected?t.rs.remote.online?(t.addTask(e,function(){this.rs.local.get(e).then((function(e){return r(e)}));}.bind(t)),t.doTasks()):n("cannot fulfill maxAge requirement - remote is not online"):n("cannot fulfill maxAge requirement - remote is not connected");}))}},{key:"corruptServerItemsMap",value:function(e,t){if("object"!==c(e)||Array.isArray(e))return !0;for(var r in e){var n=e[r];if("object"!==c(n))return !0;if("string"!=typeof n.ETag)return !0;if(m(r)){if(-1!==r.substring(0,r.length-1).indexOf("/"))return !0}else{if(-1!==r.indexOf("/"))return !0;if(t){if("string"!=typeof n["Content-Type"])return !0;if("number"!=typeof n["Content-Length"])return !0}}}return !1}},{key:"corruptItemsMap",value:function(e){if("object"!==c(e)||Array.isArray(e))return !0;for(var t in e)if("boolean"!=typeof e[t])return !0;return !1}},{key:"corruptRevision",value:function(e){return "object"!==c(e)||Array.isArray(e)||e.revision&&"string"!=typeof e.revision||e.body&&"string"!=typeof e.body&&"object"!==c(e.body)||e.contentType&&"string"!=typeof e.contentType||e.contentLength&&"number"!=typeof e.contentLength||e.timestamp&&"number"!=typeof e.timestamp||e.itemsMap&&this.corruptItemsMap(e.itemsMap)}},{key:"isCorrupt",value:function(e){return "object"!==c(e)||Array.isArray(e)||"string"!=typeof e.path||this.corruptRevision(e.common)||e.local&&this.corruptRevision(e.local)||e.remote&&this.corruptRevision(e.remote)||e.push&&this.corruptRevision(e.push)}},{key:"hasTasks",value:function(){return Object.getOwnPropertyNames(this._tasks).length>0}},{key:"collectDiffTasks",value:function(){var e=this,t=0;return this.rs.local.forAllNodes((function(r){t>100||(e.isCorrupt(r)?(P("[Sync] WARNING: corrupt node in local cache",r),"object"===c(r)&&r.path&&(e.addTask(r.path),t++)):e.needsFetch(r)&&e.rs.access.checkPathPermission(r.path,"r")?(e.addTask(r.path),t++):y(r.path)&&e.needsPush(r)&&e.rs.access.checkPathPermission(r.path,"rw")&&(e.addTask(r.path),t++));})).then((function(){return t}),(function(e){throw e}))}},{key:"inConflict",value:function(e){return e.local&&e.remote&&(void 0!==e.remote.body||e.remote.itemsMap)}},{key:"needsRefresh",value:function(e){return !!e.common&&(!e.common.timestamp||this.now()-e.common.timestamp>S.syncInterval)}},{key:"needsFetch",value:function(e){return !!this.inConflict(e)||!(!e.common||void 0!==e.common.itemsMap||void 0!==e.common.body)||!(!e.remote||void 0!==e.remote.itemsMap||void 0!==e.remote.body)}},{key:"needsPush",value:function(e){return !this.inConflict(e)&&(!(!e.local||e.push)||void 0)}},{key:"needsRemotePut",value:function(e){return e.local&&e.local.body}},{key:"needsRemoteDelete",value:function(e){return e.local&&!1===e.local.body}},{key:"getParentPath",value:function(e){var t=e.match(/^(.*\/)([^\/]+\/?)$/);if(t)return t[1];throw new Error('Not a valid path: "'+e+'"')}},{key:"deleteChildPathsFromTasks",value:function(){for(var e in this._tasks)for(var t=b(e),r=1;r<t.length;r++)this._tasks[t[r]]&&(Array.isArray(this._tasks[e])&&this._tasks[e].length&&Array.prototype.push.apply(this._tasks[t[r]],this._tasks[e]),delete this._tasks[e]);}},{key:"collectRefreshTasks",value:function(){var e=this;return this.rs.local.forAllNodes((function(t){var r;if(e.needsRefresh(t)){try{r=e.getParentPath(t.path);}catch(e){}r&&e.rs.access.checkPathPermission(r,"r")?e.addTask(r):e.rs.access.checkPathPermission(t.path,"r")&&e.addTask(t.path);}})).then((function(){e.deleteChildPathsFromTasks();}),(function(e){throw e}))}},{key:"flush",value:function(e){for(var t in e)"FLUSH"===this.rs.caching.checkPath(t)&&e[t]&&!e[t].local&&(P("[Sync] Flushing",t),e[t]=void 0);return e}},{key:"doTask",value:function(e){var t=this;return this.rs.local.getNodes([e]).then((function(r){var n=r[e];return void 0===n?T("get",e,t.rs.remote.get(e)):function(e){return e.remote&&e.remote.revision&&!e.remote.itemsMap&&!e.remote.body}(n)?T("get",e,t.rs.remote.get(e)):t.needsRemotePut(n)?(n.push=v(n.local),n.push.timestamp=t.now(),t.rs.local.setNodes(t.flush(r)).then((function(){var r;return r=R(n)?{ifMatch:n.common.revision}:{ifNoneMatch:"*"},T("put",e,t.rs.remote.put(e,n.push.body,n.push.contentType,r))}))):t.needsRemoteDelete(n)?(n.push={body:!1,timestamp:t.now()},t.rs.local.setNodes(t.flush(r)).then((function(){return R(n)?T("delete",e,t.rs.remote.delete(e,{ifMatch:n.common.revision})):T("get",e,t.rs.remote.get(e))}))):R(n)?T("get",e,t.rs.remote.get(e,{ifNoneMatch:n.common.revision})):T("get",e,t.rs.remote.get(e))}))}},{key:"autoMergeFolder",value:function(e){if(e.remote.itemsMap&&(e.common=e.remote,delete e.remote,e.common.itemsMap)){for(var t in e.common.itemsMap)e.local.itemsMap[t]||(e.local.itemsMap[t]=!1);g(e.local.itemsMap,e.common.itemsMap)&&delete e.local;}return e}},{key:"autoMergeDocument",value:function(e){return function(e){return (!e.remote||!e.remote.revision||e.remote.revision===e.common.revision)&&(void 0===e.common.body&&!1===e.remote.body||e.remote.body===e.common.body&&e.remote.contentType===e.common.contentType)}(e)?delete(e=function(e){return e.remote&&!1===e.remote.body&&e.local&&!1===e.local.body&&delete e.local,e}(e)).remote:void 0!==e.remote.body&&(P("[Sync] Emitting keep/revert"),this.rs.local._emitChange({origin:"conflict",path:e.path,oldValue:e.local.body,newValue:e.remote.body,lastCommonValue:e.common.body,oldContentType:e.local.contentType,newContentType:e.remote.contentType,lastCommonContentType:e.common.contentType}),e.remote.body?e.common=e.remote:e.common={},delete e.remote,delete e.local),e}},{key:"autoMerge",value:function(e){if(e.remote){if(e.local)return m(e.path)?this.autoMergeFolder(e):this.autoMergeDocument(e);if(m(e.path))void 0!==e.remote.itemsMap&&(e.common=e.remote,delete e.remote);else if(void 0!==e.remote.body){var t={origin:"remote",path:e.path,oldValue:!1===e.common.body?void 0:e.common.body,newValue:!1===e.remote.body?void 0:e.remote.body,oldContentType:e.common.contentType,newContentType:e.remote.contentType};if((t.oldValue||t.newValue)&&this.rs.local._emitChange(t),!e.remote.body)return;e.common=e.remote,delete e.remote;}return e}e.common.body&&this.rs.local._emitChange({origin:"remote",path:e.path,oldValue:e.common.body,newValue:void 0,oldContentType:e.common.contentType,newContentType:void 0});}},{key:"updateCommonTimestamp",value:function(e,t){var r=this;return this.rs.local.getNodes([e]).then((function(n){return n[e]&&n[e].common&&n[e].common.revision===t&&(n[e].common.timestamp=r.now()),r.rs.local.setNodes(r.flush(n))}))}},{key:"markChildren",value:function(e,t,r,n){var o=this,i=[],s={},a={};for(var u in t)i.push(e+u),s[e+u]=t[u];for(var c in n)i.push(e+c);return this.rs.local.getNodes(i).then((function(t){var i;for(var u in t)if(i=t[u],s[u])i&&i.common?A(i,s[u].ETag)&&(r[u]=v(i),r[u].remote={revision:s[u].ETag,timestamp:o.now()},r[u]=o.autoMerge(r[u])):"ALL"===o.rs.caching.checkPath(u)&&(r[u]={path:u,common:{timestamp:o.now()},remote:{revision:s[u].ETag,timestamp:o.now()}}),r[u]&&s[u]["Content-Type"]&&(r[u].remote.contentType=s[u]["Content-Type"]),r[u]&&s[u]["Content-Length"]&&(r[u].remote.contentLength=s[u]["Content-Length"]);else if(n[u.substring(e.length)]&&i&&i.common){if(i.common.itemsMap)for(var c in i.common.itemsMap)a[u+c]=!0;if(i.local&&i.local.itemsMap)for(var l in i.local.itemsMap)a[u+l]=!0;if(i.remote||m(u))r[u]=void 0;else if(r[u]=o.autoMerge(i),void 0===r[u]){var h=o.getParentPath(u),f=r[h],d=u.substring(e.length);f&&f.local&&(delete f.local.itemsMap[d],g(f.local.itemsMap,f.common.itemsMap)&&delete f.local);}}return o.deleteRemoteTrees(Object.keys(a),r).then((function(e){return o.rs.local.setNodes(o.flush(e))}))}))}},{key:"deleteRemoteTrees",value:function(e,t){var r=this;return 0===e.length?Promise.resolve(t):this.rs.local.getNodes(e).then((function(e){var n={},o=function(e,t){if(e&&e.itemsMap)for(var r in e.itemsMap)n[t+r]=!0;};for(var i in e){var s=e[i];s&&(m(i)?(o(s.common,i),o(s.local,i)):s.common&&void 0!==s.common.body&&(t[i]=v(s),t[i].remote={body:!1,timestamp:r.now()},t[i]=r.autoMerge(t[i])));}return r.deleteRemoteTrees(Object.keys(n),t).then((function(e){return r.rs.local.setNodes(r.flush(e))}))}))}},{key:"completeFetch",value:function(e,t,r,n){var o,i,s=this,a=b(e);return m(e)?o=[e]:(i=a[1],o=[e,i]),this.rs.local.getNodes(o).then((function(o){var a,u,l={},h=o[e],f=function(e){if(e&&e.itemsMap)for(a in e.itemsMap)t[a]||(l[a]=!0);};if("object"===c(h)&&h.path===e&&"object"===c(h.common)||(h={path:e,common:{}},o[e]=h),h.remote={revision:n,timestamp:s.now()},m(e))for(a in f(h.common),f(h.remote),h.remote.itemsMap={},t)h.remote.itemsMap[a]=!0;else h.remote.body=t,h.remote.contentType=r,(u=o[i])&&u.local&&u.local.itemsMap&&(a=e.substring(i.length),u.local.itemsMap[a]=!0,g(u.local.itemsMap,u.common.itemsMap)&&delete u.local);return o[e]=s.autoMerge(h),{toBeSaved:o,missingChildren:l}}))}},{key:"completePush",value:function(e,t,r,n){var o=this;return this.rs.local.getNodes([e]).then((function(i){var s=i[e];if(!s.push)throw o.stopped=!0,new Error("completePush called but no push version!");return r?(P("[Sync] We have a conflict"),s.remote&&s.remote.revision===n||(s.remote={revision:n||"conflict",timestamp:o.now()},delete s.push),i[e]=o.autoMerge(s)):(s.common={revision:n,timestamp:o.now()},"put"===t?(s.common.body=s.push.body,s.common.contentType=s.push.contentType,g(s.local.body,s.push.body)&&s.local.contentType===s.push.contentType&&delete s.local,delete s.push):"delete"===t&&(!1===s.local.body?i[e]=void 0:delete s.push)),o.rs.local.setNodes(o.flush(i))}))}},{key:"dealWithFailure",value:function(e){var t=this;return this.rs.local.getNodes([e]).then((function(r){if(r[e])return delete r[e].push,t.rs.local.setNodes(t.flush(r))}))}},{key:"interpretStatus",value:function(e){var t={statusCode:e,successful:void 0,conflict:void 0,unAuth:void 0,notFound:void 0,changed:void 0,networkProblems:void 0};if("offline"===e||"timeout"===e)return t.successful=!1,t.networkProblems=!0,t;var r=Math.floor(e/100);return t.successful=2===r||304===e||412===e||404===e,t.conflict=412===e,t.unAuth=401===e&&this.rs.remote.token!==E.IMPLIED_FAKE_TOKEN||402===e||403===e,t.notFound=404===e,t.changed=304!==e,t}},{key:"handleGetResponse",value:function(e,t,r,n,o){var i=this;return t.notFound&&(r=!!m(e)&&{}),t.changed?this.completeFetch(e,r,n,o).then((function(t){return m(e)?i.corruptServerItemsMap(r)?(P("[Sync] WARNING: Discarding corrupt folder description from server for "+e),!1):i.markChildren(e,r,t.toBeSaved,t.missingChildren).then((function(){return !0})):i.rs.local.setNodes(i.flush(t.toBeSaved)).then((function(){return !0}))})):this.updateCommonTimestamp(e,o).then((function(){return !0}))}},{key:"handleResponse",value:function(t,r,n){var o,i=this,s=this.interpretStatus(n.statusCode);if(s.successful){if("get"===r)return this.handleGetResponse(t,s,n.body,n.contentType,n.revision);if("put"===r||"delete"===r)return this.completePush(t,r,s.conflict,n.revision).then((function(){return !0}));throw new Error("cannot handle response for unknown action ".concat(r))}return o=s.unAuth?new E.Unauthorized:s.networkProblems?new e.SyncError("Network request failed."):new Error("HTTP response code "+s.statusCode+" received."),this.dealWithFailure(t).then((function(){throw i.rs._emit("error",o),o}))}},{key:"finishTask",value:function(e){var t=this;if(void 0!==e.action)return e.promise.then((function(r){return t.handleResponse(e.path,e.action,r)}),(function(r){return P("[Sync] wireclient rejects its promise!",e.path,e.action,r),t.handleResponse(e.path,e.action,{statusCode:"offline"})})).then((function(r){if(delete t._timeStarted[e.path],delete t._running[e.path],r&&t._tasks[e.path]){for(var n=0;n<t._tasks[e.path].length;n++)t._tasks[e.path][n]();delete t._tasks[e.path];}t.rs._emit("sync-req-done"),t.collectTasks(!1).then((function(){!t.hasTasks()||t.stopped?(P("[Sync] Sync is done! Reschedule?",Object.getOwnPropertyNames(t._tasks).length,t.stopped),t.done||(t.done=!0,t.rs._emit("sync-done"))):setTimeout((function(){t.doTasks();}),10);}));}),(function(r){P("[Sync] Error",r),delete t._timeStarted[e.path],delete t._running[e.path],t.rs._emit("sync-req-done"),t.done||(t.done=!0,t.rs._emit("sync-done"));}));delete this._running[e.path];}},{key:"doTasks",value:function(){var e,t,r=0;if((e=(this.rs.remote.connected?this.rs.remote.online?this.numThreads:1:0)-Object.getOwnPropertyNames(this._running).length)<=0)return !0;for(t in this._tasks)if(!this._running[t]&&(this._timeStarted[t]=this.now(),this._running[t]=this.doTask(t),this._running[t].then(this.finishTask.bind(this)),++r>=e))return !0;return r>=e}},{key:"collectTasks",value:function(e){var t=this;return this.hasTasks()||this.stopped?Promise.resolve():this.collectDiffTasks().then((function(r){return r||!1===e?Promise.resolve():t.collectRefreshTasks()}),(function(e){throw e}))}},{key:"addTask",value:function(e,t){this._tasks[e]||(this._tasks[e]=[]),"function"==typeof t&&this._tasks[e].push(t);}},{key:"sync",value:function(){var e=this;return this.done=!1,this.doTasks()?Promise.resolve():this.collectTasks().then((function(){try{e.doTasks();}catch(e){P("[Sync] doTasks error",e);}}),(function(e){throw P("[Sync] Sync error",e),new Error("Local cache unavailable")}))}}])&&h(t.prototype,r),n&&h(t,n),e}();k.SyncError=function(e){function t(e){var r;l(this,t),(r=n(this,u(t).call(this))).name="SyncError";var o="Sync failed: ";return "object"===c(e)&&"message"in e?(o+=e.message,r.stack=e.stack,r.originalError=e):o+=e,r.message=o,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t);}(t,e),t}(o(Error)),e.exports=k;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=r(0),i=r(3),s=r(1),a=o.isFolder,u=o.isDocument,c=o.deepClone;function l(e){if("object"===n(e)&&"string"==typeof e.path)if(a(e.path)){if(e.local&&e.local.itemsMap)return e.local;if(e.common&&e.common.itemsMap)return e.common}else{if(e.local){if(e.local.body&&e.local.contentType)return e.local;if(!1===e.local.body)return}if(e.common&&e.common.body&&e.common.contentType)return e.common;if(e.body&&e.contentType)return {body:e.body,contentType:e.contentType}}}function h(e,t){var r;for(r in e){if(e[r]&&e[r].remote)return !0;var n=l(e[r]);if(n&&n.timestamp&&(new Date).getTime()-n.timestamp<=t)return !1;if(!n)return !0}return !0}var f=o.pathsFromRoot;function d(e){var t={path:e,common:{}};return a(e)&&(t.common.itemsMap={}),t}function p(e,t){return e.common||(e.common={itemsMap:{}}),e.common.itemsMap||(e.common.itemsMap={}),e.local||(e.local=c(e.common)),e.local.itemsMap||(e.local.itemsMap=e.common.itemsMap),e.local.itemsMap[t]=!0,e}var m={get:function(e,t,r){return "number"==typeof t?this.getNodes(f(e)).then((function(n){var o=l(n[e]);return h(n,t)?r(e):o?{statusCode:200,body:o.body||o.itemsMap,contentType:o.contentType}:{statusCode:404}})):this.getNodes([e]).then((function(t){var r=l(t[e]);if(r){if(a(e))for(var n in r.itemsMap)r.itemsMap.hasOwnProperty(n)&&!1===r.itemsMap[n]&&delete r.itemsMap[n];return {statusCode:200,body:r.body||r.itemsMap,contentType:r.contentType}}return {statusCode:404}}))},put:function(e,t,r){var n=f(e);return this._updateNodes(n,(function(e,n){try{for(var o=0,i=e.length;o<i;o++){var a=e[o],u=n[a],c=void 0;if(u||(n[a]=u=d(a)),0===o)c=l(u),u.local={body:t,contentType:r,previousBody:c?c.body:void 0,previousContentType:c?c.contentType:void 0};else u=p(u,e[o-1].substring(a.length));}return n}catch(e){throw s("[Cachinglayer] Error during PUT",n,e),e}}))},delete:function(e){var t=f(e);return this._updateNodes(t,(function(e,t){for(var r=0,n=e.length;r<n;r++){var o=e[r],i=t[o],s=void 0;if(i)if(0===r)s=l(i),i.local={body:!1,previousBody:s?s.body:void 0,previousContentType:s?s.contentType:void 0};else{i.local||(i.local=c(i.common));var a=e[r-1].substring(o.length);if(delete i.local.itemsMap[a],Object.getOwnPropertyNames(i.local.itemsMap).length>0)break}else console.error("Cannot delete non-existing node "+o);}return t}))},flush:function(e){var t=this;return t._getAllDescendentPaths(e).then((function(e){return t.getNodes(e)})).then((function(e){for(var r in e){var n=e[r];n&&n.common&&n.local&&t._emitChange({path:n.path,origin:"local",oldValue:!1===n.local.body?void 0:n.local.body,newValue:!1===n.common.body?void 0:n.common.body}),e[r]=void 0;}return t.setNodes(e)}))},_emitChange:function(e){i.changeEvents[e.origin]&&this._emit("change",e);},fireInitial:function(){if(i.changeEvents.local){var e=this;e.forAllNodes((function(t){var r;u(t.path)&&(r=l(t))&&e._emitChange({path:t.path,origin:"local",oldValue:void 0,oldContentType:void 0,newValue:r.body,newContentType:r.contentType});})).then((function(){e._emit("local-events-done");}));}},onDiff:function(e){this.diffHandler=e;},migrate:function(e){return "object"!==n(e)||e.common||(e.common={},"string"==typeof e.path?"/"===e.path.substr(-1)&&"object"===n(e.body)&&(e.common.itemsMap=e.body):(e.local||(e.local={}),e.local.body=e.body,e.local.contentType=e.contentType)),e},_updateNodesRunning:!1,_updateNodesQueued:[],_updateNodes:function(e,t){return new Promise(function(r,n){this._doUpdateNodes(e,t,{resolve:r,reject:n});}.bind(this))},_doUpdateNodes:function(e,t,r){var n=this;n._updateNodesRunning?n._updateNodesQueued.push({paths:e,cb:t,promise:r}):(n._updateNodesRunning=!0,n.getNodes(e).then((function(i){var s,a=c(i),l=[],h=o.equal;for(var f in i=t(e,i))h(s=i[f],a[f])?delete i[f]:u(f)&&(h(s.local.body,s.local.previousBody)&&s.local.contentType===s.local.previousContentType||l.push({path:f,origin:"window",oldValue:s.local.previousBody,newValue:!1===s.local.body?void 0:s.local.body,oldContentType:s.local.previousContentType,newContentType:s.local.contentType}),delete s.local.previousBody,delete s.local.previousContentType);n.setNodes(i).then((function(){n._emitChangeEvents(l),r.resolve({statusCode:200});}));})).then((function(){return Promise.resolve()}),(function(e){r.reject(e);})).then((function(){n._updateNodesRunning=!1;var e=n._updateNodesQueued.shift();e&&n._doUpdateNodes(e.paths,e.cb,e.promise);})));},_emitChangeEvents:function(e){for(var t=0,r=e.length;t<r;t++)this._emitChange(e[t]),this.diffHandler&&this.diffHandler(e[t].path);},_getAllDescendentPaths:function(e){var t=this;return a(e)?t.getNodes([e]).then((function(r){var n=[e],o=l(r[e]),i=Object.keys(o.itemsMap).map((function(r){return t._getAllDescendentPaths(e+r).then((function(e){for(var t=0,r=e.length;t<r;t++)n.push(e[t]);}))}));return Promise.all(i).then((function(){return n}))})):Promise.resolve([e])},_getInternals:function(){return {getLatest:l,makeNode:d,isOutdated:h}}};e.exports=function(e){for(var t in m)e[t]=m[t];};},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o,i=r(0),s=r(11),a=r(13),u=r(14),c=r(5),l=r(3),h=r(4),f=r(7),d=r(1),p=r(27),m=i.getGlobalContext(),y=r(2),g=i.getJSONFromLocalStorage;function v(e){return 403!==e.statusCode&&401!==e.statusCode||this._emit("error",new h.Unauthorized),Promise.resolve(e)}var b=function(e){"object"===n(e)&&i.extend(l,e),y(this,"ready","authing","connecting","connected","disconnected","not-connected","conflict","error","features-loaded","sync-interval-change","sync-req-done","sync-done","wire-busy","wire-done","network-offline","network-online"),this._pending=[],this._setGPD({get:this._pendingGPD("get"),put:this._pendingGPD("put"),delete:this._pendingGPD("delete")}),this._cleanups=[],this._pathHandlers={change:{}},this.apiKeys={},(o=i.localStorageAvailable())&&(this.apiKeys=g("remotestorage:api-keys")||{},this.setBackend(localStorage.getItem("remotestorage:backend")||"remotestorage"));var t=this.on;this.on=function(e,r){if(this._allLoaded)switch(e){case"features-loaded":setTimeout(r,0);break;case"ready":this.remote&&setTimeout(r,0);break;case"connected":this.remote&&this.remote.connected&&setTimeout(r,0);break;case"not-connected":this.remote&&!this.remote.connected&&setTimeout(r,0);}return t.call(this,e,r)},this._init(),this.fireInitial=function(){this.local&&setTimeout(this.local.fireInitial.bind(this.local),0);}.bind(this),this.on("ready",this.fireInitial.bind(this)),this.loadModules();};function _(e){return "number"==typeof e&&e>1e3&&e<36e5}b.Authorize=h,b.SyncError=f.SyncError,b.Unauthorized=h.Unauthorized,b.DiscoveryError=u.DiscoveryError,b.prototype={loadModules:function(){l.modules.forEach(this.addModule.bind(this));},authorize:function(e){this.access.setStorageType(this.remote.storageApi),void 0===e.scope&&(e.scope=this.access.scopeParameter),e.redirectUri=m.cordova?l.cordovaRedirectUri:String(h.getLocation()),void 0===e.clientId&&(e.clientId=e.redirectUri.match(/^(https?:\/\/[^/]+)/)[0]),h(this,e);},impliedauth:function(e,t){e=this.remote.storageApi,t=String(document.location),d("ImpliedAuth proceeding due to absent authURL; storageApi = "+e+" redirectUri = "+t),this.remote.configure({token:h.IMPLIED_FAKE_TOKEN}),document.location=t;},connect:function(e,t){var r=this;if(this.setBackend("remotestorage"),e.indexOf("@")<0)this._emit("error",new b.DiscoveryError("User address doesn't contain an @."));else{if(m.cordova){if("string"!=typeof l.cordovaRedirectUri)return void this._emit("error",new b.DiscoveryError("Please supply a custom HTTPS redirect URI for your Cordova app"));if(!m.cordova.InAppBrowser)return void this._emit("error",new b.DiscoveryError("Please include the InAppBrowser Cordova plugin to enable OAuth"))}this.remote.configure({userAddress:e}),this._emit("connecting");var n=setTimeout(function(){this._emit("error",new b.DiscoveryError("No storage information found for this user address."));}.bind(this),l.discoveryTimeout);u(e).then((function(o){if(clearTimeout(n),r._emit("authing"),o.userAddress=e,r.remote.configure(o),!r.remote.connected)if(o.authURL)if(void 0===t)r.authorize({authURL:o.authURL});else{if("string"!=typeof t)throw new Error("Supplied bearer token must be a string");d("Skipping authorization sequence and connecting with known token"),r.remote.configure({token:t});}else r.impliedauth();}),(function(){clearTimeout(n),r._emit("error",new b.DiscoveryError("No storage information found for this user address."));}));}},reconnect:function(){this.remote.configure({token:null}),"remotestorage"===this.backend?this.connect(this.remote.userAddress):this.remote.connect();},disconnect:function(){this.remote&&this.remote.configure({userAddress:null,href:null,storageApi:null,token:null,properties:null}),this._setGPD({get:this._pendingGPD("get"),put:this._pendingGPD("put"),delete:this._pendingGPD("delete")});var e=this._cleanups.length,t=0,r=function(){++t>=e&&(this._init(),d("Done cleaning up, emitting disconnected and disconnect events"),this._emit("disconnected"));}.bind(this);e>0?this._cleanups.forEach(function(e){var t=e(this);"object"===n(t)&&"function"==typeof t.then?t.then(r):r();}.bind(this)):r();},setBackend:function(e){this.backend=e,o&&(e?localStorage.setItem("remotestorage:backend",e):localStorage.removeItem("remotestorage:backend"));},onChange:function(e,t){this._pathHandlers.change[e]||(this._pathHandlers.change[e]=[]),this._pathHandlers.change[e].push(t);},enableLog:function(){l.logging=!0;},disableLog:function(){l.logging=!1;},log:function(){d.apply(b,arguments);},setApiKeys:function(e){var t=this,r=["googledrive","dropbox"];if("object"!==n(e)||!Object.keys(e).every((function(e){return r.includes(e)})))return console.error("setApiKeys() was called with invalid arguments"),!1;Object.keys(e).forEach((function(r){var n=e[r];if(n){switch(r){case"dropbox":t.apiKeys.dropbox={appKey:n},void 0!==t.dropbox&&t.dropbox.clientId===n||s._rs_init(t);break;case"googledrive":t.apiKeys.googledrive={clientId:n},void 0!==t.googledrive&&t.googledrive.clientId===n||a._rs_init(t);}return !0}delete t.apiKeys[r];})),o&&localStorage.setItem("remotestorage:api-keys",JSON.stringify(this.apiKeys));},setCordovaRedirectUri:function(e){if("string"!=typeof e||!e.match(/http(s)?:\/\//))throw new Error("Cordova redirect URI must be a URI string");l.cordovaRedirectUri=e;},_init:p.loadFeatures,features:p.features,loadFeature:p.loadFeature,featureSupported:p.featureSupported,featureDone:p.featureDone,featuresDone:p.featuresDone,featuresLoaded:p.featuresLoaded,featureInitialized:p.featureInitialized,featureFailed:p.featureFailed,hasFeature:p.hasFeature,_setCachingModule:p._setCachingModule,_collectCleanupFunctions:p._collectCleanupFunctions,_fireReady:p._fireReady,initFeature:p.initFeature,_setGPD:function(e,t){function r(e){return function(){return e.apply(t,arguments).then(v.bind(this))}}this.get=r(e.get),this.put=r(e.put),this.delete=r(e.delete);},_pendingGPD:function(e){return function(){var t=Array.prototype.slice.call(arguments);return new Promise(function(r,n){this._pending.push({method:e,args:t,promise:{resolve:r,reject:n}});}.bind(this))}.bind(this)},_processPending:function(){this._pending.forEach(function(e){try{this[e.method].apply(this,e.args).then(e.promise.resolve,e.promise.reject);}catch(t){e.promise.reject(t);}}.bind(this)),this._pending=[];},_bindChange:function(e){e.on("change",this._dispatchEvent.bind(this,"change"));},_dispatchEvent:function(e,t){var r=this;Object.keys(this._pathHandlers[e]).forEach((function(n){var o=n.length;t.path.substr(0,o)===n&&r._pathHandlers[e][n].forEach((function(e){var o={};for(var i in t)o[i]=t[i];o.relativePath=t.path.replace(new RegExp("^"+n),"");try{e(o);}catch(e){console.error("'change' handler failed: ",e,e.stack),r._emit("error",e);}}));}));},scope:function(e){if("string"!=typeof e)throw"Argument 'path' of baseClient.scope must be a string";if(!this.access.checkPathPermission(e,"r")){var t=e.replace(/(['\\])/g,"\\$1");console.warn("WARNING: please call remoteStorage.access.claim('"+t+"', 'r') (read only) or remoteStorage.access.claim('"+t+"', 'rw') (read/write) first");}return new c(this,e)},getSyncInterval:function(){return l.syncInterval},setSyncInterval:function(e){if(!_(e))throw e+" is not a valid sync interval";var t=l.syncInterval;l.syncInterval=parseInt(e,10),this._emit("sync-interval-change",{oldValue:t,newValue:e});},getBackgroundSyncInterval:function(){return l.backgroundSyncInterval},setBackgroundSyncInterval:function(e){if(!_(e))throw e+" is not a valid sync interval";var t=l.backgroundSyncInterval;l.backgroundSyncInterval=parseInt(e,10),this._emit("sync-interval-change",{oldValue:t,newValue:e});},getCurrentSyncInterval:function(){return l.isBackground?l.backgroundSyncInterval:l.syncInterval},getRequestTimeout:function(){return l.requestTimeout},setRequestTimeout:function(e){l.requestTimeout=parseInt(e,10);},syncCycle:function(){this.sync&&!this.sync.stopped&&(this.on("sync-done",function(){d("[Sync] Sync done. Setting timer to",this.getCurrentSyncInterval()),this.sync&&!this.sync.stopped&&(this._syncTimer&&(clearTimeout(this._syncTimer),this._syncTimer=void 0),this._syncTimer=setTimeout(this.sync.sync.bind(this.sync),this.getCurrentSyncInterval()));}.bind(this)),this.sync.sync());},startSync:function(){return l.cache?(this.sync.stopped=!1,this.syncStopped=!1,this.sync.sync()):(console.warn("Nothing to sync, because caching is disabled."),Promise.resolve())},stopSync:function(){clearTimeout(this._syncTimer),this._syncTimer=void 0,this.sync?(d("[Sync] Stopping sync"),this.sync.stopped=!0):(d("[Sync] Will instantiate sync stopped"),this.syncStopped=!0);}},b.util=i,Object.defineProperty(b.prototype,"connected",{get:function(){return this.remote.connected}});var w=r(15);Object.defineProperty(b.prototype,"access",{get:function(){var e=new w;return Object.defineProperty(this,"access",{value:e}),e},configurable:!0});var P=r(16);Object.defineProperty(b.prototype,"caching",{configurable:!0,get:function(){var e=new P;return Object.defineProperty(this,"caching",{value:e}),e}}),e.exports=b,r(32);},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")();}catch(e){"object"==typeof window&&(r=window);}e.exports=r;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o,i=r(4),s=r(5),a=r(6),u=r(0),c=r(2),l=r(24),h=r(7),f="remotestorage:dropbox",d=u.isFolder,p=u.cleanPath,m=u.shouldBeTreatedAsBinary,y=u.getJSONFromLocalStorage,g=u.getTextFromArrayBuffer,v=function(e){return p("/remotestorage/"+e).replace(/\/$/,"")},b=function(e,t){return new RegExp("^"+t.join("\\/")+"(\\/|$)").test(e.error_summary)},_=function(e){return e instanceof ArrayBuffer||a.isArrayBufferView(e)},w=function(e){if(this.rs=e,this.connected=!1,this.rs=e,this._initialFetchDone=!1,c(this,"connected","not-connected"),this.clientId=e.apiKeys.dropbox.appKey,this._revCache=new l("rev"),this._fetchDeltaCursor=null,this._fetchDeltaPromise=null,this._itemRefs={},o=u.localStorageAvailable()){var t=y(f);t&&this.configure(t),this._itemRefs=y("".concat(f,":shares"))||{};}this.connected&&setTimeout(this._emit.bind(this),0,"connected");};function P(e){e._dropboxOrigSync||(e._dropboxOrigSync=e.sync.sync.bind(e.sync),e.sync.sync=function(){return this.dropbox.fetchDelta.apply(this.dropbox,arguments).then(e._dropboxOrigSync,(function(t){e._emit("error",new h.SyncError(t)),e._emit("sync-done");}))}.bind(e));}function E(e){e._dropboxOrigSyncCycle&&(e.syncCycle=e._dropboxOrigSyncCycle,delete e._dropboxOrigSyncCycle);}function S(e){!function(e){e._origRemote||(e._origRemote=e.remote,e.remote=e.dropbox);}(e),e.sync?P(e):function(e){var t=arguments;e._dropboxOrigSyncCycle||(e._dropboxOrigSyncCycle=e.syncCycle,e.syncCycle=function(){if(!e.sync)throw new Error("expected sync to be initialized by now");P(e),e._dropboxOrigSyncCycle(t),E(e);});}(e),function(e){e._origBaseClientGetItemURL||(e._origBaseClientGetItemURL=s.prototype.getItemURL,s.prototype.getItemURL=function(){throw new Error("getItemURL is not implemented for Dropbox yet")});}(e);}function T(e){!function(e){e._origRemote&&(e.remote=e._origRemote,delete e._origRemote);}(e),function(e){e._dropboxOrigSync&&(e.sync.sync=e._dropboxOrigSync,delete e._dropboxOrigSync);}(e),function(e){e._origBaseClientGetItemURL&&(s.prototype.getItemURL=e._origBaseClientGetItemURL,delete e._origBaseClientGetItemURL);}(e),E(e);}w.prototype={online:!0,connect:function(){this.rs.setBackend("dropbox"),this.token?S(this.rs):this.rs.authorize({authURL:"https://www.dropbox.com/oauth2/authorize",scope:"",clientId:this.clientId});},configure:function(e){void 0!==e.userAddress&&(this.userAddress=e.userAddress),void 0!==e.token&&(this.token=e.token);var t=function(){o&&localStorage.setItem(f,JSON.stringify({userAddress:this.userAddress,token:this.token}));},r=function(){this.connected=!1,o&&localStorage.removeItem(f);};this.token?(this.connected=!0,this.userAddress?(this._emit("connected"),t.apply(this)):this.info().then(function(e){this.userAddress=e.email,this._emit("connected"),t.apply(this);}.bind(this)).catch(function(){r.apply(this),this.rs._emit("error",new Error("Could not fetch user info."));}.bind(this))):r.apply(this);},stopWaitingForToken:function(){this.connected||this._emit("not-connected");},_getFolder:function(e){var t=this._revCache,r=this,n=function(n){var i,s;if(200!==n.status&&409!==n.status)return Promise.reject("Unexpected response status: "+n.status);try{i=JSON.parse(n.responseText);}catch(e){return Promise.reject(e)}return 409===n.status?b(i,["path","not_found"])?Promise.resolve({}):Promise.reject(new Error("API returned an error: "+i.error_summary)):(s=i.entries.reduce((function(n,o){var i="folder"===o[".tag"],s=o.path_lower.split("/").slice(-1)[0]+(i?"/":"");return i?n[s]={ETag:t.get(e+s)}:(n[s]={ETag:o.rev},r._revCache.set(e+s,o.rev)),n}),{}),i.has_more?o(i.cursor).then((function(e){return Object.assign(s,e)})):Promise.resolve(s))},o=function(e){var t={body:{cursor:e}};return r._request("POST","https://api.dropboxapi.com/2/files/list_folder/continue",t).then(n)};return this._request("POST","https://api.dropboxapi.com/2/files/list_folder",{body:{path:v(e)}}).then(n).then((function(r){return Promise.resolve({statusCode:200,body:r,contentType:"application/json; charset=UTF-8",revision:t.get(e)})}))},get:function(e,t){var r=this;if(!this.connected)return Promise.reject("not connected (path: "+e+")");var n=this,o=this._revCache.get(e);if(null===o)return Promise.resolve({statusCode:404});if(t&&t.ifNoneMatch){if(!this._initialFetchDone)return this.fetchDelta().then((function(){return r.get(e,t)}));if(o&&o===t.ifNoneMatch)return Promise.resolve({statusCode:304})}if("/"===e.substr(-1))return this._getFolder(e,t);var i={headers:{"Dropbox-API-Arg":JSON.stringify({path:v(e)})},responseType:"arraybuffer"};return t&&t.ifNoneMatch&&(i.headers["If-None-Match"]=t.ifNoneMatch),this._request("GET","https://content.dropboxapi.com/2/files/download",i).then((function(t){var r,o,i,s,a=t.status;return 200!==a&&409!==a?Promise.resolve({statusCode:a}):(r=t.getResponseHeader("Dropbox-API-Result"),g(t.response,"UTF-8").then((function(u){o=u,409===a&&(r=o);try{r=JSON.parse(r);}catch(e){return Promise.reject(e)}if(409===a)return b(r,["path","not_found"])?{statusCode:404}:Promise.reject(new Error('API error while downloading file ("'+e+'"): '+r.error_summary));if(i=t.getResponseHeader("Content-Type"),s=r.rev,n._revCache.set(e,s),n._shareIfNeeded(e),m(u,i))o=t.response;else try{o=JSON.parse(o),i="application/json; charset=UTF-8";}catch(e){}return {statusCode:a,body:o,contentType:i,revision:s}})))}))},put:function(e,t,r,n){var o=this;if(!this.connected)throw new Error("not connected (path: "+e+")");var i=this._revCache.get(e);if(n&&n.ifMatch&&i&&i!==n.ifMatch)return Promise.resolve({statusCode:412,revision:i});if(n&&"*"===n.ifNoneMatch&&i&&"rev"!==i)return Promise.resolve({statusCode:412,revision:i});if(!r.match(/charset=/)&&_(t)&&(r+="; charset=binary"),t.length>157286400)return Promise.reject(new Error("Cannot upload file larger than 150MB"));var s=n&&(n.ifMatch||"*"===n.ifNoneMatch),a={body:t,contentType:r,path:e};return (s?this._getMetadata(e).then((function(e){return n&&"*"===n.ifNoneMatch&&e?Promise.resolve({statusCode:412,revision:e.rev}):n&&n.ifMatch&&e&&e.rev!==n.ifMatch?Promise.resolve({statusCode:412,revision:e.rev}):o._uploadSimple(a)})):o._uploadSimple(a)).then((function(t){return o._shareIfNeeded(e),t}))},delete:function(e,t){var r=this;if(!this.connected)throw new Error("not connected (path: "+e+")");var n=this._revCache.get(e);return t&&t.ifMatch&&n&&t.ifMatch!==n?Promise.resolve({statusCode:412,revision:n}):t&&t.ifMatch?this._getMetadata(e).then((function(n){return t&&t.ifMatch&&n&&n.rev!==t.ifMatch?Promise.resolve({statusCode:412,revision:n.rev}):r._deleteSimple(e)})):this._deleteSimple(e)},_shareIfNeeded:function(e){e.match(/^\/public\/.*[^/]$/)&&void 0===this._itemRefs[e]&&this.share(e);},share:function(e){var t=this,r={body:{path:v(e)}};return this._request("POST","https://api.dropboxapi.com/2/sharing/create_shared_link_with_settings",r).then((function(r){if(200!==r.status&&409!==r.status)return Promise.reject(new Error("Invalid response status:"+r.status));var n;try{n=JSON.parse(r.responseText);}catch(e){return Promise.reject(new Error("Invalid response body: "+r.responseText))}return 409===r.status?b(n,["shared_link_already_exists"])?t._getSharedLink(e):Promise.reject(new Error("API error: "+n.error_summary)):Promise.resolve(n.url)})).then((function(r){return t._itemRefs[e]=r,o&&localStorage.setItem(f+":shares",JSON.stringify(t._itemRefs)),Promise.resolve(r)}),(function(t){return t.message='Sharing Dropbox file or folder ("'+e+'") failed: '+t.message,Promise.reject(t)}))},info:function(){return this._request("POST","https://api.dropboxapi.com/2/users/get_current_account",{}).then((function(e){var t=e.responseText;try{t=JSON.parse(t);}catch(e){return Promise.reject(new Error("Could not query current account info: Invalid API response: "+t))}return Promise.resolve({email:t.email})}))},_request:function(e,t,r){var o=this;return r.headers||(r.headers={}),r.headers.Authorization="Bearer "+this.token,"object"!==n(r.body)||_(r.body)||(r.body=JSON.stringify(r.body),r.headers["Content-Type"]="application/json; charset=UTF-8"),this.rs._emit("wire-busy",{method:e,isFolder:d(t)}),a.request.call(this,e,t,r).then((function(n){return n&&503===n.status?(o.online&&(o.online=!1,o.rs._emit("network-offline")),setTimeout(o._request(e,t,r),3210)):(o.online||(o.online=!0,o.rs._emit("network-online")),o.rs._emit("wire-done",{method:e,isFolder:d(t),success:!0}),Promise.resolve(n))}),(function(r){return o.online&&(o.online=!1,o.rs._emit("network-offline")),o.rs._emit("wire-done",{method:e,isFolder:d(t),success:!1}),Promise.reject(r)}))},fetchDelta:function(){var e=this;if(this._fetchDeltaPromise)return this._fetchDeltaPromise;var t=Array.prototype.slice.call(arguments),r=this,o=function e(n){var o,s="https://api.dropboxapi.com/2/files/list_folder";return "string"==typeof n?(s+="/continue",o={cursor:n}):o={path:"/remotestorage",recursive:!0,include_deleted:!0},r._request("POST",s,{body:o}).then((function(o){if(401===o.status)return r.rs._emit("error",new i.Unauthorized),Promise.resolve(t);if(200!==o.status&&409!==o.status)return Promise.reject(new Error("Invalid response status: "+o.status));var s;try{s=JSON.parse(o.responseText);}catch(e){return Promise.reject(new Error("Invalid response body: "+o.responseText))}if(409===o.status){if(!b(s,["path","not_found"]))return Promise.reject(new Error("API returned an error: "+s.error_summary));s={cursor:null,entries:[],has_more:!1};}if(n||r._revCache.deactivatePropagation(),s.entries.forEach((function(e){var t=e.path_lower.substr("/remotestorage".length);"deleted"===e[".tag"]?(r._revCache.delete(t),r._revCache.delete(t+"/")):"file"===e[".tag"]&&r._revCache.set(t,e.rev);})),r._fetchDeltaCursor=s.cursor,s.has_more)return e(s.cursor);r._revCache.activatePropagation(),r._initialFetchDone=!0;})).catch((function(e){return "timeout"===e||e instanceof ProgressEvent?Promise.resolve():Promise.reject(e)}))};return this._fetchDeltaPromise=o(r._fetchDeltaCursor).catch((function(t){return "object"===n(t)&&"message"in t?t.message="Dropbox: fetchDelta: "+t.message:t="Dropbox: fetchDelta: ".concat(t),e._fetchDeltaPromise=null,Promise.reject(t)})).then((function(){return e._fetchDeltaPromise=null,Promise.resolve(t)})),this._fetchDeltaPromise},_getMetadata:function(e){var t={path:v(e)};return this._request("POST","https://api.dropboxapi.com/2/files/get_metadata",{body:t}).then((function(e){if(200!==e.status&&409!==e.status)return Promise.reject(new Error("Invalid response status:"+e.status));var t;try{t=JSON.parse(e.responseText);}catch(t){return Promise.reject(new Error("Invalid response body: "+e.responseText))}return 409===e.status?b(t,["path","not_found"])?Promise.resolve():Promise.reject(new Error("API error: "+t.error_summary)):Promise.resolve(t)})).then(void 0,(function(t){return t.message='Could not load metadata for file or folder ("'+e+'"): '+t.message,Promise.reject(t)}))},_uploadSimple:function(e){var t=this,r={path:v(e.path),mode:{".tag":"overwrite"},mute:!0};return e.ifMatch&&(r.mode={".tag":"update",update:e.ifMatch}),this._request("POST","https://content.dropboxapi.com/2/files/upload",{body:e.body,headers:{"Content-Type":"application/octet-stream","Dropbox-API-Arg":JSON.stringify(r)}}).then((function(r){if(200!==r.status&&409!==r.status)return Promise.resolve({statusCode:r.status});var n=r.responseText;try{n=JSON.parse(n);}catch(e){return Promise.reject(new Error("Invalid API result: "+n))}return 409===r.status?b(n,["path","conflict"])?t._getMetadata(e.path).then((function(e){return Promise.resolve({statusCode:412,revision:e.rev})})):Promise.reject(new Error("API error: "+n.error_summary)):(t._revCache.set(e.path,n.rev),Promise.resolve({statusCode:r.status,revision:n.rev}))}))},_deleteSimple:function(e){var t=this,r={path:v(e)};return this._request("POST","https://api.dropboxapi.com/2/files/delete",{body:r}).then((function(e){if(200!==e.status&&409!==e.status)return Promise.resolve({statusCode:e.status});var t=e.responseText;try{t=JSON.parse(t);}catch(e){return Promise.reject(new Error("Invalid response body: "+t))}return 409===e.status?b(t,["path_lookup","not_found"])?Promise.resolve({statusCode:404}):Promise.reject(new Error("API error: "+t.error_summary)):Promise.resolve({statusCode:200})})).then((function(r){return 200!==r.statusCode&&404!==r.statusCode||(t._revCache.delete(e),delete t._itemRefs[e]),Promise.resolve(r)}),(function(t){return t.message='Could not delete Dropbox file or folder ("'+e+'"): '+t.message,Promise.reject(t)}))},_getSharedLink:function(e){var t={body:{path:v(e),direct_only:!0}};return this._request("POST","https://api.dropbox.com/2/sharing/list_shared_links",t).then((function(e){if(200!==e.status&&409!==e.status)return Promise.reject(new Error("Invalid response status: "+e.status));var t;try{t=JSON.parse(e.responseText);}catch(t){return Promise.reject(new Error("Invalid response body: "+e.responseText))}return 409===e.status?Promise.reject(new Error("API error: "+e.error_summary)):t.links.length?Promise.resolve(t.links[0].url):Promise.reject(new Error("No links returned"))}),(function(t){return t.message='Could not get link to a shared file or folder ("'+e+'"): '+t.message,Promise.reject(t)}))}},w._rs_init=function(e){o=u.localStorageAvailable(),e.apiKeys.dropbox&&(e.dropbox=new w(e)),"dropbox"===e.backend&&S(e);},w._rs_supported=function(){return !0},w._rs_cleanup=function(e){T(e),o&&localStorage.removeItem(f),e.setBackend(void 0);},e.exports=w;},function(e,t,r){var n=r(2),o="undefined"!=typeof window?"browser":"node",i={},s=function(){return i};s.isBrowser=function(){return "browser"===o},s.isNode=function(){return "node"===o},s.goBackground=function(){s._emit("background");},s.goForeground=function(){s._emit("foreground");},s._rs_init=function(){function e(){document[i.hiddenProperty]?s.goBackground():s.goForeground();}n(s,"background","foreground"),"browser"===o&&(void 0!==document.hidden?(i.hiddenProperty="hidden",i.visibilityChangeEvent="visibilitychange"):void 0!==document.mozHidden?(i.hiddenProperty="mozHidden",i.visibilityChangeEvent="mozvisibilitychange"):void 0!==document.msHidden?(i.hiddenProperty="msHidden",i.visibilityChangeEvent="msvisibilitychange"):void 0!==document.webkitHidden&&(i.hiddenProperty="webkitHidden",i.visibilityChangeEvent="webkitvisibilitychange"),document.addEventListener(i.visibilityChangeEvent,e,!1),e());},s._rs_cleanup=function(){},e.exports=s;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o,i=r(5),s=r(6),a=r(2),u=r(0),c="https://www.googleapis.com",l="remotestorage:googledrive",h=u.isFolder,f=u.cleanPath,d=u.shouldBeTreatedAsBinary,p=u.getJSONFromLocalStorage,m=u.getTextFromArrayBuffer;function y(e){return "/"===e.substr(-1)&&(e=e.substr(0,e.length-1)),decodeURIComponent(e)}function g(e){return e.replace(/[^\/]+\/?$/,"")}function v(e){var t=e.split("/");return "/"===e.substr(-1)?t[t.length-2]+"/":t[t.length-1]}function b(e){return f("".concat("/remotestorage","/").concat(e))}function _(e){return e.replace(/^["'](.*)["']$/,"$1")}var w=function(e){this.maxAge=e,this._items={};};w.prototype={get:function(e){var t=this._items[e],r=(new Date).getTime();return t&&t.t>=r-this.maxAge?t.v:void 0},set:function(e,t){this._items[e]={v:t,t:(new Date).getTime()};}};var P=function(e,t){if(a(this,"connected","not-connected"),this.rs=e,this.clientId=t,this._fileIdCache=new w(300),o=u.localStorageAvailable()){var r=p(l);r&&this.configure(r);}};P.prototype={connected:!1,online:!0,configure:function(e){var t=this;void 0!==e.userAddress&&(this.userAddress=e.userAddress),void 0!==e.token&&(this.token=e.token);var r=function(){o&&localStorage.setItem(l,JSON.stringify({userAddress:this.userAddress,token:this.token}));},n=function(){this.connected=!1,delete this.token,o&&localStorage.removeItem(l);};this.token?(this.connected=!0,this.userAddress?(this._emit("connected"),r.apply(this)):this.info().then((function(e){t.userAddress=e.user.emailAddress,t._emit("connected"),r.apply(t);})).catch((function(){n.apply(t),t.rs._emit("error",new Error("Could not fetch user info."));}))):n.apply(this);},connect:function(){this.rs.setBackend("googledrive"),this.rs.authorize({authURL:"https://accounts.google.com/o/oauth2/auth",scope:"https://www.googleapis.com/auth/drive",clientId:this.clientId});},stopWaitingForToken:function(){this.connected||this._emit("not-connected");},get:function(e,t){return "/"===e.substr(-1)?this._getFolder(b(e),t):this._getFile(b(e),t)},put:function(e,t,r,n){var o=this,i=b(e);function s(e){if(e.status>=200&&e.status<300){var t=JSON.parse(e.responseText),r=_(t.etag);return Promise.resolve({statusCode:200,contentType:t.mimeType,revision:r})}return 412===e.status?Promise.resolve({statusCode:412,revision:"conflict"}):Promise.reject("PUT failed with status "+e.status+" ("+e.responseText+")")}return this._getFileId(i).then((function(e){return e?n&&"*"===n.ifNoneMatch?s({status:412}):o._updateFile(e,i,t,r,n).then(s):o._createFile(i,t,r,n).then(s)}))},delete:function(e,t){var r=this,o=b(e);return this._getFileId(o).then((function(e){return e?r._getMeta(e).then((function(o){var i;return "object"===n(o)&&"string"==typeof o.etag&&(i=_(o.etag)),t&&t.ifMatch&&t.ifMatch!==i?{statusCode:412,revision:i}:r._request("DELETE",c+"/drive/v2/files/"+e,{}).then((function(e){return 200===e.status||204===e.status?{statusCode:200}:Promise.reject("Delete failed: "+e.status+" ("+e.responseText+")")}))})):Promise.resolve({statusCode:200})}))},info:function(){return this._request("GET","https://www.googleapis.com/drive/v2/about?fields=user",{}).then((function(e){try{var t=JSON.parse(e.responseText);return Promise.resolve(t)}catch(e){return Promise.reject(e)}}))},_updateFile:function(e,t,r,n,o){var i=this,s={mimeType:n},a={"Content-Type":"application/json; charset=UTF-8"};return o&&o.ifMatch&&(a["If-Match"]='"'+o.ifMatch+'"'),this._request("PUT",c+"/upload/drive/v2/files/"+e+"?uploadType=resumable",{body:JSON.stringify(s),headers:a}).then((function(e){return 412===e.status?e:i._request("PUT",e.getResponseHeader("Location"),{body:n.match(/^application\/json/)?JSON.stringify(r):r})}))},_createFile:function(e,t,r){var n=this;return this._getParentId(e).then((function(o){var i={title:y(v(e)),mimeType:r,parents:[{kind:"drive#fileLink",id:o}]};return n._request("POST",c+"/upload/drive/v2/files?uploadType=resumable",{body:JSON.stringify(i),headers:{"Content-Type":"application/json; charset=UTF-8"}}).then((function(e){return n._request("POST",e.getResponseHeader("Location"),{body:r.match(/^application\/json/)?JSON.stringify(t):t})}))}))},_getFile:function(e,t){var r=this;return this._getFileId(e).then((function(e){return r._getMeta(e).then((function(e){var o;if("object"===n(e)&&"string"==typeof e.etag&&(o=_(e.etag)),t&&t.ifNoneMatch&&o===t.ifNoneMatch)return Promise.resolve({statusCode:304});if(!e.downloadUrl){if(!e.exportLinks||!e.exportLinks["text/html"])return Promise.resolve({statusCode:200,body:"",contentType:e.mimeType,revision:o});e.mimeType+=";export=text/html",e.downloadUrl=e.exportLinks["text/html"];}return r._request("GET",e.downloadUrl,{responseType:"arraybuffer"}).then((function(t){return m(t.response,"UTF-8").then((function(r){var n=r;if(e.mimeType.match(/^application\/json/))try{n=JSON.parse(n);}catch(e){}else d(r,e.mimeType)&&(n=t.response);return {statusCode:200,body:n,contentType:e.mimeType,revision:o}}))}))}))}))},_getFolder:function(e){var t=this;return this._getFileId(e).then((function(r){var n,o,i,s;return r?(n="'"+r+"' in parents",t._request("GET",c+"/drive/v2/files?q="+encodeURIComponent(n)+"&fields="+encodeURIComponent("items(downloadUrl,etag,fileSize,id,mimeType,title)")+"&maxResults=1000",{}).then((function(r){if(200!==r.status)return Promise.reject("request failed or something: "+r.status);try{o=JSON.parse(r.responseText);}catch(e){return Promise.reject("non-JSON response from GoogleDrive")}s={};var n=!0,a=!1,u=void 0;try{for(var c,l=o.items[Symbol.iterator]();!(n=(c=l.next()).done);n=!0){var h=c.value;i=_(h.etag),"application/vnd.google-apps.folder"===h.mimeType?(t._fileIdCache.set(e+h.title+"/",h.id),s[h.title+"/"]={ETag:i}):(t._fileIdCache.set(e+h.title,h.id),s[h.title]={ETag:i,"Content-Type":h.mimeType,"Content-Length":h.fileSize});}}catch(e){a=!0,u=e;}finally{try{n||null==l.return||l.return();}finally{if(a)throw u}}return Promise.resolve({statusCode:200,body:s,contentType:"application/json; charset=UTF-8",revision:void 0})}))):Promise.resolve({statusCode:404})}))},_getParentId:function(e){var t=this,r=g(e);return this._getFileId(r).then((function(e){return e?Promise.resolve(e):t._createFolder(r)}))},_createFolder:function(e){var t=this;return this._getParentId(e).then((function(r){return t._request("POST",c+"/drive/v2/files",{body:JSON.stringify({title:y(v(e)),mimeType:"application/vnd.google-apps.folder",parents:[{id:r}]}),headers:{"Content-Type":"application/json; charset=UTF-8"}}).then((function(e){var t=JSON.parse(e.responseText);return Promise.resolve(t.id)}))}))},_getFileId:function(e){var t,r=this;return "/"===e?Promise.resolve("root"):(t=this._fileIdCache.get(e))?Promise.resolve(t):this._getFolder(g(e)).then((function(){return (t=r._fileIdCache.get(e))?Promise.resolve(t):"/"===e.substr(-1)?r._createFolder(e).then((function(){return r._getFileId(e)})):Promise.resolve()}))},_getMeta:function(e){return this._request("GET",c+"/drive/v2/files/"+e,{}).then((function(t){return 200===t.status?Promise.resolve(JSON.parse(t.responseText)):Promise.reject("request (getting metadata for "+e+") failed with status: "+t.status)}))},_request:function(e,t,r){var n=this;return r.headers||(r.headers={}),r.headers.Authorization="Bearer "+this.token,this.rs._emit("wire-busy",{method:e,isFolder:h(t)}),s.request.call(this,e,t,r).then((function(r){return r&&401===r.status?void n.connect():(n.online||(n.online=!0,n.rs._emit("network-online")),n.rs._emit("wire-done",{method:e,isFolder:h(t),success:!0}),Promise.resolve(r))}),(function(r){return n.online&&(n.online=!1,n.rs._emit("network-offline")),n.rs._emit("wire-done",{method:e,isFolder:h(t),success:!1}),Promise.reject(r)}))}},P._rs_init=function(e){var t,r=e.apiKeys.googledrive;r&&(e.googledrive=new P(e,r.clientId),"googledrive"===e.backend&&(e._origRemote=e.remote,e.remote=e.googledrive,(t=e)._origBaseClientGetItemURL||(t._origBaseClientGetItemURL=i.prototype.getItemURL,i.prototype.getItemURL=function(){throw new Error("getItemURL is not implemented for Google Drive yet")})));},P._rs_supported=function(){return !0},P._rs_cleanup=function(e){var t;e.setBackend(void 0),e._origRemote&&(e.remote=e._origRemote,delete e._origRemote),(t=e)._origBaseClientGetItemURL&&(i.prototype.getItemURL=t._origBaseClientGetItemURL,delete t._origBaseClientGetItemURL);},e.exports=P;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o,i=r(1),s=r(0),a=r(25),u={},c=function(e){return new Promise((function(t,r){return e in u?t(u[e]):new a({tls_only:!1,uri_fallback:!0,request_timeout:5e3}).lookup(e,(function(s,a){if(s)return r(s);if("object"!==n(a.idx.links.remotestorage)||"number"!=typeof a.idx.links.remotestorage.length||a.idx.links.remotestorage.length<=0)return i("[Discover] WebFinger record for "+e+" does not have remotestorage defined in the links section ",JSON.stringify(a.json)),r("WebFinger record for "+e+" does not have remotestorage defined in the links section.");var c=a.idx.links.remotestorage[0],l=c.properties["http://tools.ietf.org/html/rfc6749#section-4.2"]||c.properties["auth-endpoint"],h=c.properties["http://remotestorage.io/spec/version"]||c.type;return u[e]={href:c.href,storageApi:h,authURL:l,properties:c.properties},o&&(localStorage["remotestorage:discover"]=JSON.stringify({cache:u})),t(u[e])}))}))};(c.DiscoveryError=function(e){this.name="DiscoveryError",this.message=e,this.stack=(new Error).stack;}).prototype=Object.create(Error.prototype),c.DiscoveryError.prototype.constructor=c.DiscoveryError,c._rs_init=function(){if(o=s.localStorageAvailable()){var e;try{e=JSON.parse(localStorage["remotestorage:discover"]);}catch(e){}e&&(u=e.cache);}},c._rs_supported=function(){return !!s.globalContext.XMLHttpRequest},c._rs_cleanup=function(){o&&delete localStorage["remotestorage:discover"];},e.exports=c;},function(e,t){var r=function(){this.reset();};r.prototype={claim:function(e,t){if("string"!=typeof e||-1!==e.indexOf("/")||0===e.length)throw new Error("Scope should be a non-empty string without forward slashes");if(!t.match(/^rw?$/))throw new Error("Mode should be either 'r' or 'rw'");this._adjustRootPaths(e),this.scopeModeMap[e]=t;},get:function(e){return this.scopeModeMap[e]},remove:function(e){var t,r={};for(t in this.scopeModeMap)r[t]=this.scopeModeMap[t];for(t in this.reset(),delete r[e],r)this.set(t,r[t]);},checkPermission:function(e,t){var r=this.get(e);return r&&("r"===t||"rw"===r)},checkPathPermission:function(e,t){return !!this.checkPermission("*",t)||!!this.checkPermission(this._getModuleName(e),t)},reset:function(){this.rootPaths=[],this.scopeModeMap={};},_getModuleName:function(e){if("/"!==e[0])throw new Error("Path should start with a slash");var t=e.replace(/^\/public/,"").match(/^\/([^/]*)\//);return t?t[1]:"*"},_adjustRootPaths:function(e){"*"in this.scopeModeMap||"*"===e?this.rootPaths=["/"]:e in this.scopeModeMap||(this.rootPaths.push("/"+e+"/"),this.rootPaths.push("/public/"+e+"/"));},_scopeNameForParameter:function(e){if("*"===e.name&&this.storageType){if("2012.04"===this.storageType)return "";if(this.storageType.match(/remotestorage-0[01]/))return "root"}return e.name},setStorageType:function(e){this.storageType=e;}},Object.defineProperty(r.prototype,"scopes",{get:function(){return Object.keys(this.scopeModeMap).map(function(e){return {name:e,mode:this.scopeModeMap[e]}}.bind(this))}}),Object.defineProperty(r.prototype,"scopeParameter",{get:function(){return this.scopes.map(function(e){return this._scopeNameForParameter(e)+":"+e.mode}.bind(this)).join(" ")}}),r._rs_init=function(){},e.exports=r;},function(e,t,r){var n=r(0),o=r(1),i=n.containingFolder,s=function(){this.reset();};s.prototype={pendingActivations:[],set:function(e,t){if("string"!=typeof e)throw new Error("path should be a string");if(!n.isFolder(e))throw new Error("path should be a folder");if(this._remoteStorage&&this._remoteStorage.access&&!this._remoteStorage.access.checkPathPermission(e,"r"))throw new Error('No access to path "'+e+'". You have to claim access to it first.');if(!t.match(/^(FLUSH|SEEN|ALL)$/))throw new Error("strategy should be 'FLUSH', 'SEEN', or 'ALL'");this._rootPaths[e]=t,"ALL"===t&&(this.activateHandler?this.activateHandler(e):this.pendingActivations.push(e));},enable:function(e){this.set(e,"ALL");},disable:function(e){this.set(e,"FLUSH");},onActivate:function(e){var t;for(o("[Caching] Setting activate handler",e,this.pendingActivations),this.activateHandler=e,t=0;t<this.pendingActivations.length;t++)e(this.pendingActivations[t]);delete this.pendingActivations;},checkPath:function(e){return void 0!==this._rootPaths[e]?this._rootPaths[e]:"/"===e?"SEEN":this.checkPath(i(e))},reset:function(){this._rootPaths={},this._remoteStorage=null;}},s._rs_init=function(e){this._remoteStorage=e;},e.exports=s;},function(e,t,r){e.exports=r(9);},function(e,t,r){(function(e){
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <http://feross.org>
     * @license  MIT
     */
    var n=r(19),o=r(20),i=r(21);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(s()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return c(this,e,t,r)}function c(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return "undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=f(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|p(t,r),o=(e=a(e,n)).write(t,r);o!==n&&(e=e.slice(0,o));return e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|d(t.length);return 0===(e=a(e,r)).length?e:(t.copy(e,0,0,r),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return "number"!=typeof t.length||(n=t.length)!=n?a(e,0):f(e,t);if("Buffer"===t.type&&i(t.data))return f(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(l(t),e=a(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function f(e,t){var r=t.length<0?0:0|d(t.length);e=a(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function d(e){if(e>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|e}function p(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return B(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return q(e).length;default:if(n)return B(e).length;t=(""+t).toLowerCase(),n=!0;}}function m(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return "";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return "";if((r>>>=0)<=(t>>>=0))return "";for(e||(e="utf8");;)switch(e){case"hex":return O(this,t,r);case"utf8":case"utf-8":return A(this,t,r);case"ascii":return R(this,t,r);case"latin1":case"binary":return k(this,t,r);case"base64":return T(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0;}}function y(e,t,r){var n=e[t];e[t]=e[r],e[r]=n;}function g(e,t,r,n,o){if(0===e.length)return -1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return -1;r=e.length-1;}else if(r<0){if(!o)return -1;r=0;}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:v(e,t,r,n,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):v(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function v(e,t,r,n,o){var i,s=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return -1;s=2,a/=2,u/=2,r/=2;}function c(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(o){var l=-1;for(i=r;i<a;i++)if(c(e,i)===c(t,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===u)return l*s}else-1!==l&&(i-=i-l),l=-1;}else for(r+u>a&&(r=a-u),i=r;i>=0;i--){for(var h=!0,f=0;f<u;f++)if(c(e,i+f)!==c(t,f)){h=!1;break}if(h)return i}return -1}function b(e,t,r,n){r=Number(r)||0;var o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var s=0;s<n;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[r+s]=a;}return s}function _(e,t,r,n){return J(B(t,e.length-r),e,r,n)}function w(e,t,r,n){return J(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function P(e,t,r,n){return w(e,t,r,n)}function E(e,t,r,n){return J(q(t),e,r,n)}function S(e,t,r,n){return J(function(e,t){for(var r,n,o,i=[],s=0;s<e.length&&!((t-=2)<0);++s)r=e.charCodeAt(s),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(t,e.length-r),e,r,n)}function T(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function A(e,t,r){r=Math.min(e.length,r);for(var n=[],o=t;o<r;){var i,s,a,u,c=e[o],l=null,h=c>239?4:c>223?3:c>191?2:1;if(o+h<=r)switch(h){case 1:c<128&&(l=c);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&c)<<6|63&i)>127&&(l=u);break;case 3:i=e[o+1],s=e[o+2],128==(192&i)&&128==(192&s)&&(u=(15&c)<<12|(63&i)<<6|63&s)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:i=e[o+1],s=e[o+2],a=e[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(l=u);}null===l?(l=65533,h=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),o+=h;}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=4096));return r}(n)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return !1}}(),t.kMaxLength=s(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return c(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,n){return l(t),t<=0?a(e,t):void 0!==r?"string"==typeof n?a(e,t).fill(r,n):a(e,t).fill(r):a(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return h(null,e)},u.allocUnsafeSlow=function(e){return h(null,e)},u.isBuffer=function(e){return !(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,o=0,i=Math.min(r,n);o<i;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return !0;default:return !1}},u.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=u.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){var s=e[r];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(n,o),o+=s.length;}return n},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?A(this,0,e):m.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,r,n,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return -1;if(t>=r)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(n>>>=0),s=(r>>>=0)-(t>>>=0),a=Math.min(i,s),c=this.slice(n,o),l=e.slice(t,r),h=0;h<a;++h)if(c[h]!==l[h]){i=c[h],s=l[h];break}return i<s?-1:s<i?1:0},u.prototype.includes=function(e,t,r){return -1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return g(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return g(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0);}var o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return b(this,e,t,r);case"utf8":case"utf-8":return _(this,e,t,r);case"ascii":return w(this,e,t,r);case"latin1":case"binary":return P(this,e,t,r);case"base64":return E(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0;}},u.prototype.toJSON=function(){return {type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function R(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function k(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function O(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=t;i<r;++i)o+=F(e[i]);return o}function I(e,t,r){for(var n=e.slice(t,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function C(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function M(e,t,r,n,o,i){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function N(e,t,r,n){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-r,2);o<i;++o)e[r+o]=(t&255<<8*(n?o:1-o))>>>8*(n?o:1-o);}function x(e,t,r,n){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-r,4);o<i;++o)e[r+o]=t>>>8*(n?o:3-o)&255;}function U(e,t,r,n,o,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function j(e,t,r,n,i){return i||U(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function L(e,t,r,n,i){return i||U(e,0,r,8),o.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;r=new u(o,void 0);for(var i=0;i<o;++i)r[i]=this[i+e];}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||C(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||C(e,t,this.length);for(var n=this[e+--t],o=1;t>0&&(o*=256);)n+=this[e+--t]*o;return n},u.prototype.readUInt8=function(e,t){return t||C(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||C(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||C(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||C(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||C(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||C(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||C(e,t,this.length);for(var n=t,o=1,i=this[e+--n];n>0&&(o*=256);)i+=this[e+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},u.prototype.readInt8=function(e,t){return t||C(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||C(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||C(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||C(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||C(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||C(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||C(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||C(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||C(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||M(this,e,t,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[t]=255&e;++i<r&&(o*=256);)this[t+i]=e/o&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||M(this,e,t,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):x(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):x(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);M(this,e,t,r,o-1,-o);}var i=0,s=1,a=0;for(this[t]=255&e;++i<r&&(s*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);M(this,e,t,r,o-1,-o);}var i=r-1,s=1,a=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):x(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):x(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return j(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return j(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return L(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return L(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var o,i=n-r;if(this===e&&r<t&&t<n)for(o=i-1;o>=0;--o)e[o+t]=this[o+r];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+i),t);return i},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o);}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{var s=u.isBuffer(e)?e:B(new u(e,n).toString()),a=s.length;for(i=0;i<r-t;++i)this[i+t]=s[i%a];}return this};var D=/[^+\/0-9A-Za-z-_]/g;function F(e){return e<16?"0"+e.toString(16):e.toString(16)}function B(e,t){var r;t=t||1/0;for(var n=e.length,o=null,i=[],s=0;s<n;++s){if((r=e.charCodeAt(s))>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320);}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;i.push(r);}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128);}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128);}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128);}}return i}function q(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(D,"")).length<2)return "";for(;e.length%4!=0;)e+="=";return e}(e))}function J(e,t,r,n){for(var o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}}).call(this,r(10));},function(e,t,r){t.byteLength=function(e){var t=c(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=c(e),s=n[0],a=n[1],u=new i(function(e,t,r){return 3*(t+r)/4-r}(0,s,a)),l=0,h=a>0?s-4:s;for(r=0;r<h;r+=4)t=o[e.charCodeAt(r)]<<18|o[e.charCodeAt(r+1)]<<12|o[e.charCodeAt(r+2)]<<6|o[e.charCodeAt(r+3)],u[l++]=t>>16&255,u[l++]=t>>8&255,u[l++]=255&t;2===a&&(t=o[e.charCodeAt(r)]<<2|o[e.charCodeAt(r+1)]>>4,u[l++]=255&t);1===a&&(t=o[e.charCodeAt(r)]<<10|o[e.charCodeAt(r+1)]<<4|o[e.charCodeAt(r+2)]>>2,u[l++]=t>>8&255,u[l++]=255&t);return u},t.fromByteArray=function(e){for(var t,r=e.length,o=r%3,i=[],s=0,a=r-o;s<a;s+=16383)i.push(l(e,s,s+16383>a?a:s+16383));1===o?(t=e[r-1],i.push(n[t>>2]+n[t<<4&63]+"==")):2===o&&(t=(e[r-2]<<8)+e[r-1],i.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return i.join("")};for(var n=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)n[a]=s[a],o[s.charCodeAt(a)]=a;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return -1===r&&(r=t),[r,r===t?0:4-r%4]}function l(e,t,r){for(var o,i,s=[],a=t;a<r;a+=3)o=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return s.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63;},function(e,t){t.read=function(e,t,r,n,o){var i,s,a=8*o-n-1,u=(1<<a)-1,c=u>>1,l=-7,h=r?o-1:0,f=r?-1:1,d=e[t+h];for(h+=f,i=d&(1<<-l)-1,d>>=-l,l+=a;l>0;i=256*i+e[t+h],h+=f,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=n;l>0;s=256*s+e[t+h],h+=f,l-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,n),i-=c;}return (d?-1:1)*s*Math.pow(2,i-n)},t.write=function(e,t,r,n,o,i){var s,a,u,c=8*i-o-1,l=(1<<c)-1,h=l>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:i-1,p=n?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+h>=1?f/u:f*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(t*u-1)*Math.pow(2,o),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,o),s=0));o>=8;e[r+d]=255&a,d+=p,a/=256,o-=8);for(s=s<<o|a,c+=o;c>0;e[r+d]=255&s,d+=p,s/=256,c-=8);e[r+d-p]|=128*m;};},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return "[object Array]"==r.call(e)};},function(e,t,r){var n,o,i;o=[],void 0===(i="function"==typeof(n=function(){var e,t,r,n;Object.keys||(Object.keys=(e=Object.prototype.hasOwnProperty,t=!{toString:null}.propertyIsEnumerable("toString"),n=(r=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"]).length,function(o){if("object"!=typeof o&&"function"!=typeof o||null===o)throw new TypeError("Object.keys called on non-object");var i=[];for(var s in o)e.call(o,s)&&i.push(s);if(t)for(var a=0;a<n;a++)e.call(o,r[a])&&i.push(r[a]);return i})),Object.create||(Object.create=function(){function e(){}return function(t){if(1!==arguments.length)throw new Error("Object.create implementation only accepts one parameter.");return e.prototype=t,new e}}()),Array.isArray||(Array.isArray=function(e){return "[object Array]"===Object.prototype.toString.call(e)}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e){if(null===this)throw new TypeError;var t=Object(this),r=t.length>>>0;if(0===r)return -1;var n=0;if(arguments.length>1&&((n=Number(arguments[1]))!=n?n=0:0!==n&&n!==1/0&&n!==-1/0&&(n=(n>0||-1)*Math.floor(Math.abs(n)))),n>=r)return -1;for(var o=n>=0?n:Math.max(r-Math.abs(n),0);o<r;o++)if(o in t&&t[o]===e)return o;return -1}),Object.isFrozen||(Object.isFrozen=function(e){for(var t="tv4_test_frozen_key";e.hasOwnProperty(t);)t+=Math.random();try{return e[t]=!0,delete e[t],!1}catch(e){return !0}});var o={"+":!0,"#":!0,".":!0,"/":!0,";":!0,"?":!0,"&":!0},i={"*":!0};function s(e){return encodeURI(e).replace(/%25[0-9][0-9]/g,(function(e){return "%"+e.substring(3)}))}function a(e){var t="";o[e.charAt(0)]&&(t=e.charAt(0),e=e.substring(1));var r="",n="",a=!0,u=!1,c=!1;"+"===t?a=!1:"."===t?(n=".",r="."):"/"===t?(n="/",r="/"):"#"===t?(n="#",a=!1):";"===t?(n=";",r=";",u=!0,c=!0):"?"===t?(n="?",r="&",u=!0):"&"===t&&(n="&",r="&",u=!0);for(var l=[],h=e.split(","),f=[],d={},p=0;p<h.length;p++){var m=h[p],y=null;if(-1!==m.indexOf(":")){var g=m.split(":");m=g[0],y=parseInt(g[1],10);}for(var v={};i[m.charAt(m.length-1)];)v[m.charAt(m.length-1)]=!0,m=m.substring(0,m.length-1);var b={truncate:y,name:m,suffices:v};f.push(b),d[m]=b,l.push(m);}var _=function(e){for(var t="",o=0,i=0;i<f.length;i++){var l=f[i],h=e(l.name);if(null==h||Array.isArray(h)&&0===h.length||"object"==typeof h&&0===Object.keys(h).length)o++;else if(t+=i===o?n:r||",",Array.isArray(h)){u&&(t+=l.name+"=");for(var d=0;d<h.length;d++)d>0&&(t+=l.suffices["*"]&&r||",",l.suffices["*"]&&u&&(t+=l.name+"=")),t+=a?encodeURIComponent(h[d]).replace(/!/g,"%21"):s(h[d]);}else if("object"==typeof h){u&&!l.suffices["*"]&&(t+=l.name+"=");var p=!0;for(var m in h)p||(t+=l.suffices["*"]&&r||","),p=!1,t+=a?encodeURIComponent(m).replace(/!/g,"%21"):s(m),t+=l.suffices["*"]?"=":",",t+=a?encodeURIComponent(h[m]).replace(/!/g,"%21"):s(h[m]);}else u&&(t+=l.name,c&&""===h||(t+="=")),null!=l.truncate&&(h=h.substring(0,l.truncate)),t+=a?encodeURIComponent(h).replace(/!/g,"%21"):s(h);}return t};return _.varNames=l,{prefix:n,substitution:_}}function u(e){if(!(this instanceof u))return new u(e);for(var t=e.split("{"),r=[t.shift()],n=[],o=[],i=[];t.length>0;){var s=t.shift(),c=s.split("}")[0],l=s.substring(c.length+1),h=a(c);o.push(h.substitution),n.push(h.prefix),r.push(l),i=i.concat(h.substitution.varNames);}this.fill=function(e){for(var t=r[0],n=0;n<o.length;n++)t+=(0, o[n])(e),t+=r[n+1];return t},this.varNames=i,this.template=e;}u.prototype={toString:function(){return this.template},fillFromObject:function(e){return this.fill((function(t){return e[t]}))}};var c=function(e,t,r,n,o){if(this.missing=[],this.missingMap={},this.formatValidators=e?Object.create(e.formatValidators):{},this.schemas=e?Object.create(e.schemas):{},this.collectMultiple=t,this.errors=[],this.handleError=t?this.collectError:this.returnError,n&&(this.checkRecursive=!0,this.scanned=[],this.scannedFrozen=[],this.scannedFrozenSchemas=[],this.scannedFrozenValidationErrors=[],this.validatedSchemasKey="tv4_validation_id",this.validationErrorsKey="tv4_validation_errors_id"),o&&(this.trackUnknownProperties=!0,this.knownPropertyPaths={},this.unknownPropertyPaths={}),this.errorReporter=r||g("en"),"string"==typeof this.errorReporter)throw new Error("debug");if(this.definedKeywords={},e)for(var i in e.definedKeywords)this.definedKeywords[i]=e.definedKeywords[i].slice(0);};function l(e,t){if(e===t)return !0;if(e&&t&&"object"==typeof e&&"object"==typeof t){if(Array.isArray(e)!==Array.isArray(t))return !1;if(Array.isArray(e)){if(e.length!==t.length)return !1;for(var r=0;r<e.length;r++)if(!l(e[r],t[r]))return !1}else{var n;for(n in e)if(void 0===t[n]&&void 0!==e[n])return !1;for(n in t)if(void 0===e[n]&&void 0!==t[n])return !1;for(n in e)if(!l(e[n],t[n]))return !1}return !0}return !1}c.prototype.defineKeyword=function(e,t){this.definedKeywords[e]=this.definedKeywords[e]||[],this.definedKeywords[e].push(t);},c.prototype.createError=function(e,t,r,n,o,i,s){var a=new P(e,t,r,n,o);return a.message=this.errorReporter(a,i,s),a},c.prototype.returnError=function(e){return e},c.prototype.collectError=function(e){return e&&this.errors.push(e),null},c.prototype.prefixErrors=function(e,t,r){for(var n=e;n<this.errors.length;n++)this.errors[n]=this.errors[n].prefixWith(t,r);return this},c.prototype.banUnknownProperties=function(e,t){for(var r in this.unknownPropertyPaths){var n=this.createError(v.UNKNOWN_PROPERTY,{path:r},r,"",null,e,t),o=this.handleError(n);if(o)return o}return null},c.prototype.addFormat=function(e,t){if("object"==typeof e){for(var r in e)this.addFormat(r,e[r]);return this}this.formatValidators[e]=t;},c.prototype.resolveRefs=function(e,t){if(void 0!==e.$ref){if((t=t||{})[e.$ref])return this.createError(v.CIRCULAR_REFERENCE,{urls:Object.keys(t).join(", ")},"","",null,void 0,e);t[e.$ref]=!0,e=this.getSchema(e.$ref,t);}return e},c.prototype.getSchema=function(e,t){var r;if(void 0!==this.schemas[e])return r=this.schemas[e],this.resolveRefs(r,t);var n=e,o="";if(-1!==e.indexOf("#")&&(o=e.substring(e.indexOf("#")+1),n=e.substring(0,e.indexOf("#"))),"object"==typeof this.schemas[n]){r=this.schemas[n];var i=decodeURIComponent(o);if(""===i)return this.resolveRefs(r,t);if("/"!==i.charAt(0))return;for(var s=i.split("/").slice(1),a=0;a<s.length;a++){var u=s[a].replace(/~1/g,"/").replace(/~0/g,"~");if(void 0===r[u]){r=void 0;break}r=r[u];}if(void 0!==r)return this.resolveRefs(r,t)}void 0===this.missing[n]&&(this.missing.push(n),this.missing[n]=n,this.missingMap[n]=n);},c.prototype.searchSchemas=function(e,t){if(Array.isArray(e))for(var r=0;r<e.length;r++)this.searchSchemas(e[r],t);else if(e&&"object"==typeof e)for(var n in"string"==typeof e.id&&function(e,t){if(t.substring(0,e.length)===e){var r=t.substring(e.length);if(t.length>0&&"/"===t.charAt(e.length-1)||"#"===r.charAt(0)||"?"===r.charAt(0))return !0}return !1}(t,e.id)&&void 0===this.schemas[e.id]&&(this.schemas[e.id]=e),e)if("enum"!==n)if("object"==typeof e[n])this.searchSchemas(e[n],t);else if("$ref"===n){var o=m(e[n]);o&&void 0===this.schemas[o]&&void 0===this.missingMap[o]&&(this.missingMap[o]=o);}},c.prototype.addSchema=function(e,t){if("string"!=typeof e||void 0===t){if("object"!=typeof e||"string"!=typeof e.id)return;e=(t=e).id;}e===m(e)+"#"&&(e=m(e)),this.schemas[e]=t,delete this.missingMap[e],y(t,e),this.searchSchemas(t,e);},c.prototype.getSchemaMap=function(){var e={};for(var t in this.schemas)e[t]=this.schemas[t];return e},c.prototype.getSchemaUris=function(e){var t=[];for(var r in this.schemas)e&&!e.test(r)||t.push(r);return t},c.prototype.getMissingUris=function(e){var t=[];for(var r in this.missingMap)e&&!e.test(r)||t.push(r);return t},c.prototype.dropSchemas=function(){this.schemas={},this.reset();},c.prototype.reset=function(){this.missing=[],this.missingMap={},this.errors=[];},c.prototype.validateAll=function(e,t,r,n,o){var i;if(!(t=this.resolveRefs(t)))return null;if(t instanceof P)return this.errors.push(t),t;var s,a=this.errors.length,u=null,c=null;if(this.checkRecursive&&e&&"object"==typeof e){if(i=!this.scanned.length,e[this.validatedSchemasKey]){var l=e[this.validatedSchemasKey].indexOf(t);if(-1!==l)return this.errors=this.errors.concat(e[this.validationErrorsKey][l]),null}if(Object.isFrozen(e)&&-1!==(s=this.scannedFrozen.indexOf(e))){var h=this.scannedFrozenSchemas[s].indexOf(t);if(-1!==h)return this.errors=this.errors.concat(this.scannedFrozenValidationErrors[s][h]),null}if(this.scanned.push(e),Object.isFrozen(e))-1===s&&(s=this.scannedFrozen.length,this.scannedFrozen.push(e),this.scannedFrozenSchemas.push([])),u=this.scannedFrozenSchemas[s].length,this.scannedFrozenSchemas[s][u]=t,this.scannedFrozenValidationErrors[s][u]=[];else{if(!e[this.validatedSchemasKey])try{Object.defineProperty(e,this.validatedSchemasKey,{value:[],configurable:!0}),Object.defineProperty(e,this.validationErrorsKey,{value:[],configurable:!0});}catch(t){e[this.validatedSchemasKey]=[],e[this.validationErrorsKey]=[];}c=e[this.validatedSchemasKey].length,e[this.validatedSchemasKey][c]=t,e[this.validationErrorsKey][c]=[];}}var f=this.errors.length,d=this.validateBasic(e,t,o)||this.validateNumeric(e,t,o)||this.validateString(e,t,o)||this.validateArray(e,t,o)||this.validateObject(e,t,o)||this.validateCombinations(e,t,o)||this.validateHypermedia(e,t,o)||this.validateFormat(e,t,o)||this.validateDefinedKeywords(e,t,o)||null;if(i){for(;this.scanned.length;)delete this.scanned.pop()[this.validatedSchemasKey];this.scannedFrozen=[],this.scannedFrozenSchemas=[];}if(d||f!==this.errors.length)for(;r&&r.length||n&&n.length;){var p=r&&r.length?""+r.pop():null,m=n&&n.length?""+n.pop():null;d&&(d=d.prefixWith(p,m)),this.prefixErrors(f,p,m);}return null!==u?this.scannedFrozenValidationErrors[s][u]=this.errors.slice(a):null!==c&&(e[this.validationErrorsKey][c]=this.errors.slice(a)),this.handleError(d)},c.prototype.validateFormat=function(e,t){if("string"!=typeof t.format||!this.formatValidators[t.format])return null;var r=this.formatValidators[t.format].call(null,e,t);return "string"==typeof r||"number"==typeof r?this.createError(v.FORMAT_CUSTOM,{message:r},"","/format",null,e,t):r&&"object"==typeof r?this.createError(v.FORMAT_CUSTOM,{message:r.message||"?"},r.dataPath||"",r.schemaPath||"/format",null,e,t):null},c.prototype.validateDefinedKeywords=function(e,t,r){for(var n in this.definedKeywords)if(void 0!==t[n])for(var o=this.definedKeywords[n],i=0;i<o.length;i++){var s=(0, o[i])(e,t[n],t,r);if("string"==typeof s||"number"==typeof s)return this.createError(v.KEYWORD_CUSTOM,{key:n,message:s},"","",null,e,t).prefixWith(null,n);if(s&&"object"==typeof s){var a=s.code;if("string"==typeof a){if(!v[a])throw new Error("Undefined error code (use defineError): "+a);a=v[a];}else"number"!=typeof a&&(a=v.KEYWORD_CUSTOM);var u="object"==typeof s.message?s.message:{key:n,message:s.message||"?"},c=s.schemaPath||"/"+n.replace(/~/g,"~0").replace(/\//g,"~1");return this.createError(a,u,s.dataPath||null,c,null,e,t)}}return null},c.prototype.validateBasic=function(e,t,r){var n;return (n=this.validateType(e,t,r))?n.prefixWith(null,"type"):(n=this.validateEnum(e,t,r))?n.prefixWith(null,"type"):null},c.prototype.validateType=function(e,t){if(void 0===t.type)return null;var r=typeof e;null===e?r="null":Array.isArray(e)&&(r="array");var n=t.type;Array.isArray(n)||(n=[n]);for(var o=0;o<n.length;o++){var i=n[o];if(i===r||"integer"===i&&"number"===r&&e%1==0)return null}return this.createError(v.INVALID_TYPE,{type:r,expected:n.join("/")},"","",null,e,t)},c.prototype.validateEnum=function(e,t){if(void 0===t.enum)return null;for(var r=0;r<t.enum.length;r++)if(l(e,t.enum[r]))return null;return this.createError(v.ENUM_MISMATCH,{value:"undefined"!=typeof JSON?JSON.stringify(e):e},"","",null,e,t)},c.prototype.validateNumeric=function(e,t,r){return this.validateMultipleOf(e,t,r)||this.validateMinMax(e,t,r)||this.validateNaN(e,t,r)||null};var h=Math.pow(2,-51),f=1-h;function d(e){var t=String(e).replace(/^\s+|\s+$/g,"").match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);return t?{href:t[0]||"",protocol:t[1]||"",authority:t[2]||"",host:t[3]||"",hostname:t[4]||"",port:t[5]||"",pathname:t[6]||"",search:t[7]||"",hash:t[8]||""}:null}function p(e,t){return t=d(t||""),e=d(e||""),t&&e?(t.protocol||e.protocol)+(t.protocol||t.authority?t.authority:e.authority)+(r=t.protocol||t.authority||"/"===t.pathname.charAt(0)?t.pathname:t.pathname?(e.authority&&!e.pathname?"/":"")+e.pathname.slice(0,e.pathname.lastIndexOf("/")+1)+t.pathname:e.pathname,n=[],r.replace(/^(\.\.?(\/|$))+/,"").replace(/\/(\.(\/|$))+/g,"/").replace(/\/\.\.$/,"/../").replace(/\/?[^\/]*/g,(function(e){"/.."===e?n.pop():n.push(e);})),n.join("").replace(/^\//,"/"===r.charAt(0)?"/":""))+(t.protocol||t.authority||t.pathname?t.search:t.search||e.search)+t.hash:null;var r,n;}function m(e){return e.split("#")[0]}function y(e,t){if(e&&"object"==typeof e)if(void 0===t?t=e.id:"string"==typeof e.id&&(t=p(t,e.id),e.id=t),Array.isArray(e))for(var r=0;r<e.length;r++)y(e[r],t);else for(var n in"string"==typeof e.$ref&&(e.$ref=p(t,e.$ref)),e)"enum"!==n&&y(e[n],t);}function g(e){var t=E[e=e||"en"];return function(e){var r=t[e.code]||w[e.code];if("string"!=typeof r)return "Unknown error code "+e.code+": "+JSON.stringify(e.messageParams);var n=e.params;return r.replace(/\{([^{}]*)\}/g,(function(e,t){var r=n[t];return "string"==typeof r||"number"==typeof r?r:e}))}}c.prototype.validateMultipleOf=function(e,t){var r=t.multipleOf||t.divisibleBy;if(void 0===r)return null;if("number"==typeof e){var n=e/r%1;if(n>=h&&n<f)return this.createError(v.NUMBER_MULTIPLE_OF,{value:e,multipleOf:r},"","",null,e,t)}return null},c.prototype.validateMinMax=function(e,t){if("number"!=typeof e)return null;if(void 0!==t.minimum){if(e<t.minimum)return this.createError(v.NUMBER_MINIMUM,{value:e,minimum:t.minimum},"","/minimum",null,e,t);if(t.exclusiveMinimum&&e===t.minimum)return this.createError(v.NUMBER_MINIMUM_EXCLUSIVE,{value:e,minimum:t.minimum},"","/exclusiveMinimum",null,e,t)}if(void 0!==t.maximum){if(e>t.maximum)return this.createError(v.NUMBER_MAXIMUM,{value:e,maximum:t.maximum},"","/maximum",null,e,t);if(t.exclusiveMaximum&&e===t.maximum)return this.createError(v.NUMBER_MAXIMUM_EXCLUSIVE,{value:e,maximum:t.maximum},"","/exclusiveMaximum",null,e,t)}return null},c.prototype.validateNaN=function(e,t){return "number"!=typeof e?null:!0===isNaN(e)||e===1/0||e===-1/0?this.createError(v.NUMBER_NOT_A_NUMBER,{value:e},"","/type",null,e,t):null},c.prototype.validateString=function(e,t,r){return this.validateStringLength(e,t,r)||this.validateStringPattern(e,t,r)||null},c.prototype.validateStringLength=function(e,t){return "string"!=typeof e?null:void 0!==t.minLength&&e.length<t.minLength?this.createError(v.STRING_LENGTH_SHORT,{length:e.length,minimum:t.minLength},"","/minLength",null,e,t):void 0!==t.maxLength&&e.length>t.maxLength?this.createError(v.STRING_LENGTH_LONG,{length:e.length,maximum:t.maxLength},"","/maxLength",null,e,t):null},c.prototype.validateStringPattern=function(e,t){if("string"!=typeof e||"string"!=typeof t.pattern&&!(t.pattern instanceof RegExp))return null;var r;if(t.pattern instanceof RegExp)r=t.pattern;else{var n,o="",i=t.pattern.match(/^\/(.+)\/([img]*)$/);i?(n=i[1],o=i[2]):n=t.pattern,r=new RegExp(n,o);}return r.test(e)?null:this.createError(v.STRING_PATTERN,{pattern:t.pattern},"","/pattern",null,e,t)},c.prototype.validateArray=function(e,t,r){return Array.isArray(e)&&(this.validateArrayLength(e,t,r)||this.validateArrayUniqueItems(e,t,r)||this.validateArrayItems(e,t,r))||null},c.prototype.validateArrayLength=function(e,t){var r;return void 0!==t.minItems&&e.length<t.minItems&&(r=this.createError(v.ARRAY_LENGTH_SHORT,{length:e.length,minimum:t.minItems},"","/minItems",null,e,t),this.handleError(r))?r:void 0!==t.maxItems&&e.length>t.maxItems&&(r=this.createError(v.ARRAY_LENGTH_LONG,{length:e.length,maximum:t.maxItems},"","/maxItems",null,e,t),this.handleError(r))?r:null},c.prototype.validateArrayUniqueItems=function(e,t){if(t.uniqueItems)for(var r=0;r<e.length;r++)for(var n=r+1;n<e.length;n++)if(l(e[r],e[n])){var o=this.createError(v.ARRAY_UNIQUE,{match1:r,match2:n},"","/uniqueItems",null,e,t);if(this.handleError(o))return o}return null},c.prototype.validateArrayItems=function(e,t,r){if(void 0===t.items)return null;var n,o;if(Array.isArray(t.items)){for(o=0;o<e.length;o++)if(o<t.items.length){if(n=this.validateAll(e[o],t.items[o],[o],["items",o],r+"/"+o))return n}else if(void 0!==t.additionalItems)if("boolean"==typeof t.additionalItems){if(!t.additionalItems&&(n=this.createError(v.ARRAY_ADDITIONAL_ITEMS,{},"/"+o,"/additionalItems",null,e,t),this.handleError(n)))return n}else if(n=this.validateAll(e[o],t.additionalItems,[o],["additionalItems"],r+"/"+o))return n}else for(o=0;o<e.length;o++)if(n=this.validateAll(e[o],t.items,[o],["items"],r+"/"+o))return n;return null},c.prototype.validateObject=function(e,t,r){return "object"!=typeof e||null===e||Array.isArray(e)?null:this.validateObjectMinMaxProperties(e,t,r)||this.validateObjectRequiredProperties(e,t,r)||this.validateObjectProperties(e,t,r)||this.validateObjectDependencies(e,t,r)||null},c.prototype.validateObjectMinMaxProperties=function(e,t){var r,n=Object.keys(e);return void 0!==t.minProperties&&n.length<t.minProperties&&(r=this.createError(v.OBJECT_PROPERTIES_MINIMUM,{propertyCount:n.length,minimum:t.minProperties},"","/minProperties",null,e,t),this.handleError(r))?r:void 0!==t.maxProperties&&n.length>t.maxProperties&&(r=this.createError(v.OBJECT_PROPERTIES_MAXIMUM,{propertyCount:n.length,maximum:t.maxProperties},"","/maxProperties",null,e,t),this.handleError(r))?r:null},c.prototype.validateObjectRequiredProperties=function(e,t){if(void 0!==t.required)for(var r=0;r<t.required.length;r++){var n=t.required[r];if(void 0===e[n]){var o=this.createError(v.OBJECT_REQUIRED,{key:n},"","/required/"+r,null,e,t);if(this.handleError(o))return o}}return null},c.prototype.validateObjectProperties=function(e,t,r){var n;for(var o in e){var i=r+"/"+o.replace(/~/g,"~0").replace(/\//g,"~1"),s=!1;if(void 0!==t.properties&&void 0!==t.properties[o]&&(s=!0,n=this.validateAll(e[o],t.properties[o],[o],["properties",o],i)))return n;if(void 0!==t.patternProperties)for(var a in t.patternProperties)if(new RegExp(a).test(o)&&(s=!0,n=this.validateAll(e[o],t.patternProperties[a],[o],["patternProperties",a],i)))return n;if(s)this.trackUnknownProperties&&(this.knownPropertyPaths[i]=!0,delete this.unknownPropertyPaths[i]);else if(void 0!==t.additionalProperties){if(this.trackUnknownProperties&&(this.knownPropertyPaths[i]=!0,delete this.unknownPropertyPaths[i]),"boolean"==typeof t.additionalProperties){if(!t.additionalProperties&&(n=this.createError(v.OBJECT_ADDITIONAL_PROPERTIES,{key:o},"","/additionalProperties",null,e,t).prefixWith(o,null),this.handleError(n)))return n}else if(n=this.validateAll(e[o],t.additionalProperties,[o],["additionalProperties"],i))return n}else this.trackUnknownProperties&&!this.knownPropertyPaths[i]&&(this.unknownPropertyPaths[i]=!0);}return null},c.prototype.validateObjectDependencies=function(e,t,r){var n;if(void 0!==t.dependencies)for(var o in t.dependencies)if(void 0!==e[o]){var i=t.dependencies[o];if("string"==typeof i){if(void 0===e[i]&&(n=this.createError(v.OBJECT_DEPENDENCY_KEY,{key:o,missing:i},"","",null,e,t).prefixWith(null,o).prefixWith(null,"dependencies"),this.handleError(n)))return n}else if(Array.isArray(i))for(var s=0;s<i.length;s++){var a=i[s];if(void 0===e[a]&&(n=this.createError(v.OBJECT_DEPENDENCY_KEY,{key:o,missing:a},"","/"+s,null,e,t).prefixWith(null,o).prefixWith(null,"dependencies"),this.handleError(n)))return n}else if(n=this.validateAll(e,i,[],["dependencies",o],r))return n}return null},c.prototype.validateCombinations=function(e,t,r){return this.validateAllOf(e,t,r)||this.validateAnyOf(e,t,r)||this.validateOneOf(e,t,r)||this.validateNot(e,t,r)||null},c.prototype.validateAllOf=function(e,t,r){if(void 0===t.allOf)return null;for(var n,o=0;o<t.allOf.length;o++){var i=t.allOf[o];if(n=this.validateAll(e,i,[],["allOf",o],r))return n}return null},c.prototype.validateAnyOf=function(e,t,r){if(void 0===t.anyOf)return null;var n,o,i=[],s=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths);for(var a=!0,u=0;u<t.anyOf.length;u++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=t.anyOf[u],l=this.errors.length,h=this.validateAll(e,c,[],["anyOf",u],r);if(null===h&&l===this.errors.length){if(this.errors=this.errors.slice(0,s),this.trackUnknownProperties){for(var f in this.knownPropertyPaths)o[f]=!0,delete n[f];for(var d in this.unknownPropertyPaths)o[d]||(n[d]=!0);a=!1;continue}return null}h&&i.push(h.prefixWith(null,""+u).prefixWith(null,"anyOf"));}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),a?(i=i.concat(this.errors.slice(s)),this.errors=this.errors.slice(0,s),this.createError(v.ANY_OF_MISSING,{},"","/anyOf",i,e,t)):void 0},c.prototype.validateOneOf=function(e,t,r){if(void 0===t.oneOf)return null;var n,o,i=null,s=[],a=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths);for(var u=0;u<t.oneOf.length;u++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=t.oneOf[u],l=this.errors.length,h=this.validateAll(e,c,[],["oneOf",u],r);if(null===h&&l===this.errors.length){if(null!==i)return this.errors=this.errors.slice(0,a),this.createError(v.ONE_OF_MULTIPLE,{index1:i,index2:u},"","/oneOf",null,e,t);if(i=u,this.trackUnknownProperties){for(var f in this.knownPropertyPaths)o[f]=!0,delete n[f];for(var d in this.unknownPropertyPaths)o[d]||(n[d]=!0);}}else h&&s.push(h);}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),null===i?(s=s.concat(this.errors.slice(a)),this.errors=this.errors.slice(0,a),this.createError(v.ONE_OF_MISSING,{},"","/oneOf",s,e,t)):(this.errors=this.errors.slice(0,a),null)},c.prototype.validateNot=function(e,t,r){if(void 0===t.not)return null;var n,o,i=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths,this.unknownPropertyPaths={},this.knownPropertyPaths={});var s=this.validateAll(e,t.not,null,null,r),a=this.errors.slice(i);return this.errors=this.errors.slice(0,i),this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),null===s&&0===a.length?this.createError(v.NOT_PASSED,{},"","/not",null,e,t):null},c.prototype.validateHypermedia=function(e,t,r){if(!t.links)return null;for(var n,o=0;o<t.links.length;o++){var i=t.links[o];if("describedby"===i.rel){for(var s=new u(i.href),a=!0,c=0;c<s.varNames.length;c++)if(!(s.varNames[c]in e)){a=!1;break}if(a){var l={$ref:s.fillFromObject(e)};if(n=this.validateAll(e,l,[],["links",o],r))return n}}}};var v={INVALID_TYPE:0,ENUM_MISMATCH:1,ANY_OF_MISSING:10,ONE_OF_MISSING:11,ONE_OF_MULTIPLE:12,NOT_PASSED:13,NUMBER_MULTIPLE_OF:100,NUMBER_MINIMUM:101,NUMBER_MINIMUM_EXCLUSIVE:102,NUMBER_MAXIMUM:103,NUMBER_MAXIMUM_EXCLUSIVE:104,NUMBER_NOT_A_NUMBER:105,STRING_LENGTH_SHORT:200,STRING_LENGTH_LONG:201,STRING_PATTERN:202,OBJECT_PROPERTIES_MINIMUM:300,OBJECT_PROPERTIES_MAXIMUM:301,OBJECT_REQUIRED:302,OBJECT_ADDITIONAL_PROPERTIES:303,OBJECT_DEPENDENCY_KEY:304,ARRAY_LENGTH_SHORT:400,ARRAY_LENGTH_LONG:401,ARRAY_UNIQUE:402,ARRAY_ADDITIONAL_ITEMS:403,FORMAT_CUSTOM:500,KEYWORD_CUSTOM:501,CIRCULAR_REFERENCE:600,UNKNOWN_PROPERTY:1e3},b={};for(var _ in v)b[v[_]]=_;var w={INVALID_TYPE:"Invalid type: {type} (expected {expected})",ENUM_MISMATCH:"No enum match for: {value}",ANY_OF_MISSING:'Data does not match any schemas from "anyOf"',ONE_OF_MISSING:'Data does not match any schemas from "oneOf"',ONE_OF_MULTIPLE:'Data is valid against more than one schema from "oneOf": indices {index1} and {index2}',NOT_PASSED:'Data matches schema from "not"',NUMBER_MULTIPLE_OF:"Value {value} is not a multiple of {multipleOf}",NUMBER_MINIMUM:"Value {value} is less than minimum {minimum}",NUMBER_MINIMUM_EXCLUSIVE:"Value {value} is equal to exclusive minimum {minimum}",NUMBER_MAXIMUM:"Value {value} is greater than maximum {maximum}",NUMBER_MAXIMUM_EXCLUSIVE:"Value {value} is equal to exclusive maximum {maximum}",NUMBER_NOT_A_NUMBER:"Value {value} is not a valid number",STRING_LENGTH_SHORT:"String is too short ({length} chars), minimum {minimum}",STRING_LENGTH_LONG:"String is too long ({length} chars), maximum {maximum}",STRING_PATTERN:"String does not match pattern: {pattern}",OBJECT_PROPERTIES_MINIMUM:"Too few properties defined ({propertyCount}), minimum {minimum}",OBJECT_PROPERTIES_MAXIMUM:"Too many properties defined ({propertyCount}), maximum {maximum}",OBJECT_REQUIRED:"Missing required property: {key}",OBJECT_ADDITIONAL_PROPERTIES:"Additional properties not allowed",OBJECT_DEPENDENCY_KEY:"Dependency failed - key must exist: {missing} (due to key: {key})",ARRAY_LENGTH_SHORT:"Array is too short ({length}), minimum {minimum}",ARRAY_LENGTH_LONG:"Array is too long ({length}), maximum {maximum}",ARRAY_UNIQUE:"Array items are not unique (indices {match1} and {match2})",ARRAY_ADDITIONAL_ITEMS:"Additional items not allowed",FORMAT_CUSTOM:"Format validation failed ({message})",KEYWORD_CUSTOM:"Keyword failed: {key} ({message})",CIRCULAR_REFERENCE:"Circular $refs: {urls}",UNKNOWN_PROPERTY:"Unknown property (not in schema)"};function P(e,t,r,n,o){if(Error.call(this),void 0===e)throw new Error("No error code supplied: "+n);this.message="",this.params=t,this.code=e,this.dataPath=r||"",this.schemaPath=n||"",this.subErrors=o||null;var i=new Error(this.message);if(this.stack=i.stack||i.stacktrace,!this.stack)try{throw i}catch(i){this.stack=i.stack||i.stacktrace;}}P.prototype=Object.create(Error.prototype),P.prototype.constructor=P,P.prototype.name="ValidationError",P.prototype.prefixWith=function(e,t){if(null!==e&&(e=e.replace(/~/g,"~0").replace(/\//g,"~1"),this.dataPath="/"+e+this.dataPath),null!==t&&(t=t.replace(/~/g,"~0").replace(/\//g,"~1"),this.schemaPath="/"+t+this.schemaPath),null!==this.subErrors)for(var r=0;r<this.subErrors.length;r++)this.subErrors[r].prefixWith(e,t);return this};var E={},S=function e(t){var r,n,o=new c,i={setErrorReporter:function(e){return "string"==typeof e?this.language(e):(n=e,!0)},addFormat:function(){o.addFormat.apply(o,arguments);},language:function(e){return e?(E[e]||(e=e.split("-")[0]),!!E[e]&&(r=e,e)):r},addLanguage:function(e,t){var r;for(r in v)t[r]&&!t[v[r]]&&(t[v[r]]=t[r]);var n=e.split("-")[0];if(E[n])for(r in E[e]=Object.create(E[n]),t)void 0===E[n][r]&&(E[n][r]=t[r]),E[e][r]=t[r];else E[e]=t,E[n]=t;return this},freshApi:function(t){var r=e();return t&&r.language(t),r},validate:function(e,t,i,s){var a=g(r),u=new c(o,!1,n?function(e,t,r){return n(e,t,r)||a(e,t,r)}:a,i,s);"string"==typeof t&&(t={$ref:t}),u.addSchema("",t);var l=u.validateAll(e,t,null,null,"");return !l&&s&&(l=u.banUnknownProperties(e,t)),this.error=l,this.missing=u.missing,this.valid=null===l,this.valid},validateResult:function(){var e={toString:function(){return this.valid?"valid":this.error.message}};return this.validate.apply(e,arguments),e},validateMultiple:function(e,t,i,s){var a=g(r),u=new c(o,!0,n?function(e,t,r){return n(e,t,r)||a(e,t,r)}:a,i,s);"string"==typeof t&&(t={$ref:t}),u.addSchema("",t),u.validateAll(e,t,null,null,""),s&&u.banUnknownProperties(e,t);var l={toString:function(){return this.valid?"valid":this.error.message}};return l.errors=u.errors,l.missing=u.missing,l.valid=0===l.errors.length,l},addSchema:function(){return o.addSchema.apply(o,arguments)},getSchema:function(){return o.getSchema.apply(o,arguments)},getSchemaMap:function(){return o.getSchemaMap.apply(o,arguments)},getSchemaUris:function(){return o.getSchemaUris.apply(o,arguments)},getMissingUris:function(){return o.getMissingUris.apply(o,arguments)},dropSchemas:function(){o.dropSchemas.apply(o,arguments);},defineKeyword:function(){o.defineKeyword.apply(o,arguments);},defineError:function(e,t,r){if("string"!=typeof e||!/^[A-Z]+(_[A-Z]+)*$/.test(e))throw new Error("Code name must be a string in UPPER_CASE_WITH_UNDERSCORES");if("number"!=typeof t||t%1!=0||t<1e4)throw new Error("Code number must be an integer > 10000");if(void 0!==v[e])throw new Error("Error already defined: "+e+" as "+v[e]);if(void 0!==b[t])throw new Error("Error code already used: "+b[t]+" as "+t);for(var n in v[e]=t,b[t]=e,w[e]=w[t]=r,E){var o=E[n];o[e]&&(o[t]=o[t]||o[e]);}},reset:function(){o.reset(),this.error=null,this.missing=[],this.valid=!0;},missing:[],error:null,valid:!0,normSchema:y,resolveUrl:p,getDocumentUri:m,errorCodes:v};return i.language(t||"en"),i}();return S.addLanguage("en-gb",w),S.tv4=S,S})?n.apply(t,o):n)||(e.exports=i);},function(e,t){var r={uris:{},schemas:{},aliases:{},declare:function(e,t,r,n){var o=e+"/"+t;if(n.extends){var i,s=n.extends.split("/");i=1===s.length?e+"/"+s.shift():s.join("/");var a=this.uris[i];if(!a)throw"Type '"+o+"' tries to extend unknown schema '"+i+"'";n.extends=this.schemas[a];}this.uris[o]=r,this.aliases[r]=o,this.schemas[r]=n;},resolveAlias:function(e){return this.uris[e]},getSchema:function(e){return this.schemas[e]},inScope:function(e){var t=e.length,r={};for(var n in this.uris)if(n.substr(0,t+1)===e+"/"){var o=this.uris[n];r[o]=this.schemas[o];}return r}},n=function(e){var t=new Error("Schema not found: "+e);return t.name="SchemaNotFound",t};n.prototype=Error.prototype,r.SchemaNotFound=n,e.exports=r;},function(e,t){function r(e){this.defaultValue=e,this._canPropagate=!1,this._storage={},this._itemsRev={},this.activatePropagation();}r.prototype={get:function(e){e=e.toLowerCase();var t=this._storage[e];return void 0===t&&(t=this.defaultValue,this._storage[e]=t),t},set:function(e,t){return e=e.toLowerCase(),this._storage[e]===t?t:(this._storage[e]=t,t||delete this._itemsRev[e],this._updateParentFolderItemRev(e,t),this._canPropagate&&this._propagate(e),t)},delete:function(e){return this.set(e,null)},deactivatePropagation:function(){return this._canPropagate=!1,!0},activatePropagation:function(){return !!this._canPropagate||(this._generateFolderRev("/"),this._canPropagate=!0,!0)},_hashCode:function(e){var t,r=0;if(0===e.length)return r;for(t=0;t<e.length;t++)r=(r<<5)-r+e.charCodeAt(t),r|=0;return r},_generateHash:function(e){var t=e.sort().join("|");return ""+this._hashCode(t)},_updateParentFolderItemRev:function(e,t){if("/"!==e){var r=this._getParentFolder(e);this._itemsRev[r]||(this._itemsRev[r]={});var n=this._itemsRev[r];t?n[e]=t:delete n[e],this._updateParentFolderItemRev(r,this.defaultValue);}},_getParentFolder:function(e){return e.substr(0,e.lastIndexOf("/",e.length-2)+1)},_propagate:function(e){if("/"!==e){var t=this._getParentFolder(e),r=this._itemsRev[t],n=[];for(var o in r)n.push(r[o]);var i=this._generateHash(n);this.set(t,i);}},_generateFolderRev:function(e){var t=this._itemsRev[e],r=this.defaultValue;if(t){var n=[];for(var o in t){var i=void 0;i="/"===o.substr(-1)?this._generateFolderRev(o):t[o],n.push(i);}n.length>0&&(r=this._generateHash(n));}return this.set(e,r),r}},e.exports=r;},function(e,t,r){var n;
    /*!
     * webfinger.js
     *   version 2.7.0
     *   http://github.com/silverbucket/webfinger.js
     *
     * Developed and Maintained by:
     *   Nick Jennings <nick@silverbucket.net> 2012
     *
     * webfinger.js is released under the AGPL (see LICENSE).
     *
     * You don't have to do anything special to choose one license or the other and you don't
     * have to notify anyone which license you are using.
     * Please see the corresponding license file for details of these licenses.
     * You are free to use, modify and distribute this software, but all copyright
     * information must remain.
     *
     */"function"!=typeof fetch&&"function"!=typeof XMLHttpRequest&&(XMLHttpRequest=r(26)),function(r){var o={"http://webfist.org/spec/rel":"webfist","http://webfinger.net/rel/avatar":"avatar",remotestorage:"remotestorage","http://tools.ietf.org/id/draft-dejong-remotestorage":"remotestorage",remoteStorage:"remotestorage","http://www.packetizer.com/rel/share":"share","http://webfinger.net/rel/profile-page":"profile",me:"profile",vcard:"vcard",blog:"blog","http://packetizer.com/rel/blog":"blog","http://schemas.google.com/g/2010#updates-from":"updates","https://camlistore.org/rel/server":"camilstore"},i={avatar:[],remotestorage:[],blog:[],vcard:[],updates:[],share:[],profile:[],webfist:[],camlistore:[]},s=["webfinger","host-meta","host-meta.json"];function a(e){return e.toString=function(){return this.message},e}function u(e){"object"!=typeof e&&(e={}),this.config={tls_only:void 0===e.tls_only||e.tls_only,webfist_fallback:void 0!==e.webfist_fallback&&e.webfist_fallback,uri_fallback:void 0!==e.uri_fallback&&e.uri_fallback,request_timeout:void 0!==e.request_timeout?e.request_timeout:1e4};}u.prototype.__fetchJRD=function(e,t,r){if("function"==typeof fetch)return this.__fetchJRD_fetch(e,t,r);if("function"==typeof XMLHttpRequest)return this.__fetchJRD_XHR(e,t,r);throw new Error("add a polyfill for fetch or XMLHttpRequest")},u.prototype.__fetchJRD_fetch=function(e,t,r){var n,o=this;"function"==typeof AbortController&&(n=new AbortController);var i=fetch(e,{headers:{Accept:"application/jrd+json, application/json"},signal:n?n.signal:void 0}).then((function(t){if(t.ok)return t.text();throw 404===t.status?a({message:"resource not found",url:e,status:t.status}):a({message:"error during request",url:e,status:t.status})}),(function(t){throw a({message:"error during request",url:e,status:void 0,err:t})})).then((function(t){if(o.__isValidJSON(t))return t;throw a({message:"invalid json",url:e,status:void 0})})),s=new Promise((function(t,r){setTimeout((function(){r(a({message:"request timed out",url:e,status:void 0})),n&&n.abort();}),o.config.request_timeout);}));Promise.race([i,s]).then((function(e){r(e);})).catch((function(e){t(e);}));},u.prototype.__fetchJRD_XHR=function(e,t,r){var n=this,o=!1,i=new XMLHttpRequest;function s(){if(!o){if(o=!0,200===i.status)return n.__isValidJSON(i.responseText)?r(i.responseText):t(a({message:"invalid json",url:e,status:i.status}));if(404===i.status)return t(a({message:"resource not found",url:e,status:i.status}));if(i.status>=301&&i.status<=302){var s=i.getResponseHeader("Location");return function(e){return "string"==typeof e&&"https"===e.split("://")[0]}(s)?u():t(a({message:"no redirect URL found",url:e,status:i.status}))}return t(a({message:"error during request",url:e,status:i.status}))}}function u(){i.onreadystatechange=function(){4===i.readyState&&s();},i.onload=function(){s();},i.ontimeout=function(){return t(a({message:"request timed out",url:e,status:i.status}))},i.open("GET",e,!0),i.timeout=n.config.request_timeout,i.setRequestHeader("Accept","application/jrd+json, application/json"),i.send();}return u()},u.prototype.__isValidJSON=function(e){try{JSON.parse(e);}catch(e){return !1}return !0},u.prototype.__isLocalhost=function(e){return /^localhost(\.localdomain)?(\:[0-9]+)?$/.test(e)},u.prototype.__processJRD=function(e,t,r,n){var s=JSON.parse(t);if("object"!=typeof s||"object"!=typeof s.links)return void 0!==s.error?r(a({message:s.error,request:e})):r(a({message:"unknown response from server",request:e}));var u=s.links;Array.isArray(u)||(u=[]);var c={object:s,json:t,idx:{}};c.idx.properties={name:void 0},c.idx.links=JSON.parse(JSON.stringify(i)),u.map((function(e,t){if(o.hasOwnProperty(e.rel)&&c.idx.links[o[e.rel]]){var r={};Object.keys(e).map((function(t,n){r[t]=e[t];})),c.idx.links[o[e.rel]].push(r);}}));var l=JSON.parse(t).properties;for(var h in l)l.hasOwnProperty(h)&&"http://packetizer.com/ns/name"===h&&(c.idx.properties.name=l[h]);return n(c)},u.prototype.lookup=function(e,t){if("string"!=typeof e)throw new Error("first parameter must be a user address");if("function"!=typeof t)throw new Error("second parameter must be a callback");var r=this,n="";n=e.indexOf("://")>-1?e.replace(/ /g,"").split("/")[2]:e.replace(/ /g,"").split("@")[1];var o=0,i="https";function a(){var t="";return e.split("://")[1]||(t="acct:"),i+"://"+n+"/.well-known/"+s[o]+"?resource="+t+e}function u(e){if(r.config.uri_fallback&&"webfist.org"!==n&&o!==s.length-1)return o+=1,c();if(!r.config.tls_only&&"https"===i)return o=0,i="http",c();if(!r.config.webfist_fallback||"webfist.org"===n)return t(e);o=0,i="http",n="webfist.org";var u=a();r.__fetchJRD(u,t,(function(e){r.__processJRD(u,e,t,(function(e){"object"==typeof e.idx.links.webfist&&"string"==typeof e.idx.links.webfist[0].href&&r.__fetchJRD(e.idx.links.webfist[0].href,t,(function(e){r.__processJRD(u,e,t,(function(e){return t(null,t)}));}));}));}));}function c(){var e=a();r.__fetchJRD(e,u,(function(n){r.__processJRD(e,n,t,(function(e){t(null,e);}));}));}return(r.__isLocalhost(n)&&(i="http"),setTimeout(c,0))},u.prototype.lookupLink=function(e,t,r){if(!i.hasOwnProperty(t))return r("unsupported rel "+t);this.lookup(e,(function(e,n){var o=n.idx.links[t];return e?r(e):0===o.length?r('no links found with rel="'+t+'"'):r(null,o[0])}));},void 0===(n=function(){return u}.apply(t,[]))||(e.exports=n);}();},function(e,t){e.exports=XMLHttpRequest;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=r(0),i=r(1),s=r(28),a=r(3),u={features:[],featuresDone:0,readyFired:!1,loadFeatures:function(){var e=this;for(var t in this.features=[],this.featuresDone=0,this.readyFired=!1,this.featureModules={WireClient:r(6),Dropbox:r(11),GoogleDrive:r(13),Access:r(15),Discover:r(14),Authorize:r(4),BaseClient:r(5),Env:r(12)},a.cache&&o.extend(this.featureModules,{Caching:r(16),IndexedDB:r(29),LocalStorage:r(30),InMemoryStorage:r(31),Sync:r(7)}),a.disableFeatures.forEach((function(t){e.featureModules[t]&&delete e.featureModules[t];})),this._allLoaded=!1,this.featureModules)this.loadFeature(t);},hasFeature:function(e){for(var t=this.features.length-1;t>=0;t--)if(this.features[t].name===e)return this.features[t].supported;return !1},loadFeature:function(e){var t=this,r=this.featureModules[e],o=!r._rs_supported||r._rs_supported();i("[RemoteStorage] [FEATURE ".concat(e,"] initializing ...")),"object"===n(o)?o.then((function(){t.featureSupported(e,!0),t.initFeature(e);}),(function(){t.featureSupported(e,!1);})):"boolean"==typeof o?(this.featureSupported(e,o),o&&this.initFeature(e)):this.featureSupported(e,!1);},initFeature:function(e){var t,r=this,o=this.featureModules[e];try{t=o._rs_init(this);}catch(t){return void this.featureFailed(e,t)}"object"===n(t)&&"function"==typeof t.then?t.then((function(){r.featureInitialized(e);}),(function(t){r.featureFailed(e,t);})):this.featureInitialized(e);},featureFailed:function(e,t){i("[RemoteStorage] [FEATURE ".concat(e,"] initialization failed (").concat(t,")")),this.featureDone();},featureSupported:function(e,t){i("[RemoteStorage] [FEATURE ".concat(e,"]  ").concat(t?"":" not"," supported")),t||this.featureDone();},featureInitialized:function(e){i("[RemoteStorage] [FEATURE ".concat(e,"] initialized.")),this.features.push({name:e,init:this.featureModules[e]._rs_init,supported:!0,cleanup:this.featureModules[e]._rs_cleanup}),this.featureDone();},featureDone:function(){this.featuresDone++,this.featuresDone===Object.keys(this.featureModules).length&&setTimeout(this.featuresLoaded.bind(this),0);},_setCachingModule:function(){var e=this;["IndexedDB","LocalStorage","InMemoryStorage"].some((function(t){if(e.features.some((function(e){return e.name===t})))return e.features.local=e.featureModules[t],!0}));},_fireReady:function(){try{this.readyFired||(this._emit("ready"),this.readyFired=!0);}catch(e){console.error("'ready' failed: ",e,e.stack),this._emit("error",e);}},featuresLoaded:function(){var e=this;i("[REMOTESTORAGE] All features loaded !"),this._setCachingModule(),this.local=a.cache&&this.features.local&&new this.features.local,this.local&&this.remote?(this._setGPD(s,this),this._bindChange(this.local)):this.remote&&this._setGPD(this.remote,this.remote),this.remote&&(this.remote.on("connected",(function(){e._fireReady(),e._emit("connected");})),this.remote.on("not-connected",(function(){e._fireReady(),e._emit("not-connected");})),this.remote.connected&&(this._fireReady(),this._emit("connected")),this.hasFeature("Authorize")||this.remote.stopWaitingForToken()),this._collectCleanupFunctions();try{this._allLoaded=!0,this._emit("features-loaded");}catch(e){o.logError(e),this._emit("error",e);}this._processPending();},_collectCleanupFunctions:function(){this._cleanups=[];for(var e=0;e<this.features.length;e++){var t=this.features[e].cleanup;"function"==typeof t&&this._cleanups.push(t);}}};e.exports=u;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=r(1);function i(e){return "dropbox"===this.backend&&e.match(/^\/public\/.*[^\/]$/)}var s={get:function(e,t){if(this.local){if(void 0===t)t="object"===n((r=this).remote)&&r.remote.connected&&r.remote.online?2*r.getSyncInterval():(o("Not setting default maxAge, because remote is offline or not connected"),!1);else if("number"!=typeof t&&!1!==t)return Promise.reject("Argument 'maxAge' must be 'false' or a number");return this.local.get(e,t,this.sync.queueGetRequest.bind(this.sync))}return this.remote.get(e);var r;},put:function(e,t,r){return i.bind(this)(e)?s._wrapBusyDone.call(this,this.remote.put(e,t,r)):this.local?this.local.put(e,t,r):s._wrapBusyDone.call(this,this.remote.put(e,t,r))},delete:function(e){return this.local?this.local.delete(e):s._wrapBusyDone.call(this,this.remote.delete(e))},_wrapBusyDone:function(e){var t=this;return this._emit("wire-busy"),e.then((function(e){return t._emit("wire-done",{success:!0}),Promise.resolve(e)}),(function(e){return t._emit("wire-done",{success:!1}),Promise.reject(e)}))}};e.exports=s;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o,i=r(1),s=r(8),a=r(2),u=r(0),c=function(e){this.db=e||o,this.db?(s(this),a(this,"change","local-events-done"),this.getsRunning=0,this.putsRunning=0,this.changesQueued={},this.changesRunning={}):i("[IndexedDB] Failed to open DB");};c.prototype={getNodes:function(e){for(var t=[],r={},n=0,o=e.length;n<o;n++)void 0!==this.changesQueued[e[n]]?r[e[n]]=u.deepClone(this.changesQueued[e[n]]||void 0):void 0!==this.changesRunning[e[n]]?r[e[n]]=u.deepClone(this.changesRunning[e[n]]||void 0):t.push(e[n]);return t.length>0?this.getNodesFromDb(t).then((function(e){for(var t in r)e[t]=r[t];return e})):Promise.resolve(r)},setNodes:function(e){for(var t in e)this.changesQueued[t]=e[t]||!1;return this.maybeFlush(),Promise.resolve()},maybeFlush:function(){0===this.putsRunning?this.flushChangesQueued():this.commitSlownessWarning||(this.commitSlownessWarning=setInterval((function(){console.warn("WARNING: waited more than 10 seconds for previous commit to finish");}),1e4));},flushChangesQueued:function(){this.commitSlownessWarning&&(clearInterval(this.commitSlownessWarning),this.commitSlownessWarning=null),Object.keys(this.changesQueued).length>0&&(this.changesRunning=this.changesQueued,this.changesQueued={},this.setNodesInDb(this.changesRunning).then(this.flushChangesQueued.bind(this)));},getNodesFromDb:function(e){var t=this;return new Promise((function(r,n){var o=t.db.transaction(["nodes"],"readonly"),i=o.objectStore("nodes"),s={};t.getsRunning++,e.map((function(e){i.get(e).onsuccess=function(t){s[e]=t.target.result;};})),o.oncomplete=function(){r(s),this.getsRunning--;}.bind(t),o.onerror=o.onabort=function(){n("get transaction error/abort"),this.getsRunning--;}.bind(t);}))},setNodesInDb:function(e){var t=this;return new Promise((function(r,o){var s=t.db.transaction(["nodes"],"readwrite"),a=s.objectStore("nodes"),u=(new Date).getTime();for(var c in t.putsRunning++,i("[IndexedDB] Starting put",e,t.putsRunning),e){var l=e[c];if("object"===n(l))try{a.put(l);}catch(e){throw i("[IndexedDB] Error while putting",l,e),e}else try{a.delete(c);}catch(e){throw i("[IndexedDB] Error while removing",a,l,e),e}}s.oncomplete=function(){this.putsRunning--,i("[IndexedDB] Finished put",e,this.putsRunning,(new Date).getTime()-u+"ms"),r();}.bind(t),s.onerror=function(){this.putsRunning--,o("transaction error");}.bind(t),s.onabort=function(){o("transaction abort"),this.putsRunning--;}.bind(t);}))},reset:function(e){var t=this,r=this.db.name;this.db.close(),c.clean(this.db.name,(function(){c.open(r,(function(r,n){r?i("[IndexedDB] Error while resetting local storage",r):t.db=n,"function"==typeof e&&e(self);}));}));},forAllNodes:function(e){var t=this;return new Promise((function(r){t.db.transaction(["nodes"],"readonly").objectStore("nodes").openCursor().onsuccess=function(n){var o=n.target.result;o?(e(t.migrate(o.value)),o.continue()):r();};}))},closeDB:function(){0===this.putsRunning?this.db.close():setTimeout(this.closeDB.bind(this),100);}},c.open=function(e,t){var r=setTimeout((function(){t("timeout trying to open db");}),1e4);try{var n=indexedDB.open(e,2);n.onerror=function(){i("[IndexedDB] Opening DB failed",n),clearTimeout(r),t(n.error);},n.onupgradeneeded=function(e){var t=n.result;i("[IndexedDB] Upgrade: from ",e.oldVersion," to ",e.newVersion),1!==e.oldVersion&&(i("[IndexedDB] Creating object store: nodes"),t.createObjectStore("nodes",{keyPath:"path"})),i("[IndexedDB] Creating object store: changes"),t.createObjectStore("changes",{keyPath:"path"});},n.onsuccess=function(){clearTimeout(r);var o=n.result;if(!o.objectStoreNames.contains("nodes")||!o.objectStoreNames.contains("changes"))return i("[IndexedDB] Missing object store. Resetting the database."),void c.clean(e,(function(){c.open(e,t);}));t(null,n.result);};}catch(n){i("[IndexedDB] Failed to open database: "+n),i("[IndexedDB] Resetting database and trying again."),clearTimeout(r),c.clean(e,(function(){c.open(e,t);}));}},c.clean=function(e,t){var r=indexedDB.deleteDatabase(e);r.onsuccess=function(){i("[IndexedDB] Done removing DB"),t();},r.onerror=r.onabort=function(t){console.error('Failed to remove database "'+e+'"',t);};},c._rs_init=function(e){return new Promise((function(t,r){c.open("remotestorage",(function(n,i){n?r(n):(o=i,i.onerror=function(){e._emit("error",n);},t());}));}))},c._rs_supported=function(){return new Promise((function(e,t){var r=u.getGlobalContext(),n=!1;if("undefined"!=typeof navigator&&navigator.userAgent.match(/Android (2|3|4\.[0-3])/)&&(navigator.userAgent.match(/Chrome|Firefox/)||(n=!0)),"indexedDB"in r&&!n)try{var o=indexedDB.open("rs-check");o.onerror=function(){t();},o.onsuccess=function(){o.result.close(),indexedDB.deleteDatabase("rs-check"),e();};}catch(e){t();}else t();}))},c._rs_cleanup=function(e){return new Promise((function(t){e.local&&e.local.closeDB(),c.clean("remotestorage",t);}))},e.exports=c;},function(e,t,r){var n=r(8),o=r(1),i=r(2),s=r(0),a="remotestorage:cache:nodes:",u=function(){n(this),o("[LocalStorage] Registering events"),i(this,"change","local-events-done");};function c(e){return e.substr(0,a.length)===a||"remotestorage:cache:changes:"===e.substr(0,"remotestorage:cache:changes:".length)}u.prototype={getNodes:function(e){for(var t={},r=0,n=e.length;r<n;r++)try{t[e[r]]=JSON.parse(localStorage[a+e[r]]);}catch(n){t[e[r]]=void 0;}return Promise.resolve(t)},setNodes:function(e){for(var t in e)localStorage[a+t]=JSON.stringify(e[t]);return Promise.resolve()},forAllNodes:function(e){for(var t,r=0,n=localStorage.length;r<n;r++)if(localStorage.key(r).substr(0,a.length)===a){try{t=this.migrate(JSON.parse(localStorage[localStorage.key(r)]));}catch(e){t=void 0;}t&&e(t);}return Promise.resolve()}},u._rs_init=function(){},u._rs_supported=function(){return s.localStorageAvailable()},u._rs_cleanup=function(){for(var e=[],t=0,r=localStorage.length;t<r;t++){var n=localStorage.key(t);c(n)&&e.push(n);}e.forEach((function(e){o("[LocalStorage] Removing",e),delete localStorage[e];}));},e.exports=u;},function(e,t,r){var n=r(2),o=r(1),i=r(8),s=function(){i(this),o("[InMemoryStorage] Registering events"),n(this,"change","local-events-done"),this._storage={};};s.prototype={getNodes:function(e){for(var t={},r=0,n=e.length;r<n;r++)t[e[r]]=this._storage[e[r]];return Promise.resolve(t)},setNodes:function(e){for(var t in e)void 0===e[t]?delete this._storage[t]:this._storage[t]=e[t];return Promise.resolve()},forAllNodes:function(e){for(var t in this._storage)e(this.migrate(this._storage[t]));return Promise.resolve()}},s._rs_init=function(){},s._rs_supported=function(){return !0},s._rs_cleanup=function(){},e.exports=s;},function(e,t,r){var n=r(5),o=r(9);o.prototype.addModule=function(e){var t=e.name,r=e.builder;if(Object.defineProperty(this,t,{configurable:!0,get:function(){var e=this._loadModule(t,r);return Object.defineProperty(this,t,{value:e}),e}}),-1!==t.indexOf("-")){var n=t.replace(/\-[a-z]/g,(function(e){return e[1].toUpperCase()}));Object.defineProperty(this,n,{get:function(){return this[t]}});}},o.prototype._loadModule=function(e,t){if(t)return t(new n(this,"/"+e+"/"),new n(this,"/public/"+e+"/")).exports;throw"Unknown module: "+e};}])}));
    //# sourceMappingURL=remotestorage.js.map
    });

    var RemoteStorage = unwrapExports(remotestorage);
    var remotestorage_1 = remotestorage.RemoteStorage;

    const mod$c = {

    	_KOMSettingsActionSet (storageClient, param1, param2) {
    		if (typeof param1 !== 'string') {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		if (typeof param2 === 'undefined') {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		return mod$b.KOMSettingStorageWrite(storageClient, {
    			KOMSettingKey: param1,
    			KOMSettingValue: param2,
    		});
    	},

    	_KOMSettingsActionGet (storageClient, inputData) {
    		if (typeof inputData !== 'string') {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		return mod$b.KOMSettingStorageRead(storageClient, inputData);
    	},

    	KOMSettingsActionProperty (storageClient, param1, param2) {
    		if (typeof param2 === 'undefined') {
    			return mod$c._KOMSettingsActionGet(storageClient, param1);
    		}

    		return mod$c._KOMSettingsActionSet(storageClient, param1, param2);
    	},

    	KOMSettingsActionDelete (storageClient, inputData) {
    		return mod$b.KOMSettingStorageDelete(storageClient, inputData);
    	},

    	async KOMSettingsActionQuery (storageClient, inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			return Promise.reject(new Error('KOMErrorInputNotValid'));
    		}

    		return Promise.resolve(Object.values(await mod$b.KOMSettingStorageList(storageClient)).filter(function(e) {
    			if (!Object.keys(inputData).length) {
    				return true;
    			}

    			if (Object.keys(inputData).filter(function (key) {
    				return e[key].match(inputData[key]);
    			}).length) {
    				return true;
    			}

    			return false;
    		}));
    	},
    	
    };

    const kIntervalAgainSeconds = 60;
    const kIntervalLearnMinutes = 10;
    const kIntervalDefaultDays = 1;
    const kIntervalEasyDays = 4;
    const kIntervalOverdueDivisorHard = 4;
    const kIntervalOverdueDivisorGood = 2;
    const kIntervalOverdueDivisorEasy = 1;
    const kMultiplierDefault = 2.5;
    const kMultiplierMin = 1.3;
    const kMultiplierHard = 1.2;
    const kMultiplierSummandFail = -0.2;
    const kMultiplierSummandGood = 0;
    const kMultiplierSummandHard = -0.15;
    const kMultiplierSummandEasy = 0.15;
    const kMultiplierMultiplicandEasy = 1.3;

    const mod$d = {

    	KOMPlaySort(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		let reviewAll = [];

    		const reviewForward = mod$d._KOMPlaySortShuffle(inputData.filter(function (e) {
    			return !mod$6.KOMSpacingModelIsBackward(e) && e.KOMSpacingDueDate;
    		}));

    		reviewAll.push(...reviewForward);

    		let reviewBackward = mod$d._KOMPlaySortShuffle(inputData.filter(function (e) {
    			return mod$6.KOMSpacingModelIsBackward(e) && e.KOMSpacingDueDate;
    		}));

    		let reviewTrialCount = 0;
    		while (reviewForward.length && reviewBackward.length && mod$6.KOMSpacingModelIdentifier(reviewForward.slice(-1).pop().KOMSpacingID) === mod$6.KOMSpacingModelIdentifier(reviewBackward[0].KOMSpacingID) && reviewTrialCount < inputData.length) {
    			reviewBackward = mod$d._KOMPlaySortShuffle(reviewBackward);

    			reviewTrialCount++;
    		}

    		reviewAll.push(...reviewBackward);

    		const unseenAll = mod$d._KOMPlaySortShuffle(inputData.filter(function (e) {
    			return !mod$6.KOMSpacingModelIsBackward(e) && !e.KOMSpacingDueDate;
    		}));

    		let unseenBackward = mod$d._KOMPlaySortShuffle(inputData.filter(function (e) {
    			return mod$6.KOMSpacingModelIsBackward(e) && !e.KOMSpacingDueDate;
    		}));

    		let unseenTrialCount = 0;
    		while (unseenAll.length && unseenBackward.length && mod$6.KOMSpacingModelIdentifier(unseenAll.slice(-1).pop().KOMSpacingID) === mod$6.KOMSpacingModelIdentifier(unseenBackward[0].KOMSpacingID) && unseenTrialCount < inputData.length) {
    			unseenBackward = mod$d._KOMPlaySortShuffle(unseenBackward);

    			unseenTrialCount++;
    		}

    		unseenAll.push(...unseenBackward);

    		if (!reviewAll.length) {
    			return unseenAll;
    		}

    		const lastIndex = reviewAll.length - 1;
    		const width = Math.floor(reviewAll.length / (unseenAll.length + 1));

    		return unseenAll.reduce(function (coll, item, index) {
    			coll.splice(lastIndex - width * (index + 1), 0, item);

    			return coll;
    		}, reviewAll.reverse()).reverse();
    	},

    	//How to randomize (shuffle) a JavaScript array? - Stack Overflow https://stackoverflow.com/a/12646864
    	_KOMPlaySortShuffle(inputData) {
    		for (let i = inputData.length - 1; i > 0; i--) {
    			const j = Math.floor(Math.random() * (i + 1));
    			[inputData[i], inputData[j]] = [inputData[j], inputData[i]];
    		}

    		return inputData;
    	},

    	KOMPlayStateIsValid(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!Array.isArray(inputData.KOMPlayStateQueue)) {
    			return false;
    		}

    		if (!Array.isArray(inputData.KOMPlayStateWait)) {
    			return false;
    		}

    		if (inputData.KOMPlayStateCurrent && mod$6.KOMSpacingModelErrorsFor(inputData.KOMPlayStateCurrent)) {
    			return false;
    		}

    		if (inputData.KOMPlayStateShouldRandomize !== undefined) {
    			if (typeof inputData.KOMPlayStateShouldRandomize !== 'boolean') {
    				return false;
    			}
    		}

    		return true;
    	},

    	KOMPlayResponseTypeAgain() {
    		return 'RESPONSE_AGAIN';
    	},

    	KOMPlayResponseTypeHard() {
    		return 'RESPONSE_HARD';
    	},

    	KOMPlayResponseTypeGood() {
    		return 'RESPONSE_GOOD';
    	},

    	KOMPlayResponseTypeEasy() {
    		return 'RESPONSE_EASY';
    	},

    	KOMPlayResponseTypes() {
    		return [
    			mod$d.KOMPlayResponseTypeAgain(),
    			mod$d.KOMPlayResponseTypeHard(),
    			mod$d.KOMPlayResponseTypeGood(),
    			mod$d.KOMPlayResponseTypeEasy(),
    		];
    	},

    	KOMPlayResponseIntervalAgain() {
    		return 1000 * kIntervalAgainSeconds;
    	},

    	KOMPlayResponseIntervalLearn() {
    		return 1000 * 60 * kIntervalLearnMinutes;
    	},

    	KOMPlayResponseIntervalGraduateDefault() {
    		return kIntervalDefaultDays;
    	},

    	KOMPlayResponseIntervalGraduateEasy() {
    		return kIntervalEasyDays;
    	},

    	KOMPlayResponseIntervalOverdueDivisorHard() {
    		return kIntervalOverdueDivisorHard;
    	},

    	KOMPlayResponseIntervalOverdueDivisorGood() {
    		return kIntervalOverdueDivisorGood;
    	},

    	KOMPlayResponseIntervalOverdueDivisorEasy() {
    		return kIntervalOverdueDivisorEasy;
    	},

    	KOMPlayResponseIntervalOverdueDays(spacing, chronicle) {
    		if (mod$6.KOMSpacingModelErrorsFor(spacing)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!mod$d.KOMChronicleIsPrepared(chronicle)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!spacing.KOMSpacingInterval) {
    			return 0;
    		}

    		const due = new Date(mod$5.KOMSharedGroupingDay(spacing.KOMSpacingDueDate)).valueOf();
    		const date = new Date(mod$5.KOMSharedGroupingDay(chronicle.KOMChronicleResponseDate)).valueOf();

    		if (date <= due) {
    			return 0;
    		}

    		return (date - due) / 1000 / 60 / 60 / 24;
    	},

    	KOMPlayResponseIntervalOverdueBonus(spacing, chronicle) {
    		if (mod$6.KOMSpacingModelErrorsFor(spacing)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!mod$d.KOMChronicleIsPrepared(chronicle)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const days = mod$d.KOMPlayResponseIntervalOverdueDays(spacing, chronicle);

    		if (chronicle.KOMChronicleResponseType === mod$d.KOMPlayResponseTypeHard()) {
    			return days / mod$d.KOMPlayResponseIntervalOverdueDivisorHard();
    		}

    		if (chronicle.KOMChronicleResponseType === mod$d.KOMPlayResponseTypeGood()) {
    			return days / mod$d.KOMPlayResponseIntervalOverdueDivisorGood();
    		}

    		if (chronicle.KOMChronicleResponseType === mod$d.KOMPlayResponseTypeEasy()) {
    			return days / mod$d.KOMPlayResponseIntervalOverdueDivisorEasy();
    		}

    		return 0;
    	},

    	KOMPlayResponseMultiplierDefault() {
    		return kMultiplierDefault;
    	},

    	KOMPlayResponseMultiplierMin() {
    		return kMultiplierMin;
    	},

    	KOMPlayResponseMultiplierHard() {
    		return kMultiplierHard;
    	},

    	KOMPlayResponseMultiplierSummandFail() {
    		return kMultiplierSummandFail;
    	},

    	KOMPlayResponseMultiplierSummandGood() {
    		return kMultiplierSummandGood;
    	},

    	KOMPlayResponseMultiplierSummandHard() {
    		return kMultiplierSummandHard;
    	},

    	KOMPlayResponseMultiplierSummandEasy() {
    		return kMultiplierSummandEasy;
    	},

    	KOMPlayResponseMultiplierMultiplicandEasy() {
    		return kMultiplierMultiplicandEasy;
    	},

    	KOMPlayRespond(state, chronicle) {
    		if (!mod$d.KOMPlayStateIsValid(state)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!mod$d.KOMChronicleIsPrepared(chronicle)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const spacing = state.KOMPlayStateCurrent;

    		Object.assign(spacing, (function update_spacing() {
    			const lastResponseWasAgain = mod$6.KOMSpacingModelIsLearning(spacing) && spacing.KOMSpacingChronicles.slice(-1).pop().KOMChronicleResponseType === mod$d.KOMPlayResponseTypeAgain();

    			// GRADUATE
    			if (!mod$6.KOMSpacingModelIsReviewing(spacing) && (chronicle.KOMChronicleResponseType === mod$d.KOMPlayResponseTypeEasy() || (mod$6.KOMSpacingModelIsLearning(spacing) && chronicle.KOMChronicleResponseType !== mod$d.KOMPlayResponseTypeAgain() && !lastResponseWasAgain))) {
    				delete spacing.KOMSpacingIsLearning;

    				const interval = chronicle.KOMChronicleResponseType === mod$d.KOMPlayResponseTypeEasy() ? mod$d.KOMPlayResponseIntervalGraduateEasy() : mod$d.KOMPlayResponseIntervalGraduateDefault();
    				return {
    					KOMSpacingInterval: interval,
    					KOMSpacingMultiplier: mod$d.KOMPlayResponseMultiplierDefault(),
    					KOMSpacingDueDate: new Date(chronicle.KOMChronicleResponseDate.valueOf() + 1000 * 60 * 60 * 24 * interval),
    				};
    			}

    			// REVIEW
    			if (mod$6.KOMSpacingModelIsReviewing(spacing) && chronicle.KOMChronicleResponseType !== mod$d.KOMPlayResponseTypeAgain()) {
    				let interval = (spacing.KOMSpacingInterval + mod$d.KOMPlayResponseIntervalOverdueBonus(spacing, chronicle)) * (chronicle.KOMChronicleResponseType === mod$d.KOMPlayResponseTypeHard() ? mod$d.KOMPlayResponseMultiplierHard() : spacing.KOMSpacingMultiplier);

    				if (state.KOMPlayStateShouldRandomize) {
    					interval *= 1 + (Math.min(0.25, Math.random()) / 100 + 0.005) * (Math.random() > 0.5 ? -1 : 1);
    				}

    				if (chronicle.KOMChronicleResponseType === mod$d.KOMPlayResponseTypeEasy()) {
    					interval *= mod$d.KOMPlayResponseMultiplierMultiplicandEasy();
    				}

    				let multiplier = spacing.KOMSpacingMultiplier;

    				if (chronicle.KOMChronicleResponseType === mod$d.KOMPlayResponseTypeHard()) {
    					multiplier += mod$d.KOMPlayResponseMultiplierSummandHard();
    				}

    				if (chronicle.KOMChronicleResponseType === mod$d.KOMPlayResponseTypeEasy()) {
    					multiplier += mod$d.KOMPlayResponseMultiplierSummandEasy();
    				}

    				return {
    					KOMSpacingInterval: interval,
    					KOMSpacingMultiplier: Math.max(mod$d.KOMPlayResponseMultiplierMin(), multiplier),
    					KOMSpacingDueDate: new Date(chronicle.KOMChronicleResponseDate.valueOf() + 1000 * 60 * 60 * 24 * interval),
    				};
    			}

    			// LAPSE
    			if (mod$6.KOMSpacingModelIsReviewing(spacing) && chronicle.KOMChronicleResponseType === mod$d.KOMPlayResponseTypeAgain()) {
    				delete spacing.KOMSpacingInterval;

    				spacing.KOMSpacingMultiplier += mod$d.KOMPlayResponseMultiplierSummandFail();
    			}

    			// LEARN
    			return {
    				KOMSpacingIsLearning: true,
    				KOMSpacingDueDate: new Date(chronicle.KOMChronicleResponseDate.valueOf() + (chronicle.KOMChronicleResponseType === mod$d.KOMPlayResponseTypeAgain() ? mod$d.KOMPlayResponseIntervalAgain() : mod$d.KOMPlayResponseIntervalLearn())),
    			};
    		})());

    		spacing.KOMSpacingChronicles.push(Object.assign(chronicle, {
    			KOMChronicleDueDate: spacing.KOMSpacingDueDate,
    		}, spacing.KOMSpacingIsLearning ? {
    			KOMChronicleIsLearning: true,
    		} : {}, spacing.KOMSpacingIsLearning ? {} : {
    			KOMChronicleInterval: spacing.KOMSpacingInterval,
    			KOMChronicleMultiplier: spacing.KOMSpacingMultiplier,
    		}));

    		(function update_state() {
    			if (mod$6.KOMSpacingModelIsLearning(spacing)) {
    				state.KOMPlayStateWait.push(spacing);
    			}

    			state.KOMPlayStateWait.filter(function (e) {
    				if (!state.KOMPlayStateQueue.length) {
    					return true;
    				}

    				return e.KOMSpacingDueDate < chronicle.KOMChronicleResponseDate;
    			}).reverse().forEach(function (e) {
    				state.KOMPlayStateQueue.unshift(state.KOMPlayStateWait.splice(state.KOMPlayStateWait.indexOf(e), 1).pop());
    			});

    			state.KOMPlayStateCurrent = state.KOMPlayStateQueue.shift();
    		})();

    		return state;
    	},

    	KOMChronicleIsPrepared(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!(inputData.KOMChronicleDrawDate instanceof Date) || Number.isNaN(inputData.KOMChronicleDrawDate.getTime())) {
    			return false;
    		}

    		if (!(inputData.KOMChronicleFlipDate instanceof Date) || Number.isNaN(inputData.KOMChronicleFlipDate.getTime())) {
    			return false;
    		}

    		if (!(inputData.KOMChronicleResponseDate instanceof Date) || Number.isNaN(inputData.KOMChronicleResponseDate.getTime())) {
    			return false;
    		}

    		if (!mod$d.KOMPlayResponseTypes().includes(inputData.KOMChronicleResponseType)) {
    			return false;
    		}

    		return true;
    	},

    	KOMChronicleIsValid(inputData) {
    		if (!mod$d.KOMChronicleIsPrepared(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!(inputData.KOMChronicleDueDate instanceof Date) || Number.isNaN(inputData.KOMChronicleDueDate.getTime())) {
    			return false;
    		}

    		if (inputData.KOMChronicleIsLearning !== undefined) {
    			if (typeof inputData.KOMChronicleIsLearning !== 'boolean') {
    				return false;
    			}
    		}

    		if (inputData.KOMChronicleIsReadyToGraduate !== undefined) {
    			if (typeof inputData.KOMChronicleIsReadyToGraduate !== 'boolean') {
    				return false;
    			}
    		}

    		if (inputData.KOMChronicleInterval !== undefined) {
    			if (typeof inputData.KOMChronicleInterval !== 'number') {
    				return false;
    			}
    		}

    		if (inputData.KOMChronicleMultiplier !== undefined) {
    			if (typeof inputData.KOMChronicleMultiplier !== 'number') {
    				return false;
    			}
    		}

    		if (inputData.KOMChronicleDidDrawMultipleTimes !== undefined) {
    			if (typeof inputData.KOMChronicleDidDrawMultipleTimes !== 'boolean') {
    				return false;
    			}
    		}

    		if (inputData.KOMChronicleDidFlipMultipleTimes !== undefined) {
    			if (typeof inputData.KOMChronicleDidFlipMultipleTimes !== 'boolean') {
    				return false;
    			}
    		}

    		return true;
    	},

    	KOMChronicleGenerateDraw(param1, param2) {
    		if (!(param1 instanceof Date) || Number.isNaN(param1.getTime())) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (mod$6.KOMSpacingModelErrorsFor(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return Object.assign({
    			KOMChronicleDrawDate: param1,
    		}, param2.KOMSpacingDrawDate && mod$6.KOMSpacingModelIsReviewing(param2) && mod$5.KOMSharedGroupingDay(param1) === mod$5.KOMSharedGroupingDay(param2.KOMSpacingDrawDate) ? {
    			KOMChronicleDidDrawMultipleTimes: true,
    		} : {});
    	},

    	KOMChronicleGenerateFlip(param1, param2) {
    		if (!(param1 instanceof Date) || Number.isNaN(param1.getTime())) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (mod$6.KOMSpacingModelErrorsFor(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return Object.assign({
    			KOMChronicleFlipDate: param1,
    		}, param2.KOMSpacingFlipDate && mod$6.KOMSpacingModelIsReviewing(param2) && mod$5.KOMSharedGroupingDay(param1) === mod$5.KOMSharedGroupingDay(param2.KOMSpacingFlipDate) ? {
    			KOMChronicleDidFlipMultipleTimes: true,
    		} : {});
    	},

    	KOMPlayUndo(inputData) {
    		if (mod$6.KOMSpacingModelErrorsFor(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!inputData.KOMSpacingChronicles.length) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		Object.keys(inputData).forEach(function (e) {
    			if (['KOMSpacingID', 'KOMSpacingChronicles', 'KOMSpacingDrawDate', 'KOMSpacingFlipDate'].includes(e)) {
    				return;
    			}

    			if (e[0] === '$') {
    				return;
    			}

    			delete inputData[e];
    		});

    		inputData.KOMSpacingChronicles.pop();

    		const item = inputData.KOMSpacingChronicles.slice(-1).pop();
    		Object.keys(item || {}).forEach(function (e) {
    			if (['KOMChronicleResponseDate', 'KOMChronicleResponseType'].includes(e)) {
    				return;
    			}

    			inputData[e.replace('KOMChronicle', 'KOMSpacing')] = item[e];
    		});

    		return inputData;
    	},

    };

    const mod$e = {

    	KOMReviewGeneralTableDays() {
    		return 7;
    	},

    	KOMReviewGeneralUpcomingColors() {
    		return [
    			mod$5.KOMSharedColorMature(),
    			mod$5.KOMSharedColorDeveloping(),
    			];
    	},

    	KOMReviewGeneralHistoricalColors() {
    		return [
    			mod$5.KOMSharedColorMature(),
    			mod$5.KOMSharedColorDeveloping(),
    			mod$5.KOMSharedColorRelearning(),
    			mod$5.KOMSharedColorUnseen(),
    			];
    	},

    	KOMReviewGeneralCollectionColors() {
    		return [
    			mod$5.KOMSharedColorUnseen(),
    			mod$5.KOMSharedColorDeveloping(),
    			mod$5.KOMSharedColorMature(),
    			mod$5.KOMSharedColorRetired(),
    			];
    	},

    };

    const mod$f = {

    	KOMReviewSpacingsToday(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.filter(function (e) {
    			if (!e.KOMSpacingDueDate) {
    				return true;
    			}

    			return mod$5.KOMSharedGroupingDay(e.KOMSpacingDueDate).valueOf() <= mod$5.KOMSharedGroupingDay(new Date()).valueOf();
    		});
    	},

    	KOMReviewSchemeReviewing() {
    		return 'kKOMReviewSchemeReviewing';
    	},

    	KOMReviewSchemeUnseen() {
    		return 'kKOMReviewSchemeUnseen';
    	},

    	KOMReviewSchemeMixed() {
    		return 'kKOMReviewSchemeMixed';
    	},

    	KOMReviewSchemes() {
    		return [
    			mod$f.KOMReviewSchemeReviewing(),
    			mod$f.KOMReviewSchemeUnseen(),
    			mod$f.KOMReviewSchemeMixed(),
    		];
    	},

    	KOMReviewModelErrorsFor(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const errors = {};

    		if (!mod$f.KOMReviewSchemes().includes(inputData.KOMReviewScheme)) {
    			errors.KOMReviewScheme = [
    				'KOMErrorNotValid',
    			];
    		} else if (inputData.KOMReviewScheme !== mod$f.KOMReviewSchemeReviewing()) {
    			if (typeof inputData.KOMReviewMaxUnseenCards === 'undefined') {
    				errors.KOMReviewMaxUnseenCards = [
    					'KOMErrorNotDefined',
    				];
    			}
    		}

    		if (inputData.KOMReviewMaxUnseenCards !== undefined) {
    			if (typeof inputData.KOMReviewMaxUnseenCards !== 'number') {
    				errors.KOMReviewMaxUnseenCards = [
    					'KOMErrorNotNumber',
    				];
    			} else if (inputData.KOMReviewMaxUnseenCards < 1) {
    				errors.KOMReviewMaxUnseenCards = [
    					'KOMErrorNotPositive',
    				];
    			}
    		}

    		return Object.entries(errors).length ? errors : null;
    	},

    	KOMReviewFilter(param1, param2, param3) {
    		if (!Array.isArray(param1)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (mod$f.KOMReviewModelErrorsFor(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (mod.KOMDeckModelErrorsFor(param3)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const cardsNew = [];
    		return param1.filter(function (e, i) {
    			if (e.$KOMSpacingCard.KOMCardIsRetired) {
    				return false;
    			}

    			if (param2.KOMReviewScheme === mod$f.KOMReviewSchemeReviewing() && mod$6.KOMSpacingModelIsUnseen(e)) {
    				return false;
    			}

    			if (param2.KOMReviewScheme === mod$f.KOMReviewSchemeUnseen() && !mod$6.KOMSpacingModelIsUnseen(e)) {
    				return false;
    			}

    			if (param3.KOMDeckIsForwardOnly && mod$6.KOMSpacingModelIsBackward(e)) {
    				return false;
    			}

    			if (param2.KOMReviewScheme !== mod$f.KOMReviewSchemeReviewing() && mod$6.KOMSpacingModelIsUnseen(e) && !cardsNew.includes(e.$KOMSpacingCard)) {
    				cardsNew.push(e.$KOMSpacingCard);
    			}

    			if (param2.KOMReviewScheme !== mod$f.KOMReviewSchemeReviewing() && mod$6.KOMSpacingModelIsUnseen(e) && cardsNew.length > param2.KOMReviewMaxUnseenCards) {
    				return false;
    			}

    			return true;
    		});
    	},

    	KOMReviewRetireCards (param1, param2) {
    		if (mod.KOMDeckModelErrorsFor(param1)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!Array.isArray(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}


    		if (!param1.KOMDeckRetireCardsMonths) {
    			return [];
    		}

    		return Object.values(param2.reduce(function (coll, item) {
    			return Object.assign(coll, {
    				[mod$6.KOMSpacingModelIdentifier(item.KOMSpacingID)]: (coll[[mod$6.KOMSpacingModelIdentifier(item.KOMSpacingID)]] || []).concat(item),
    			});
    		}, {})).filter(function (e) {
    			return e.filter(function (e) {
    				return e.KOMSpacingInterval > (365 / 12.0 * param1.KOMDeckRetireCardsMonths);
    			}).length;
    		}).map(function (e) {
    			return e[0].$KOMSpacingCard;
    		})
    	},

    	KOMReviewDeckSort(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.sort(function (a, b) {
    			return a.KOMDeckName.localeCompare(b.KOMDeckName);
    		});
    	},

    	KOMReviewTotalMinutes(inputData) {
    		if (typeof inputData !== 'number') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return Math.round(inputData / 1000 / 60 * 10) / 10;
    	},

    	KOMReviewTodayTotalMilliseconds(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.reduce(function (coll, item) {
    			return coll + item.KOMSpacingChronicles.filter(function (e) {
    				return mod$5.KOMSharedGroupingDay(e.KOMChronicleResponseDate) === mod$5.KOMSharedGroupingDay(new Date());
    			}).reduce(function (responseTime, e) {
    				return responseTime + (e.KOMChronicleResponseDate - e.KOMChronicleDrawDate);
    			}, 0);
    		}, 0);
    	},

    	KOMReviewTodayReviewAccuracy(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return (function (scores) {
    			if (!scores.length) {
    				return 0;
    			}

    			return scores.reduce(function (coll, item) {
    				return coll + item;
    			}, 0) * 1.0 / scores.length;
    		})(inputData.filter(function (e) {
    			const items = e.KOMSpacingChronicles.filter(function (e) {
    				return mod$5.KOMSharedGroupingDay(e.KOMChronicleResponseDate) === mod$5.KOMSharedGroupingDay(new Date());
    			});

    			if (!items.length) {
    				return false;
    			}

    			if (!e.KOMSpacingChronicles.filter(function (e) {
    				if (items.includes(e)) {
    					return false;
    				}

    				return e.KOMChronicleMultiplier;
    			}).length) {
    				return false;
    			}

    			return true;
    		}).map(function (e) {
    			return e.KOMSpacingChronicles.filter(function (e) {
    				return mod$5.KOMSharedGroupingDay(e.KOMChronicleResponseDate) === mod$5.KOMSharedGroupingDay(new Date());
    			}).filter(function (e) {
    				return e.KOMChronicleResponseType === mod$d.KOMPlayResponseTypeAgain();
    			}).length ? 0 : 1;
    		}));
    	},

    	KOMReviewTodayPercentage(inputData) {
    		if (typeof inputData !== 'number') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return Math.round(inputData * 100 * 10) / 10;
    	},

    	KOMReviewGeneralUpcomingDates() {
    		return Array.from(Array(mod$e.KOMReviewGeneralTableDays())).map(function (e, i) {
    			return mod$5.KOMSharedGroupingDay(new Date(Date.now() + 1000 * 60 * 60 * 24 * i));
    		});
    	},

    	KOMReviewGeneralUpcomingFilter(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.filter(function (e) {
    			if (!e.KOMSpacingDueDate) {
    				return false;
    			}
    			
    			if (mod$5.KOMSharedGroupingDay(e.KOMSpacingDueDate) < mod$5.KOMSharedGroupingDay(new Date())) {
    				return false;
    			}

    			if (mod$5.KOMSharedGroupingDay(e.KOMSpacingDueDate) >= mod$5.KOMSharedGroupingDay(new Date(Date.now() + 1000 * 60 * 60 * 24 * mod$e.KOMReviewGeneralTableDays()))) {
    				return false;
    			}

    			return true;
    		});
    	},

    	KOMReviewGeneralUpcomingGroupByDate(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.reduce(function (coll, item) {
    			coll[mod$5.KOMSharedGroupingDay(item.KOMSpacingDueDate)] = (coll[mod$5.KOMSharedGroupingDay(item.KOMSpacingDueDate)] || []).concat(item);

    			return coll;
    		}, {});
    	},

    	KOMReviewGeneralHistoricalDates() {
    		return Array.from(Array(mod$e.KOMReviewGeneralTableDays())).map(function (e, i) {
    			return mod$5.KOMSharedGroupingDay(new Date(Date.now() - 1000 * 60 * 60 * 24 * i));
    		});
    	},

    	KOMReviewGeneralHistoricalFilter(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.filter(function (e) {
    			if (!e.KOMSpacingDueDate) {
    				return false;
    			}

    			return e.KOMSpacingChronicles.filter(function (e) {
    				if (mod$5.KOMSharedGroupingDay(e.KOMChronicleResponseDate) > mod$5.KOMSharedGroupingDay(new Date())) {
    					return false;
    				}

    				if (mod$5.KOMSharedGroupingDay(e.KOMChronicleResponseDate) < mod$5.KOMSharedGroupingDay(new Date(Date.now() - 1000 * 60 * 60 * 24 * mod$e.KOMReviewGeneralTableDays()))) {
    					return false;
    				}

    				return true;
    			}).length;
    		});
    	},

    	KOMReviewGeneralHistoricalGroupByDate(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.reduce(function (coll, item) {
    			item.KOMSpacingChronicles.forEach(function (e) {
    				const array = (coll[mod$5.KOMSharedGroupingDay(e.KOMChronicleResponseDate)] || []);
    				
    				if (!array.includes(item)) {
    					array.push(item);
    				}

    				coll[mod$5.KOMSharedGroupingDay(e.KOMChronicleResponseDate)] = array;
    			});

    			return coll;
    		}, {});
    	},

    	KOMReviewGeneralHistoricalTotalMilliseconds(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.reduce(function (coll, item) {
    			return coll + (item.KOMChronicleResponseDate - item.KOMChronicleDrawDate);
    		}, 0);
    	},

    };

    var main$4 = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKThrottleIsValid (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			return false;
    		}

    		if (typeof inputData.OLSKThrottleCallback !== 'function') {
    			return false;
    		}

    		if (typeof inputData.OLSKThrottleDuration !== 'number') {
    			return false;
    		}

    		return true;
    	},

    	OLSKThrottleTimeoutFor (inputData) {
    		if (!mod.OLSKThrottleIsValid(inputData)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (inputData._OLSKThrottleTimeoutID) {
    			clearTimeout(inputData._OLSKThrottleTimeoutID);
    		}

    		inputData._OLSKThrottleTimeoutID = setTimeout(function () {
    			mod._OLSKThrottleFire(inputData);
    		}, inputData.OLSKThrottleDuration);

    		return inputData._OLSKThrottleTimeoutID;
    	},

    	OLSKThrottleSkip (inputData) {
    		if (!mod.OLSKThrottleIsValid(inputData)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		clearTimeout(inputData._OLSKThrottleTimeoutID);
    		
    		return mod._OLSKThrottleFire(inputData);
    	},

    	_OLSKThrottleFire (inputData) {
    		delete inputData._OLSKThrottleTimeoutID;
    		
    		return inputData.OLSKThrottleCallback();
    	},

    	OLSKThrottleMappedTimeout (param1, param2, param3) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!mod.OLSKThrottleIsValid(param3)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!param1[param2]) {
    			param1[param2] = Object.assign(Object.assign({}, param3), {
    				OLSKThrottleCallback () {
    					mod._OLSKThrottleFire(param3);

    					delete param1[param2];
    				},
    			});
    		}

    		return param3._OLSKThrottleTimeoutID = mod.OLSKThrottleTimeoutFor(param1[param2]);
    	},

    };

    Object.assign(exports, mod);
    });

    var main$5 = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLKSLocalStorageSet (param1, param2, param3) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param1.setItem !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string' || !param2.trim()) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 === 'undefined') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		param3 ? param1.setItem(param2, JSON.stringify(param3)) : param1.removeItem(param2);

    		return param3;
    	},

    	OLKSLocalStorageGet (param1, param2) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param1.setItem !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string' || !param2.trim()) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return JSON.parse(param1.getItem(param2));
    	},

    };

    Object.assign(exports, mod);
    });

    var main$6 = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKCacheWriteFile (param1, param2, param3) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const _require = commonjsRequire;

    		_require().OLSKDiskWriteFile(_require().join(_require().OLSKDiskCreateFolder(param3), [param2, '.json'].join('')), JSON.stringify(param1, null, '\t'));

    		return param1;
    	},

    	OLSKCacheReadFile (param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const _require = commonjsRequire;

    		try {
    			return JSON.parse(_require('OLSKDisk').OLSKDiskReadFile(_require('path').join(param2, [param1, '.json'].join(''))));
    		} catch(e) {
    			return null;
    		}
    	},

    	async OLSKCacheResultFetchOnce (param1, param2, param3) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'function') {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (!param1[param2]) {
    			param1[param2] = await param3();
    		}

    		return Promise.resolve(param1[param2]);
    	},

    	OLSKCacheResultFetchOnceSync (param1, param2, param3) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!param1[param2]) {
    			param1[param2] = param3();
    		}

    		return param1[param2];
    	},

    	async OLSKCacheResultFetchExpire (param1, param2, param3, param4) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'function') {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof param4 !== 'number') {
    			throw new Error('RCSErrorInputNotValid');
    		}

    		if (!param1[param2]) {
    			param1[param2] = await param3();

    			setTimeout(function () {
    				delete param1[param2];
    			}, param4);
    		}

    		return Promise.resolve(param1[param2]);
    	},

    	async OLSKCacheResultFetchRenew (param1, param2, param3, param4, param5 = function () {}) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'function') {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof param4 !== 'number') {
    			throw new Error('RCSErrorInputNotValid');
    		}

    		if (!param1[param2]) {
    			let timerID;
    			
    			const callback = async function () {
    				param1[param2] = await param3();

    				return param5(timerID);
    			};

    			await callback();

    			timerID = setInterval(function () {
    				return callback();
    			}, param4);
    		}

    		return Promise.resolve(param1[param2]);
    	},

    	OLSKCacheResultFetchInterval(param1, param2, param3, param4) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param4 !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const callback = async function () {
    			return param1[param2] = await param3();
    		};

    		callback();

    		return setInterval(callback, param4);
    	},

    	OLSKCacheExpiringMapEntry(param1, param2, param3, param4) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('RCSErrorInputNotValid');
    		}

    		if (typeof param4 !== 'number') {
    			throw new Error('RCSErrorInputNotValid');
    		}

    		param1[param2] = param3;

    		setTimeout(function () {
    			delete param1[param2];
    		}, param4);

    		return param2;
    	},

    };

    Object.assign(exports, mod);
    });

    var main$7 = createCommonjsModule(function (module, exports) {
    const uIsFilled = function (inputData) {
    	return typeof inputData === 'string' && inputData.trim() !== '';
    };

    const uIsDate = function (inputData) {
    	return (inputData instanceof Date) && !Number.isNaN(inputData.getTime());
    };

    const mod = {

    	OLSKPactAuthTypeEmail () {
    		return 'OLSK_PACT_AUTH_TYPE_EMAIL';
    	},

    	OLSKPactAuthTypeStorage () {
    		return 'OLSK_PACT_AUTH_TYPE_STORAGE';
    	},

    	OLSKPactAuthTypes () {
    		return [
    			mod.OLSKPactAuthTypeEmail(),
    			mod.OLSKPactAuthTypeStorage(),
    		];
    	},

    	OLSKPactAuthIdentityIsStorageAddress (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return !!inputData.match(/\w+\@\w+\.\w+/);
    	},

    	OLSKPactAuthModelErrors (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const outputData = {};
    		const _error = function (param1, param2) {
    			if (!param2) {
    				return;
    			}

    			outputData[param1] = (outputData[param1] || []).concat(param2);
    		};

    		if (!mod.OLSKPactAuthTypes().includes(inputData.OLSKPactAuthType)) {
    			_error('OLSKPactAuthType', 'OLSKErrorNotAuthType');
    		}

    		if (!uIsFilled(inputData.OLSKPactAuthIdentity)) {
    			_error('OLSKPactAuthIdentity', 'OLSKErrorNotFilled');
    		}

    		if (!uIsFilled(inputData.OLSKPactAuthProof)) {
    			_error('OLSKPactAuthProof', 'OLSKErrorNotFilled');
    		}

    		if (inputData.OLSKPactAuthType === mod.OLSKPactAuthTypeStorage()) {
    			if (!mod.OLSKPactAuthIdentityIsStorageAddress(inputData.OLSKPactAuthIdentity)) {
    				_error('OLSKPactAuthIdentity', 'OLSKErrorNotValid');
    			}

    			const metadata = inputData.OLSKPactAuthMetadata;

    			_error('OLSKPactAuthMetadata', (function() {
    				if (typeof metadata !== 'object' || metadata === null) {
    					return 'OLSKErrorNotObject';
    				}

    				if (!uIsFilled(metadata.OLSKPactAuthMetadataModuleName)) {
    					return 'OLSKErrorNotValid';
    				}

    				if (!uIsFilled(metadata.OLSKPactAuthMetadataFolderPath)) {
    					return 'OLSKErrorNotValid';
    				}

    				if (!metadata.OLSKPactAuthMetadataFolderPath.slice(0, -1).trim()) {
    					return 'OLSKErrorNotValid';
    				}

    				if (metadata.OLSKPactAuthMetadataFolderPath.slice(-1) !== '/') {
    					return 'OLSKErrorNotValid';
    				}
    			})());
    		}

    		if (inputData.OLSKPactAuthType === mod.OLSKPactAuthTypeEmail()) {
    			if (!outputData.OLSKPactAuthIdentity && !mod.OLSKPactAuthIdentityIsStorageAddress(inputData.OLSKPactAuthIdentity)) {
    				_error('OLSKPactAuthIdentity', 'OLSKErrorNotValid');
    			}
    		}

    		return Object.entries(outputData).length ? outputData : null;
    	},

    	OLSKPactPayProcessorStripe () {
    		return 'OLSK_PACT_PAY_PROCESSOR_STRIPE';
    	},

    	OLSKPactPayProcessorPayPal () {
    		return 'OLSK_PACT_PAY_PROCESSOR_PAYPAL';
    	},

    	OLSKPactPayProcessors () {
    		return [
    			mod.OLSKPactPayProcessorStripe(),
    			mod.OLSKPactPayProcessorPayPal(),
    		];
    	},

    	OLSKPactPayModelErrors (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const outputData = {};
    		const _error = function (param1, param2) {
    			if (!param2) {
    				return;
    			}

    			outputData[param1] = (outputData[param1] || []).concat(param2);
    		};

    		if (!uIsFilled(inputData.OLSKPactPayIdentity)) {
    			_error('OLSKPactPayIdentity', 'OLSKErrorNotFilled');
    		}

    		if (!uIsFilled(inputData.OLSKPactPayTransaction)) {
    			_error('OLSKPactPayTransaction', 'OLSKErrorNotFilled');
    		}

    		return Object.entries(outputData).length ? outputData : null;
    	},

    	OLSKPactMetadataCompress (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('RCSErrorInputNotValid');
    		}

    		const result = {};

    		if (inputData.OLSKPactIntentIdentity) {
    			result.a = inputData.OLSKPactIntentIdentity;
    		}

    		if (inputData.OLSKPactIntentConfirmation) {
    			result.b = inputData.OLSKPactIntentConfirmation;
    		}

    		if (inputData.OLSKPactIntentProject) {
    			result.c = inputData.OLSKPactIntentProject;
    		}

    		if (inputData.OLSKPactIntentVoucher) {
    			result.d = inputData.OLSKPactIntentVoucher;
    		}

    		return JSON.stringify(result);
    	},

    	OLSKPactMetadataDecompress (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const result = {};

    		try {
    			Object.assign(result, JSON.parse(inputData));
    		} catch {
    			throw new Error('OLSKErrorInputFailedJSONParse');
    		}

    		return {
    			OLSKPactIntentIdentity: result.a,
    			OLSKPactIntentConfirmation: result.b,
    			OLSKPactIntentProject: result.c,
    			OLSKPactIntentVoucher: result.d,
    		};
    	},

    	OLSKPactGrantFrequencyOptionYearly () {
    		return 'kOLSKPactGrantFrequencyOptionYearly';
    	},

    	OLSKPactGrantFrequencyOptionMonthly () {
    		return 'kOLSKPactGrantFrequencyOptionMonthly';
    	},

    	OLSKPactGrantFrequencyOptionOnce () {
    		return 'kOLSKPactGrantFrequencyOptionOnce';
    	},

    	OLSKPactGrantFrequencyOptions () {
    		return [
    			mod.OLSKPactGrantFrequencyOptionYearly(),
    			mod.OLSKPactGrantFrequencyOptionMonthly(),
    			mod.OLSKPactGrantFrequencyOptionOnce(),
    		];
    	},

    	OLSKPactIntentModelIsValid (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('RCSErrorInputNotValid');
    		}


    		if (typeof inputData.OLSKPactIntentIdentity !== 'string') {
    			return false;
    		}

    		if (parseInt(inputData.OLSKPactIntentAmount) !== inputData.OLSKPactIntentAmount) {
    			return false;
    		}

    		if (!mod.OLSKPactGrantFrequencyOptions().includes(inputData.OLSKPactIntentFrequency)) {
    			return false;
    		}

    		if (typeof inputData.OLSKPactIntentConfirmation !== 'string') {
    			return false;
    		}

    		if (typeof inputData.OLSKPactIntentProject !== 'string') {
    			return false;
    		}

    		return true;
    	},

    	OLSKPactGrantModelErrors (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const outputData = {};
    		const _error = function (param1, param2) {
    			if (!param2) {
    				return;
    			}

    			outputData[param1] = (outputData[param1] || []).concat(param2);
    		};

    		if (!Array.isArray(inputData.OLSKPactGrantPublicNumbers)) {
    			_error('OLSKPactGrantPublicNumbers', 'OLSKErrorNotArray');
    		} else if (!inputData.OLSKPactGrantPublicNumbers.length) {
    			_error('OLSKPactGrantPublicNumbers', 'OLSKErrorNotFilled');
    		}

    		if (!uIsFilled(inputData.OLSKPactGrantIdentity)) {
    			_error('OLSKPactGrantIdentity', 'OLSKErrorNotFilled');
    		}

    		if (!uIsFilled(inputData.OLSKPactGrantProject)) {
    			_error('OLSKPactGrantProject', 'OLSKErrorNotFilled');
    		}

    		if (!uIsDate(inputData.OLSKPactGrantStartDate)) {
    			_error('OLSKPactGrantStartDate', 'OLSKErrorNotDate');
    		}

    		if (!uIsDate(inputData.OLSKPactGrantEndDate)) {
    			_error('OLSKPactGrantEndDate', 'OLSKErrorNotDate');
    		}

    		if (typeof inputData.OLSKPactGrantContribution !== 'number') {
    			_error('OLSKPactGrantContribution', 'OLSKErrorNotNumber');
    		}

    		if (!mod.OLSKPactGrantFrequencyOptions().includes(inputData.OLSKPactGrantFrequencyOption)) {
    			_error('OLSKPactGrantFrequencyOption', 'OLSKErrorNotValid');
    		}

    		if (!mod.OLSKPactPayProcessors().includes(inputData.OLSKPactGrantProcessor)) {
    			_error('OLSKPactGrantProcessor', 'OLSKErrorNotValid');
    		}

    		if (!uIsFilled(inputData.OLSKPactGrantProcessorReference)) {
    			_error('OLSKPactGrantProcessorReference', 'OLSKErrorNotFilled');
    		}

    		if (typeof inputData.OLSKPactGrantActive !== 'boolean') {
    			_error('OLSKPactGrantActive', 'OLSKErrorNotBoolean');
    		}
    		
    		if (inputData.OLSKPactGrantProcessorVoucher) {
    			if (!uIsFilled(inputData.OLSKPactGrantProcessorVoucher)) {
    				_error('OLSKPactGrantProcessorVoucher', 'OLSKErrorNotFilled');
    			}
    		}

    		return Object.entries(outputData).length ? outputData : null;
    	},

    };

    Object.assign(exports, mod);
    });

    var hashes = createCommonjsModule(function (module, exports) {
    /**
     * jshashes - https://github.com/h2non/jshashes
     * Released under the "New BSD" license
     *
     * Algorithms specification:
     *
     * MD5 - http://www.ietf.org/rfc/rfc1321.txt
     * RIPEMD-160 - http://homes.esat.kuleuven.be/~bosselae/ripemd160.html
     * SHA1   - http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
     * SHA256 - http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
     * SHA512 - http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
     * HMAC - http://www.ietf.org/rfc/rfc2104.txt
     */
    (function() {
      var Hashes;

      function utf8Encode(str) {
        var x, y, output = '',
          i = -1,
          l;

        if (str && str.length) {
          l = str.length;
          while ((i += 1) < l) {
            /* Decode utf-16 surrogate pairs */
            x = str.charCodeAt(i);
            y = i + 1 < l ? str.charCodeAt(i + 1) : 0;
            if (0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) {
              x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);
              i += 1;
            }
            /* Encode output as utf-8 */
            if (x <= 0x7F) {
              output += String.fromCharCode(x);
            } else if (x <= 0x7FF) {
              output += String.fromCharCode(0xC0 | ((x >>> 6) & 0x1F),
                0x80 | (x & 0x3F));
            } else if (x <= 0xFFFF) {
              output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),
                0x80 | ((x >>> 6) & 0x3F),
                0x80 | (x & 0x3F));
            } else if (x <= 0x1FFFFF) {
              output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),
                0x80 | ((x >>> 12) & 0x3F),
                0x80 | ((x >>> 6) & 0x3F),
                0x80 | (x & 0x3F));
            }
          }
        }
        return output;
      }

      function utf8Decode(str) {
        var i, ac, c1, c2, c3, arr = [],
          l;
        i = ac = c1 = c2 = c3 = 0;

        if (str && str.length) {
          l = str.length;
          str += '';

          while (i < l) {
            c1 = str.charCodeAt(i);
            ac += 1;
            if (c1 < 128) {
              arr[ac] = String.fromCharCode(c1);
              i += 1;
            } else if (c1 > 191 && c1 < 224) {
              c2 = str.charCodeAt(i + 1);
              arr[ac] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
              i += 2;
            } else {
              c2 = str.charCodeAt(i + 1);
              c3 = str.charCodeAt(i + 2);
              arr[ac] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
              i += 3;
            }
          }
        }
        return arr.join('');
      }

      /**
       * Add integers, wrapping at 2^32. This uses 16-bit operations internally
       * to work around bugs in some JS interpreters.
       */

      function safe_add(x, y) {
        var lsw = (x & 0xFFFF) + (y & 0xFFFF),
          msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
      }

      /**
       * Bitwise rotate a 32-bit number to the left.
       */

      function bit_rol(num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt));
      }

      /**
       * Convert a raw string to a hex string
       */

      function rstr2hex(input, hexcase) {
        var hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef',
          output = '',
          x, i = 0,
          l = input.length;
        for (; i < l; i += 1) {
          x = input.charCodeAt(i);
          output += hex_tab.charAt((x >>> 4) & 0x0F) + hex_tab.charAt(x & 0x0F);
        }
        return output;
      }

      /**
       * Convert an array of big-endian words to a string
       */

      function binb2rstr(input) {
        var i, l = input.length * 32,
          output = '';
        for (i = 0; i < l; i += 8) {
          output += String.fromCharCode((input[i >> 5] >>> (24 - i % 32)) & 0xFF);
        }
        return output;
      }

      /**
       * Convert an array of little-endian words to a string
       */

      function binl2rstr(input) {
        var i, l = input.length * 32,
          output = '';
        for (i = 0; i < l; i += 8) {
          output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);
        }
        return output;
      }

      /**
       * Convert a raw string to an array of little-endian words
       * Characters >255 have their high-byte silently ignored.
       */

      function rstr2binl(input) {
        var i, l = input.length * 8,
          output = Array(input.length >> 2),
          lo = output.length;
        for (i = 0; i < lo; i += 1) {
          output[i] = 0;
        }
        for (i = 0; i < l; i += 8) {
          output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);
        }
        return output;
      }

      /**
       * Convert a raw string to an array of big-endian words
       * Characters >255 have their high-byte silently ignored.
       */

      function rstr2binb(input) {
        var i, l = input.length * 8,
          output = Array(input.length >> 2),
          lo = output.length;
        for (i = 0; i < lo; i += 1) {
          output[i] = 0;
        }
        for (i = 0; i < l; i += 8) {
          output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);
        }
        return output;
      }

      /**
       * Convert a raw string to an arbitrary string encoding
       */

      function rstr2any(input, encoding) {
        var divisor = encoding.length,
          remainders = Array(),
          i, q, x, ld, quotient, dividend, output, full_length;

        /* Convert to an array of 16-bit big-endian values, forming the dividend */
        dividend = Array(Math.ceil(input.length / 2));
        ld = dividend.length;
        for (i = 0; i < ld; i += 1) {
          dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
        }

        /**
         * Repeatedly perform a long division. The binary array forms the dividend,
         * the length of the encoding is the divisor. Once computed, the quotient
         * forms the dividend for the next step. We stop when the dividend is zerHashes.
         * All remainders are stored for later use.
         */
        while (dividend.length > 0) {
          quotient = Array();
          x = 0;
          for (i = 0; i < dividend.length; i += 1) {
            x = (x << 16) + dividend[i];
            q = Math.floor(x / divisor);
            x -= q * divisor;
            if (quotient.length > 0 || q > 0) {
              quotient[quotient.length] = q;
            }
          }
          remainders[remainders.length] = x;
          dividend = quotient;
        }

        /* Convert the remainders to the output string */
        output = '';
        for (i = remainders.length - 1; i >= 0; i--) {
          output += encoding.charAt(remainders[i]);
        }

        /* Append leading zero equivalents */
        full_length = Math.ceil(input.length * 8 / (Math.log(encoding.length) / Math.log(2)));
        for (i = output.length; i < full_length; i += 1) {
          output = encoding[0] + output;
        }
        return output;
      }

      /**
       * Convert a raw string to a base-64 string
       */

      function rstr2b64(input, b64pad) {
        var tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
          output = '',
          len = input.length,
          i, j, triplet;
        b64pad = b64pad || '=';
        for (i = 0; i < len; i += 3) {
          triplet = (input.charCodeAt(i) << 16) | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) | (i + 2 < len ? input.charCodeAt(i + 2) : 0);
          for (j = 0; j < 4; j += 1) {
            if (i * 8 + j * 6 > input.length * 8) {
              output += b64pad;
            } else {
              output += tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);
            }
          }
        }
        return output;
      }

      Hashes = {
        /**
         * @property {String} version
         * @readonly
         */
        VERSION: '1.0.6',
        /**
         * @member Hashes
         * @class Base64
         * @constructor
         */
        Base64: function() {
          // private properties
          var tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
            pad = '=', // default pad according with the RFC standard
            utf8 = true; // by default enable UTF-8 support encoding

          // public method for encoding
          this.encode = function(input) {
            var i, j, triplet,
              output = '',
              len = input.length;

            pad = pad || '=';
            input = (utf8) ? utf8Encode(input) : input;

            for (i = 0; i < len; i += 3) {
              triplet = (input.charCodeAt(i) << 16) | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) | (i + 2 < len ? input.charCodeAt(i + 2) : 0);
              for (j = 0; j < 4; j += 1) {
                if (i * 8 + j * 6 > len * 8) {
                  output += pad;
                } else {
                  output += tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);
                }
              }
            }
            return output;
          };

          // public method for decoding
          this.decode = function(input) {
            // var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
            var i, o1, o2, o3, h1, h2, h3, h4, bits, ac,
              dec = '',
              arr = [];
            if (!input) {
              return input;
            }

            i = ac = 0;
            input = input.replace(new RegExp('\\' + pad, 'gi'), ''); // use '='
            //input += '';

            do { // unpack four hexets into three octets using index points in b64
              h1 = tab.indexOf(input.charAt(i += 1));
              h2 = tab.indexOf(input.charAt(i += 1));
              h3 = tab.indexOf(input.charAt(i += 1));
              h4 = tab.indexOf(input.charAt(i += 1));

              bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;

              o1 = bits >> 16 & 0xff;
              o2 = bits >> 8 & 0xff;
              o3 = bits & 0xff;
              ac += 1;

              if (h3 === 64) {
                arr[ac] = String.fromCharCode(o1);
              } else if (h4 === 64) {
                arr[ac] = String.fromCharCode(o1, o2);
              } else {
                arr[ac] = String.fromCharCode(o1, o2, o3);
              }
            } while (i < input.length);

            dec = arr.join('');
            dec = (utf8) ? utf8Decode(dec) : dec;

            return dec;
          };

          // set custom pad string
          this.setPad = function(str) {
            pad = str || pad;
            return this;
          };
          // set custom tab string characters
          this.setTab = function(str) {
            tab = str || tab;
            return this;
          };
          this.setUTF8 = function(bool) {
            if (typeof bool === 'boolean') {
              utf8 = bool;
            }
            return this;
          };
        },

        /**
         * CRC-32 calculation
         * @member Hashes
         * @method CRC32
         * @static
         * @param {String} str Input String
         * @return {String}
         */
        CRC32: function(str) {
          var crc = 0,
            x = 0,
            y = 0,
            table, i, iTop;
          str = utf8Encode(str);

          table = [
            '00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 ',
            '79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 ',
            '84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F ',
            '63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD ',
            'A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC ',
            '51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 ',
            'B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 ',
            '06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 ',
            'E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 ',
            '12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 ',
            'D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 ',
            '33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 ',
            'CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 ',
            '9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E ',
            '7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D ',
            '806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 ',
            '60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA ',
            'AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 ',
            '5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 ',
            'B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 ',
            '05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 ',
            'F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA ',
            '11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 ',
            'D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F ',
            '30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E ',
            'C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D'
          ].join('');

          crc = crc ^ (-1);
          for (i = 0, iTop = str.length; i < iTop; i += 1) {
            y = (crc ^ str.charCodeAt(i)) & 0xFF;
            x = '0x' + table.substr(y * 9, 8);
            crc = (crc >>> 8) ^ x;
          }
          // always return a positive number (that's what >>> 0 does)
          return (crc ^ (-1)) >>> 0;
        },
        /**
         * @member Hashes
         * @class MD5
         * @constructor
         * @param {Object} [config]
         *
         * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
         * Digest Algorithm, as defined in RFC 1321.
         * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         * See <http://pajhome.org.uk/crypt/md5> for more infHashes.
         */
        MD5: function(options) {
          /**
           * Private config properties. You may need to tweak these to be compatible with
           * the server-side, but the defaults work in most cases.
           * See {@link Hashes.MD5#method-setUpperCase} and {@link Hashes.SHA1#method-setUpperCase}
           */
          var hexcase = (options && typeof options.uppercase === 'boolean') ? options.uppercase : false, // hexadecimal output case format. false - lowercase; true - uppercase
            b64pad = (options && typeof options.pad === 'string') ? options.pad : '=', // base-64 pad character. Defaults to '=' for strict RFC compliance
            utf8 = (options && typeof options.utf8 === 'boolean') ? options.utf8 : true; // enable/disable utf8 encoding

          // privileged (public) methods
          this.hex = function(s) {
            return rstr2hex(rstr(s), hexcase);
          };
          this.b64 = function(s) {
            return rstr2b64(rstr(s), b64pad);
          };
          this.any = function(s, e) {
            return rstr2any(rstr(s), e);
          };
          this.raw = function(s) {
            return rstr(s);
          };
          this.hex_hmac = function(k, d) {
            return rstr2hex(rstr_hmac(k, d), hexcase);
          };
          this.b64_hmac = function(k, d) {
            return rstr2b64(rstr_hmac(k, d), b64pad);
          };
          this.any_hmac = function(k, d, e) {
            return rstr2any(rstr_hmac(k, d), e);
          };
          /**
           * Perform a simple self-test to see if the VM is working
           * @return {String} Hexadecimal hash sample
           */
          this.vm_test = function() {
            return hex('abc').toLowerCase() === '900150983cd24fb0d6963f7d28e17f72';
          };
          /**
           * Enable/disable uppercase hexadecimal returned string
           * @param {Boolean}
           * @return {Object} this
           */
          this.setUpperCase = function(a) {
            if (typeof a === 'boolean') {
              hexcase = a;
            }
            return this;
          };
          /**
           * Defines a base64 pad string
           * @param {String} Pad
           * @return {Object} this
           */
          this.setPad = function(a) {
            b64pad = a || b64pad;
            return this;
          };
          /**
           * Defines a base64 pad string
           * @param {Boolean}
           * @return {Object} [this]
           */
          this.setUTF8 = function(a) {
            if (typeof a === 'boolean') {
              utf8 = a;
            }
            return this;
          };

          // private methods

          /**
           * Calculate the MD5 of a raw string
           */

          function rstr(s) {
            s = (utf8) ? utf8Encode(s) : s;
            return binl2rstr(binl(rstr2binl(s), s.length * 8));
          }

          /**
           * Calculate the HMAC-MD5, of a key and some data (raw strings)
           */

          function rstr_hmac(key, data) {
            var bkey, ipad, opad, hash, i;

            key = (utf8) ? utf8Encode(key) : key;
            data = (utf8) ? utf8Encode(data) : data;
            bkey = rstr2binl(key);
            if (bkey.length > 16) {
              bkey = binl(bkey, key.length * 8);
            }

            ipad = Array(16), opad = Array(16);
            for (i = 0; i < 16; i += 1) {
              ipad[i] = bkey[i] ^ 0x36363636;
              opad[i] = bkey[i] ^ 0x5C5C5C5C;
            }
            hash = binl(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
            return binl2rstr(binl(opad.concat(hash), 512 + 128));
          }

          /**
           * Calculate the MD5 of an array of little-endian words, and a bit length.
           */

          function binl(x, len) {
            var i, olda, oldb, oldc, oldd,
              a = 1732584193,
              b = -271733879,
              c = -1732584194,
              d = 271733878;

            /* append padding */
            x[len >> 5] |= 0x80 << ((len) % 32);
            x[(((len + 64) >>> 9) << 4) + 14] = len;

            for (i = 0; i < x.length; i += 16) {
              olda = a;
              oldb = b;
              oldc = c;
              oldd = d;

              a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
              d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
              c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
              b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
              a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
              d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
              c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
              b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
              a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
              d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
              c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
              b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
              a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
              d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
              c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
              b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);

              a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
              d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
              c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
              b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
              a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
              d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
              c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
              b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
              a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
              d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
              c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
              b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
              a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
              d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
              c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
              b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

              a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
              d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
              c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
              b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
              a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
              d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
              c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
              b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
              a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
              d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
              c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
              b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
              a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
              d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
              c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
              b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);

              a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
              d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
              c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
              b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
              a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
              d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
              c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
              b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
              a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
              d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
              c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
              b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
              a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
              d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
              c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
              b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);

              a = safe_add(a, olda);
              b = safe_add(b, oldb);
              c = safe_add(c, oldc);
              d = safe_add(d, oldd);
            }
            return Array(a, b, c, d);
          }

          /**
           * These functions implement the four basic operations the algorithm uses.
           */

          function md5_cmn(q, a, b, x, s, t) {
            return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
          }

          function md5_ff(a, b, c, d, x, s, t) {
            return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
          }

          function md5_gg(a, b, c, d, x, s, t) {
            return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
          }

          function md5_hh(a, b, c, d, x, s, t) {
            return md5_cmn(b ^ c ^ d, a, b, x, s, t);
          }

          function md5_ii(a, b, c, d, x, s, t) {
            return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
          }
        },
        /**
         * @member Hashes
         * @class Hashes.SHA1
         * @param {Object} [config]
         * @constructor
         *
         * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined in FIPS 180-1
         * Version 2.2 Copyright Paul Johnston 2000 - 2009.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         * See http://pajhome.org.uk/crypt/md5 for details.
         */
        SHA1: function(options) {
          /**
           * Private config properties. You may need to tweak these to be compatible with
           * the server-side, but the defaults work in most cases.
           * See {@link Hashes.MD5#method-setUpperCase} and {@link Hashes.SHA1#method-setUpperCase}
           */
          var hexcase = (options && typeof options.uppercase === 'boolean') ? options.uppercase : false, // hexadecimal output case format. false - lowercase; true - uppercase
            b64pad = (options && typeof options.pad === 'string') ? options.pad : '=', // base-64 pad character. Defaults to '=' for strict RFC compliance
            utf8 = (options && typeof options.utf8 === 'boolean') ? options.utf8 : true; // enable/disable utf8 encoding

          // public methods
          this.hex = function(s) {
            return rstr2hex(rstr(s), hexcase);
          };
          this.b64 = function(s) {
            return rstr2b64(rstr(s), b64pad);
          };
          this.any = function(s, e) {
            return rstr2any(rstr(s), e);
          };
          this.raw = function(s) {
            return rstr(s);
          };
          this.hex_hmac = function(k, d) {
            return rstr2hex(rstr_hmac(k, d));
          };
          this.b64_hmac = function(k, d) {
            return rstr2b64(rstr_hmac(k, d), b64pad);
          };
          this.any_hmac = function(k, d, e) {
            return rstr2any(rstr_hmac(k, d), e);
          };
          /**
           * Perform a simple self-test to see if the VM is working
           * @return {String} Hexadecimal hash sample
           * @public
           */
          this.vm_test = function() {
            return hex('abc').toLowerCase() === '900150983cd24fb0d6963f7d28e17f72';
          };
          /**
           * @description Enable/disable uppercase hexadecimal returned string
           * @param {boolean}
           * @return {Object} this
           * @public
           */
          this.setUpperCase = function(a) {
            if (typeof a === 'boolean') {
              hexcase = a;
            }
            return this;
          };
          /**
           * @description Defines a base64 pad string
           * @param {string} Pad
           * @return {Object} this
           * @public
           */
          this.setPad = function(a) {
            b64pad = a || b64pad;
            return this;
          };
          /**
           * @description Defines a base64 pad string
           * @param {boolean}
           * @return {Object} this
           * @public
           */
          this.setUTF8 = function(a) {
            if (typeof a === 'boolean') {
              utf8 = a;
            }
            return this;
          };

          // private methods

          /**
           * Calculate the SHA-512 of a raw string
           */

          function rstr(s) {
            s = (utf8) ? utf8Encode(s) : s;
            return binb2rstr(binb(rstr2binb(s), s.length * 8));
          }

          /**
           * Calculate the HMAC-SHA1 of a key and some data (raw strings)
           */

          function rstr_hmac(key, data) {
            var bkey, ipad, opad, i, hash;
            key = (utf8) ? utf8Encode(key) : key;
            data = (utf8) ? utf8Encode(data) : data;
            bkey = rstr2binb(key);

            if (bkey.length > 16) {
              bkey = binb(bkey, key.length * 8);
            }
            ipad = Array(16), opad = Array(16);
            for (i = 0; i < 16; i += 1) {
              ipad[i] = bkey[i] ^ 0x36363636;
              opad[i] = bkey[i] ^ 0x5C5C5C5C;
            }
            hash = binb(ipad.concat(rstr2binb(data)), 512 + data.length * 8);
            return binb2rstr(binb(opad.concat(hash), 512 + 160));
          }

          /**
           * Calculate the SHA-1 of an array of big-endian words, and a bit length
           */

          function binb(x, len) {
            var i, j, t, olda, oldb, oldc, oldd, olde,
              w = Array(80),
              a = 1732584193,
              b = -271733879,
              c = -1732584194,
              d = 271733878,
              e = -1009589776;

            /* append padding */
            x[len >> 5] |= 0x80 << (24 - len % 32);
            x[((len + 64 >> 9) << 4) + 15] = len;

            for (i = 0; i < x.length; i += 16) {
              olda = a;
              oldb = b;
              oldc = c;
              oldd = d;
              olde = e;

              for (j = 0; j < 80; j += 1) {
                if (j < 16) {
                  w[j] = x[i + j];
                } else {
                  w[j] = bit_rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
                }
                t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),
                  safe_add(safe_add(e, w[j]), sha1_kt(j)));
                e = d;
                d = c;
                c = bit_rol(b, 30);
                b = a;
                a = t;
              }

              a = safe_add(a, olda);
              b = safe_add(b, oldb);
              c = safe_add(c, oldc);
              d = safe_add(d, oldd);
              e = safe_add(e, olde);
            }
            return Array(a, b, c, d, e);
          }

          /**
           * Perform the appropriate triplet combination function for the current
           * iteration
           */

          function sha1_ft(t, b, c, d) {
            if (t < 20) {
              return (b & c) | ((~b) & d);
            }
            if (t < 40) {
              return b ^ c ^ d;
            }
            if (t < 60) {
              return (b & c) | (b & d) | (c & d);
            }
            return b ^ c ^ d;
          }

          /**
           * Determine the appropriate additive constant for the current iteration
           */

          function sha1_kt(t) {
            return (t < 20) ? 1518500249 : (t < 40) ? 1859775393 :
              (t < 60) ? -1894007588 : -899497514;
          }
        },
        /**
         * @class Hashes.SHA256
         * @param {config}
         *
         * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined in FIPS 180-2
         * Version 2.2 Copyright Angel Marin, Paul Johnston 2000 - 2009.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         * See http://pajhome.org.uk/crypt/md5 for details.
         * Also http://anmar.eu.org/projects/jssha2/
         */
        SHA256: function(options) {
          /**
           * Private properties configuration variables. You may need to tweak these to be compatible with
           * the server-side, but the defaults work in most cases.
           * @see this.setUpperCase() method
           * @see this.setPad() method
           */
          var hexcase = (options && typeof options.uppercase === 'boolean') ? options.uppercase : false, // hexadecimal output case format. false - lowercase; true - uppercase  */
            b64pad = (options && typeof options.pad === 'string') ? options.pad : '=',
            /* base-64 pad character. Default '=' for strict RFC compliance   */
            utf8 = (options && typeof options.utf8 === 'boolean') ? options.utf8 : true,
            /* enable/disable utf8 encoding */
            sha256_K;

          /* privileged (public) methods */
          this.hex = function(s) {
            return rstr2hex(rstr(s, utf8));
          };
          this.b64 = function(s) {
            return rstr2b64(rstr(s, utf8), b64pad);
          };
          this.any = function(s, e) {
            return rstr2any(rstr(s, utf8), e);
          };
          this.raw = function(s) {
            return rstr(s, utf8);
          };
          this.hex_hmac = function(k, d) {
            return rstr2hex(rstr_hmac(k, d));
          };
          this.b64_hmac = function(k, d) {
            return rstr2b64(rstr_hmac(k, d), b64pad);
          };
          this.any_hmac = function(k, d, e) {
            return rstr2any(rstr_hmac(k, d), e);
          };
          /**
           * Perform a simple self-test to see if the VM is working
           * @return {String} Hexadecimal hash sample
           * @public
           */
          this.vm_test = function() {
            return hex('abc').toLowerCase() === '900150983cd24fb0d6963f7d28e17f72';
          };
          /**
           * Enable/disable uppercase hexadecimal returned string
           * @param {boolean}
           * @return {Object} this
           * @public
           */
          this.setUpperCase = function(a) {
            if (typeof a === 'boolean') {
              hexcase = a;
            }
            return this;
          };
          /**
           * @description Defines a base64 pad string
           * @param {string} Pad
           * @return {Object} this
           * @public
           */
          this.setPad = function(a) {
            b64pad = a || b64pad;
            return this;
          };
          /**
           * Defines a base64 pad string
           * @param {boolean}
           * @return {Object} this
           * @public
           */
          this.setUTF8 = function(a) {
            if (typeof a === 'boolean') {
              utf8 = a;
            }
            return this;
          };

          // private methods

          /**
           * Calculate the SHA-512 of a raw string
           */

          function rstr(s, utf8) {
            s = (utf8) ? utf8Encode(s) : s;
            return binb2rstr(binb(rstr2binb(s), s.length * 8));
          }

          /**
           * Calculate the HMAC-sha256 of a key and some data (raw strings)
           */

          function rstr_hmac(key, data) {
            key = (utf8) ? utf8Encode(key) : key;
            data = (utf8) ? utf8Encode(data) : data;
            var hash, i = 0,
              bkey = rstr2binb(key),
              ipad = Array(16),
              opad = Array(16);

            if (bkey.length > 16) {
              bkey = binb(bkey, key.length * 8);
            }

            for (; i < 16; i += 1) {
              ipad[i] = bkey[i] ^ 0x36363636;
              opad[i] = bkey[i] ^ 0x5C5C5C5C;
            }

            hash = binb(ipad.concat(rstr2binb(data)), 512 + data.length * 8);
            return binb2rstr(binb(opad.concat(hash), 512 + 256));
          }

          /*
           * Main sha256 function, with its support functions
           */

          function sha256_S(X, n) {
            return (X >>> n) | (X << (32 - n));
          }

          function sha256_R(X, n) {
            return (X >>> n);
          }

          function sha256_Ch(x, y, z) {
            return ((x & y) ^ ((~x) & z));
          }

          function sha256_Maj(x, y, z) {
            return ((x & y) ^ (x & z) ^ (y & z));
          }

          function sha256_Sigma0256(x) {
            return (sha256_S(x, 2) ^ sha256_S(x, 13) ^ sha256_S(x, 22));
          }

          function sha256_Sigma1256(x) {
            return (sha256_S(x, 6) ^ sha256_S(x, 11) ^ sha256_S(x, 25));
          }

          function sha256_Gamma0256(x) {
            return (sha256_S(x, 7) ^ sha256_S(x, 18) ^ sha256_R(x, 3));
          }

          function sha256_Gamma1256(x) {
            return (sha256_S(x, 17) ^ sha256_S(x, 19) ^ sha256_R(x, 10));
          }

          sha256_K = [
            1116352408, 1899447441, -1245643825, -373957723, 961987163, 1508970993, -1841331548, -1424204075, -670586216, 310598401, 607225278, 1426881987,
            1925078388, -2132889090, -1680079193, -1046744716, -459576895, -272742522,
            264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, -1740746414, -1473132947, -1341970488, -1084653625, -958395405, -710438585,
            113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291,
            1695183700, 1986661051, -2117940946, -1838011259, -1564481375, -1474664885, -1035236496, -949202525, -778901479, -694614492, -200395387, 275423344,
            430227734, 506948616, 659060556, 883997877, 958139571, 1322822218,
            1537002063, 1747873779, 1955562222, 2024104815, -2067236844, -1933114872, -1866530822, -1538233109, -1090935817, -965641998
          ];

          function binb(m, l) {
            var HASH = [1779033703, -1150833019, 1013904242, -1521486534,
              1359893119, -1694144372, 528734635, 1541459225
            ];
            var W = new Array(64);
            var a, b, c, d, e, f, g, h;
            var i, j, T1, T2;

            /* append padding */
            m[l >> 5] |= 0x80 << (24 - l % 32);
            m[((l + 64 >> 9) << 4) + 15] = l;

            for (i = 0; i < m.length; i += 16) {
              a = HASH[0];
              b = HASH[1];
              c = HASH[2];
              d = HASH[3];
              e = HASH[4];
              f = HASH[5];
              g = HASH[6];
              h = HASH[7];

              for (j = 0; j < 64; j += 1) {
                if (j < 16) {
                  W[j] = m[j + i];
                } else {
                  W[j] = safe_add(safe_add(safe_add(sha256_Gamma1256(W[j - 2]), W[j - 7]),
                    sha256_Gamma0256(W[j - 15])), W[j - 16]);
                }

                T1 = safe_add(safe_add(safe_add(safe_add(h, sha256_Sigma1256(e)), sha256_Ch(e, f, g)),
                  sha256_K[j]), W[j]);
                T2 = safe_add(sha256_Sigma0256(a), sha256_Maj(a, b, c));
                h = g;
                g = f;
                f = e;
                e = safe_add(d, T1);
                d = c;
                c = b;
                b = a;
                a = safe_add(T1, T2);
              }

              HASH[0] = safe_add(a, HASH[0]);
              HASH[1] = safe_add(b, HASH[1]);
              HASH[2] = safe_add(c, HASH[2]);
              HASH[3] = safe_add(d, HASH[3]);
              HASH[4] = safe_add(e, HASH[4]);
              HASH[5] = safe_add(f, HASH[5]);
              HASH[6] = safe_add(g, HASH[6]);
              HASH[7] = safe_add(h, HASH[7]);
            }
            return HASH;
          }

        },

        /**
         * @class Hashes.SHA512
         * @param {config}
         *
         * A JavaScript implementation of the Secure Hash Algorithm, SHA-512, as defined in FIPS 180-2
         * Version 2.2 Copyright Anonymous Contributor, Paul Johnston 2000 - 2009.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         * See http://pajhome.org.uk/crypt/md5 for details.
         */
        SHA512: function(options) {
          /**
           * Private properties configuration variables. You may need to tweak these to be compatible with
           * the server-side, but the defaults work in most cases.
           * @see this.setUpperCase() method
           * @see this.setPad() method
           */
          var hexcase = (options && typeof options.uppercase === 'boolean') ? options.uppercase : false,
            /* hexadecimal output case format. false - lowercase; true - uppercase  */
            b64pad = (options && typeof options.pad === 'string') ? options.pad : '=',
            /* base-64 pad character. Default '=' for strict RFC compliance   */
            utf8 = (options && typeof options.utf8 === 'boolean') ? options.utf8 : true,
            /* enable/disable utf8 encoding */
            sha512_k;

          /* privileged (public) methods */
          this.hex = function(s) {
            return rstr2hex(rstr(s));
          };
          this.b64 = function(s) {
            return rstr2b64(rstr(s), b64pad);
          };
          this.any = function(s, e) {
            return rstr2any(rstr(s), e);
          };
          this.raw = function(s) {
            return rstr(s);
          };
          this.hex_hmac = function(k, d) {
            return rstr2hex(rstr_hmac(k, d));
          };
          this.b64_hmac = function(k, d) {
            return rstr2b64(rstr_hmac(k, d), b64pad);
          };
          this.any_hmac = function(k, d, e) {
            return rstr2any(rstr_hmac(k, d), e);
          };
          /**
           * Perform a simple self-test to see if the VM is working
           * @return {String} Hexadecimal hash sample
           * @public
           */
          this.vm_test = function() {
            return hex('abc').toLowerCase() === '900150983cd24fb0d6963f7d28e17f72';
          };
          /**
           * @description Enable/disable uppercase hexadecimal returned string
           * @param {boolean}
           * @return {Object} this
           * @public
           */
          this.setUpperCase = function(a) {
            if (typeof a === 'boolean') {
              hexcase = a;
            }
            return this;
          };
          /**
           * @description Defines a base64 pad string
           * @param {string} Pad
           * @return {Object} this
           * @public
           */
          this.setPad = function(a) {
            b64pad = a || b64pad;
            return this;
          };
          /**
           * @description Defines a base64 pad string
           * @param {boolean}
           * @return {Object} this
           * @public
           */
          this.setUTF8 = function(a) {
            if (typeof a === 'boolean') {
              utf8 = a;
            }
            return this;
          };

          /* private methods */

          /**
           * Calculate the SHA-512 of a raw string
           */

          function rstr(s) {
            s = (utf8) ? utf8Encode(s) : s;
            return binb2rstr(binb(rstr2binb(s), s.length * 8));
          }
          /*
           * Calculate the HMAC-SHA-512 of a key and some data (raw strings)
           */

          function rstr_hmac(key, data) {
            key = (utf8) ? utf8Encode(key) : key;
            data = (utf8) ? utf8Encode(data) : data;

            var hash, i = 0,
              bkey = rstr2binb(key),
              ipad = Array(32),
              opad = Array(32);

            if (bkey.length > 32) {
              bkey = binb(bkey, key.length * 8);
            }

            for (; i < 32; i += 1) {
              ipad[i] = bkey[i] ^ 0x36363636;
              opad[i] = bkey[i] ^ 0x5C5C5C5C;
            }

            hash = binb(ipad.concat(rstr2binb(data)), 1024 + data.length * 8);
            return binb2rstr(binb(opad.concat(hash), 1024 + 512));
          }

          /**
           * Calculate the SHA-512 of an array of big-endian dwords, and a bit length
           */

          function binb(x, len) {
            var j, i, l,
              W = new Array(80),
              hash = new Array(16),
              //Initial hash values
              H = [
                new int64(0x6a09e667, -205731576),
                new int64(-1150833019, -2067093701),
                new int64(0x3c6ef372, -23791573),
                new int64(-1521486534, 0x5f1d36f1),
                new int64(0x510e527f, -1377402159),
                new int64(-1694144372, 0x2b3e6c1f),
                new int64(0x1f83d9ab, -79577749),
                new int64(0x5be0cd19, 0x137e2179)
              ],
              T1 = new int64(0, 0),
              T2 = new int64(0, 0),
              a = new int64(0, 0),
              b = new int64(0, 0),
              c = new int64(0, 0),
              d = new int64(0, 0),
              e = new int64(0, 0),
              f = new int64(0, 0),
              g = new int64(0, 0),
              h = new int64(0, 0),
              //Temporary variables not specified by the document
              s0 = new int64(0, 0),
              s1 = new int64(0, 0),
              Ch = new int64(0, 0),
              Maj = new int64(0, 0),
              r1 = new int64(0, 0),
              r2 = new int64(0, 0),
              r3 = new int64(0, 0);

            if (sha512_k === undefined) {
              //SHA512 constants
              sha512_k = [
                new int64(0x428a2f98, -685199838), new int64(0x71374491, 0x23ef65cd),
                new int64(-1245643825, -330482897), new int64(-373957723, -2121671748),
                new int64(0x3956c25b, -213338824), new int64(0x59f111f1, -1241133031),
                new int64(-1841331548, -1357295717), new int64(-1424204075, -630357736),
                new int64(-670586216, -1560083902), new int64(0x12835b01, 0x45706fbe),
                new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, -704662302),
                new int64(0x72be5d74, -226784913), new int64(-2132889090, 0x3b1696b1),
                new int64(-1680079193, 0x25c71235), new int64(-1046744716, -815192428),
                new int64(-459576895, -1628353838), new int64(-272742522, 0x384f25e3),
                new int64(0xfc19dc6, -1953704523), new int64(0x240ca1cc, 0x77ac9c65),
                new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),
                new int64(0x5cb0a9dc, -1119749164), new int64(0x76f988da, -2096016459),
                new int64(-1740746414, -295247957), new int64(-1473132947, 0x2db43210),
                new int64(-1341970488, -1728372417), new int64(-1084653625, -1091629340),
                new int64(-958395405, 0x3da88fc2), new int64(-710438585, -1828018395),
                new int64(0x6ca6351, -536640913), new int64(0x14292967, 0xa0e6e70),
                new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),
                new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, -1651133473),
                new int64(0x650a7354, -1951439906), new int64(0x766a0abb, 0x3c77b2a8),
                new int64(-2117940946, 0x47edaee6), new int64(-1838011259, 0x1482353b),
                new int64(-1564481375, 0x4cf10364), new int64(-1474664885, -1136513023),
                new int64(-1035236496, -789014639), new int64(-949202525, 0x654be30),
                new int64(-778901479, -688958952), new int64(-694614492, 0x5565a910),
                new int64(-200395387, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),
                new int64(0x19a4c116, -1194143544), new int64(0x1e376c08, 0x5141ab53),
                new int64(0x2748774c, -544281703), new int64(0x34b0bcb5, -509917016),
                new int64(0x391c0cb3, -976659869), new int64(0x4ed8aa4a, -482243893),
                new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, -692930397),
                new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),
                new int64(-2067236844, -1578062990), new int64(-1933114872, 0x1a6439ec),
                new int64(-1866530822, 0x23631e28), new int64(-1538233109, -561857047),
                new int64(-1090935817, -1295615723), new int64(-965641998, -479046869),
                new int64(-903397682, -366583396), new int64(-779700025, 0x21c0c207),
                new int64(-354779690, -840897762), new int64(-176337025, -294727304),
                new int64(0x6f067aa, 0x72176fba), new int64(0xa637dc5, -1563912026),
                new int64(0x113f9804, -1090974290), new int64(0x1b710b35, 0x131c471b),
                new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),
                new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, -1676669620),
                new int64(0x4cc5d4be, -885112138), new int64(0x597f299c, -60457430),
                new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)
              ];
            }

            for (i = 0; i < 80; i += 1) {
              W[i] = new int64(0, 0);
            }

            // append padding to the source string. The format is described in the FIPS.
            x[len >> 5] |= 0x80 << (24 - (len & 0x1f));
            x[((len + 128 >> 10) << 5) + 31] = len;
            l = x.length;
            for (i = 0; i < l; i += 32) { //32 dwords is the block size
              int64copy(a, H[0]);
              int64copy(b, H[1]);
              int64copy(c, H[2]);
              int64copy(d, H[3]);
              int64copy(e, H[4]);
              int64copy(f, H[5]);
              int64copy(g, H[6]);
              int64copy(h, H[7]);

              for (j = 0; j < 16; j += 1) {
                W[j].h = x[i + 2 * j];
                W[j].l = x[i + 2 * j + 1];
              }

              for (j = 16; j < 80; j += 1) {
                //sigma1
                int64rrot(r1, W[j - 2], 19);
                int64revrrot(r2, W[j - 2], 29);
                int64shr(r3, W[j - 2], 6);
                s1.l = r1.l ^ r2.l ^ r3.l;
                s1.h = r1.h ^ r2.h ^ r3.h;
                //sigma0
                int64rrot(r1, W[j - 15], 1);
                int64rrot(r2, W[j - 15], 8);
                int64shr(r3, W[j - 15], 7);
                s0.l = r1.l ^ r2.l ^ r3.l;
                s0.h = r1.h ^ r2.h ^ r3.h;

                int64add4(W[j], s1, W[j - 7], s0, W[j - 16]);
              }

              for (j = 0; j < 80; j += 1) {
                //Ch
                Ch.l = (e.l & f.l) ^ (~e.l & g.l);
                Ch.h = (e.h & f.h) ^ (~e.h & g.h);

                //Sigma1
                int64rrot(r1, e, 14);
                int64rrot(r2, e, 18);
                int64revrrot(r3, e, 9);
                s1.l = r1.l ^ r2.l ^ r3.l;
                s1.h = r1.h ^ r2.h ^ r3.h;

                //Sigma0
                int64rrot(r1, a, 28);
                int64revrrot(r2, a, 2);
                int64revrrot(r3, a, 7);
                s0.l = r1.l ^ r2.l ^ r3.l;
                s0.h = r1.h ^ r2.h ^ r3.h;

                //Maj
                Maj.l = (a.l & b.l) ^ (a.l & c.l) ^ (b.l & c.l);
                Maj.h = (a.h & b.h) ^ (a.h & c.h) ^ (b.h & c.h);

                int64add5(T1, h, s1, Ch, sha512_k[j], W[j]);
                int64add(T2, s0, Maj);

                int64copy(h, g);
                int64copy(g, f);
                int64copy(f, e);
                int64add(e, d, T1);
                int64copy(d, c);
                int64copy(c, b);
                int64copy(b, a);
                int64add(a, T1, T2);
              }
              int64add(H[0], H[0], a);
              int64add(H[1], H[1], b);
              int64add(H[2], H[2], c);
              int64add(H[3], H[3], d);
              int64add(H[4], H[4], e);
              int64add(H[5], H[5], f);
              int64add(H[6], H[6], g);
              int64add(H[7], H[7], h);
            }

            //represent the hash as an array of 32-bit dwords
            for (i = 0; i < 8; i += 1) {
              hash[2 * i] = H[i].h;
              hash[2 * i + 1] = H[i].l;
            }
            return hash;
          }

          //A constructor for 64-bit numbers

          function int64(h, l) {
            this.h = h;
            this.l = l;
            //this.toString = int64toString;
          }

          //Copies src into dst, assuming both are 64-bit numbers

          function int64copy(dst, src) {
            dst.h = src.h;
            dst.l = src.l;
          }

          //Right-rotates a 64-bit number by shift
          //Won't handle cases of shift>=32
          //The function revrrot() is for that

          function int64rrot(dst, x, shift) {
            dst.l = (x.l >>> shift) | (x.h << (32 - shift));
            dst.h = (x.h >>> shift) | (x.l << (32 - shift));
          }

          //Reverses the dwords of the source and then rotates right by shift.
          //This is equivalent to rotation by 32+shift

          function int64revrrot(dst, x, shift) {
            dst.l = (x.h >>> shift) | (x.l << (32 - shift));
            dst.h = (x.l >>> shift) | (x.h << (32 - shift));
          }

          //Bitwise-shifts right a 64-bit number by shift
          //Won't handle shift>=32, but it's never needed in SHA512

          function int64shr(dst, x, shift) {
            dst.l = (x.l >>> shift) | (x.h << (32 - shift));
            dst.h = (x.h >>> shift);
          }

          //Adds two 64-bit numbers
          //Like the original implementation, does not rely on 32-bit operations

          function int64add(dst, x, y) {
            var w0 = (x.l & 0xffff) + (y.l & 0xffff);
            var w1 = (x.l >>> 16) + (y.l >>> 16) + (w0 >>> 16);
            var w2 = (x.h & 0xffff) + (y.h & 0xffff) + (w1 >>> 16);
            var w3 = (x.h >>> 16) + (y.h >>> 16) + (w2 >>> 16);
            dst.l = (w0 & 0xffff) | (w1 << 16);
            dst.h = (w2 & 0xffff) | (w3 << 16);
          }

          //Same, except with 4 addends. Works faster than adding them one by one.

          function int64add4(dst, a, b, c, d) {
            var w0 = (a.l & 0xffff) + (b.l & 0xffff) + (c.l & 0xffff) + (d.l & 0xffff);
            var w1 = (a.l >>> 16) + (b.l >>> 16) + (c.l >>> 16) + (d.l >>> 16) + (w0 >>> 16);
            var w2 = (a.h & 0xffff) + (b.h & 0xffff) + (c.h & 0xffff) + (d.h & 0xffff) + (w1 >>> 16);
            var w3 = (a.h >>> 16) + (b.h >>> 16) + (c.h >>> 16) + (d.h >>> 16) + (w2 >>> 16);
            dst.l = (w0 & 0xffff) | (w1 << 16);
            dst.h = (w2 & 0xffff) | (w3 << 16);
          }

          //Same, except with 5 addends

          function int64add5(dst, a, b, c, d, e) {
            var w0 = (a.l & 0xffff) + (b.l & 0xffff) + (c.l & 0xffff) + (d.l & 0xffff) + (e.l & 0xffff),
              w1 = (a.l >>> 16) + (b.l >>> 16) + (c.l >>> 16) + (d.l >>> 16) + (e.l >>> 16) + (w0 >>> 16),
              w2 = (a.h & 0xffff) + (b.h & 0xffff) + (c.h & 0xffff) + (d.h & 0xffff) + (e.h & 0xffff) + (w1 >>> 16),
              w3 = (a.h >>> 16) + (b.h >>> 16) + (c.h >>> 16) + (d.h >>> 16) + (e.h >>> 16) + (w2 >>> 16);
            dst.l = (w0 & 0xffff) | (w1 << 16);
            dst.h = (w2 & 0xffff) | (w3 << 16);
          }
        },
        /**
         * @class Hashes.RMD160
         * @constructor
         * @param {Object} [config]
         *
         * A JavaScript implementation of the RIPEMD-160 Algorithm
         * Version 2.2 Copyright Jeremy Lin, Paul Johnston 2000 - 2009.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         * See http://pajhome.org.uk/crypt/md5 for details.
         * Also http://www.ocf.berkeley.edu/~jjlin/jsotp/
         */
        RMD160: function(options) {
          /**
           * Private properties configuration variables. You may need to tweak these to be compatible with
           * the server-side, but the defaults work in most cases.
           * @see this.setUpperCase() method
           * @see this.setPad() method
           */
          var hexcase = (options && typeof options.uppercase === 'boolean') ? options.uppercase : false,
            /* hexadecimal output case format. false - lowercase; true - uppercase  */
            b64pad = (options && typeof options.pad === 'string') ? options.pa : '=',
            /* base-64 pad character. Default '=' for strict RFC compliance   */
            utf8 = (options && typeof options.utf8 === 'boolean') ? options.utf8 : true,
            /* enable/disable utf8 encoding */
            rmd160_r1 = [
              0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
              7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
              3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
              1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
              4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
            ],
            rmd160_r2 = [
              5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
              6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
              15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
              8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
              12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
            ],
            rmd160_s1 = [
              11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
              7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
              11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
              11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
              9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
            ],
            rmd160_s2 = [
              8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
              9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
              9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
              15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
              8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
            ];

          /* privileged (public) methods */
          this.hex = function(s) {
            return rstr2hex(rstr(s));
          };
          this.b64 = function(s) {
            return rstr2b64(rstr(s), b64pad);
          };
          this.any = function(s, e) {
            return rstr2any(rstr(s), e);
          };
          this.raw = function(s) {
            return rstr(s);
          };
          this.hex_hmac = function(k, d) {
            return rstr2hex(rstr_hmac(k, d));
          };
          this.b64_hmac = function(k, d) {
            return rstr2b64(rstr_hmac(k, d), b64pad);
          };
          this.any_hmac = function(k, d, e) {
            return rstr2any(rstr_hmac(k, d), e);
          };
          /**
           * Perform a simple self-test to see if the VM is working
           * @return {String} Hexadecimal hash sample
           * @public
           */
          this.vm_test = function() {
            return hex('abc').toLowerCase() === '900150983cd24fb0d6963f7d28e17f72';
          };
          /**
           * @description Enable/disable uppercase hexadecimal returned string
           * @param {boolean}
           * @return {Object} this
           * @public
           */
          this.setUpperCase = function(a) {
            if (typeof a === 'boolean') {
              hexcase = a;
            }
            return this;
          };
          /**
           * @description Defines a base64 pad string
           * @param {string} Pad
           * @return {Object} this
           * @public
           */
          this.setPad = function(a) {
            if (typeof a !== 'undefined') {
              b64pad = a;
            }
            return this;
          };
          /**
           * @description Defines a base64 pad string
           * @param {boolean}
           * @return {Object} this
           * @public
           */
          this.setUTF8 = function(a) {
            if (typeof a === 'boolean') {
              utf8 = a;
            }
            return this;
          };

          /* private methods */

          /**
           * Calculate the rmd160 of a raw string
           */

          function rstr(s) {
            s = (utf8) ? utf8Encode(s) : s;
            return binl2rstr(binl(rstr2binl(s), s.length * 8));
          }

          /**
           * Calculate the HMAC-rmd160 of a key and some data (raw strings)
           */

          function rstr_hmac(key, data) {
            key = (utf8) ? utf8Encode(key) : key;
            data = (utf8) ? utf8Encode(data) : data;
            var i, hash,
              bkey = rstr2binl(key),
              ipad = Array(16),
              opad = Array(16);

            if (bkey.length > 16) {
              bkey = binl(bkey, key.length * 8);
            }

            for (i = 0; i < 16; i += 1) {
              ipad[i] = bkey[i] ^ 0x36363636;
              opad[i] = bkey[i] ^ 0x5C5C5C5C;
            }
            hash = binl(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
            return binl2rstr(binl(opad.concat(hash), 512 + 160));
          }

          /**
           * Convert an array of little-endian words to a string
           */

          function binl2rstr(input) {
            var i, output = '',
              l = input.length * 32;
            for (i = 0; i < l; i += 8) {
              output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);
            }
            return output;
          }

          /**
           * Calculate the RIPE-MD160 of an array of little-endian words, and a bit length.
           */

          function binl(x, len) {
            var T, j, i, l,
              h0 = 0x67452301,
              h1 = 0xefcdab89,
              h2 = 0x98badcfe,
              h3 = 0x10325476,
              h4 = 0xc3d2e1f0,
              A1, B1, C1, D1, E1,
              A2, B2, C2, D2, E2;

            /* append padding */
            x[len >> 5] |= 0x80 << (len % 32);
            x[(((len + 64) >>> 9) << 4) + 14] = len;
            l = x.length;

            for (i = 0; i < l; i += 16) {
              A1 = A2 = h0;
              B1 = B2 = h1;
              C1 = C2 = h2;
              D1 = D2 = h3;
              E1 = E2 = h4;
              for (j = 0; j <= 79; j += 1) {
                T = safe_add(A1, rmd160_f(j, B1, C1, D1));
                T = safe_add(T, x[i + rmd160_r1[j]]);
                T = safe_add(T, rmd160_K1(j));
                T = safe_add(bit_rol(T, rmd160_s1[j]), E1);
                A1 = E1;
                E1 = D1;
                D1 = bit_rol(C1, 10);
                C1 = B1;
                B1 = T;
                T = safe_add(A2, rmd160_f(79 - j, B2, C2, D2));
                T = safe_add(T, x[i + rmd160_r2[j]]);
                T = safe_add(T, rmd160_K2(j));
                T = safe_add(bit_rol(T, rmd160_s2[j]), E2);
                A2 = E2;
                E2 = D2;
                D2 = bit_rol(C2, 10);
                C2 = B2;
                B2 = T;
              }

              T = safe_add(h1, safe_add(C1, D2));
              h1 = safe_add(h2, safe_add(D1, E2));
              h2 = safe_add(h3, safe_add(E1, A2));
              h3 = safe_add(h4, safe_add(A1, B2));
              h4 = safe_add(h0, safe_add(B1, C2));
              h0 = T;
            }
            return [h0, h1, h2, h3, h4];
          }

          // specific algorithm methods

          function rmd160_f(j, x, y, z) {
            return (0 <= j && j <= 15) ? (x ^ y ^ z) :
              (16 <= j && j <= 31) ? (x & y) | (~x & z) :
              (32 <= j && j <= 47) ? (x | ~y) ^ z :
              (48 <= j && j <= 63) ? (x & z) | (y & ~z) :
              (64 <= j && j <= 79) ? x ^ (y | ~z) :
              'rmd160_f: j out of range';
          }

          function rmd160_K1(j) {
            return (0 <= j && j <= 15) ? 0x00000000 :
              (16 <= j && j <= 31) ? 0x5a827999 :
              (32 <= j && j <= 47) ? 0x6ed9eba1 :
              (48 <= j && j <= 63) ? 0x8f1bbcdc :
              (64 <= j && j <= 79) ? 0xa953fd4e :
              'rmd160_K1: j out of range';
          }

          function rmd160_K2(j) {
            return (0 <= j && j <= 15) ? 0x50a28be6 :
              (16 <= j && j <= 31) ? 0x5c4dd124 :
              (32 <= j && j <= 47) ? 0x6d703ef3 :
              (48 <= j && j <= 63) ? 0x7a6d76e9 :
              (64 <= j && j <= 79) ? 0x00000000 :
              'rmd160_K2: j out of range';
          }
        }
      };

      // exposes Hashes
      (function(window, undefined$1) {
        var freeExports = false;
        {
          freeExports = exports;
          if (exports && typeof commonjsGlobal === 'object' && commonjsGlobal && commonjsGlobal === commonjsGlobal.global) {
            window = commonjsGlobal;
          }
        }

        if (typeof undefined$1 === 'function' && typeof undefined$1.amd === 'object' && undefined$1.amd) {
          // define as an anonymous module, so, through path mapping, it can be aliased
          undefined$1(function() {
            return Hashes;
          });
        } else if (freeExports) {
          // in Node.js or RingoJS v0.8.0+
          if ( module && module.exports === freeExports) {
            module.exports = Hashes;
          }
          // in Narwhal or RingoJS v0.7.0-
          else {
            freeExports.Hashes = Hashes;
          }
        } else {
          // in a browser or Rhino
          window.Hashes = Hashes;
        }
      }(this));
    }()); // IIFE
    });

    var main$8 = createCommonjsModule(function (module, exports) {
    const openpgp = window.openpgp;

    const mod = {

    	OLSKCryptoHMACSHA256Hash (param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!param1.trim()) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return (new (hashes).SHA256).hex_hmac(param1, param2);
    	},

    	OLSKCryptoShortHash (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!inputData.trim()) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return mod.OLSKCryptoHMACSHA256Hash(inputData, inputData).slice(0, 32);
    	},

    	async OLSKCryptoEncryptSigned (param1, param2, param3) {
    		if (typeof param1 !== 'string') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!param1.trim()) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof param2 !== 'string') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!param2.trim()) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof param3 !== 'string') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!param3.trim()) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

        return (await openpgp.encrypt({
          message: openpgp.message.fromText(param3),
          publicKeys: [(await openpgp.key.readArmored(param1)).keys[0]],
          privateKeys: [(await openpgp.key.readArmored(param2)).keys[0]],
        })).data;
    	},

    	async OLSKCryptoDecryptSigned (param1, param2, param3) {
    		if (typeof param1 !== 'string') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!param1.trim()) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof param2 !== 'string') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!param2.trim()) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof param3 !== 'string') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!param3.trim()) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		const { data: decrypted, signatures: [{valid: isSigned}] } = await openpgp.decrypt({
    		  message: await openpgp.message.readArmored(param3),
    		  privateKeys: [(await openpgp.key.readArmored(param1)).keys[0]],
    		  publicKeys: [(await openpgp.key.readArmored(param2)).keys[0]],
    		});

    		if (!isSigned) {
    			return Promise.reject(new Error('OLSKErrorNotSigned'));
    		}

    		return decrypted;
    	},

    	OLSKCryptoEncryptGuardMiddleware (req, res, next) {
    		return next((function (inputData) {
    			if (typeof inputData !== 'object' || inputData === null) {
    				throw new Error('RCSErrorInputNotValid');
    			}

    			if (!inputData.OLSK_CRYPTO_PAIR_RECEIVER_PUBLIC) {
    				return new Error('OLSK_CRYPTO_PAIR_RECEIVER_PUBLIC not defined');
    			}

    			if (!inputData.OLSK_CRYPTO_PAIR_RECEIVER_PUBLIC.trim()) {
    				return new Error('OLSK_CRYPTO_PAIR_RECEIVER_PUBLIC blank');
    			}

    			if (!inputData.OLSK_CRYPTO_PAIR_SENDER_PRIVATE) {
    				return new Error('OLSK_CRYPTO_PAIR_SENDER_PRIVATE not defined');
    			}

    			if (!inputData.OLSK_CRYPTO_PAIR_SENDER_PRIVATE.trim()) {
    				return new Error('OLSK_CRYPTO_PAIR_SENDER_PRIVATE blank');
    			}
    		})(req._FakeEnv || process.env));
    	},

    };

    Object.assign(exports, mod);
    });

    var main$9 = createCommonjsModule(function (module, exports) {
    const uIsFilled = function (inputData) {
    	return typeof inputData === 'string' && inputData.trim() !== '';
    };

    const uPromise = function (inputData) {
    	if (inputData instanceof Promise) {
    		return inputData;
    	}

    	return {
    		then (res) {
    			return res(inputData);
    		},
    	};
    };

    const mod = {

    	_OLSKFundSetupPostPay (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!params.ParamWindow.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof params.ParamExistingCode === 'undefined') {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof params.OLSKFundDispatchPersist !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const confirmation = Object.fromEntries((new URLSearchParams(params.ParamWindow.location.hash.slice(1))).entries()).confirmation;


    		if (!confirmation) {
    			return
    		}

    		params.ParamWindow.location.hash = '';

    		if (params.ParamExistingCode) {
    			return;
    		}

    		return params.OLSKFundDispatchPersist(confirmation);
    	},

    	_OLSKFundGrantData () {
    		return 'kOLSKFundGrantData';
    	},

    	async __OLSKFundSetupGrantDispatchPayload (params, payload) {
    		return params.OLSKFundDispatchGrant(JSON.parse(await main$8.OLSKCryptoDecryptSigned(params.OLSK_CRYPTO_PAIR_RECEIVER_PRIVATE, params.OLSK_CRYPTO_PAIR_SENDER_PUBLIC, payload)));
    	},

    	async _OLSKFundSetupGrant (params) {
    		if (typeof params !== 'object' || params === null) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!uIsFilled(params.OLSK_CRYPTO_PAIR_RECEIVER_PRIVATE)) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!uIsFilled(params.OLSK_CRYPTO_PAIR_SENDER_PUBLIC)) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!params.ParamWindow.location) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}
    		
    		if (typeof params.OLSK_FUND_API_URL !== 'string') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (main$7.OLSKPactAuthModelErrors(params.ParamBody)) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (main$7.OLSKPactPayModelErrors(params.ParamBody)) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof params.OLSKLocalized !== 'function') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof params.OLSKFundDispatchFail !== 'function') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof params.OLSKFundDispatchGrant !== 'function') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		const payload = params.OLSK_TESTING_BEHAVIOUR ? null : await this._DataFoilOLSKLocalStorage.OLKSLocalStorageGet(params.ParamWindow.localStorage, mod._OLSKFundGrantData());
    		if (payload) {
    			return mod.__OLSKFundSetupGrantDispatchPayload(params, payload);
    		}

    		let response;

    		try {
    			response = await params.ParamWindow.fetch(params.OLSK_FUND_API_URL, {
    				method: 'POST',
    				headers: {
    					'Content-Type': 'application/json',
    				},
    				body: JSON.stringify(params.ParamBody),
    			});
    		} catch (error) {
    			return params.ParamWindow.alert(params.OLSKLocalized('OLSKFundGrantErrorConnectionText'));
    		}

    		const json = await response.json();

    		if (response.status !== 200) {
    			return params.OLSKFundDispatchFail(params.ParamWindow.alert(json.RCSAPIError));
    		}

    		return mod.__OLSKFundSetupGrantDispatchPayload(params, await this._DataFoilOLSKLocalStorage.OLKSLocalStorageSet(params.ParamWindow.localStorage, mod._OLSKFundGrantData(), json.OLSK_FUND_ENCRYPTED_SIGNED));
    	},

    	OLSKFundSetup (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamNavigator.platform !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!params.ParamNavigator.serviceWorker) {
    			return;
    		}

    		const _this = this;

    		return uPromise(_this._OLSKFundSetupPostPay()).then(function () {
    			_this._OLSKFundSetupGrant();
    		});
    	},

    	OLSKFundConfirm (param1, OLSKLocalized) {
    		if (!param1.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return param1.confirm(OLSKLocalized('OLSKFundConfirmText'));
    	},

    	OLSKFundURL (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamFormURL !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamProject !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamIdentity !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamHomeURL !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return Object.assign(new URL(params.ParamFormURL), {
    			hash: (new URLSearchParams({
    				seed: JSON.stringify({
    					project: params.ParamProject,
    					identity: params.ParamIdentity,
    					home: params.ParamHomeURL,
    				}),
    			})).toString(),
    		}).href;
    	},

    	OLSKFundLauncherFakeItemProxy () {
    		return {
    			LCHRecipeName: 'OLSKFundLauncherFakeItemProxy',
    			LCHRecipeCallback () {},
    		};
    	},

    	OLSKFundLauncherItemEnterConfirmation (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!params.ParamWindow.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof params.OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamAuthorized !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKFundDispatchPersist !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const _this = this;

    		return {
    			LCHRecipeSignature: 'OLSKFundLauncherItemEnterConfirmation',
    			LCHRecipeName: params.OLSKLocalized('OLSKFundLauncherItemEnterConfirmationText'),
    			LCHRecipeCallback () {
    				const item = (params.ParamWindow.prompt(params.OLSKLocalized('OLSKFundLauncherItemEnterConfirmationPromptText')) || '').trim();

    				if (!item) {
    					return;
    				}

    				_this._DataFoilOLSKLocalStorage.OLKSLocalStorageSet(params.ParamWindow.localStorage, mod._OLSKFundGrantData(), null);

    				return params.OLSKFundDispatchPersist(item);
    			},
    			LCHRecipeIsExcluded () {
    				return !!params.ParamAuthorized;
    			},
    		};
    	},

    	OLSKFundLauncherItemClearAuthorization (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!params.ParamWindow.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof params.OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamAuthorized !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKFundDispatchGrant !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKFundDispatchPersist !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const _this = this;

    		return {
    			LCHRecipeSignature: 'OLSKFundLauncherItemClearAuthorization',
    			LCHRecipeName: params.OLSKLocalized('OLSKFundLauncherItemClearAuthorizationText'),
    			LCHRecipeCallback () {
    				if (!params.ParamWindow.confirm(params.OLSKLocalized('OLSKFundLauncherItemClearAuthorizationText'))) {
    					return;
    				}

    				return params.OLSKFundDispatchPersist(params.OLSKFundDispatchGrant(_this._DataFoilOLSKLocalStorage.OLKSLocalStorageSet(params.ParamWindow.localStorage, mod._OLSKFundGrantData(), null)));
    			},
    			LCHRecipeIsExcluded () {
    				return !params.ParamAuthorized;
    			},
    		};
    	},

    	OLSKFundRecipes (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSK_TESTING_BEHAVIOUR !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [
    			mod.OLSKFundLauncherFakeItemProxy(),
    			mod.OLSKFundLauncherItemEnterConfirmation(params),
    			mod.OLSKFundLauncherItemClearAuthorization(params),
    		].filter(function (e) {
    			if (params.OLSK_TESTING_BEHAVIOUR) {
    				return true;
    			}

    			return !(e.LCHRecipeSignature || e.LCHRecipeName).match(/Fake/);
    		});
    	},

    	// DATA

    	_DataFoilOLSKLocalStorage: main$5,

    };

    Object.assign(exports, mod);
    });

    var main$a = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKChainGather (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const _OLSKChainQueue = [];

    		const _OLSKChainGatherObject = function () {
    			return Object.keys(inputData).reduce(function (coll, item) {
    				return Object.assign(coll, typeof inputData[item] === 'function' ? {
    					[item]: function () {
    						const _arguments = arguments;

    						_OLSKChainQueue.push(function () {
    							return inputData[item](..._arguments);
    						});

    						return _OLSKChainGatherObject();
    					},
    				} : {});
    			}, {
    				_OLSKChainQueue,
    				OLSKChainExecute () {
    					return _OLSKChainQueue.reduce(async function (coll, e) {
    						return (await coll).concat(await e());
    					}, Promise.resolve([]));
    				},
    			});
    		};

    		return _OLSKChainGatherObject();
    	},

    };

    Object.assign(exports, mod);
    });

    var main$b = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKBeaconWait (inputData) {
    		if (typeof inputData !== 'undefined' && typeof inputData !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return new Promise(function (resolve) {
    			return setTimeout(resolve, inputData || 650);
    		});
    	},

    	OLSKBeaconDeferFunction (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return new Promise(function (resolve) {
    			const item = document.querySelector(inputData);

    			let listener = item.addEventListener('click', function () {
    				item.removeEventListener('click', listener);
    				resolve();
    			});
    		});
    	},

    	OLSKBeaconPointFunction (param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const startRect = document.querySelector(param1).getBoundingClientRect();
    		const endRect = document.querySelector(param2).getBoundingClientRect();

    		return function (pct) {
    			return (function (el, left, top) {
    				el.style.left = left + 'px';
    				el.style.top = top + 'px';
    			})(
    				document.querySelector(param1),
    				startRect.left - (startRect.left - (endRect.left + endRect.width / 2 - startRect.width / 2)) * pct,
    				startRect.top - (startRect.top - (endRect.top + endRect.height / 2 - startRect.height / 2)) * pct,
    			);
    		};
    	},

    	_OLSKBeaconFire (el, etype) {
    		if (el.fireEvent) {
    		  return el.fireEvent('on' + etype);
    		}

    		const evObj = document.createEvent('Events');
    		evObj.initEvent(etype, true, false);
    		el.dispatchEvent(evObj);
    	},

    	OLSKBeaconClickFunction (param1, param2, param3) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const state = {
    			didClick: false,
    			didTouchDown: false,
    			didTouchUp: false,
    		};

    		const start = performance.now();

    		return function (pct) {
    			const time = performance.now() - start;

    			if (!state.didClick) {
    				mod._OLSKBeaconFire(document.querySelector(param1), 'click');

    				state.didClick = true;
    			}

    			if (!state.didTouchDown) {
    				document.querySelector(param2).classList.add(param3);

    				state.didTouchDown = true;

    				return
    			}

    			if (!state.didTouchUp && time > 250) {
    				document.querySelector(param2).classList.remove(param3);

    				state.didTouchUp = true;
    				
    				return
    			}
    		};
    	},

    	OLSKBeaconNudgeFunction (param1, param2, param3) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const startRect = document.querySelector(param1).getBoundingClientRect();
    		return function (pct) {
    			return (function (el, left, top) {
    				el.style.left = left + 'px';
    				el.style.top = top + 'px';
    			})(
    				document.querySelector(param1),
    				startRect.left + param2 * pct,
    				startRect.top + param3 * pct,
    			);
    		};
    	},

    	OLSKBeaconFillFunction (param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return function (pct) {
    			document.querySelector(param1).value = param2.slice(0, param2.length * pct);
    			mod._OLSKBeaconFire(document.querySelector(param1), 'input');
    		};
    	},

    	OLSKBeaconSetFunction (param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return function (pct) {
    			document.querySelector(param1).value = param2;
    			mod._OLSKBeaconFire(document.querySelector(param1), 'change');
    		};
    	},

    	_OLSKBeaconAnimate (param1, param2) {
    		if (typeof param1 !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'undefined' && typeof param2 !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		// jsanimation/index.js at master · allenhwkim/jsanimation https://github.com/allenhwkim/jsanimation/blob/master/src/index.js

    		const start = performance.now();
    		return new Promise(function(resolve) {
    			const easeInOut = function(n) {
    				return 0.5 * (Math.sin((n - 0.5) * Math.PI) + 1);
    			};

    		  requestAnimationFrame(function animate(time) {
    		    let timeFraction = (time - start) / (param2 || 650);
    		    (timeFraction > 1) && (timeFraction = 1);
    		    param1(easeInOut(timeFraction), timeFraction);
    		    timeFraction < 1 ? requestAnimationFrame(animate) : resolve();
    		  });
    		});
    	},

    };

    Object.assign(exports, mod);
    });

    /* os-app/open-review/submodules/KOMReviewMasterListItem/main.svelte generated by Svelte v3.29.4 */
    const file = "os-app/open-review/submodules/KOMReviewMasterListItem/main.svelte";

    function create_fragment(ctx) {
    	let button;
    	let strong;
    	let t0;
    	let t1;
    	let p0;
    	let span0;
    	let t2;
    	let t3;
    	let span1;
    	let t5;
    	let p1;
    	let span2;
    	let t6;
    	let t7;
    	let span3;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			strong = element("strong");
    			t0 = text(/*KOMReviewMasterListItemName*/ ctx[0]);
    			t1 = space();
    			p0 = element("p");
    			span0 = element("span");
    			t2 = text(/*KOMReviewMasterListItemReviewCount*/ ctx[1]);
    			t3 = space();
    			span1 = element("span");
    			span1.textContent = `${/*OLSKLocalized*/ ctx[4]("KOMReviewMasterListItemReviewLabelText")}`;
    			t5 = space();
    			p1 = element("p");
    			span2 = element("span");
    			t6 = text(/*KOMReviewMasterListItemUnseenCount*/ ctx[2]);
    			t7 = space();
    			span3 = element("span");
    			span3.textContent = `${/*OLSKLocalized*/ ctx[4]("KOMReviewMasterListItemUnseenLabelText")}`;
    			attr_dev(strong, "class", "KOMReviewMasterListItemName svelte-10msmh");
    			add_location(strong, file, 14, 1, 678);
    			attr_dev(span0, "class", "KOMReviewMasterListItemReviewValue");
    			add_location(span0, file, 17, 2, 772);
    			attr_dev(span1, "class", "KOMReviewMasterListItemReviewLabel");
    			add_location(span1, file, 18, 2, 869);
    			attr_dev(p0, "class", "svelte-10msmh");
    			add_location(p0, file, 16, 1, 766);
    			attr_dev(span2, "class", "KOMReviewMasterListItemUnseenValue");
    			add_location(span2, file, 22, 2, 999);
    			attr_dev(span3, "class", "KOMReviewMasterListItemUnseenLabel");
    			add_location(span3, file, 23, 2, 1096);
    			attr_dev(p1, "class", "svelte-10msmh");
    			add_location(p1, file, 21, 1, 993);
    			attr_dev(button, "class", "KOMReviewMasterListItem OLSKCommonButton svelte-10msmh");
    			attr_dev(button, "aria-label", /*KOMReviewMasterListItemName*/ ctx[0]);
    			add_location(button, file, 12, 0, 525);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, strong);
    			append_dev(strong, t0);
    			append_dev(button, t1);
    			append_dev(button, p0);
    			append_dev(p0, span0);
    			append_dev(span0, t2);
    			append_dev(p0, t3);
    			append_dev(p0, span1);
    			append_dev(button, t5);
    			append_dev(button, p1);
    			append_dev(p1, span2);
    			append_dev(span2, t6);
    			append_dev(p1, t7);
    			append_dev(p1, span3);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*KOMReviewMasterListItemDispatchClick*/ ctx[3])) /*KOMReviewMasterListItemDispatchClick*/ ctx[3].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if (dirty & /*KOMReviewMasterListItemName*/ 1) set_data_dev(t0, /*KOMReviewMasterListItemName*/ ctx[0]);
    			if (dirty & /*KOMReviewMasterListItemReviewCount*/ 2) set_data_dev(t2, /*KOMReviewMasterListItemReviewCount*/ ctx[1]);
    			if (dirty & /*KOMReviewMasterListItemUnseenCount*/ 4) set_data_dev(t6, /*KOMReviewMasterListItemUnseenCount*/ ctx[2]);

    			if (dirty & /*KOMReviewMasterListItemName*/ 1) {
    				attr_dev(button, "aria-label", /*KOMReviewMasterListItemName*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMReviewMasterListItemName } = $$props;
    	let { KOMReviewMasterListItemReviewCount } = $$props;
    	let { KOMReviewMasterListItemUnseenCount } = $$props;
    	let { KOMReviewMasterListItemDispatchClick } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const writable_props = [
    		"KOMReviewMasterListItemName",
    		"KOMReviewMasterListItemReviewCount",
    		"KOMReviewMasterListItemUnseenCount",
    		"KOMReviewMasterListItemDispatchClick"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("KOMReviewMasterListItemName" in $$props) $$invalidate(0, KOMReviewMasterListItemName = $$props.KOMReviewMasterListItemName);
    		if ("KOMReviewMasterListItemReviewCount" in $$props) $$invalidate(1, KOMReviewMasterListItemReviewCount = $$props.KOMReviewMasterListItemReviewCount);
    		if ("KOMReviewMasterListItemUnseenCount" in $$props) $$invalidate(2, KOMReviewMasterListItemUnseenCount = $$props.KOMReviewMasterListItemUnseenCount);
    		if ("KOMReviewMasterListItemDispatchClick" in $$props) $$invalidate(3, KOMReviewMasterListItemDispatchClick = $$props.KOMReviewMasterListItemDispatchClick);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewMasterListItemName,
    		KOMReviewMasterListItemReviewCount,
    		KOMReviewMasterListItemUnseenCount,
    		KOMReviewMasterListItemDispatchClick,
    		OLSKInternational,
    		OLSKLocalized
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMReviewMasterListItemName" in $$props) $$invalidate(0, KOMReviewMasterListItemName = $$props.KOMReviewMasterListItemName);
    		if ("KOMReviewMasterListItemReviewCount" in $$props) $$invalidate(1, KOMReviewMasterListItemReviewCount = $$props.KOMReviewMasterListItemReviewCount);
    		if ("KOMReviewMasterListItemUnseenCount" in $$props) $$invalidate(2, KOMReviewMasterListItemUnseenCount = $$props.KOMReviewMasterListItemUnseenCount);
    		if ("KOMReviewMasterListItemDispatchClick" in $$props) $$invalidate(3, KOMReviewMasterListItemDispatchClick = $$props.KOMReviewMasterListItemDispatchClick);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewMasterListItemName,
    		KOMReviewMasterListItemReviewCount,
    		KOMReviewMasterListItemUnseenCount,
    		KOMReviewMasterListItemDispatchClick,
    		OLSKLocalized
    	];
    }

    class Main extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance, create_fragment, safe_not_equal, {
    			KOMReviewMasterListItemName: 0,
    			KOMReviewMasterListItemReviewCount: 1,
    			KOMReviewMasterListItemUnseenCount: 2,
    			KOMReviewMasterListItemDispatchClick: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMReviewMasterListItemName*/ ctx[0] === undefined && !("KOMReviewMasterListItemName" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterListItemName'");
    		}

    		if (/*KOMReviewMasterListItemReviewCount*/ ctx[1] === undefined && !("KOMReviewMasterListItemReviewCount" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterListItemReviewCount'");
    		}

    		if (/*KOMReviewMasterListItemUnseenCount*/ ctx[2] === undefined && !("KOMReviewMasterListItemUnseenCount" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterListItemUnseenCount'");
    		}

    		if (/*KOMReviewMasterListItemDispatchClick*/ ctx[3] === undefined && !("KOMReviewMasterListItemDispatchClick" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterListItemDispatchClick'");
    		}
    	}

    	get KOMReviewMasterListItemName() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterListItemName(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMasterListItemReviewCount() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterListItemReviewCount(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMasterListItemUnseenCount() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterListItemUnseenCount(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMasterListItemDispatchClick() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterListItemDispatchClick(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-review/submodules/KOMReviewToday/main.svelte generated by Svelte v3.29.4 */
    const file$1 = "os-app/open-review/submodules/KOMReviewToday/main.svelte";

    function create_fragment$1(ctx) {
    	let div;
    	let h2;
    	let t1;
    	let table;
    	let tr0;
    	let td0;
    	let t3;
    	let td1;
    	let t4;
    	let t5;
    	let tr1;
    	let td2;
    	let t7;
    	let td3;
    	let t8;
    	let t9;
    	let tr2;
    	let td4;
    	let t11;
    	let td5;
    	let t12;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h2 = element("h2");
    			h2.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMReviewTodayHeadingText")}`;
    			t1 = space();
    			table = element("table");
    			tr0 = element("tr");
    			td0 = element("td");
    			td0.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMReviewTodayTotalCardsLabelText")}`;
    			t3 = space();
    			td1 = element("td");
    			t4 = text(/*KOMReviewTodayTotalCards*/ ctx[0]);
    			t5 = space();
    			tr1 = element("tr");
    			td2 = element("td");
    			td2.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMReviewTodayTimeMinutesLabelText")}`;
    			t7 = space();
    			td3 = element("td");
    			t8 = text(/*KOMReviewTodayTimeMinutes*/ ctx[1]);
    			t9 = space();
    			tr2 = element("tr");
    			td4 = element("td");
    			td4.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMReviewTodayReviewAccuracyLabelText")}`;
    			t11 = space();
    			td5 = element("td");
    			t12 = text(/*KOMReviewTodayReviewAccuracy*/ ctx[2]);
    			attr_dev(h2, "class", "KOMReviewTodayHeading");
    			add_location(h2, file$1, 13, 0, 488);
    			attr_dev(td0, "class", "KOMReviewTodayTotalCardsLabel svelte-10ck8e3");
    			add_location(td0, file$1, 18, 1, 590);
    			attr_dev(td1, "class", "KOMReviewTodayTotalCardsValue svelte-10ck8e3");
    			add_location(td1, file$1, 19, 1, 693);
    			add_location(tr0, file$1, 17, 0, 584);
    			attr_dev(td2, "class", "KOMReviewTodayTimeMinutesLabel svelte-10ck8e3");
    			add_location(td2, file$1, 23, 1, 782);
    			attr_dev(td3, "class", "KOMReviewTodayTimeMinutesValue svelte-10ck8e3");
    			add_location(td3, file$1, 24, 1, 887);
    			add_location(tr1, file$1, 22, 0, 776);
    			attr_dev(td4, "class", "KOMReviewTodayReviewAccuracyLabel svelte-10ck8e3");
    			add_location(td4, file$1, 28, 1, 978);
    			attr_dev(td5, "class", "KOMReviewTodayReviewAccuracyValue svelte-10ck8e3");
    			add_location(td5, file$1, 29, 1, 1089);
    			add_location(tr2, file$1, 27, 0, 972);
    			add_location(table, file$1, 15, 0, 575);
    			attr_dev(div, "class", "KOMReviewToday");
    			add_location(div, file$1, 11, 0, 458);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h2);
    			append_dev(div, t1);
    			append_dev(div, table);
    			append_dev(table, tr0);
    			append_dev(tr0, td0);
    			append_dev(tr0, t3);
    			append_dev(tr0, td1);
    			append_dev(td1, t4);
    			append_dev(table, t5);
    			append_dev(table, tr1);
    			append_dev(tr1, td2);
    			append_dev(tr1, t7);
    			append_dev(tr1, td3);
    			append_dev(td3, t8);
    			append_dev(table, t9);
    			append_dev(table, tr2);
    			append_dev(tr2, td4);
    			append_dev(tr2, t11);
    			append_dev(tr2, td5);
    			append_dev(td5, t12);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*KOMReviewTodayTotalCards*/ 1) set_data_dev(t4, /*KOMReviewTodayTotalCards*/ ctx[0]);
    			if (dirty & /*KOMReviewTodayTimeMinutes*/ 2) set_data_dev(t8, /*KOMReviewTodayTimeMinutes*/ ctx[1]);
    			if (dirty & /*KOMReviewTodayReviewAccuracy*/ 4) set_data_dev(t12, /*KOMReviewTodayReviewAccuracy*/ ctx[2]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMReviewTodayTotalCards } = $$props;
    	let { KOMReviewTodayTimeMinutes } = $$props;
    	let { KOMReviewTodayReviewAccuracy } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const writable_props = [
    		"KOMReviewTodayTotalCards",
    		"KOMReviewTodayTimeMinutes",
    		"KOMReviewTodayReviewAccuracy"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("KOMReviewTodayTotalCards" in $$props) $$invalidate(0, KOMReviewTodayTotalCards = $$props.KOMReviewTodayTotalCards);
    		if ("KOMReviewTodayTimeMinutes" in $$props) $$invalidate(1, KOMReviewTodayTimeMinutes = $$props.KOMReviewTodayTimeMinutes);
    		if ("KOMReviewTodayReviewAccuracy" in $$props) $$invalidate(2, KOMReviewTodayReviewAccuracy = $$props.KOMReviewTodayReviewAccuracy);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewTodayTotalCards,
    		KOMReviewTodayTimeMinutes,
    		KOMReviewTodayReviewAccuracy,
    		OLSKInternational,
    		OLSKLocalized
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMReviewTodayTotalCards" in $$props) $$invalidate(0, KOMReviewTodayTotalCards = $$props.KOMReviewTodayTotalCards);
    		if ("KOMReviewTodayTimeMinutes" in $$props) $$invalidate(1, KOMReviewTodayTimeMinutes = $$props.KOMReviewTodayTimeMinutes);
    		if ("KOMReviewTodayReviewAccuracy" in $$props) $$invalidate(2, KOMReviewTodayReviewAccuracy = $$props.KOMReviewTodayReviewAccuracy);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewTodayTotalCards,
    		KOMReviewTodayTimeMinutes,
    		KOMReviewTodayReviewAccuracy,
    		OLSKLocalized
    	];
    }

    class Main$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
    			KOMReviewTodayTotalCards: 0,
    			KOMReviewTodayTimeMinutes: 1,
    			KOMReviewTodayReviewAccuracy: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$1.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMReviewTodayTotalCards*/ ctx[0] === undefined && !("KOMReviewTodayTotalCards" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewTodayTotalCards'");
    		}

    		if (/*KOMReviewTodayTimeMinutes*/ ctx[1] === undefined && !("KOMReviewTodayTimeMinutes" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewTodayTimeMinutes'");
    		}

    		if (/*KOMReviewTodayReviewAccuracy*/ ctx[2] === undefined && !("KOMReviewTodayReviewAccuracy" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewTodayReviewAccuracy'");
    		}
    	}

    	get KOMReviewTodayTotalCards() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewTodayTotalCards(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewTodayTimeMinutes() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewTodayTimeMinutes(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewTodayReviewAccuracy() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewTodayReviewAccuracy(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const mod$g = {

    	KOMReviewChartElementHorizontalStackedBarWidth() {
    		return 100;
    	},

    	KOMReviewChartElementHorizontalStackedBarHeight() {
    		return 10;
    	},

    	KOMReviewChartElementHorizontalStackedBarScaleHorizontal(param1, param2, param3) {
    		if (typeof param1 !== 'function') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!Array.isArray(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!param2.length) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (typeof param3 !== 'undefined') {
    			if (typeof param3 !== 'number') {
    				throw new Error('KOMErrorInputNotValid');
    			}
    		}

    		return param1()
    			.range([0, mod$g.KOMReviewChartElementHorizontalStackedBarWidth()])
    			.domain([0, param3 || param2.reduce(function (coll, item) {
    				return coll + item;
    			}, 0)]);
    	},

    	KOMReviewChartElementHorizontalStackedBarScaleColor(param1, param2, param3) {
    		if (typeof param1 !== 'function') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!Array.isArray(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!param2.length) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!Array.isArray(param3)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (param3.length !== param2.length) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return param1()
    			.domain(param3)
    			.range(param2)
    			.unknown('pink');
    	},

    };

    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function bisector(f) {
      let delta = f;
      let compare = f;

      if (f.length === 1) {
        delta = (d, x) => f(d) - x;
        compare = ascendingComparator(f);
      }

      function left(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          const mid = (lo + hi) >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1;
          else hi = mid;
        }
        return lo;
      }

      function right(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          const mid = (lo + hi) >>> 1;
          if (compare(a[mid], x) > 0) hi = mid;
          else lo = mid + 1;
        }
        return lo;
      }

      function center(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        const i = left(a, x, lo, hi - 1);
        return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
      }

      return {left, center, right};
    }

    function ascendingComparator(f) {
      return (d, x) => ascending(f(d), x);
    }

    function number(x) {
      return x === null ? NaN : +x;
    }

    function* numbers(values, valueof) {
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            yield value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            yield value;
          }
        }
      }
    }

    const ascendingBisect = bisector(ascending);
    const bisectRight = ascendingBisect.right;
    const bisectLeft = ascendingBisect.left;
    const bisectCenter = bisector(number).center;

    function count(values, valueof) {
      let count = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            ++count;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            ++count;
          }
        }
      }
      return count;
    }

    function length(array) {
      return array.length | 0;
    }

    function empty$1(length) {
      return !(length > 0);
    }

    function arrayify(values) {
      return typeof values !== "object" || "length" in values ? values : Array.from(values);
    }

    function reducer(reduce) {
      return values => reduce(...values);
    }

    function cross(...values) {
      const reduce = typeof values[values.length - 1] === "function" && reducer(values.pop());
      values = values.map(arrayify);
      const lengths = values.map(length);
      const j = values.length - 1;
      const index = new Array(j + 1).fill(0);
      const product = [];
      if (j < 0 || lengths.some(empty$1)) return product;
      while (true) {
        product.push(index.map((j, i) => values[i][j]));
        let i = j;
        while (++index[i] === lengths[i]) {
          if (i === 0) return reduce ? product.map(reduce) : product;
          index[i--] = 0;
        }
      }
    }

    function cumsum(values, valueof) {
      var sum = 0, index = 0;
      return Float64Array.from(values, valueof === undefined
        ? v => (sum += +v || 0)
        : v => (sum += +valueof(v, index++, values) || 0));
    }

    function descending(a, b) {
      return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
    }

    function variance(values, valueof) {
      let count = 0;
      let delta;
      let mean = 0;
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
          }
        }
      }
      if (count > 1) return sum / (count - 1);
    }

    function deviation(values, valueof) {
      const v = variance(values, valueof);
      return v ? Math.sqrt(v) : v;
    }

    function extent(values, valueof) {
      let min;
      let max;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null) {
            if (min === undefined) {
              if (value >= value) min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null) {
            if (min === undefined) {
              if (value >= value) min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      }
      return [min, max];
    }

    // https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
    class Adder {
      constructor() {
        this._partials = new Float64Array(32);
        this._n = 0;
      }
      add(x) {
        const p = this._partials;
        let i = 0;
        for (let j = 0; j < this._n && j < 32; j++) {
          const y = p[j],
            hi = x + y,
            lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
          if (lo) p[i++] = lo;
          x = hi;
        }
        p[i] = x;
        this._n = i + 1;
        return this;
      }
      valueOf() {
        const p = this._partials;
        let n = this._n, x, y, lo, hi = 0;
        if (n > 0) {
          hi = p[--n];
          while (n > 0) {
            x = hi;
            y = p[--n];
            hi = x + y;
            lo = y - (hi - x);
            if (lo) break;
          }
          if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {
            y = lo * 2;
            x = hi + y;
            if (y == x - hi) hi = x;
          }
        }
        return hi;
      }
    }

    function fsum(values, valueof) {
      const adder = new Adder();
      if (valueof === undefined) {
        for (let value of values) {
          if (value = +value) {
            adder.add(value);
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if (value = +valueof(value, ++index, values)) {
            adder.add(value);
          }
        }
      }
      return +adder;
    }

    function identity(x) {
      return x;
    }

    function group(values, ...keys) {
      return nest(values, identity, identity, keys);
    }

    function groups(values, ...keys) {
      return nest(values, Array.from, identity, keys);
    }

    function rollup(values, reduce, ...keys) {
      return nest(values, identity, reduce, keys);
    }

    function rollups(values, reduce, ...keys) {
      return nest(values, Array.from, reduce, keys);
    }

    function index(values, ...keys) {
      return nest(values, identity, unique, keys);
    }

    function indexes(values, ...keys) {
      return nest(values, Array.from, unique, keys);
    }

    function unique(values) {
      if (values.length !== 1) throw new Error("duplicate key");
      return values[0];
    }

    function nest(values, map, reduce, keys) {
      return (function regroup(values, i) {
        if (i >= keys.length) return reduce(values);
        const groups = new Map();
        const keyof = keys[i++];
        let index = -1;
        for (const value of values) {
          const key = keyof(value, ++index, values);
          const group = groups.get(key);
          if (group) group.push(value);
          else groups.set(key, [value]);
        }
        for (const [key, values] of groups) {
          groups.set(key, regroup(values, i));
        }
        return map(groups);
      })(values, 0);
    }

    var array = Array.prototype;

    var slice = array.slice;

    function constant(x) {
      return function() {
        return x;
      };
    }

    var e10 = Math.sqrt(50),
        e5 = Math.sqrt(10),
        e2 = Math.sqrt(2);

    function ticks(start, stop, count) {
      var reverse,
          i = -1,
          n,
          ticks,
          step;

      stop = +stop, start = +start, count = +count;
      if (start === stop && count > 0) return [start];
      if (reverse = stop < start) n = start, start = stop, stop = n;
      if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

      if (step > 0) {
        start = Math.ceil(start / step);
        stop = Math.floor(stop / step);
        ticks = new Array(n = Math.ceil(stop - start + 1));
        while (++i < n) ticks[i] = (start + i) * step;
      } else {
        step = -step;
        start = Math.ceil(start * step);
        stop = Math.floor(stop * step);
        ticks = new Array(n = Math.ceil(stop - start + 1));
        while (++i < n) ticks[i] = (start + i) / step;
      }

      if (reverse) ticks.reverse();

      return ticks;
    }

    function tickIncrement(start, stop, count) {
      var step = (stop - start) / Math.max(0, count),
          power = Math.floor(Math.log(step) / Math.LN10),
          error = step / Math.pow(10, power);
      return power >= 0
          ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
          : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
    }

    function tickStep(start, stop, count) {
      var step0 = Math.abs(stop - start) / Math.max(0, count),
          step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
          error = step0 / step1;
      if (error >= e10) step1 *= 10;
      else if (error >= e5) step1 *= 5;
      else if (error >= e2) step1 *= 2;
      return stop < start ? -step1 : step1;
    }

    function nice(start, stop, count) {
      let prestep;
      while (true) {
        const step = tickIncrement(start, stop, count);
        if (step === prestep || step === 0 || !isFinite(step)) {
          return [start, stop];
        } else if (step > 0) {
          start = Math.floor(start / step) * step;
          stop = Math.ceil(stop / step) * step;
        } else if (step < 0) {
          start = Math.ceil(start * step) / step;
          stop = Math.floor(stop * step) / step;
        }
        prestep = step;
      }
    }

    function sturges(values) {
      return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;
    }

    function bin() {
      var value = identity,
          domain = extent,
          threshold = sturges;

      function histogram(data) {
        if (!Array.isArray(data)) data = Array.from(data);

        var i,
            n = data.length,
            x,
            values = new Array(n);

        for (i = 0; i < n; ++i) {
          values[i] = value(data[i], i, data);
        }

        var xz = domain(values),
            x0 = xz[0],
            x1 = xz[1],
            tz = threshold(values, x0, x1);

        // Convert number of thresholds into uniform thresholds,
        // and nice the default domain accordingly.
        if (!Array.isArray(tz)) {
          tz = +tz;
          if (domain === extent) [x0, x1] = nice(x0, x1, tz);
          tz = ticks(x0, x1, tz);
          if (tz[tz.length - 1] === x1) tz.pop(); // exclusive
        }

        // Remove any thresholds outside the domain.
        var m = tz.length;
        while (tz[0] <= x0) tz.shift(), --m;
        while (tz[m - 1] > x1) tz.pop(), --m;

        var bins = new Array(m + 1),
            bin;

        // Initialize bins.
        for (i = 0; i <= m; ++i) {
          bin = bins[i] = [];
          bin.x0 = i > 0 ? tz[i - 1] : x0;
          bin.x1 = i < m ? tz[i] : x1;
        }

        // Assign data to bins by value, ignoring any outside the domain.
        for (i = 0; i < n; ++i) {
          x = values[i];
          if (x0 <= x && x <= x1) {
            bins[bisectRight(tz, x, 0, m)].push(data[i]);
          }
        }

        return bins;
      }

      histogram.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
      };

      histogram.domain = function(_) {
        return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
      };

      histogram.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
      };

      return histogram;
    }

    function max(values, valueof) {
      let max;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null
              && (max < value || (max === undefined && value >= value))) {
            max = value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (max < value || (max === undefined && value >= value))) {
            max = value;
          }
        }
      }
      return max;
    }

    function min(values, valueof) {
      let min;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null
              && (min > value || (min === undefined && value >= value))) {
            min = value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (min > value || (min === undefined && value >= value))) {
            min = value;
          }
        }
      }
      return min;
    }

    // Based on https://github.com/mourner/quickselect
    // ISC license, Copyright 2018 Vladimir Agafonkin.
    function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {
      while (right > left) {
        if (right - left > 600) {
          const n = right - left + 1;
          const m = k - left + 1;
          const z = Math.log(n);
          const s = 0.5 * Math.exp(2 * z / 3);
          const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
          const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
          const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
          quickselect(array, k, newLeft, newRight, compare);
        }

        const t = array[k];
        let i = left;
        let j = right;

        swap(array, left, k);
        if (compare(array[right], t) > 0) swap(array, left, right);

        while (i < j) {
          swap(array, i, j), ++i, --j;
          while (compare(array[i], t) < 0) ++i;
          while (compare(array[j], t) > 0) --j;
        }

        if (compare(array[left], t) === 0) swap(array, left, j);
        else ++j, swap(array, j, right);

        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
      }
      return array;
    }

    function swap(array, i, j) {
      const t = array[i];
      array[i] = array[j];
      array[j] = t;
    }

    function quantile(values, p, valueof) {
      values = Float64Array.from(numbers(values, valueof));
      if (!(n = values.length)) return;
      if ((p = +p) <= 0 || n < 2) return min(values);
      if (p >= 1) return max(values);
      var n,
          i = (n - 1) * p,
          i0 = Math.floor(i),
          value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),
          value1 = min(values.subarray(i0 + 1));
      return value0 + (value1 - value0) * (i - i0);
    }

    function quantileSorted(values, p, valueof = number) {
      if (!(n = values.length)) return;
      if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
      if (p >= 1) return +valueof(values[n - 1], n - 1, values);
      var n,
          i = (n - 1) * p,
          i0 = Math.floor(i),
          value0 = +valueof(values[i0], i0, values),
          value1 = +valueof(values[i0 + 1], i0 + 1, values);
      return value0 + (value1 - value0) * (i - i0);
    }

    function freedmanDiaconis(values, min, max) {
      return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(count(values), -1 / 3)));
    }

    function scott(values, min, max) {
      return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(count(values), -1 / 3)));
    }

    function maxIndex(values, valueof) {
      let max;
      let maxIndex = -1;
      let index = -1;
      if (valueof === undefined) {
        for (const value of values) {
          ++index;
          if (value != null
              && (max < value || (max === undefined && value >= value))) {
            max = value, maxIndex = index;
          }
        }
      } else {
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (max < value || (max === undefined && value >= value))) {
            max = value, maxIndex = index;
          }
        }
      }
      return maxIndex;
    }

    function mean(values, valueof) {
      let count = 0;
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            ++count, sum += value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            ++count, sum += value;
          }
        }
      }
      if (count) return sum / count;
    }

    function median(values, valueof) {
      return quantile(values, 0.5, valueof);
    }

    function* flatten(arrays) {
      for (const array of arrays) {
        yield* array;
      }
    }

    function merge(arrays) {
      return Array.from(flatten(arrays));
    }

    function minIndex(values, valueof) {
      let min;
      let minIndex = -1;
      let index = -1;
      if (valueof === undefined) {
        for (const value of values) {
          ++index;
          if (value != null
              && (min > value || (min === undefined && value >= value))) {
            min = value, minIndex = index;
          }
        }
      } else {
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (min > value || (min === undefined && value >= value))) {
            min = value, minIndex = index;
          }
        }
      }
      return minIndex;
    }

    function pairs(values, pairof = pair) {
      const pairs = [];
      let previous;
      let first = false;
      for (const value of values) {
        if (first) pairs.push(pairof(previous, value));
        previous = value;
        first = true;
      }
      return pairs;
    }

    function pair(a, b) {
      return [a, b];
    }

    function permute(source, keys) {
      return Array.from(keys, key => source[key]);
    }

    function range(start, stop, step) {
      start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

      var i = -1,
          n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
          range = new Array(n);

      while (++i < n) {
        range[i] = start + i * step;
      }

      return range;
    }

    function least(values, compare = ascending) {
      let min;
      let defined = false;
      if (compare.length === 1) {
        let minValue;
        for (const element of values) {
          const value = compare(element);
          if (defined
              ? ascending(value, minValue) < 0
              : ascending(value, value) === 0) {
            min = element;
            minValue = value;
            defined = true;
          }
        }
      } else {
        for (const value of values) {
          if (defined
              ? compare(value, min) < 0
              : compare(value, value) === 0) {
            min = value;
            defined = true;
          }
        }
      }
      return min;
    }

    function leastIndex(values, compare = ascending) {
      if (compare.length === 1) return minIndex(values, compare);
      let minValue;
      let min = -1;
      let index = -1;
      for (const value of values) {
        ++index;
        if (min < 0
            ? compare(value, value) === 0
            : compare(value, minValue) < 0) {
          minValue = value;
          min = index;
        }
      }
      return min;
    }

    function greatest(values, compare = ascending) {
      let max;
      let defined = false;
      if (compare.length === 1) {
        let maxValue;
        for (const element of values) {
          const value = compare(element);
          if (defined
              ? ascending(value, maxValue) > 0
              : ascending(value, value) === 0) {
            max = element;
            maxValue = value;
            defined = true;
          }
        }
      } else {
        for (const value of values) {
          if (defined
              ? compare(value, max) > 0
              : compare(value, value) === 0) {
            max = value;
            defined = true;
          }
        }
      }
      return max;
    }

    function greatestIndex(values, compare = ascending) {
      if (compare.length === 1) return maxIndex(values, compare);
      let maxValue;
      let max = -1;
      let index = -1;
      for (const value of values) {
        ++index;
        if (max < 0
            ? compare(value, value) === 0
            : compare(value, maxValue) > 0) {
          maxValue = value;
          max = index;
        }
      }
      return max;
    }

    function scan(values, compare) {
      const index = leastIndex(values, compare);
      return index < 0 ? undefined : index;
    }

    var shuffle = shuffler(Math.random);

    function shuffler(random) {
      return function shuffle(array, i0 = 0, i1 = array.length) {
        let m = i1 - (i0 = +i0);
        while (m) {
          const i = random() * m-- | 0, t = array[m + i0];
          array[m + i0] = array[i + i0];
          array[i + i0] = t;
        }
        return array;
      };
    }

    function sum(values, valueof) {
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value = +value) {
            sum += value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if (value = +valueof(value, ++index, values)) {
            sum += value;
          }
        }
      }
      return sum;
    }

    function transpose(matrix) {
      if (!(n = matrix.length)) return [];
      for (var i = -1, m = min(matrix, length$1), transpose = new Array(m); ++i < m;) {
        for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
          row[j] = matrix[j][i];
        }
      }
      return transpose;
    }

    function length$1(d) {
      return d.length;
    }

    function zip() {
      return transpose(arguments);
    }

    function every(values, test) {
      if (typeof test !== "function") throw new TypeError("test is not a function");
      let index = -1;
      for (const value of values) {
        if (!test(value, ++index, values)) {
          return false;
        }
      }
      return true;
    }

    function some(values, test) {
      if (typeof test !== "function") throw new TypeError("test is not a function");
      let index = -1;
      for (const value of values) {
        if (test(value, ++index, values)) {
          return true;
        }
      }
      return false;
    }

    function filter(values, test) {
      if (typeof test !== "function") throw new TypeError("test is not a function");
      const array = [];
      let index = -1;
      for (const value of values) {
        if (test(value, ++index, values)) {
          array.push(value);
        }
      }
      return array;
    }

    function map(values, mapper) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      if (typeof mapper !== "function") throw new TypeError("mapper is not a function");
      return Array.from(values, (value, index) => mapper(value, index, values));
    }

    function reduce(values, reducer, value) {
      if (typeof reducer !== "function") throw new TypeError("reducer is not a function");
      const iterator = values[Symbol.iterator]();
      let done, next, index = -1;
      if (arguments.length < 3) {
        ({done, value} = iterator.next());
        if (done) return;
        ++index;
      }
      while (({done, value: next} = iterator.next()), !done) {
        value = reducer(value, next, ++index, values);
      }
      return value;
    }

    function reverse(values) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      return Array.from(values).reverse();
    }

    function sort(values, comparator = ascending) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      return Array.from(values).sort(comparator);
    }

    function difference(values, ...others) {
      values = new Set(values);
      for (const other of others) {
        for (const value of other) {
          values.delete(value);
        }
      }
      return values;
    }

    function disjoint(values, other) {
      const iterator = other[Symbol.iterator](), set = new Set();
      for (const v of values) {
        if (set.has(v)) return false;
        let value, done;
        while (({value, done} = iterator.next())) {
          if (done) break;
          if (Object.is(v, value)) return false;
          set.add(value);
        }
      }
      return true;
    }

    function set(values) {
      return values instanceof Set ? values : new Set(values);
    }

    function intersection(values, ...others) {
      values = new Set(values);
      others = others.map(set);
      out: for (const value of values) {
        for (const other of others) {
          if (!other.has(value)) {
            values.delete(value);
            continue out;
          }
        }
      }
      return values;
    }

    function superset(values, other) {
      const iterator = values[Symbol.iterator](), set = new Set();
      for (const o of other) {
        if (set.has(o)) continue;
        let value, done;
        while (({value, done} = iterator.next())) {
          if (done) return false;
          set.add(value);
          if (Object.is(o, value)) break;
        }
      }
      return true;
    }

    function subset(values, other) {
      return superset(other, values);
    }

    function union(...others) {
      const set = new Set();
      for (const other of others) {
        for (const o of other) {
          set.add(o);
        }
      }
      return set;
    }



    var src = /*#__PURE__*/Object.freeze({
        bisect: bisectRight,
        bisectRight: bisectRight,
        bisectLeft: bisectLeft,
        bisectCenter: bisectCenter,
        ascending: ascending,
        bisector: bisector,
        count: count,
        cross: cross,
        cumsum: cumsum,
        descending: descending,
        deviation: deviation,
        extent: extent,
        fsum: fsum,
        Adder: Adder,
        group: group,
        groups: groups,
        index: index,
        indexes: indexes,
        rollup: rollup,
        rollups: rollups,
        bin: bin,
        histogram: bin,
        thresholdFreedmanDiaconis: freedmanDiaconis,
        thresholdScott: scott,
        thresholdSturges: sturges,
        max: max,
        maxIndex: maxIndex,
        mean: mean,
        median: median,
        merge: merge,
        min: min,
        minIndex: minIndex,
        nice: nice,
        pairs: pairs,
        permute: permute,
        quantile: quantile,
        quantileSorted: quantileSorted,
        quickselect: quickselect,
        range: range,
        least: least,
        leastIndex: leastIndex,
        greatest: greatest,
        greatestIndex: greatestIndex,
        scan: scan,
        shuffle: shuffle,
        shuffler: shuffler,
        sum: sum,
        ticks: ticks,
        tickIncrement: tickIncrement,
        tickStep: tickStep,
        transpose: transpose,
        variance: variance,
        zip: zip,
        every: every,
        some: some,
        filter: filter,
        map: map,
        reduce: reduce,
        reverse: reverse,
        sort: sort,
        difference: difference,
        disjoint: disjoint,
        intersection: intersection,
        subset: subset,
        superset: superset,
        union: union
    });

    function define(constructor, factory, prototype) {
      constructor.prototype = factory.prototype = prototype;
      prototype.constructor = constructor;
    }

    function extend(parent, definition) {
      var prototype = Object.create(parent.prototype);
      for (var key in definition) prototype[key] = definition[key];
      return prototype;
    }

    function Color() {}

    var darker = 0.7;
    var brighter = 1 / darker;

    var reI = "\\s*([+-]?\\d+)\\s*",
        reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
        reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
        reHex = /^#([0-9a-f]{3,8})$/,
        reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
        reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
        reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
        reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
        reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
        reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

    var named = {
      aliceblue: 0xf0f8ff,
      antiquewhite: 0xfaebd7,
      aqua: 0x00ffff,
      aquamarine: 0x7fffd4,
      azure: 0xf0ffff,
      beige: 0xf5f5dc,
      bisque: 0xffe4c4,
      black: 0x000000,
      blanchedalmond: 0xffebcd,
      blue: 0x0000ff,
      blueviolet: 0x8a2be2,
      brown: 0xa52a2a,
      burlywood: 0xdeb887,
      cadetblue: 0x5f9ea0,
      chartreuse: 0x7fff00,
      chocolate: 0xd2691e,
      coral: 0xff7f50,
      cornflowerblue: 0x6495ed,
      cornsilk: 0xfff8dc,
      crimson: 0xdc143c,
      cyan: 0x00ffff,
      darkblue: 0x00008b,
      darkcyan: 0x008b8b,
      darkgoldenrod: 0xb8860b,
      darkgray: 0xa9a9a9,
      darkgreen: 0x006400,
      darkgrey: 0xa9a9a9,
      darkkhaki: 0xbdb76b,
      darkmagenta: 0x8b008b,
      darkolivegreen: 0x556b2f,
      darkorange: 0xff8c00,
      darkorchid: 0x9932cc,
      darkred: 0x8b0000,
      darksalmon: 0xe9967a,
      darkseagreen: 0x8fbc8f,
      darkslateblue: 0x483d8b,
      darkslategray: 0x2f4f4f,
      darkslategrey: 0x2f4f4f,
      darkturquoise: 0x00ced1,
      darkviolet: 0x9400d3,
      deeppink: 0xff1493,
      deepskyblue: 0x00bfff,
      dimgray: 0x696969,
      dimgrey: 0x696969,
      dodgerblue: 0x1e90ff,
      firebrick: 0xb22222,
      floralwhite: 0xfffaf0,
      forestgreen: 0x228b22,
      fuchsia: 0xff00ff,
      gainsboro: 0xdcdcdc,
      ghostwhite: 0xf8f8ff,
      gold: 0xffd700,
      goldenrod: 0xdaa520,
      gray: 0x808080,
      green: 0x008000,
      greenyellow: 0xadff2f,
      grey: 0x808080,
      honeydew: 0xf0fff0,
      hotpink: 0xff69b4,
      indianred: 0xcd5c5c,
      indigo: 0x4b0082,
      ivory: 0xfffff0,
      khaki: 0xf0e68c,
      lavender: 0xe6e6fa,
      lavenderblush: 0xfff0f5,
      lawngreen: 0x7cfc00,
      lemonchiffon: 0xfffacd,
      lightblue: 0xadd8e6,
      lightcoral: 0xf08080,
      lightcyan: 0xe0ffff,
      lightgoldenrodyellow: 0xfafad2,
      lightgray: 0xd3d3d3,
      lightgreen: 0x90ee90,
      lightgrey: 0xd3d3d3,
      lightpink: 0xffb6c1,
      lightsalmon: 0xffa07a,
      lightseagreen: 0x20b2aa,
      lightskyblue: 0x87cefa,
      lightslategray: 0x778899,
      lightslategrey: 0x778899,
      lightsteelblue: 0xb0c4de,
      lightyellow: 0xffffe0,
      lime: 0x00ff00,
      limegreen: 0x32cd32,
      linen: 0xfaf0e6,
      magenta: 0xff00ff,
      maroon: 0x800000,
      mediumaquamarine: 0x66cdaa,
      mediumblue: 0x0000cd,
      mediumorchid: 0xba55d3,
      mediumpurple: 0x9370db,
      mediumseagreen: 0x3cb371,
      mediumslateblue: 0x7b68ee,
      mediumspringgreen: 0x00fa9a,
      mediumturquoise: 0x48d1cc,
      mediumvioletred: 0xc71585,
      midnightblue: 0x191970,
      mintcream: 0xf5fffa,
      mistyrose: 0xffe4e1,
      moccasin: 0xffe4b5,
      navajowhite: 0xffdead,
      navy: 0x000080,
      oldlace: 0xfdf5e6,
      olive: 0x808000,
      olivedrab: 0x6b8e23,
      orange: 0xffa500,
      orangered: 0xff4500,
      orchid: 0xda70d6,
      palegoldenrod: 0xeee8aa,
      palegreen: 0x98fb98,
      paleturquoise: 0xafeeee,
      palevioletred: 0xdb7093,
      papayawhip: 0xffefd5,
      peachpuff: 0xffdab9,
      peru: 0xcd853f,
      pink: 0xffc0cb,
      plum: 0xdda0dd,
      powderblue: 0xb0e0e6,
      purple: 0x800080,
      rebeccapurple: 0x663399,
      red: 0xff0000,
      rosybrown: 0xbc8f8f,
      royalblue: 0x4169e1,
      saddlebrown: 0x8b4513,
      salmon: 0xfa8072,
      sandybrown: 0xf4a460,
      seagreen: 0x2e8b57,
      seashell: 0xfff5ee,
      sienna: 0xa0522d,
      silver: 0xc0c0c0,
      skyblue: 0x87ceeb,
      slateblue: 0x6a5acd,
      slategray: 0x708090,
      slategrey: 0x708090,
      snow: 0xfffafa,
      springgreen: 0x00ff7f,
      steelblue: 0x4682b4,
      tan: 0xd2b48c,
      teal: 0x008080,
      thistle: 0xd8bfd8,
      tomato: 0xff6347,
      turquoise: 0x40e0d0,
      violet: 0xee82ee,
      wheat: 0xf5deb3,
      white: 0xffffff,
      whitesmoke: 0xf5f5f5,
      yellow: 0xffff00,
      yellowgreen: 0x9acd32
    };

    define(Color, color, {
      copy: function(channels) {
        return Object.assign(new this.constructor, this, channels);
      },
      displayable: function() {
        return this.rgb().displayable();
      },
      hex: color_formatHex, // Deprecated! Use color.formatHex.
      formatHex: color_formatHex,
      formatHsl: color_formatHsl,
      formatRgb: color_formatRgb,
      toString: color_formatRgb
    });

    function color_formatHex() {
      return this.rgb().formatHex();
    }

    function color_formatHsl() {
      return hslConvert(this).formatHsl();
    }

    function color_formatRgb() {
      return this.rgb().formatRgb();
    }

    function color(format) {
      var m, l;
      format = (format + "").trim().toLowerCase();
      return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
          : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
          : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
          : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
          : null) // invalid hex
          : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
          : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
          : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
          : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
          : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
          : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
          : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
          : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
          : null;
    }

    function rgbn(n) {
      return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
    }

    function rgba(r, g, b, a) {
      if (a <= 0) r = g = b = NaN;
      return new Rgb(r, g, b, a);
    }

    function rgbConvert(o) {
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Rgb;
      o = o.rgb();
      return new Rgb(o.r, o.g, o.b, o.opacity);
    }

    function rgb(r, g, b, opacity) {
      return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
    }

    function Rgb(r, g, b, opacity) {
      this.r = +r;
      this.g = +g;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Rgb, rgb, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      rgb: function() {
        return this;
      },
      displayable: function() {
        return (-0.5 <= this.r && this.r < 255.5)
            && (-0.5 <= this.g && this.g < 255.5)
            && (-0.5 <= this.b && this.b < 255.5)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex, // Deprecated! Use color.formatHex.
      formatHex: rgb_formatHex,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb
    }));

    function rgb_formatHex() {
      return "#" + hex$1(this.r) + hex$1(this.g) + hex$1(this.b);
    }

    function rgb_formatRgb() {
      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
      return (a === 1 ? "rgb(" : "rgba(")
          + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.b) || 0))
          + (a === 1 ? ")" : ", " + a + ")");
    }

    function hex$1(value) {
      value = Math.max(0, Math.min(255, Math.round(value) || 0));
      return (value < 16 ? "0" : "") + value.toString(16);
    }

    function hsla(h, s, l, a) {
      if (a <= 0) h = s = l = NaN;
      else if (l <= 0 || l >= 1) h = s = NaN;
      else if (s <= 0) h = NaN;
      return new Hsl(h, s, l, a);
    }

    function hslConvert(o) {
      if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Hsl;
      if (o instanceof Hsl) return o;
      o = o.rgb();
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          h = NaN,
          s = max - min,
          l = (max + min) / 2;
      if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
      } else {
        s = l > 0 && l < 1 ? 0 : h;
      }
      return new Hsl(h, s, l, o.opacity);
    }

    function hsl(h, s, l, opacity) {
      return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
    }

    function Hsl(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Hsl, hsl, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      rgb: function() {
        var h = this.h % 360 + (this.h < 0) * 360,
            s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
            l = this.l,
            m2 = l + (l < 0.5 ? l : 1 - l) * s,
            m1 = 2 * l - m2;
        return new Rgb(
          hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb(h, m1, m2),
          hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        );
      },
      displayable: function() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s))
            && (0 <= this.l && this.l <= 1)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl: function() {
        var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
        return (a === 1 ? "hsl(" : "hsla(")
            + (this.h || 0) + ", "
            + (this.s || 0) * 100 + "%, "
            + (this.l || 0) * 100 + "%"
            + (a === 1 ? ")" : ", " + a + ")");
      }
    }));

    /* From FvD 13.37, CSS Color Module Level 3 */
    function hsl2rgb(h, m1, m2) {
      return (h < 60 ? m1 + (m2 - m1) * h / 60
          : h < 180 ? m2
          : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
          : m1) * 255;
    }

    const radians = Math.PI / 180;
    const degrees = 180 / Math.PI;

    // https://observablehq.com/@mbostock/lab-and-rgb
    const K = 18,
        Xn = 0.96422,
        Yn = 1,
        Zn = 0.82521,
        t0 = 4 / 29,
        t1 = 6 / 29,
        t2 = 3 * t1 * t1,
        t3 = t1 * t1 * t1;

    function labConvert(o) {
      if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
      if (o instanceof Hcl) return hcl2lab(o);
      if (!(o instanceof Rgb)) o = rgbConvert(o);
      var r = rgb2lrgb(o.r),
          g = rgb2lrgb(o.g),
          b = rgb2lrgb(o.b),
          y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
      if (r === g && g === b) x = z = y; else {
        x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
        z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
      }
      return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
    }

    function lab(l, a, b, opacity) {
      return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
    }

    function Lab(l, a, b, opacity) {
      this.l = +l;
      this.a = +a;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Lab, lab, extend(Color, {
      brighter: function(k) {
        return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
      },
      darker: function(k) {
        return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
      },
      rgb: function() {
        var y = (this.l + 16) / 116,
            x = isNaN(this.a) ? y : y + this.a / 500,
            z = isNaN(this.b) ? y : y - this.b / 200;
        x = Xn * lab2xyz(x);
        y = Yn * lab2xyz(y);
        z = Zn * lab2xyz(z);
        return new Rgb(
          lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),
          lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),
          lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),
          this.opacity
        );
      }
    }));

    function xyz2lab(t) {
      return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
    }

    function lab2xyz(t) {
      return t > t1 ? t * t * t : t2 * (t - t0);
    }

    function lrgb2rgb(x) {
      return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
    }

    function rgb2lrgb(x) {
      return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
    }

    function hclConvert(o) {
      if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
      if (!(o instanceof Lab)) o = labConvert(o);
      if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
      var h = Math.atan2(o.b, o.a) * degrees;
      return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
    }

    function hcl(h, c, l, opacity) {
      return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
    }

    function Hcl(h, c, l, opacity) {
      this.h = +h;
      this.c = +c;
      this.l = +l;
      this.opacity = +opacity;
    }

    function hcl2lab(o) {
      if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
      var h = o.h * radians;
      return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
    }

    define(Hcl, hcl, extend(Color, {
      brighter: function(k) {
        return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
      },
      darker: function(k) {
        return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
      },
      rgb: function() {
        return hcl2lab(this).rgb();
      }
    }));

    var A = -0.14861,
        B = +1.78277,
        C = -0.29227,
        D = -0.90649,
        E = +1.97294,
        ED = E * D,
        EB = E * B,
        BC_DA = B * C - D * A;

    function cubehelixConvert(o) {
      if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Rgb)) o = rgbConvert(o);
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
          bl = b - l,
          k = (E * (g - l) - C * bl) / D,
          s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
          h = s ? Math.atan2(k, bl) * degrees - 120 : NaN;
      return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
    }

    function cubehelix(h, s, l, opacity) {
      return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
    }

    function Cubehelix(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Cubehelix, cubehelix, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
      },
      rgb: function() {
        var h = isNaN(this.h) ? 0 : (this.h + 120) * radians,
            l = +this.l,
            a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
            cosh = Math.cos(h),
            sinh = Math.sin(h);
        return new Rgb(
          255 * (l + a * (A * cosh + B * sinh)),
          255 * (l + a * (C * cosh + D * sinh)),
          255 * (l + a * (E * cosh)),
          this.opacity
        );
      }
    }));

    function basis(t1, v0, v1, v2, v3) {
      var t2 = t1 * t1, t3 = t2 * t1;
      return ((1 - 3 * t1 + 3 * t2 - t3) * v0
          + (4 - 6 * t2 + 3 * t3) * v1
          + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
          + t3 * v3) / 6;
    }

    function basis$1(values) {
      var n = values.length - 1;
      return function(t) {
        var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
            v1 = values[i],
            v2 = values[i + 1],
            v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
            v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
        return basis((t - i / n) * n, v0, v1, v2, v3);
      };
    }

    function basisClosed(values) {
      var n = values.length;
      return function(t) {
        var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
            v0 = values[(i + n - 1) % n],
            v1 = values[i % n],
            v2 = values[(i + 1) % n],
            v3 = values[(i + 2) % n];
        return basis((t - i / n) * n, v0, v1, v2, v3);
      };
    }

    var constant$1 = x => () => x;

    function linear(a, d) {
      return function(t) {
        return a + t * d;
      };
    }

    function exponential(a, b, y) {
      return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
      };
    }

    function hue(a, b) {
      var d = b - a;
      return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$1(isNaN(a) ? b : a);
    }

    function gamma(y) {
      return (y = +y) === 1 ? nogamma : function(a, b) {
        return b - a ? exponential(a, b, y) : constant$1(isNaN(a) ? b : a);
      };
    }

    function nogamma(a, b) {
      var d = b - a;
      return d ? linear(a, d) : constant$1(isNaN(a) ? b : a);
    }

    var rgb$1 = (function rgbGamma(y) {
      var color = gamma(y);

      function rgb$1(start, end) {
        var r = color((start = rgb(start)).r, (end = rgb(end)).r),
            g = color(start.g, end.g),
            b = color(start.b, end.b),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.r = r(t);
          start.g = g(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }

      rgb$1.gamma = rgbGamma;

      return rgb$1;
    })(1);

    function rgbSpline(spline) {
      return function(colors) {
        var n = colors.length,
            r = new Array(n),
            g = new Array(n),
            b = new Array(n),
            i, color;
        for (i = 0; i < n; ++i) {
          color = rgb(colors[i]);
          r[i] = color.r || 0;
          g[i] = color.g || 0;
          b[i] = color.b || 0;
        }
        r = spline(r);
        g = spline(g);
        b = spline(b);
        color.opacity = 1;
        return function(t) {
          color.r = r(t);
          color.g = g(t);
          color.b = b(t);
          return color + "";
        };
      };
    }

    var rgbBasis = rgbSpline(basis$1);
    var rgbBasisClosed = rgbSpline(basisClosed);

    function numberArray(a, b) {
      if (!b) b = [];
      var n = a ? Math.min(b.length, a.length) : 0,
          c = b.slice(),
          i;
      return function(t) {
        for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
        return c;
      };
    }

    function isNumberArray(x) {
      return ArrayBuffer.isView(x) && !(x instanceof DataView);
    }

    function array$1(a, b) {
      return (isNumberArray(b) ? numberArray : genericArray)(a, b);
    }

    function genericArray(a, b) {
      var nb = b ? b.length : 0,
          na = a ? Math.min(nb, a.length) : 0,
          x = new Array(na),
          c = new Array(nb),
          i;

      for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);
      for (; i < nb; ++i) c[i] = b[i];

      return function(t) {
        for (i = 0; i < na; ++i) c[i] = x[i](t);
        return c;
      };
    }

    function date(a, b) {
      var d = new Date;
      return a = +a, b = +b, function(t) {
        return d.setTime(a * (1 - t) + b * t), d;
      };
    }

    function number$1(a, b) {
      return a = +a, b = +b, function(t) {
        return a * (1 - t) + b * t;
      };
    }

    function object(a, b) {
      var i = {},
          c = {},
          k;

      if (a === null || typeof a !== "object") a = {};
      if (b === null || typeof b !== "object") b = {};

      for (k in b) {
        if (k in a) {
          i[k] = value(a[k], b[k]);
        } else {
          c[k] = b[k];
        }
      }

      return function(t) {
        for (k in i) c[k] = i[k](t);
        return c;
      };
    }

    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
        reB = new RegExp(reA.source, "g");

    function zero(b) {
      return function() {
        return b;
      };
    }

    function one(b) {
      return function(t) {
        return b(t) + "";
      };
    }

    function string(a, b) {
      var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
          am, // current match in a
          bm, // current match in b
          bs, // string preceding current number in b, if any
          i = -1, // index in s
          s = [], // string constants and placeholders
          q = []; // number interpolators

      // Coerce inputs to strings.
      a = a + "", b = b + "";

      // Interpolate pairs of numbers in a & b.
      while ((am = reA.exec(a))
          && (bm = reB.exec(b))) {
        if ((bs = bm.index) > bi) { // a string precedes the next number in b
          bs = b.slice(bi, bs);
          if (s[i]) s[i] += bs; // coalesce with previous string
          else s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
          if (s[i]) s[i] += bm; // coalesce with previous string
          else s[++i] = bm;
        } else { // interpolate non-matching numbers
          s[++i] = null;
          q.push({i: i, x: number$1(am, bm)});
        }
        bi = reB.lastIndex;
      }

      // Add remains of b.
      if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
      }

      // Special optimization for only a single match.
      // Otherwise, interpolate each of the numbers and rejoin the string.
      return s.length < 2 ? (q[0]
          ? one(q[0].x)
          : zero(b))
          : (b = q.length, function(t) {
              for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
              return s.join("");
            });
    }

    function value(a, b) {
      var t = typeof b, c;
      return b == null || t === "boolean" ? constant$1(b)
          : (t === "number" ? number$1
          : t === "string" ? ((c = color(b)) ? (b = c, rgb$1) : string)
          : b instanceof color ? rgb$1
          : b instanceof Date ? date
          : isNumberArray(b) ? numberArray
          : Array.isArray(b) ? genericArray
          : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
          : number$1)(a, b);
    }

    function discrete(range) {
      var n = range.length;
      return function(t) {
        return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
      };
    }

    function hue$1(a, b) {
      var i = hue(+a, +b);
      return function(t) {
        var x = i(t);
        return x - 360 * Math.floor(x / 360);
      };
    }

    function round(a, b) {
      return a = +a, b = +b, function(t) {
        return Math.round(a * (1 - t) + b * t);
      };
    }

    var degrees$1 = 180 / Math.PI;

    var identity$1 = {
      translateX: 0,
      translateY: 0,
      rotate: 0,
      skewX: 0,
      scaleX: 1,
      scaleY: 1
    };

    function decompose(a, b, c, d, e, f) {
      var scaleX, scaleY, skewX;
      if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
      if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
      if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
      if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
      return {
        translateX: e,
        translateY: f,
        rotate: Math.atan2(b, a) * degrees$1,
        skewX: Math.atan(skewX) * degrees$1,
        scaleX: scaleX,
        scaleY: scaleY
      };
    }

    var svgNode;

    /* eslint-disable no-undef */
    function parseCss(value) {
      const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
      return m.isIdentity ? identity$1 : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
    }

    function parseSvg(value) {
      if (value == null) return identity$1;
      if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
      svgNode.setAttribute("transform", value);
      if (!(value = svgNode.transform.baseVal.consolidate())) return identity$1;
      value = value.matrix;
      return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
    }

    function interpolateTransform(parse, pxComma, pxParen, degParen) {

      function pop(s) {
        return s.length ? s.pop() + " " : "";
      }

      function translate(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
          var i = s.push("translate(", null, pxComma, null, pxParen);
          q.push({i: i - 4, x: number$1(xa, xb)}, {i: i - 2, x: number$1(ya, yb)});
        } else if (xb || yb) {
          s.push("translate(" + xb + pxComma + yb + pxParen);
        }
      }

      function rotate(a, b, s, q) {
        if (a !== b) {
          if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
          q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number$1(a, b)});
        } else if (b) {
          s.push(pop(s) + "rotate(" + b + degParen);
        }
      }

      function skewX(a, b, s, q) {
        if (a !== b) {
          q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number$1(a, b)});
        } else if (b) {
          s.push(pop(s) + "skewX(" + b + degParen);
        }
      }

      function scale(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
          var i = s.push(pop(s) + "scale(", null, ",", null, ")");
          q.push({i: i - 4, x: number$1(xa, xb)}, {i: i - 2, x: number$1(ya, yb)});
        } else if (xb !== 1 || yb !== 1) {
          s.push(pop(s) + "scale(" + xb + "," + yb + ")");
        }
      }

      return function(a, b) {
        var s = [], // string constants and placeholders
            q = []; // number interpolators
        a = parse(a), b = parse(b);
        translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
        rotate(a.rotate, b.rotate, s, q);
        skewX(a.skewX, b.skewX, s, q);
        scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
        a = b = null; // gc
        return function(t) {
          var i = -1, n = q.length, o;
          while (++i < n) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        };
      };
    }

    var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
    var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

    var epsilon2 = 1e-12;

    function cosh(x) {
      return ((x = Math.exp(x)) + 1 / x) / 2;
    }

    function sinh(x) {
      return ((x = Math.exp(x)) - 1 / x) / 2;
    }

    function tanh(x) {
      return ((x = Math.exp(2 * x)) - 1) / (x + 1);
    }

    var zoom = (function zoomRho(rho, rho2, rho4) {

      // p0 = [ux0, uy0, w0]
      // p1 = [ux1, uy1, w1]
      function zoom(p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
            ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
            dx = ux1 - ux0,
            dy = uy1 - uy0,
            d2 = dx * dx + dy * dy,
            i,
            S;

        // Special case for u0 ≅ u1.
        if (d2 < epsilon2) {
          S = Math.log(w1 / w0) / rho;
          i = function(t) {
            return [
              ux0 + t * dx,
              uy0 + t * dy,
              w0 * Math.exp(rho * t * S)
            ];
          };
        }

        // General case.
        else {
          var d1 = Math.sqrt(d2),
              b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
              b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
              r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
              r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
          S = (r1 - r0) / rho;
          i = function(t) {
            var s = t * S,
                coshr0 = cosh(r0),
                u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
            return [
              ux0 + u * dx,
              uy0 + u * dy,
              w0 * coshr0 / cosh(rho * s + r0)
            ];
          };
        }

        i.duration = S * 1000 * rho / Math.SQRT2;

        return i;
      }

      zoom.rho = function(_) {
        var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
        return zoomRho(_1, _2, _4);
      };

      return zoom;
    })(Math.SQRT2, 2, 4);

    function hsl$1(hue) {
      return function(start, end) {
        var h = hue((start = hsl(start)).h, (end = hsl(end)).h),
            s = nogamma(start.s, end.s),
            l = nogamma(start.l, end.l),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.h = h(t);
          start.s = s(t);
          start.l = l(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }
    }

    var hsl$2 = hsl$1(hue);
    var hslLong = hsl$1(nogamma);

    function lab$1(start, end) {
      var l = nogamma((start = lab(start)).l, (end = lab(end)).l),
          a = nogamma(start.a, end.a),
          b = nogamma(start.b, end.b),
          opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.l = l(t);
        start.a = a(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + "";
      };
    }

    function hcl$1(hue) {
      return function(start, end) {
        var h = hue((start = hcl(start)).h, (end = hcl(end)).h),
            c = nogamma(start.c, end.c),
            l = nogamma(start.l, end.l),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.h = h(t);
          start.c = c(t);
          start.l = l(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }
    }

    var hcl$2 = hcl$1(hue);
    var hclLong = hcl$1(nogamma);

    function cubehelix$1(hue) {
      return (function cubehelixGamma(y) {
        y = +y;

        function cubehelix$1(start, end) {
          var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),
              s = nogamma(start.s, end.s),
              l = nogamma(start.l, end.l),
              opacity = nogamma(start.opacity, end.opacity);
          return function(t) {
            start.h = h(t);
            start.s = s(t);
            start.l = l(Math.pow(t, y));
            start.opacity = opacity(t);
            return start + "";
          };
        }

        cubehelix$1.gamma = cubehelixGamma;

        return cubehelix$1;
      })(1);
    }

    var cubehelix$2 = cubehelix$1(hue);
    var cubehelixLong = cubehelix$1(nogamma);

    function piecewise(interpolate, values) {
      if (values === undefined) values = interpolate, interpolate = value;
      var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
      while (i < n) I[i] = interpolate(v, v = values[++i]);
      return function(t) {
        var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
        return I[i](t - i);
      };
    }

    function quantize(interpolator, n) {
      var samples = new Array(n);
      for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
      return samples;
    }



    var src$1 = /*#__PURE__*/Object.freeze({
        interpolate: value,
        interpolateArray: array$1,
        interpolateBasis: basis$1,
        interpolateBasisClosed: basisClosed,
        interpolateDate: date,
        interpolateDiscrete: discrete,
        interpolateHue: hue$1,
        interpolateNumber: number$1,
        interpolateNumberArray: numberArray,
        interpolateObject: object,
        interpolateRound: round,
        interpolateString: string,
        interpolateTransformCss: interpolateTransformCss,
        interpolateTransformSvg: interpolateTransformSvg,
        interpolateZoom: zoom,
        interpolateRgb: rgb$1,
        interpolateRgbBasis: rgbBasis,
        interpolateRgbBasisClosed: rgbBasisClosed,
        interpolateHsl: hsl$2,
        interpolateHslLong: hslLong,
        interpolateLab: lab$1,
        interpolateHcl: hcl$2,
        interpolateHclLong: hclLong,
        interpolateCubehelix: cubehelix$2,
        interpolateCubehelixLong: cubehelixLong,
        piecewise: piecewise,
        quantize: quantize
    });

    function formatDecimal(x) {
      return Math.abs(x = Math.round(x)) >= 1e21
          ? x.toLocaleString("en").replace(/,/g, "")
          : x.toString(10);
    }

    // Computes the decimal coefficient and exponent of the specified number x with
    // significant digits p, where x is positive and p is in [1, 21] or undefined.
    // For example, formatDecimalParts(1.23) returns ["123", 0].
    function formatDecimalParts(x, p) {
      if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
      var i, coefficient = x.slice(0, i);

      // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
      // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
      return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
      ];
    }

    function exponent(x) {
      return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
    }

    function formatGroup(grouping, thousands) {
      return function(value, width) {
        var i = value.length,
            t = [],
            j = 0,
            g = grouping[0],
            length = 0;

        while (i > 0 && g > 0) {
          if (length + g + 1 > width) g = Math.max(1, width - length);
          t.push(value.substring(i -= g, i + g));
          if ((length += g + 1) > width) break;
          g = grouping[j = (j + 1) % grouping.length];
        }

        return t.reverse().join(thousands);
      };
    }

    function formatNumerals(numerals) {
      return function(value) {
        return value.replace(/[0-9]/g, function(i) {
          return numerals[+i];
        });
      };
    }

    // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
    var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

    function formatSpecifier(specifier) {
      if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
      var match;
      return new FormatSpecifier({
        fill: match[1],
        align: match[2],
        sign: match[3],
        symbol: match[4],
        zero: match[5],
        width: match[6],
        comma: match[7],
        precision: match[8] && match[8].slice(1),
        trim: match[9],
        type: match[10]
      });
    }

    formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

    function FormatSpecifier(specifier) {
      this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
      this.align = specifier.align === undefined ? ">" : specifier.align + "";
      this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
      this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
      this.zero = !!specifier.zero;
      this.width = specifier.width === undefined ? undefined : +specifier.width;
      this.comma = !!specifier.comma;
      this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
      this.trim = !!specifier.trim;
      this.type = specifier.type === undefined ? "" : specifier.type + "";
    }

    FormatSpecifier.prototype.toString = function() {
      return this.fill
          + this.align
          + this.sign
          + this.symbol
          + (this.zero ? "0" : "")
          + (this.width === undefined ? "" : Math.max(1, this.width | 0))
          + (this.comma ? "," : "")
          + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
          + (this.trim ? "~" : "")
          + this.type;
    };

    // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
    function formatTrim(s) {
      out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
        switch (s[i]) {
          case ".": i0 = i1 = i; break;
          case "0": if (i0 === 0) i0 = i; i1 = i; break;
          default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
        }
      }
      return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
    }

    var prefixExponent;

    function formatPrefixAuto(x, p) {
      var d = formatDecimalParts(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1],
          i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
          n = coefficient.length;
      return i === n ? coefficient
          : i > n ? coefficient + new Array(i - n + 1).join("0")
          : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
          : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
    }

    function formatRounded(x, p) {
      var d = formatDecimalParts(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1];
      return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
          : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
          : coefficient + new Array(exponent - coefficient.length + 2).join("0");
    }

    var formatTypes = {
      "%": (x, p) => (x * 100).toFixed(p),
      "b": (x) => Math.round(x).toString(2),
      "c": (x) => x + "",
      "d": formatDecimal,
      "e": (x, p) => x.toExponential(p),
      "f": (x, p) => x.toFixed(p),
      "g": (x, p) => x.toPrecision(p),
      "o": (x) => Math.round(x).toString(8),
      "p": (x, p) => formatRounded(x * 100, p),
      "r": formatRounded,
      "s": formatPrefixAuto,
      "X": (x) => Math.round(x).toString(16).toUpperCase(),
      "x": (x) => Math.round(x).toString(16)
    };

    function identity$2(x) {
      return x;
    }

    var map$1 = Array.prototype.map,
        prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

    function formatLocale(locale) {
      var group = locale.grouping === undefined || locale.thousands === undefined ? identity$2 : formatGroup(map$1.call(locale.grouping, Number), locale.thousands + ""),
          currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
          currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
          decimal = locale.decimal === undefined ? "." : locale.decimal + "",
          numerals = locale.numerals === undefined ? identity$2 : formatNumerals(map$1.call(locale.numerals, String)),
          percent = locale.percent === undefined ? "%" : locale.percent + "",
          minus = locale.minus === undefined ? "−" : locale.minus + "",
          nan = locale.nan === undefined ? "NaN" : locale.nan + "";

      function newFormat(specifier) {
        specifier = formatSpecifier(specifier);

        var fill = specifier.fill,
            align = specifier.align,
            sign = specifier.sign,
            symbol = specifier.symbol,
            zero = specifier.zero,
            width = specifier.width,
            comma = specifier.comma,
            precision = specifier.precision,
            trim = specifier.trim,
            type = specifier.type;

        // The "n" type is an alias for ",g".
        if (type === "n") comma = true, type = "g";

        // The "" type, and any invalid type, is an alias for ".12~g".
        else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

        // Compute the prefix and suffix.
        // For SI-prefix, the suffix is lazily computed.
        var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
            suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

        // What format function should we use?
        // Is this an integer type?
        // Can this type generate exponential notation?
        var formatType = formatTypes[type],
            maybeSuffix = /[defgprs%]/.test(type);

        // Set the default precision if not specified,
        // or clamp the specified precision to the supported range.
        // For significant precision, it must be in [1, 21].
        // For fixed precision, it must be in [0, 20].
        precision = precision === undefined ? 6
            : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
            : Math.max(0, Math.min(20, precision));

        function format(value) {
          var valuePrefix = prefix,
              valueSuffix = suffix,
              i, n, c;

          if (type === "c") {
            valueSuffix = formatType(value) + valueSuffix;
            value = "";
          } else {
            value = +value;

            // Determine the sign. -0 is not less than 0, but 1 / -0 is!
            var valueNegative = value < 0 || 1 / value < 0;

            // Perform the initial formatting.
            value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

            // Trim insignificant zeros.
            if (trim) value = formatTrim(value);

            // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
            if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

            // Compute the prefix and suffix.
            valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
            valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

            // Break the formatted value into the integer “value” part that can be
            // grouped, and fractional or exponential “suffix” part that is not.
            if (maybeSuffix) {
              i = -1, n = value.length;
              while (++i < n) {
                if (c = value.charCodeAt(i), 48 > c || c > 57) {
                  valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                  value = value.slice(0, i);
                  break;
                }
              }
            }
          }

          // If the fill character is not "0", grouping is applied before padding.
          if (comma && !zero) value = group(value, Infinity);

          // Compute the padding.
          var length = valuePrefix.length + value.length + valueSuffix.length,
              padding = length < width ? new Array(width - length + 1).join(fill) : "";

          // If the fill character is "0", grouping is applied after padding.
          if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

          // Reconstruct the final output based on the desired alignment.
          switch (align) {
            case "<": value = valuePrefix + value + valueSuffix + padding; break;
            case "=": value = valuePrefix + padding + value + valueSuffix; break;
            case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
            default: value = padding + valuePrefix + value + valueSuffix; break;
          }

          return numerals(value);
        }

        format.toString = function() {
          return specifier + "";
        };

        return format;
      }

      function formatPrefix(specifier, value) {
        var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
            e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
            k = Math.pow(10, -e),
            prefix = prefixes[8 + e / 3];
        return function(value) {
          return f(k * value) + prefix;
        };
      }

      return {
        format: newFormat,
        formatPrefix: formatPrefix
      };
    }

    var locale;
    var format;
    var formatPrefix;

    defaultLocale({
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });

    function defaultLocale(definition) {
      locale = formatLocale(definition);
      format = locale.format;
      formatPrefix = locale.formatPrefix;
      return locale;
    }

    function precisionFixed(step) {
      return Math.max(0, -exponent(Math.abs(step)));
    }

    function precisionPrefix(step, value) {
      return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
    }

    function precisionRound(step, max) {
      step = Math.abs(step), max = Math.abs(max) - step;
      return Math.max(0, exponent(max) - exponent(step)) + 1;
    }



    var src$2 = /*#__PURE__*/Object.freeze({
        formatDefaultLocale: defaultLocale,
        get format () { return format; },
        get formatPrefix () { return formatPrefix; },
        formatLocale: formatLocale,
        formatSpecifier: formatSpecifier,
        FormatSpecifier: FormatSpecifier,
        precisionFixed: precisionFixed,
        precisionPrefix: precisionPrefix,
        precisionRound: precisionRound
    });

    var t0$1 = new Date,
        t1$1 = new Date;

    function newInterval(floori, offseti, count, field) {

      function interval(date) {
        return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
      }

      interval.floor = function(date) {
        return floori(date = new Date(+date)), date;
      };

      interval.ceil = function(date) {
        return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
      };

      interval.round = function(date) {
        var d0 = interval(date),
            d1 = interval.ceil(date);
        return date - d0 < d1 - date ? d0 : d1;
      };

      interval.offset = function(date, step) {
        return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
      };

      interval.range = function(start, stop, step) {
        var range = [], previous;
        start = interval.ceil(start);
        step = step == null ? 1 : Math.floor(step);
        if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
        do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
        while (previous < start && start < stop);
        return range;
      };

      interval.filter = function(test) {
        return newInterval(function(date) {
          if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
        }, function(date, step) {
          if (date >= date) {
            if (step < 0) while (++step <= 0) {
              while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
            } else while (--step >= 0) {
              while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
            }
          }
        });
      };

      if (count) {
        interval.count = function(start, end) {
          t0$1.setTime(+start), t1$1.setTime(+end);
          floori(t0$1), floori(t1$1);
          return Math.floor(count(t0$1, t1$1));
        };

        interval.every = function(step) {
          step = Math.floor(step);
          return !isFinite(step) || !(step > 0) ? null
              : !(step > 1) ? interval
              : interval.filter(field
                  ? function(d) { return field(d) % step === 0; }
                  : function(d) { return interval.count(0, d) % step === 0; });
        };
      }

      return interval;
    }

    var millisecond = newInterval(function() {
      // noop
    }, function(date, step) {
      date.setTime(+date + step);
    }, function(start, end) {
      return end - start;
    });

    // An optimized implementation for this simple case.
    millisecond.every = function(k) {
      k = Math.floor(k);
      if (!isFinite(k) || !(k > 0)) return null;
      if (!(k > 1)) return millisecond;
      return newInterval(function(date) {
        date.setTime(Math.floor(date / k) * k);
      }, function(date, step) {
        date.setTime(+date + step * k);
      }, function(start, end) {
        return (end - start) / k;
      });
    };
    var milliseconds = millisecond.range;

    var durationSecond = 1e3;
    var durationMinute = 6e4;
    var durationHour = 36e5;
    var durationDay = 864e5;
    var durationWeek = 6048e5;

    var second = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds());
    }, function(date, step) {
      date.setTime(+date + step * durationSecond);
    }, function(start, end) {
      return (end - start) / durationSecond;
    }, function(date) {
      return date.getUTCSeconds();
    });
    var seconds = second.range;

    var minute = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
    }, function(date, step) {
      date.setTime(+date + step * durationMinute);
    }, function(start, end) {
      return (end - start) / durationMinute;
    }, function(date) {
      return date.getMinutes();
    });
    var minutes = minute.range;

    var hour = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
    }, function(date, step) {
      date.setTime(+date + step * durationHour);
    }, function(start, end) {
      return (end - start) / durationHour;
    }, function(date) {
      return date.getHours();
    });
    var hours = hour.range;

    var day = newInterval(
      date => date.setHours(0, 0, 0, 0),
      (date, step) => date.setDate(date.getDate() + step),
      (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
      date => date.getDate() - 1
    );
    var days = day.range;

    function weekday(i) {
      return newInterval(function(date) {
        date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
        date.setHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setDate(date.getDate() + step * 7);
      }, function(start, end) {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
      });
    }

    var sunday = weekday(0);
    var monday = weekday(1);
    var tuesday = weekday(2);
    var wednesday = weekday(3);
    var thursday = weekday(4);
    var friday = weekday(5);
    var saturday = weekday(6);

    var sundays = sunday.range;
    var mondays = monday.range;
    var tuesdays = tuesday.range;
    var wednesdays = wednesday.range;
    var thursdays = thursday.range;
    var fridays = friday.range;
    var saturdays = saturday.range;

    var month = newInterval(function(date) {
      date.setDate(1);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setMonth(date.getMonth() + step);
    }, function(start, end) {
      return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
    }, function(date) {
      return date.getMonth();
    });
    var months = month.range;

    var year = newInterval(function(date) {
      date.setMonth(0, 1);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setFullYear(date.getFullYear() + step);
    }, function(start, end) {
      return end.getFullYear() - start.getFullYear();
    }, function(date) {
      return date.getFullYear();
    });

    // An optimized implementation for this simple case.
    year.every = function(k) {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
        date.setFullYear(Math.floor(date.getFullYear() / k) * k);
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setFullYear(date.getFullYear() + step * k);
      });
    };
    var years = year.range;

    var utcMinute = newInterval(function(date) {
      date.setUTCSeconds(0, 0);
    }, function(date, step) {
      date.setTime(+date + step * durationMinute);
    }, function(start, end) {
      return (end - start) / durationMinute;
    }, function(date) {
      return date.getUTCMinutes();
    });
    var utcMinutes = utcMinute.range;

    var utcHour = newInterval(function(date) {
      date.setUTCMinutes(0, 0, 0);
    }, function(date, step) {
      date.setTime(+date + step * durationHour);
    }, function(start, end) {
      return (end - start) / durationHour;
    }, function(date) {
      return date.getUTCHours();
    });
    var utcHours = utcHour.range;

    var utcDay = newInterval(function(date) {
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCDate(date.getUTCDate() + step);
    }, function(start, end) {
      return (end - start) / durationDay;
    }, function(date) {
      return date.getUTCDate() - 1;
    });
    var utcDays = utcDay.range;

    function utcWeekday(i) {
      return newInterval(function(date) {
        date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
        date.setUTCHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setUTCDate(date.getUTCDate() + step * 7);
      }, function(start, end) {
        return (end - start) / durationWeek;
      });
    }

    var utcSunday = utcWeekday(0);
    var utcMonday = utcWeekday(1);
    var utcTuesday = utcWeekday(2);
    var utcWednesday = utcWeekday(3);
    var utcThursday = utcWeekday(4);
    var utcFriday = utcWeekday(5);
    var utcSaturday = utcWeekday(6);

    var utcSundays = utcSunday.range;
    var utcMondays = utcMonday.range;
    var utcTuesdays = utcTuesday.range;
    var utcWednesdays = utcWednesday.range;
    var utcThursdays = utcThursday.range;
    var utcFridays = utcFriday.range;
    var utcSaturdays = utcSaturday.range;

    var utcMonth = newInterval(function(date) {
      date.setUTCDate(1);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCMonth(date.getUTCMonth() + step);
    }, function(start, end) {
      return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
    }, function(date) {
      return date.getUTCMonth();
    });
    var utcMonths = utcMonth.range;

    var utcYear = newInterval(function(date) {
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCFullYear(date.getUTCFullYear() + step);
    }, function(start, end) {
      return end.getUTCFullYear() - start.getUTCFullYear();
    }, function(date) {
      return date.getUTCFullYear();
    });

    // An optimized implementation for this simple case.
    utcYear.every = function(k) {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
        date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setUTCFullYear(date.getUTCFullYear() + step * k);
      });
    };
    var utcYears = utcYear.range;



    var src$3 = /*#__PURE__*/Object.freeze({
        timeInterval: newInterval,
        timeMillisecond: millisecond,
        timeMilliseconds: milliseconds,
        utcMillisecond: millisecond,
        utcMilliseconds: milliseconds,
        timeSecond: second,
        timeSeconds: seconds,
        utcSecond: second,
        utcSeconds: seconds,
        timeMinute: minute,
        timeMinutes: minutes,
        timeHour: hour,
        timeHours: hours,
        timeDay: day,
        timeDays: days,
        timeWeek: sunday,
        timeWeeks: sundays,
        timeSunday: sunday,
        timeSundays: sundays,
        timeMonday: monday,
        timeMondays: mondays,
        timeTuesday: tuesday,
        timeTuesdays: tuesdays,
        timeWednesday: wednesday,
        timeWednesdays: wednesdays,
        timeThursday: thursday,
        timeThursdays: thursdays,
        timeFriday: friday,
        timeFridays: fridays,
        timeSaturday: saturday,
        timeSaturdays: saturdays,
        timeMonth: month,
        timeMonths: months,
        timeYear: year,
        timeYears: years,
        utcMinute: utcMinute,
        utcMinutes: utcMinutes,
        utcHour: utcHour,
        utcHours: utcHours,
        utcDay: utcDay,
        utcDays: utcDays,
        utcWeek: utcSunday,
        utcWeeks: utcSundays,
        utcSunday: utcSunday,
        utcSundays: utcSundays,
        utcMonday: utcMonday,
        utcMondays: utcMondays,
        utcTuesday: utcTuesday,
        utcTuesdays: utcTuesdays,
        utcWednesday: utcWednesday,
        utcWednesdays: utcWednesdays,
        utcThursday: utcThursday,
        utcThursdays: utcThursdays,
        utcFriday: utcFriday,
        utcFridays: utcFridays,
        utcSaturday: utcSaturday,
        utcSaturdays: utcSaturdays,
        utcMonth: utcMonth,
        utcMonths: utcMonths,
        utcYear: utcYear,
        utcYears: utcYears
    });

    function localDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
        date.setFullYear(d.y);
        return date;
      }
      return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
    }

    function utcDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
        date.setUTCFullYear(d.y);
        return date;
      }
      return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
    }

    function newDate(y, m, d) {
      return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};
    }

    function formatLocale$1(locale) {
      var locale_dateTime = locale.dateTime,
          locale_date = locale.date,
          locale_time = locale.time,
          locale_periods = locale.periods,
          locale_weekdays = locale.days,
          locale_shortWeekdays = locale.shortDays,
          locale_months = locale.months,
          locale_shortMonths = locale.shortMonths;

      var periodRe = formatRe(locale_periods),
          periodLookup = formatLookup(locale_periods),
          weekdayRe = formatRe(locale_weekdays),
          weekdayLookup = formatLookup(locale_weekdays),
          shortWeekdayRe = formatRe(locale_shortWeekdays),
          shortWeekdayLookup = formatLookup(locale_shortWeekdays),
          monthRe = formatRe(locale_months),
          monthLookup = formatLookup(locale_months),
          shortMonthRe = formatRe(locale_shortMonths),
          shortMonthLookup = formatLookup(locale_shortMonths);

      var formats = {
        "a": formatShortWeekday,
        "A": formatWeekday,
        "b": formatShortMonth,
        "B": formatMonth,
        "c": null,
        "d": formatDayOfMonth,
        "e": formatDayOfMonth,
        "f": formatMicroseconds,
        "g": formatYearISO,
        "G": formatFullYearISO,
        "H": formatHour24,
        "I": formatHour12,
        "j": formatDayOfYear,
        "L": formatMilliseconds,
        "m": formatMonthNumber,
        "M": formatMinutes,
        "p": formatPeriod,
        "q": formatQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatSeconds,
        "u": formatWeekdayNumberMonday,
        "U": formatWeekNumberSunday,
        "V": formatWeekNumberISO,
        "w": formatWeekdayNumberSunday,
        "W": formatWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatYear,
        "Y": formatFullYear,
        "Z": formatZone,
        "%": formatLiteralPercent
      };

      var utcFormats = {
        "a": formatUTCShortWeekday,
        "A": formatUTCWeekday,
        "b": formatUTCShortMonth,
        "B": formatUTCMonth,
        "c": null,
        "d": formatUTCDayOfMonth,
        "e": formatUTCDayOfMonth,
        "f": formatUTCMicroseconds,
        "g": formatUTCYearISO,
        "G": formatUTCFullYearISO,
        "H": formatUTCHour24,
        "I": formatUTCHour12,
        "j": formatUTCDayOfYear,
        "L": formatUTCMilliseconds,
        "m": formatUTCMonthNumber,
        "M": formatUTCMinutes,
        "p": formatUTCPeriod,
        "q": formatUTCQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatUTCSeconds,
        "u": formatUTCWeekdayNumberMonday,
        "U": formatUTCWeekNumberSunday,
        "V": formatUTCWeekNumberISO,
        "w": formatUTCWeekdayNumberSunday,
        "W": formatUTCWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatUTCYear,
        "Y": formatUTCFullYear,
        "Z": formatUTCZone,
        "%": formatLiteralPercent
      };

      var parses = {
        "a": parseShortWeekday,
        "A": parseWeekday,
        "b": parseShortMonth,
        "B": parseMonth,
        "c": parseLocaleDateTime,
        "d": parseDayOfMonth,
        "e": parseDayOfMonth,
        "f": parseMicroseconds,
        "g": parseYear,
        "G": parseFullYear,
        "H": parseHour24,
        "I": parseHour24,
        "j": parseDayOfYear,
        "L": parseMilliseconds,
        "m": parseMonthNumber,
        "M": parseMinutes,
        "p": parsePeriod,
        "q": parseQuarter,
        "Q": parseUnixTimestamp,
        "s": parseUnixTimestampSeconds,
        "S": parseSeconds,
        "u": parseWeekdayNumberMonday,
        "U": parseWeekNumberSunday,
        "V": parseWeekNumberISO,
        "w": parseWeekdayNumberSunday,
        "W": parseWeekNumberMonday,
        "x": parseLocaleDate,
        "X": parseLocaleTime,
        "y": parseYear,
        "Y": parseFullYear,
        "Z": parseZone,
        "%": parseLiteralPercent
      };

      // These recursive directive definitions must be deferred.
      formats.x = newFormat(locale_date, formats);
      formats.X = newFormat(locale_time, formats);
      formats.c = newFormat(locale_dateTime, formats);
      utcFormats.x = newFormat(locale_date, utcFormats);
      utcFormats.X = newFormat(locale_time, utcFormats);
      utcFormats.c = newFormat(locale_dateTime, utcFormats);

      function newFormat(specifier, formats) {
        return function(date) {
          var string = [],
              i = -1,
              j = 0,
              n = specifier.length,
              c,
              pad,
              format;

          if (!(date instanceof Date)) date = new Date(+date);

          while (++i < n) {
            if (specifier.charCodeAt(i) === 37) {
              string.push(specifier.slice(j, i));
              if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
              else pad = c === "e" ? " " : "0";
              if (format = formats[c]) c = format(date, pad);
              string.push(c);
              j = i + 1;
            }
          }

          string.push(specifier.slice(j, i));
          return string.join("");
        };
      }

      function newParse(specifier, Z) {
        return function(string) {
          var d = newDate(1900, undefined, 1),
              i = parseSpecifier(d, specifier, string += "", 0),
              week, day$1;
          if (i != string.length) return null;

          // If a UNIX timestamp is specified, return it.
          if ("Q" in d) return new Date(d.Q);
          if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));

          // If this is utcParse, never use the local timezone.
          if (Z && !("Z" in d)) d.Z = 0;

          // The am-pm flag is 0 for AM, and 1 for PM.
          if ("p" in d) d.H = d.H % 12 + d.p * 12;

          // If the month was not specified, inherit from the quarter.
          if (d.m === undefined) d.m = "q" in d ? d.q : 0;

          // Convert day-of-week and week-of-year to day-of-year.
          if ("V" in d) {
            if (d.V < 1 || d.V > 53) return null;
            if (!("w" in d)) d.w = 1;
            if ("Z" in d) {
              week = utcDate(newDate(d.y, 0, 1)), day$1 = week.getUTCDay();
              week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);
              week = utcDay.offset(week, (d.V - 1) * 7);
              d.y = week.getUTCFullYear();
              d.m = week.getUTCMonth();
              d.d = week.getUTCDate() + (d.w + 6) % 7;
            } else {
              week = localDate(newDate(d.y, 0, 1)), day$1 = week.getDay();
              week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);
              week = day.offset(week, (d.V - 1) * 7);
              d.y = week.getFullYear();
              d.m = week.getMonth();
              d.d = week.getDate() + (d.w + 6) % 7;
            }
          } else if ("W" in d || "U" in d) {
            if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
            day$1 = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
            d.m = 0;
            d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;
          }

          // If a time zone is specified, all fields are interpreted as UTC and then
          // offset according to the specified time zone.
          if ("Z" in d) {
            d.H += d.Z / 100 | 0;
            d.M += d.Z % 100;
            return utcDate(d);
          }

          // Otherwise, all fields are in local time.
          return localDate(d);
        };
      }

      function parseSpecifier(d, specifier, string, j) {
        var i = 0,
            n = specifier.length,
            m = string.length,
            c,
            parse;

        while (i < n) {
          if (j >= m) return -1;
          c = specifier.charCodeAt(i++);
          if (c === 37) {
            c = specifier.charAt(i++);
            parse = parses[c in pads ? specifier.charAt(i++) : c];
            if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
          } else if (c != string.charCodeAt(j++)) {
            return -1;
          }
        }

        return j;
      }

      function parsePeriod(d, string, i) {
        var n = periodRe.exec(string.slice(i));
        return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseShortWeekday(d, string, i) {
        var n = shortWeekdayRe.exec(string.slice(i));
        return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseWeekday(d, string, i) {
        var n = weekdayRe.exec(string.slice(i));
        return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseShortMonth(d, string, i) {
        var n = shortMonthRe.exec(string.slice(i));
        return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseMonth(d, string, i) {
        var n = monthRe.exec(string.slice(i));
        return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseLocaleDateTime(d, string, i) {
        return parseSpecifier(d, locale_dateTime, string, i);
      }

      function parseLocaleDate(d, string, i) {
        return parseSpecifier(d, locale_date, string, i);
      }

      function parseLocaleTime(d, string, i) {
        return parseSpecifier(d, locale_time, string, i);
      }

      function formatShortWeekday(d) {
        return locale_shortWeekdays[d.getDay()];
      }

      function formatWeekday(d) {
        return locale_weekdays[d.getDay()];
      }

      function formatShortMonth(d) {
        return locale_shortMonths[d.getMonth()];
      }

      function formatMonth(d) {
        return locale_months[d.getMonth()];
      }

      function formatPeriod(d) {
        return locale_periods[+(d.getHours() >= 12)];
      }

      function formatQuarter(d) {
        return 1 + ~~(d.getMonth() / 3);
      }

      function formatUTCShortWeekday(d) {
        return locale_shortWeekdays[d.getUTCDay()];
      }

      function formatUTCWeekday(d) {
        return locale_weekdays[d.getUTCDay()];
      }

      function formatUTCShortMonth(d) {
        return locale_shortMonths[d.getUTCMonth()];
      }

      function formatUTCMonth(d) {
        return locale_months[d.getUTCMonth()];
      }

      function formatUTCPeriod(d) {
        return locale_periods[+(d.getUTCHours() >= 12)];
      }

      function formatUTCQuarter(d) {
        return 1 + ~~(d.getUTCMonth() / 3);
      }

      return {
        format: function(specifier) {
          var f = newFormat(specifier += "", formats);
          f.toString = function() { return specifier; };
          return f;
        },
        parse: function(specifier) {
          var p = newParse(specifier += "", false);
          p.toString = function() { return specifier; };
          return p;
        },
        utcFormat: function(specifier) {
          var f = newFormat(specifier += "", utcFormats);
          f.toString = function() { return specifier; };
          return f;
        },
        utcParse: function(specifier) {
          var p = newParse(specifier += "", true);
          p.toString = function() { return specifier; };
          return p;
        }
      };
    }

    var pads = {"-": "", "_": " ", "0": "0"},
        numberRe = /^\s*\d+/, // note: ignores next directive
        percentRe = /^%/,
        requoteRe = /[\\^$*+?|[\]().{}]/g;

    function pad(value, fill, width) {
      var sign = value < 0 ? "-" : "",
          string = (sign ? -value : value) + "",
          length = string.length;
      return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
    }

    function requote(s) {
      return s.replace(requoteRe, "\\$&");
    }

    function formatRe(names) {
      return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
    }

    function formatLookup(names) {
      return new Map(names.map((name, i) => [name.toLowerCase(), i]));
    }

    function parseWeekdayNumberSunday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.w = +n[0], i + n[0].length) : -1;
    }

    function parseWeekdayNumberMonday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.u = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberSunday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.U = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberISO(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.V = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberMonday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.W = +n[0], i + n[0].length) : -1;
    }

    function parseFullYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 4));
      return n ? (d.y = +n[0], i + n[0].length) : -1;
    }

    function parseYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
    }

    function parseZone(d, string, i) {
      var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
      return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
    }

    function parseQuarter(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
    }

    function parseMonthNumber(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
    }

    function parseDayOfMonth(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.d = +n[0], i + n[0].length) : -1;
    }

    function parseDayOfYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 3));
      return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
    }

    function parseHour24(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.H = +n[0], i + n[0].length) : -1;
    }

    function parseMinutes(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.M = +n[0], i + n[0].length) : -1;
    }

    function parseSeconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.S = +n[0], i + n[0].length) : -1;
    }

    function parseMilliseconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 3));
      return n ? (d.L = +n[0], i + n[0].length) : -1;
    }

    function parseMicroseconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 6));
      return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
    }

    function parseLiteralPercent(d, string, i) {
      var n = percentRe.exec(string.slice(i, i + 1));
      return n ? i + n[0].length : -1;
    }

    function parseUnixTimestamp(d, string, i) {
      var n = numberRe.exec(string.slice(i));
      return n ? (d.Q = +n[0], i + n[0].length) : -1;
    }

    function parseUnixTimestampSeconds(d, string, i) {
      var n = numberRe.exec(string.slice(i));
      return n ? (d.s = +n[0], i + n[0].length) : -1;
    }

    function formatDayOfMonth(d, p) {
      return pad(d.getDate(), p, 2);
    }

    function formatHour24(d, p) {
      return pad(d.getHours(), p, 2);
    }

    function formatHour12(d, p) {
      return pad(d.getHours() % 12 || 12, p, 2);
    }

    function formatDayOfYear(d, p) {
      return pad(1 + day.count(year(d), d), p, 3);
    }

    function formatMilliseconds(d, p) {
      return pad(d.getMilliseconds(), p, 3);
    }

    function formatMicroseconds(d, p) {
      return formatMilliseconds(d, p) + "000";
    }

    function formatMonthNumber(d, p) {
      return pad(d.getMonth() + 1, p, 2);
    }

    function formatMinutes(d, p) {
      return pad(d.getMinutes(), p, 2);
    }

    function formatSeconds(d, p) {
      return pad(d.getSeconds(), p, 2);
    }

    function formatWeekdayNumberMonday(d) {
      var day = d.getDay();
      return day === 0 ? 7 : day;
    }

    function formatWeekNumberSunday(d, p) {
      return pad(sunday.count(year(d) - 1, d), p, 2);
    }

    function dISO(d) {
      var day = d.getDay();
      return (day >= 4 || day === 0) ? thursday(d) : thursday.ceil(d);
    }

    function formatWeekNumberISO(d, p) {
      d = dISO(d);
      return pad(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);
    }

    function formatWeekdayNumberSunday(d) {
      return d.getDay();
    }

    function formatWeekNumberMonday(d, p) {
      return pad(monday.count(year(d) - 1, d), p, 2);
    }

    function formatYear(d, p) {
      return pad(d.getFullYear() % 100, p, 2);
    }

    function formatYearISO(d, p) {
      d = dISO(d);
      return pad(d.getFullYear() % 100, p, 2);
    }

    function formatFullYear(d, p) {
      return pad(d.getFullYear() % 10000, p, 4);
    }

    function formatFullYearISO(d, p) {
      var day = d.getDay();
      d = (day >= 4 || day === 0) ? thursday(d) : thursday.ceil(d);
      return pad(d.getFullYear() % 10000, p, 4);
    }

    function formatZone(d) {
      var z = d.getTimezoneOffset();
      return (z > 0 ? "-" : (z *= -1, "+"))
          + pad(z / 60 | 0, "0", 2)
          + pad(z % 60, "0", 2);
    }

    function formatUTCDayOfMonth(d, p) {
      return pad(d.getUTCDate(), p, 2);
    }

    function formatUTCHour24(d, p) {
      return pad(d.getUTCHours(), p, 2);
    }

    function formatUTCHour12(d, p) {
      return pad(d.getUTCHours() % 12 || 12, p, 2);
    }

    function formatUTCDayOfYear(d, p) {
      return pad(1 + utcDay.count(utcYear(d), d), p, 3);
    }

    function formatUTCMilliseconds(d, p) {
      return pad(d.getUTCMilliseconds(), p, 3);
    }

    function formatUTCMicroseconds(d, p) {
      return formatUTCMilliseconds(d, p) + "000";
    }

    function formatUTCMonthNumber(d, p) {
      return pad(d.getUTCMonth() + 1, p, 2);
    }

    function formatUTCMinutes(d, p) {
      return pad(d.getUTCMinutes(), p, 2);
    }

    function formatUTCSeconds(d, p) {
      return pad(d.getUTCSeconds(), p, 2);
    }

    function formatUTCWeekdayNumberMonday(d) {
      var dow = d.getUTCDay();
      return dow === 0 ? 7 : dow;
    }

    function formatUTCWeekNumberSunday(d, p) {
      return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);
    }

    function UTCdISO(d) {
      var day = d.getUTCDay();
      return (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
    }

    function formatUTCWeekNumberISO(d, p) {
      d = UTCdISO(d);
      return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
    }

    function formatUTCWeekdayNumberSunday(d) {
      return d.getUTCDay();
    }

    function formatUTCWeekNumberMonday(d, p) {
      return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);
    }

    function formatUTCYear(d, p) {
      return pad(d.getUTCFullYear() % 100, p, 2);
    }

    function formatUTCYearISO(d, p) {
      d = UTCdISO(d);
      return pad(d.getUTCFullYear() % 100, p, 2);
    }

    function formatUTCFullYear(d, p) {
      return pad(d.getUTCFullYear() % 10000, p, 4);
    }

    function formatUTCFullYearISO(d, p) {
      var day = d.getUTCDay();
      d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
      return pad(d.getUTCFullYear() % 10000, p, 4);
    }

    function formatUTCZone() {
      return "+0000";
    }

    function formatLiteralPercent() {
      return "%";
    }

    function formatUnixTimestamp(d) {
      return +d;
    }

    function formatUnixTimestampSeconds(d) {
      return Math.floor(+d / 1000);
    }

    var locale$1;
    var timeFormat;
    var timeParse;
    var utcFormat;
    var utcParse;

    defaultLocale$1({
      dateTime: "%x, %X",
      date: "%-m/%-d/%Y",
      time: "%-I:%M:%S %p",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });

    function defaultLocale$1(definition) {
      locale$1 = formatLocale$1(definition);
      timeFormat = locale$1.format;
      timeParse = locale$1.parse;
      utcFormat = locale$1.utcFormat;
      utcParse = locale$1.utcParse;
      return locale$1;
    }

    var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

    function formatIsoNative(date) {
      return date.toISOString();
    }

    var formatIso = Date.prototype.toISOString
        ? formatIsoNative
        : utcFormat(isoSpecifier);

    function parseIsoNative(string) {
      var date = new Date(string);
      return isNaN(date) ? null : date;
    }

    var parseIso = +new Date("2000-01-01T00:00:00.000Z")
        ? parseIsoNative
        : utcParse(isoSpecifier);



    var src$4 = /*#__PURE__*/Object.freeze({
        timeFormatDefaultLocale: defaultLocale$1,
        get timeFormat () { return timeFormat; },
        get timeParse () { return timeParse; },
        get utcFormat () { return utcFormat; },
        get utcParse () { return utcParse; },
        timeFormatLocale: formatLocale$1,
        isoFormat: formatIso,
        isoParse: parseIso
    });

    var d3Scale_min = createCommonjsModule(function (module, exports) {
    // https://d3js.org/d3-scale/ v3.2.3 Copyright 2020 Mike Bostock
    !function(n,t){t(exports,src,src$1,src$2,src$3,src$4);}(commonjsGlobal,function(n,t,r,e,u,i){function o(n,t){switch(arguments.length){case 0:break;case 1:this.range(n);break;default:this.range(t).domain(n);}return this}function a(n,t){switch(arguments.length){case 0:break;case 1:"function"==typeof n?this.interpolator(n):this.range(n);break;default:this.domain(n),"function"==typeof t?this.interpolator(t):this.range(t);}return this}const c=Symbol("implicit");function f(){var n=new Map,t=[],r=[],e=c;function u(u){var i=u+"",o=n.get(i);if(!o){if(e!==c)return e;n.set(i,o=t.push(u));}return r[(o-1)%r.length]}return u.domain=function(r){if(!arguments.length)return t.slice();t=[],n=new Map;for(const e of r){const r=e+"";n.has(r)||n.set(r,t.push(e));}return u},u.range=function(n){return arguments.length?(r=Array.from(n),u):r.slice()},u.unknown=function(n){return arguments.length?(e=n,u):e},u.copy=function(){return f(t,r).unknown(e)},o.apply(u,arguments),u}function l(){var n,r,e=f().unknown(void 0),u=e.domain,i=e.range,a=0,c=1,p=!1,s=0,h=0,g=.5;function m(){var e=u().length,o=c<a,f=o?c:a,l=o?a:c;n=(l-f)/Math.max(1,e-s+2*h),p&&(n=Math.floor(n)),f+=(l-f-n*(e-s))*g,r=n*(1-s),p&&(f=Math.round(f),r=Math.round(r));var m=t.range(e).map(function(t){return f+n*t});return i(o?m.reverse():m)}return delete e.unknown,e.domain=function(n){return arguments.length?(u(n),m()):u()},e.range=function(n){return arguments.length?([a,c]=n,a=+a,c=+c,m()):[a,c]},e.rangeRound=function(n){return [a,c]=n,a=+a,c=+c,p=!0,m()},e.bandwidth=function(){return r},e.step=function(){return n},e.round=function(n){return arguments.length?(p=!!n,m()):p},e.padding=function(n){return arguments.length?(s=Math.min(1,h=+n),m()):s},e.paddingInner=function(n){return arguments.length?(s=Math.min(1,n),m()):s},e.paddingOuter=function(n){return arguments.length?(h=+n,m()):h},e.align=function(n){return arguments.length?(g=Math.max(0,Math.min(1,n)),m()):g},e.copy=function(){return l(u(),[a,c]).round(p).paddingInner(s).paddingOuter(h).align(g)},o.apply(m(),arguments)}function p(n){return +n}var s=[0,1];function h(n){return n}function g(n,t){return (t-=n=+n)?function(r){return (r-n)/t}:(r=isNaN(t)?NaN:.5,function(){return r});var r;}function m(n,t,r){var e=n[0],u=n[1],i=t[0],o=t[1];return u<e?(e=g(u,e),i=r(o,i)):(e=g(e,u),i=r(i,o)),function(n){return i(e(n))}}function d(n,r,e){var u=Math.min(n.length,r.length)-1,i=new Array(u),o=new Array(u),a=-1;for(n[u]<n[0]&&(n=n.slice().reverse(),r=r.slice().reverse());++a<u;)i[a]=g(n[a],n[a+1]),o[a]=e(r[a],r[a+1]);return function(r){var e=t.bisect(n,r,1,u)-1;return o[e](i[e](r))}}function y(n,t){return t.domain(n.domain()).range(n.range()).interpolate(n.interpolate()).clamp(n.clamp()).unknown(n.unknown())}function v(){var n,t,e,u,i,o,a=s,c=s,f=r.interpolate,l=h;function g(){var n,t,r,e=Math.min(a.length,c.length);return l!==h&&(n=a[0],t=a[e-1],n>t&&(r=n,n=t,t=r),l=function(r){return Math.max(n,Math.min(t,r))}),u=e>2?d:m,i=o=null,y}function y(t){return isNaN(t=+t)?e:(i||(i=u(a.map(n),c,f)))(n(l(t)))}return y.invert=function(e){return l(t((o||(o=u(c,a.map(n),r.interpolateNumber)))(e)))},y.domain=function(n){return arguments.length?(a=Array.from(n,p),g()):a.slice()},y.range=function(n){return arguments.length?(c=Array.from(n),g()):c.slice()},y.rangeRound=function(n){return c=Array.from(n),f=r.interpolateRound,g()},y.clamp=function(n){return arguments.length?(l=!!n||h,g()):l!==h},y.interpolate=function(n){return arguments.length?(f=n,g()):f},y.unknown=function(n){return arguments.length?(e=n,y):e},function(r,e){return n=r,t=e,g()}}function M(){return v()(h,h)}function k(n,r,u,i){var o,a=t.tickStep(n,r,u);switch((i=e.formatSpecifier(null==i?",f":i)).type){case"s":var c=Math.max(Math.abs(n),Math.abs(r));return null!=i.precision||isNaN(o=e.precisionPrefix(a,c))||(i.precision=o),e.formatPrefix(i,c);case"":case"e":case"g":case"p":case"r":null!=i.precision||isNaN(o=e.precisionRound(a,Math.max(Math.abs(n),Math.abs(r))))||(i.precision=o-("e"===i.type));break;case"f":case"%":null!=i.precision||isNaN(o=e.precisionFixed(a))||(i.precision=o-2*("%"===i.type));}return e.format(i)}function w(n){var r=n.domain;return n.ticks=function(n){var e=r();return t.ticks(e[0],e[e.length-1],null==n?10:n)},n.tickFormat=function(n,t){var e=r();return k(e[0],e[e.length-1],null==n?10:n,t)},n.nice=function(e){null==e&&(e=10);var u,i,o=r(),a=0,c=o.length-1,f=o[a],l=o[c],p=10;for(l<f&&(i=f,f=l,l=i,i=a,a=c,c=i);p-- >0;){if((i=t.tickIncrement(f,l,e))===u)return o[a]=f,o[c]=l,r(o);if(i>0)f=Math.floor(f/i)*i,l=Math.ceil(l/i)*i;else{if(!(i<0))break;f=Math.ceil(f*i)/i,l=Math.floor(l*i)/i;}u=i;}return n},n}function N(n,t){var r,e=0,u=(n=n.slice()).length-1,i=n[e],o=n[u];return o<i&&(r=e,e=u,u=r,r=i,i=o,o=r),n[e]=t.floor(i),n[u]=t.ceil(o),n}function b(n){return Math.log(n)}function x(n){return Math.exp(n)}function q(n){return -Math.log(-n)}function S(n){return -Math.exp(-n)}function A(n){return isFinite(n)?+("1e"+n):n<0?0:n}function D(n){return function(t){return -n(-t)}}function R(n){var r,u,i=n(b,x),o=i.domain,a=10;function c(){return r=function(n){return n===Math.E?Math.log:10===n&&Math.log10||2===n&&Math.log2||(n=Math.log(n),function(t){return Math.log(t)/n})}(a),u=function(n){return 10===n?A:n===Math.E?Math.exp:function(t){return Math.pow(n,t)}}(a),o()[0]<0?(r=D(r),u=D(u),n(q,S)):n(b,x),i}return i.base=function(n){return arguments.length?(a=+n,c()):a},i.domain=function(n){return arguments.length?(o(n),c()):o()},i.ticks=function(n){var e,i=o(),c=i[0],f=i[i.length-1];(e=f<c)&&(h=c,c=f,f=h);var l,p,s,h=r(c),g=r(f),m=null==n?10:+n,d=[];if(!(a%1)&&g-h<m){if(h=Math.floor(h),g=Math.ceil(g),c>0){for(;h<=g;++h)for(p=1,l=u(h);p<a;++p)if(!((s=l*p)<c)){if(s>f)break;d.push(s);}}else for(;h<=g;++h)for(p=a-1,l=u(h);p>=1;--p)if(!((s=l*p)<c)){if(s>f)break;d.push(s);}2*d.length<m&&(d=t.ticks(c,f,m));}else d=t.ticks(h,g,Math.min(g-h,m)).map(u);return e?d.reverse():d},i.tickFormat=function(n,t){if(null==t&&(t=10===a?".0e":","),"function"!=typeof t&&(t=e.format(t)),n===1/0)return t;null==n&&(n=10);var o=Math.max(1,a*n/i.ticks().length);return function(n){var e=n/u(Math.round(r(n)));return e*a<a-.5&&(e*=a),e<=o?t(n):""}},i.nice=function(){return o(N(o(),{floor:function(n){return u(Math.floor(r(n)))},ceil:function(n){return u(Math.ceil(r(n)))}}))},i}function I(n){return function(t){return Math.sign(t)*Math.log1p(Math.abs(t/n))}}function O(n){return function(t){return Math.sign(t)*Math.expm1(Math.abs(t))*n}}function F(n){var t=1,r=n(I(t),O(t));return r.constant=function(r){return arguments.length?n(I(t=+r),O(t)):t},w(r)}function P(n){return function(t){return t<0?-Math.pow(-t,n):Math.pow(t,n)}}function E(n){return n<0?-Math.sqrt(-n):Math.sqrt(n)}function L(n){return n<0?-n*n:n*n}function T(n){var t=n(h,h),r=1;function e(){return 1===r?n(h,h):.5===r?n(E,L):n(P(r),P(1/r))}return t.exponent=function(n){return arguments.length?(r=+n,e()):r},w(t)}function Q(){var n=T(v());return n.copy=function(){return y(n,Q()).exponent(n.exponent())},o.apply(n,arguments),n}function U(n){return Math.sign(n)*n*n}var Y=1e3,j=60*Y,B=60*j,C=24*B,H=7*C,W=30*C,_=365*C;function z(n){return new Date(n)}function G(n){return n instanceof Date?+n:+new Date(+n)}function J(n,r,e,u,i,o,a,c,f){var l=M(),p=l.invert,s=l.domain,h=f(".%L"),g=f(":%S"),m=f("%I:%M"),d=f("%I %p"),v=f("%a %d"),k=f("%b %d"),w=f("%B"),b=f("%Y"),x=[[a,1,Y],[a,5,5*Y],[a,15,15*Y],[a,30,30*Y],[o,1,j],[o,5,5*j],[o,15,15*j],[o,30,30*j],[i,1,B],[i,3,3*B],[i,6,6*B],[i,12,12*B],[u,1,C],[u,2,2*C],[e,1,H],[r,1,W],[r,3,3*W],[n,1,_]];function q(t){return (a(t)<t?h:o(t)<t?g:i(t)<t?m:u(t)<t?d:r(t)<t?e(t)<t?v:k:n(t)<t?w:b)(t)}function S(r,e,u){if(null==r&&(r=10),"number"==typeof r){var i,o=Math.abs(u-e)/r,a=t.bisector(function(n){return n[2]}).right(x,o);return a===x.length?(i=t.tickStep(e/_,u/_,r),r=n):a?(i=(a=x[o/x[a-1][2]<x[a][2]/o?a-1:a])[1],r=a[0]):(i=Math.max(t.tickStep(e,u,r),1),r=c),r.every(i)}return r}return l.invert=function(n){return new Date(p(n))},l.domain=function(n){return arguments.length?s(Array.from(n,G)):s().map(z)},l.ticks=function(n){var t,r=s(),e=r[0],u=r[r.length-1],i=u<e;return i&&(t=e,e=u,u=t),t=(t=S(n,e,u))?t.range(e,u+1):[],i?t.reverse():t},l.tickFormat=function(n,t){return null==t?q:f(t)},l.nice=function(n){var t=s();return (n=S(n,t[0],t[t.length-1]))?s(N(t,n)):l},l.copy=function(){return y(l,J(n,r,e,u,i,o,a,c,f))},l}function K(){var n,t,e,u,i,o=0,a=1,c=h,f=!1;function l(t){return isNaN(t=+t)?i:c(0===e?.5:(t=(u(t)-n)*e,f?Math.max(0,Math.min(1,t)):t))}function p(n){return function(t){var r,e;return arguments.length?([r,e]=t,c=n(r,e),l):[c(0),c(1)]}}return l.domain=function(r){return arguments.length?([o,a]=r,n=u(o=+o),t=u(a=+a),e=n===t?0:1/(t-n),l):[o,a]},l.clamp=function(n){return arguments.length?(f=!!n,l):f},l.interpolator=function(n){return arguments.length?(c=n,l):c},l.range=p(r.interpolate),l.rangeRound=p(r.interpolateRound),l.unknown=function(n){return arguments.length?(i=n,l):i},function(r){return u=r,n=r(o),t=r(a),e=n===t?0:1/(t-n),l}}function V(n,t){return t.domain(n.domain()).interpolator(n.interpolator()).clamp(n.clamp()).unknown(n.unknown())}function X(){var n=T(K());return n.copy=function(){return V(n,X()).exponent(n.exponent())},a.apply(n,arguments)}function Z(){var n,t,e,u,i,o,a,c=0,f=.5,l=1,p=1,s=h,g=!1;function m(n){return isNaN(n=+n)?a:(n=.5+((n=+o(n))-t)*(p*n<p*t?u:i),s(g?Math.max(0,Math.min(1,n)):n))}function d(n){return function(t){var e,u,i;return arguments.length?([e,u,i]=t,s=r.piecewise(n,[e,u,i]),m):[s(0),s(.5),s(1)]}}return m.domain=function(r){return arguments.length?([c,f,l]=r,n=o(c=+c),t=o(f=+f),e=o(l=+l),u=n===t?0:.5/(t-n),i=t===e?0:.5/(e-t),p=t<n?-1:1,m):[c,f,l]},m.clamp=function(n){return arguments.length?(g=!!n,m):g},m.interpolator=function(n){return arguments.length?(s=n,m):s},m.range=d(r.interpolate),m.rangeRound=d(r.interpolateRound),m.unknown=function(n){return arguments.length?(a=n,m):a},function(r){return o=r,n=r(c),t=r(f),e=r(l),u=n===t?0:.5/(t-n),i=t===e?0:.5/(e-t),p=t<n?-1:1,m}}function $(){var n=T(Z());return n.copy=function(){return V(n,$()).exponent(n.exponent())},a.apply(n,arguments)}n.scaleBand=l,n.scaleDiverging=function n(){var t=w(Z()(h));return t.copy=function(){return V(t,n())},a.apply(t,arguments)},n.scaleDivergingLog=function n(){var t=R(Z()).domain([.1,1,10]);return t.copy=function(){return V(t,n()).base(t.base())},a.apply(t,arguments)},n.scaleDivergingPow=$,n.scaleDivergingSqrt=function(){return $.apply(null,arguments).exponent(.5)},n.scaleDivergingSymlog=function n(){var t=F(Z());return t.copy=function(){return V(t,n()).constant(t.constant())},a.apply(t,arguments)},n.scaleIdentity=function n(t){var r;function e(n){return isNaN(n=+n)?r:n}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=Array.from(n,p),e):t.slice()},e.unknown=function(n){return arguments.length?(r=n,e):r},e.copy=function(){return n(t).unknown(r)},t=arguments.length?Array.from(t,p):[0,1],w(e)},n.scaleImplicit=c,n.scaleLinear=function n(){var t=M();return t.copy=function(){return y(t,n())},o.apply(t,arguments),w(t)},n.scaleLog=function n(){var t=R(v()).domain([1,10]);return t.copy=function(){return y(t,n()).base(t.base())},o.apply(t,arguments),t},n.scaleOrdinal=f,n.scalePoint=function(){return function n(t){var r=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return n(r())},t}(l.apply(null,arguments).paddingInner(1))},n.scalePow=Q,n.scaleQuantile=function n(){var r,e=[],u=[],i=[];function a(){var n=0,r=Math.max(1,u.length);for(i=new Array(r-1);++n<r;)i[n-1]=t.quantileSorted(e,n/r);return c}function c(n){return isNaN(n=+n)?r:u[t.bisect(i,n)]}return c.invertExtent=function(n){var t=u.indexOf(n);return t<0?[NaN,NaN]:[t>0?i[t-1]:e[0],t<i.length?i[t]:e[e.length-1]]},c.domain=function(n){if(!arguments.length)return e.slice();e=[];for(let t of n)null==t||isNaN(t=+t)||e.push(t);return e.sort(t.ascending),a()},c.range=function(n){return arguments.length?(u=Array.from(n),a()):u.slice()},c.unknown=function(n){return arguments.length?(r=n,c):r},c.quantiles=function(){return i.slice()},c.copy=function(){return n().domain(e).range(u).unknown(r)},o.apply(c,arguments)},n.scaleQuantize=function n(){var r,e=0,u=1,i=1,a=[.5],c=[0,1];function f(n){return n<=n?c[t.bisect(a,n,0,i)]:r}function l(){var n=-1;for(a=new Array(i);++n<i;)a[n]=((n+1)*u-(n-i)*e)/(i+1);return f}return f.domain=function(n){return arguments.length?([e,u]=n,e=+e,u=+u,l()):[e,u]},f.range=function(n){return arguments.length?(i=(c=Array.from(n)).length-1,l()):c.slice()},f.invertExtent=function(n){var t=c.indexOf(n);return t<0?[NaN,NaN]:t<1?[e,a[0]]:t>=i?[a[i-1],u]:[a[t-1],a[t]]},f.unknown=function(n){return arguments.length?(r=n,f):f},f.thresholds=function(){return a.slice()},f.copy=function(){return n().domain([e,u]).range(c).unknown(r)},o.apply(w(f),arguments)},n.scaleRadial=function n(){var t,r=M(),e=[0,1],u=!1;function i(n){var e=function(n){return Math.sign(n)*Math.sqrt(Math.abs(n))}(r(n));return isNaN(e)?t:u?Math.round(e):e}return i.invert=function(n){return r.invert(U(n))},i.domain=function(n){return arguments.length?(r.domain(n),i):r.domain()},i.range=function(n){return arguments.length?(r.range((e=Array.from(n,p)).map(U)),i):e.slice()},i.rangeRound=function(n){return i.range(n).round(!0)},i.round=function(n){return arguments.length?(u=!!n,i):u},i.clamp=function(n){return arguments.length?(r.clamp(n),i):r.clamp()},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return n(r.domain(),e).round(u).clamp(r.clamp()).unknown(t)},o.apply(i,arguments),w(i)},n.scaleSequential=function n(){var t=w(K()(h));return t.copy=function(){return V(t,n())},a.apply(t,arguments)},n.scaleSequentialLog=function n(){var t=R(K()).domain([1,10]);return t.copy=function(){return V(t,n()).base(t.base())},a.apply(t,arguments)},n.scaleSequentialPow=X,n.scaleSequentialQuantile=function n(){var r=[],e=h;function u(n){if(!isNaN(n=+n))return e((t.bisect(r,n,1)-1)/(r.length-1))}return u.domain=function(n){if(!arguments.length)return r.slice();r=[];for(let t of n)null==t||isNaN(t=+t)||r.push(t);return r.sort(t.ascending),u},u.interpolator=function(n){return arguments.length?(e=n,u):e},u.range=function(){return r.map((n,t)=>e(t/(r.length-1)))},u.quantiles=function(n){return Array.from({length:n+1},(e,u)=>t.quantile(r,u/n))},u.copy=function(){return n(e).domain(r)},a.apply(u,arguments)},n.scaleSequentialSqrt=function(){return X.apply(null,arguments).exponent(.5)},n.scaleSequentialSymlog=function n(){var t=F(K());return t.copy=function(){return V(t,n()).constant(t.constant())},a.apply(t,arguments)},n.scaleSqrt=function(){return Q.apply(null,arguments).exponent(.5)},n.scaleSymlog=function n(){var t=F(v());return t.copy=function(){return y(t,n()).constant(t.constant())},o.apply(t,arguments)},n.scaleThreshold=function n(){var r,e=[.5],u=[0,1],i=1;function a(n){return n<=n?u[t.bisect(e,n,0,i)]:r}return a.domain=function(n){return arguments.length?(e=Array.from(n),i=Math.min(e.length,u.length-1),a):e.slice()},a.range=function(n){return arguments.length?(u=Array.from(n),i=Math.min(e.length,u.length-1),a):u.slice()},a.invertExtent=function(n){var t=u.indexOf(n);return [e[t-1],e[t]]},a.unknown=function(n){return arguments.length?(r=n,a):r},a.copy=function(){return n().domain(e).range(u).unknown(r)},o.apply(a,arguments)},n.scaleTime=function(){return o.apply(J(u.timeYear,u.timeMonth,u.timeWeek,u.timeDay,u.timeHour,u.timeMinute,u.timeSecond,u.timeMillisecond,i.timeFormat).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},n.scaleUtc=function(){return o.apply(J(u.utcYear,u.utcMonth,u.utcWeek,u.utcDay,u.utcHour,u.utcMinute,u.utcSecond,u.utcMillisecond,i.utcFormat).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)},n.tickFormat=k,Object.defineProperty(n,"__esModule",{value:!0});});
    });

    var d3 = unwrapExports(d3Scale_min);

    /* os-app/open-review/submodules/KOMReviewChartElementHorizontalStackedBar/main.svelte generated by Svelte v3.29.4 */
    const file$2 = "os-app/open-review/submodules/KOMReviewChartElementHorizontalStackedBar/main.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	child_ctx[7] = i;
    	return child_ctx;
    }

    // (34:0) {#each KOMReviewChartElementHorizontalStackedBarValues as item, index }
    function create_each_block(ctx) {
    	let rect;
    	let rect_x_value;
    	let rect_width_value;
    	let rect_height_value;
    	let rect_fill_value;

    	const block = {
    		c: function create() {
    			rect = svg_element("rect");
    			attr_dev(rect, "class", "KOMReviewChartElementHorizontalStackedBarSection");
    			attr_dev(rect, "x", rect_x_value = /*mod*/ ctx[1].DataScaleHorizontal(/*KOMReviewChartElementHorizontalStackedBarValues*/ ctx[0].slice(0, /*index*/ ctx[7]).reduce(func, 0)));
    			attr_dev(rect, "y", "0");
    			attr_dev(rect, "width", rect_width_value = /*mod*/ ctx[1].DataScaleHorizontal(/*item*/ ctx[5]));
    			attr_dev(rect, "height", rect_height_value = mod$g.KOMReviewChartElementHorizontalStackedBarHeight());
    			attr_dev(rect, "fill", rect_fill_value = /*mod*/ ctx[1].DataScaleColor(/*index*/ ctx[7]));
    			add_location(rect, file$2, 34, 1, 1659);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, rect, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*KOMReviewChartElementHorizontalStackedBarValues*/ 1 && rect_x_value !== (rect_x_value = /*mod*/ ctx[1].DataScaleHorizontal(/*KOMReviewChartElementHorizontalStackedBarValues*/ ctx[0].slice(0, /*index*/ ctx[7]).reduce(func, 0)))) {
    				attr_dev(rect, "x", rect_x_value);
    			}

    			if (dirty & /*KOMReviewChartElementHorizontalStackedBarValues*/ 1 && rect_width_value !== (rect_width_value = /*mod*/ ctx[1].DataScaleHorizontal(/*item*/ ctx[5]))) {
    				attr_dev(rect, "width", rect_width_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(rect);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(34:0) {#each KOMReviewChartElementHorizontalStackedBarValues as item, index }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let svg;
    	let svg_viewBox_value;
    	let each_value = /*KOMReviewChartElementHorizontalStackedBarValues*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(svg, "class", "KOMReviewChartElementHorizontalStackedBar");
    			attr_dev(svg, "viewBox", svg_viewBox_value = `0,0,${mod$g.KOMReviewChartElementHorizontalStackedBarWidth()},${mod$g.KOMReviewChartElementHorizontalStackedBarHeight()}`);
    			add_location(svg, file$2, 31, 0, 1308);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(svg, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*mod, KOMReviewChartElementHorizontalStackedBarValues, KOMReviewChartElementHorizontalStackedBarLogic*/ 3) {
    				each_value = /*KOMReviewChartElementHorizontalStackedBarValues*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(svg, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func = function (coll, item) {
    	return coll + item;
    };

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMReviewChartElementHorizontalStackedBarValues } = $$props;
    	let { KOMReviewChartElementHorizontalStackedBarColors } = $$props;
    	let { KOMReviewChartElementHorizontalStackedBarMaximum = undefined } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const mod = {
    		// DATA
    		DataScaleHorizontal(inputData) {
    			return mod$g.KOMReviewChartElementHorizontalStackedBarScaleHorizontal(d3.scaleLinear, KOMReviewChartElementHorizontalStackedBarValues, KOMReviewChartElementHorizontalStackedBarMaximum)(inputData);
    		},
    		DataScaleColor(inputData) {
    			return mod$g.KOMReviewChartElementHorizontalStackedBarScaleColor(d3.scaleOrdinal, KOMReviewChartElementHorizontalStackedBarColors, KOMReviewChartElementHorizontalStackedBarValues.map(function (e, i) {
    				return i;
    			}))(inputData);
    		}
    	};

    	const writable_props = [
    		"KOMReviewChartElementHorizontalStackedBarValues",
    		"KOMReviewChartElementHorizontalStackedBarColors",
    		"KOMReviewChartElementHorizontalStackedBarMaximum"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("KOMReviewChartElementHorizontalStackedBarValues" in $$props) $$invalidate(0, KOMReviewChartElementHorizontalStackedBarValues = $$props.KOMReviewChartElementHorizontalStackedBarValues);
    		if ("KOMReviewChartElementHorizontalStackedBarColors" in $$props) $$invalidate(2, KOMReviewChartElementHorizontalStackedBarColors = $$props.KOMReviewChartElementHorizontalStackedBarColors);
    		if ("KOMReviewChartElementHorizontalStackedBarMaximum" in $$props) $$invalidate(3, KOMReviewChartElementHorizontalStackedBarMaximum = $$props.KOMReviewChartElementHorizontalStackedBarMaximum);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewChartElementHorizontalStackedBarValues,
    		KOMReviewChartElementHorizontalStackedBarColors,
    		KOMReviewChartElementHorizontalStackedBarMaximum,
    		OLSKInternational,
    		OLSKLocalized,
    		KOMReviewChartElementHorizontalStackedBarLogic: mod$g,
    		d3,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMReviewChartElementHorizontalStackedBarValues" in $$props) $$invalidate(0, KOMReviewChartElementHorizontalStackedBarValues = $$props.KOMReviewChartElementHorizontalStackedBarValues);
    		if ("KOMReviewChartElementHorizontalStackedBarColors" in $$props) $$invalidate(2, KOMReviewChartElementHorizontalStackedBarColors = $$props.KOMReviewChartElementHorizontalStackedBarColors);
    		if ("KOMReviewChartElementHorizontalStackedBarMaximum" in $$props) $$invalidate(3, KOMReviewChartElementHorizontalStackedBarMaximum = $$props.KOMReviewChartElementHorizontalStackedBarMaximum);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewChartElementHorizontalStackedBarValues,
    		mod,
    		KOMReviewChartElementHorizontalStackedBarColors,
    		KOMReviewChartElementHorizontalStackedBarMaximum
    	];
    }

    class Main$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
    			KOMReviewChartElementHorizontalStackedBarValues: 0,
    			KOMReviewChartElementHorizontalStackedBarColors: 2,
    			KOMReviewChartElementHorizontalStackedBarMaximum: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$2.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMReviewChartElementHorizontalStackedBarValues*/ ctx[0] === undefined && !("KOMReviewChartElementHorizontalStackedBarValues" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartElementHorizontalStackedBarValues'");
    		}

    		if (/*KOMReviewChartElementHorizontalStackedBarColors*/ ctx[2] === undefined && !("KOMReviewChartElementHorizontalStackedBarColors" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartElementHorizontalStackedBarColors'");
    		}
    	}

    	get KOMReviewChartElementHorizontalStackedBarValues() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementHorizontalStackedBarValues(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewChartElementHorizontalStackedBarColors() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementHorizontalStackedBarColors(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewChartElementHorizontalStackedBarMaximum() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementHorizontalStackedBarMaximum(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-review/submodules/KOMReviewChartCompositionCollection/main.svelte generated by Svelte v3.29.4 */

    const { Object: Object_1 } = globals;
    const file$3 = "os-app/open-review/submodules/KOMReviewChartCompositionCollection/main.svelte";

    function create_fragment$3(ctx) {
    	let table;
    	let tr0;
    	let th0;
    	let t0;
    	let th1;
    	let t2;
    	let th2;
    	let t3_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingTotal + "";
    	let t3;
    	let t4;
    	let tr1;
    	let td0;
    	let span0;
    	let t5;
    	let td1;
    	let t7;
    	let td2;
    	let t8_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingUnseen + "";
    	let t8;
    	let t9;
    	let tr2;
    	let td3;
    	let span1;
    	let t10;
    	let td4;
    	let t12;
    	let td5;
    	let t13_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingDeveloping + "";
    	let t13;
    	let t14;
    	let tr3;
    	let td6;
    	let span2;
    	let t15;
    	let td7;
    	let t17;
    	let td8;
    	let t18_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingMature + "";
    	let t18;
    	let t19;
    	let tr4;
    	let td9;
    	let span3;
    	let t20;
    	let td10;
    	let t22;
    	let td11;
    	let t23_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingRetired + "";
    	let t23;
    	let t24;
    	let tr5;
    	let td12;
    	let komreviewchartelementhorizontalstackedbar;
    	let current;

    	komreviewchartelementhorizontalstackedbar = new Main$2({
    			props: {
    				KOMReviewChartElementHorizontalStackedBarValues: /*mod*/ ctx[3].DataStackedBarValues(),
    				KOMReviewChartElementHorizontalStackedBarColors: /*KOMReviewChartElementHorizontalStackedBarColors*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			table = element("table");
    			tr0 = element("tr");
    			th0 = element("th");
    			t0 = space();
    			th1 = element("th");
    			th1.textContent = `${/*OLSKLocalized*/ ctx[2]("KOMReviewChartCompositionCollectionTotalCardsLabelText")}`;
    			t2 = space();
    			th2 = element("th");
    			t3 = text(t3_value);
    			t4 = space();
    			tr1 = element("tr");
    			td0 = element("td");
    			span0 = element("span");
    			t5 = space();
    			td1 = element("td");
    			td1.textContent = `${/*OLSKLocalized*/ ctx[2]("KOMReviewChartCompositionCollectionUnseenCardsLabelText")}`;
    			t7 = space();
    			td2 = element("td");
    			t8 = text(t8_value);
    			t9 = space();
    			tr2 = element("tr");
    			td3 = element("td");
    			span1 = element("span");
    			t10 = space();
    			td4 = element("td");
    			td4.textContent = `${/*OLSKLocalized*/ ctx[2]("KOMReviewChartCompositionCollectionDevelopingCardsLabelText")}`;
    			t12 = space();
    			td5 = element("td");
    			t13 = text(t13_value);
    			t14 = space();
    			tr3 = element("tr");
    			td6 = element("td");
    			span2 = element("span");
    			t15 = space();
    			td7 = element("td");
    			td7.textContent = `${/*OLSKLocalized*/ ctx[2]("KOMReviewChartCompositionCollectionMatureCardsLabelText")}`;
    			t17 = space();
    			td8 = element("td");
    			t18 = text(t18_value);
    			t19 = space();
    			tr4 = element("tr");
    			td9 = element("td");
    			span3 = element("span");
    			t20 = space();
    			td10 = element("td");
    			td10.textContent = `${/*OLSKLocalized*/ ctx[2]("KOMReviewChartCompositionCollectionRetiredCardsLabelText")}`;
    			t22 = space();
    			td11 = element("td");
    			t23 = text(t23_value);
    			t24 = space();
    			tr5 = element("tr");
    			td12 = element("td");
    			create_component(komreviewchartelementhorizontalstackedbar.$$.fragment);
    			attr_dev(th0, "class", "svelte-eah2pq");
    			add_location(th0, file$3, 35, 1, 1249);
    			attr_dev(th1, "class", "KOMReviewChartCompositionCollectionTotalCardsLabel svelte-eah2pq");
    			add_location(th1, file$3, 36, 1, 1260);
    			attr_dev(th2, "class", "KOMReviewChartCompositionCollectionTotalCardsValue svelte-eah2pq");
    			add_location(th2, file$3, 37, 1, 1405);
    			add_location(tr0, file$3, 34, 0, 1243);
    			attr_dev(span0, "class", "KOMReviewChartCompositionCollectionUnseenCardsColor svelte-eah2pq");
    			set_style(span0, "background", /*mod*/ ctx[3].DataScaleColor(0));
    			add_location(span0, file$3, 41, 5, 1558);
    			attr_dev(td0, "class", "svelte-eah2pq");
    			add_location(td0, file$3, 41, 1, 1554);
    			attr_dev(td1, "class", "KOMReviewChartCompositionCollectionUnseenCardsLabel svelte-eah2pq");
    			add_location(td1, file$3, 42, 1, 1685);
    			attr_dev(td2, "class", "KOMReviewChartCompositionCollectionUnseenCardsValue svelte-eah2pq");
    			add_location(td2, file$3, 43, 1, 1832);
    			attr_dev(tr1, "class", "svelte-eah2pq");
    			add_location(tr1, file$3, 40, 0, 1548);
    			attr_dev(span1, "class", "KOMReviewChartCompositionCollectionDevelopingCardsColor svelte-eah2pq");
    			set_style(span1, "background", /*mod*/ ctx[3].DataScaleColor(1));
    			add_location(span1, file$3, 47, 5, 1987);
    			attr_dev(td3, "class", "svelte-eah2pq");
    			add_location(td3, file$3, 47, 1, 1983);
    			attr_dev(td4, "class", "KOMReviewChartCompositionCollectionDevelopingCardsLabel svelte-eah2pq");
    			add_location(td4, file$3, 48, 1, 2118);
    			attr_dev(td5, "class", "KOMReviewChartCompositionCollectionDevelopingCardsValue svelte-eah2pq");
    			add_location(td5, file$3, 49, 1, 2273);
    			attr_dev(tr2, "class", "svelte-eah2pq");
    			add_location(tr2, file$3, 46, 0, 1977);
    			attr_dev(span2, "class", "KOMReviewChartCompositionCollectionMatureCardsColor svelte-eah2pq");
    			set_style(span2, "background", /*mod*/ ctx[3].DataScaleColor(2));
    			add_location(span2, file$3, 53, 5, 2436);
    			attr_dev(td6, "class", "svelte-eah2pq");
    			add_location(td6, file$3, 53, 1, 2432);
    			attr_dev(td7, "class", "KOMReviewChartCompositionCollectionMatureCardsLabel svelte-eah2pq");
    			add_location(td7, file$3, 54, 1, 2563);
    			attr_dev(td8, "class", "KOMReviewChartCompositionCollectionMatureCardsValue svelte-eah2pq");
    			add_location(td8, file$3, 55, 1, 2710);
    			attr_dev(tr3, "class", "svelte-eah2pq");
    			add_location(tr3, file$3, 52, 0, 2426);
    			attr_dev(span3, "class", "KOMReviewChartCompositionCollectionRetiredCardsColor svelte-eah2pq");
    			set_style(span3, "background", /*mod*/ ctx[3].DataScaleColor(3));
    			add_location(span3, file$3, 59, 5, 2865);
    			attr_dev(td9, "class", "svelte-eah2pq");
    			add_location(td9, file$3, 59, 1, 2861);
    			attr_dev(td10, "class", "KOMReviewChartCompositionCollectionRetiredCardsLabel svelte-eah2pq");
    			add_location(td10, file$3, 60, 1, 2993);
    			attr_dev(td11, "class", "KOMReviewChartCompositionCollectionRetiredCardsValue svelte-eah2pq");
    			add_location(td11, file$3, 61, 1, 3142);
    			attr_dev(tr4, "class", "svelte-eah2pq");
    			add_location(tr4, file$3, 58, 0, 2855);
    			attr_dev(td12, "colspan", "3");
    			attr_dev(td12, "class", "svelte-eah2pq");
    			add_location(td12, file$3, 65, 1, 3295);
    			attr_dev(tr5, "class", "svelte-eah2pq");
    			add_location(tr5, file$3, 64, 0, 3289);
    			attr_dev(table, "class", "KOMReviewChartCompositionCollection");
    			add_location(table, file$3, 32, 0, 1190);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);
    			append_dev(table, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t0);
    			append_dev(tr0, th1);
    			append_dev(tr0, t2);
    			append_dev(tr0, th2);
    			append_dev(th2, t3);
    			append_dev(table, t4);
    			append_dev(table, tr1);
    			append_dev(tr1, td0);
    			append_dev(td0, span0);
    			append_dev(tr1, t5);
    			append_dev(tr1, td1);
    			append_dev(tr1, t7);
    			append_dev(tr1, td2);
    			append_dev(td2, t8);
    			append_dev(table, t9);
    			append_dev(table, tr2);
    			append_dev(tr2, td3);
    			append_dev(td3, span1);
    			append_dev(tr2, t10);
    			append_dev(tr2, td4);
    			append_dev(tr2, t12);
    			append_dev(tr2, td5);
    			append_dev(td5, t13);
    			append_dev(table, t14);
    			append_dev(table, tr3);
    			append_dev(tr3, td6);
    			append_dev(td6, span2);
    			append_dev(tr3, t15);
    			append_dev(tr3, td7);
    			append_dev(tr3, t17);
    			append_dev(tr3, td8);
    			append_dev(td8, t18);
    			append_dev(table, t19);
    			append_dev(table, tr4);
    			append_dev(tr4, td9);
    			append_dev(td9, span3);
    			append_dev(tr4, t20);
    			append_dev(tr4, td10);
    			append_dev(tr4, t22);
    			append_dev(tr4, td11);
    			append_dev(td11, t23);
    			append_dev(table, t24);
    			append_dev(table, tr5);
    			append_dev(tr5, td12);
    			mount_component(komreviewchartelementhorizontalstackedbar, td12, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*KOMReviewChartCompositionCollectionData*/ 1) && t3_value !== (t3_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingTotal + "")) set_data_dev(t3, t3_value);
    			if ((!current || dirty & /*KOMReviewChartCompositionCollectionData*/ 1) && t8_value !== (t8_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingUnseen + "")) set_data_dev(t8, t8_value);
    			if ((!current || dirty & /*KOMReviewChartCompositionCollectionData*/ 1) && t13_value !== (t13_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingDeveloping + "")) set_data_dev(t13, t13_value);
    			if ((!current || dirty & /*KOMReviewChartCompositionCollectionData*/ 1) && t18_value !== (t18_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingMature + "")) set_data_dev(t18, t18_value);
    			if ((!current || dirty & /*KOMReviewChartCompositionCollectionData*/ 1) && t23_value !== (t23_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingRetired + "")) set_data_dev(t23, t23_value);
    			const komreviewchartelementhorizontalstackedbar_changes = {};
    			if (dirty & /*KOMReviewChartElementHorizontalStackedBarColors*/ 2) komreviewchartelementhorizontalstackedbar_changes.KOMReviewChartElementHorizontalStackedBarColors = /*KOMReviewChartElementHorizontalStackedBarColors*/ ctx[1];
    			komreviewchartelementhorizontalstackedbar.$set(komreviewchartelementhorizontalstackedbar_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewchartelementhorizontalstackedbar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewchartelementhorizontalstackedbar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(table);
    			destroy_component(komreviewchartelementhorizontalstackedbar);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMReviewChartCompositionCollectionData } = $$props;
    	let { KOMReviewChartElementHorizontalStackedBarColors } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const mod = {
    		// DATA
    		DataScaleColor(inputData) {
    			return mod$g.KOMReviewChartElementHorizontalStackedBarScaleColor(d3.scaleOrdinal, KOMReviewChartElementHorizontalStackedBarColors, mod.DataStackedBarValues().map(function (e, i) {
    				return i;
    			}))(inputData);
    		},
    		DataStackedBarValues() {
    			return Object.values(KOMReviewChartCompositionCollectionData).slice(1);
    		}
    	};

    	const writable_props = [
    		"KOMReviewChartCompositionCollectionData",
    		"KOMReviewChartElementHorizontalStackedBarColors"
    	];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("KOMReviewChartCompositionCollectionData" in $$props) $$invalidate(0, KOMReviewChartCompositionCollectionData = $$props.KOMReviewChartCompositionCollectionData);
    		if ("KOMReviewChartElementHorizontalStackedBarColors" in $$props) $$invalidate(1, KOMReviewChartElementHorizontalStackedBarColors = $$props.KOMReviewChartElementHorizontalStackedBarColors);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewChartCompositionCollectionData,
    		KOMReviewChartElementHorizontalStackedBarColors,
    		OLSKInternational,
    		OLSKLocalized,
    		KOMReviewChartElementHorizontalStackedBarLogic: mod$g,
    		d3,
    		mod,
    		KOMReviewChartElementHorizontalStackedBar: Main$2
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMReviewChartCompositionCollectionData" in $$props) $$invalidate(0, KOMReviewChartCompositionCollectionData = $$props.KOMReviewChartCompositionCollectionData);
    		if ("KOMReviewChartElementHorizontalStackedBarColors" in $$props) $$invalidate(1, KOMReviewChartElementHorizontalStackedBarColors = $$props.KOMReviewChartElementHorizontalStackedBarColors);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewChartCompositionCollectionData,
    		KOMReviewChartElementHorizontalStackedBarColors,
    		OLSKLocalized,
    		mod
    	];
    }

    class Main$3 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
    			KOMReviewChartCompositionCollectionData: 0,
    			KOMReviewChartElementHorizontalStackedBarColors: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$3.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMReviewChartCompositionCollectionData*/ ctx[0] === undefined && !("KOMReviewChartCompositionCollectionData" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartCompositionCollectionData'");
    		}

    		if (/*KOMReviewChartElementHorizontalStackedBarColors*/ ctx[1] === undefined && !("KOMReviewChartElementHorizontalStackedBarColors" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartElementHorizontalStackedBarColors'");
    		}
    	}

    	get KOMReviewChartCompositionCollectionData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartCompositionCollectionData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewChartElementHorizontalStackedBarColors() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementHorizontalStackedBarColors(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const mod$h = {

    	KOMReviewChartElementDateBarTableRowIsValid(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (typeof inputData.KOMReviewChartElementDateBarTableRowDataKey !== 'string') {
    			return false;
    		}

    		if (!Array.isArray(inputData.KOMReviewChartElementDateBarTableRowDataValues)) {
    			return false;
    		}

    		if (!inputData.KOMReviewChartElementDateBarTableRowDataValues.length) {
    			return false;
    		}

    		return true;
    	},

    };

    /* os-app/open-review/submodules/KOMReviewChartElementDateBarTableRow/main.svelte generated by Svelte v3.29.4 */

    const { Error: Error_1 } = globals;
    const file$4 = "os-app/open-review/submodules/KOMReviewChartElementDateBarTableRow/main.svelte";

    function create_fragment$4(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*KOMReviewChartElementDateBarTableRowData*/ ctx[0].KOMReviewChartElementDateBarTableRowDataKey + "";
    	let t0;
    	let t1;
    	let td1;
    	let komreviewchartelementhorizontalstackedbar;
    	let t2;
    	let td2;
    	let current;

    	komreviewchartelementhorizontalstackedbar = new Main$2({
    			props: {
    				KOMReviewChartElementHorizontalStackedBarValues: /*KOMReviewChartElementDateBarTableRowData*/ ctx[0].KOMReviewChartElementDateBarTableRowDataValues,
    				KOMReviewChartElementHorizontalStackedBarMaximum: /*KOMReviewChartElementHorizontalStackedBarMaximum*/ ctx[2],
    				KOMReviewChartElementHorizontalStackedBarColors: /*KOMReviewChartElementHorizontalStackedBarColors*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			create_component(komreviewchartelementhorizontalstackedbar.$$.fragment);
    			t2 = space();
    			td2 = element("td");
    			td2.textContent = `${/*mod*/ ctx[3].DataSum() || ""}`;
    			attr_dev(td0, "class", "KOMReviewChartElementDateBarTableRowKey");
    			add_location(td0, file$4, 28, 0, 909);
    			attr_dev(td1, "class", "KOMReviewChartElementDateBarTableRowBar svelte-ae6fdq");
    			add_location(td1, file$4, 30, 0, 1056);
    			attr_dev(td2, "class", "KOMReviewChartElementDateBarTableRowCount");
    			add_location(td2, file$4, 38, 0, 1513);
    			attr_dev(tr, "class", "KOMReviewChartElementDateBarTableRow svelte-ae6fdq");
    			toggle_class(tr, "KOMReviewChartElementDateBarTableRowZero", !/*mod*/ ctx[3].DataSum());
    			add_location(tr, file$4, 26, 0, 792);
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			mount_component(komreviewchartelementhorizontalstackedbar, td1, null);
    			append_dev(tr, t2);
    			append_dev(tr, td2);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*KOMReviewChartElementDateBarTableRowData*/ 1) && t0_value !== (t0_value = /*KOMReviewChartElementDateBarTableRowData*/ ctx[0].KOMReviewChartElementDateBarTableRowDataKey + "")) set_data_dev(t0, t0_value);
    			const komreviewchartelementhorizontalstackedbar_changes = {};
    			if (dirty & /*KOMReviewChartElementDateBarTableRowData*/ 1) komreviewchartelementhorizontalstackedbar_changes.KOMReviewChartElementHorizontalStackedBarValues = /*KOMReviewChartElementDateBarTableRowData*/ ctx[0].KOMReviewChartElementDateBarTableRowDataValues;
    			if (dirty & /*KOMReviewChartElementHorizontalStackedBarMaximum*/ 4) komreviewchartelementhorizontalstackedbar_changes.KOMReviewChartElementHorizontalStackedBarMaximum = /*KOMReviewChartElementHorizontalStackedBarMaximum*/ ctx[2];
    			if (dirty & /*KOMReviewChartElementHorizontalStackedBarColors*/ 2) komreviewchartelementhorizontalstackedbar_changes.KOMReviewChartElementHorizontalStackedBarColors = /*KOMReviewChartElementHorizontalStackedBarColors*/ ctx[1];
    			komreviewchartelementhorizontalstackedbar.$set(komreviewchartelementhorizontalstackedbar_changes);

    			if (dirty & /*mod*/ 8) {
    				toggle_class(tr, "KOMReviewChartElementDateBarTableRowZero", !/*mod*/ ctx[3].DataSum());
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewchartelementhorizontalstackedbar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewchartelementhorizontalstackedbar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_component(komreviewchartelementhorizontalstackedbar);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMReviewChartElementDateBarTableRowData } = $$props;
    	let { KOMReviewChartElementHorizontalStackedBarColors } = $$props;
    	let { KOMReviewChartElementHorizontalStackedBarMaximum } = $$props;

    	if (!mod$h.KOMReviewChartElementDateBarTableRowIsValid(KOMReviewChartElementDateBarTableRowData)) {
    		throw new Error("KOMErrorInputNotValid");
    	}

    	const mod = {
    		// DATA
    		DataSum() {
    			return Math.round(KOMReviewChartElementDateBarTableRowData.KOMReviewChartElementDateBarTableRowDataValues.reduce(
    				function (coll, item) {
    					return coll + item;
    				},
    				0
    			) * 10) / 10;
    		}
    	};

    	const writable_props = [
    		"KOMReviewChartElementDateBarTableRowData",
    		"KOMReviewChartElementHorizontalStackedBarColors",
    		"KOMReviewChartElementHorizontalStackedBarMaximum"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("KOMReviewChartElementDateBarTableRowData" in $$props) $$invalidate(0, KOMReviewChartElementDateBarTableRowData = $$props.KOMReviewChartElementDateBarTableRowData);
    		if ("KOMReviewChartElementHorizontalStackedBarColors" in $$props) $$invalidate(1, KOMReviewChartElementHorizontalStackedBarColors = $$props.KOMReviewChartElementHorizontalStackedBarColors);
    		if ("KOMReviewChartElementHorizontalStackedBarMaximum" in $$props) $$invalidate(2, KOMReviewChartElementHorizontalStackedBarMaximum = $$props.KOMReviewChartElementHorizontalStackedBarMaximum);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewChartElementDateBarTableRowData,
    		KOMReviewChartElementHorizontalStackedBarColors,
    		KOMReviewChartElementHorizontalStackedBarMaximum,
    		KOMReviewChartElementDateBarTableRowLogic: mod$h,
    		mod,
    		KOMReviewChartElementHorizontalStackedBar: Main$2
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMReviewChartElementDateBarTableRowData" in $$props) $$invalidate(0, KOMReviewChartElementDateBarTableRowData = $$props.KOMReviewChartElementDateBarTableRowData);
    		if ("KOMReviewChartElementHorizontalStackedBarColors" in $$props) $$invalidate(1, KOMReviewChartElementHorizontalStackedBarColors = $$props.KOMReviewChartElementHorizontalStackedBarColors);
    		if ("KOMReviewChartElementHorizontalStackedBarMaximum" in $$props) $$invalidate(2, KOMReviewChartElementHorizontalStackedBarMaximum = $$props.KOMReviewChartElementHorizontalStackedBarMaximum);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewChartElementDateBarTableRowData,
    		KOMReviewChartElementHorizontalStackedBarColors,
    		KOMReviewChartElementHorizontalStackedBarMaximum,
    		mod
    	];
    }

    class Main$4 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
    			KOMReviewChartElementDateBarTableRowData: 0,
    			KOMReviewChartElementHorizontalStackedBarColors: 1,
    			KOMReviewChartElementHorizontalStackedBarMaximum: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMReviewChartElementDateBarTableRowData*/ ctx[0] === undefined && !("KOMReviewChartElementDateBarTableRowData" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartElementDateBarTableRowData'");
    		}

    		if (/*KOMReviewChartElementHorizontalStackedBarColors*/ ctx[1] === undefined && !("KOMReviewChartElementHorizontalStackedBarColors" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartElementHorizontalStackedBarColors'");
    		}

    		if (/*KOMReviewChartElementHorizontalStackedBarMaximum*/ ctx[2] === undefined && !("KOMReviewChartElementHorizontalStackedBarMaximum" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartElementHorizontalStackedBarMaximum'");
    		}
    	}

    	get KOMReviewChartElementDateBarTableRowData() {
    		throw new Error_1("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementDateBarTableRowData(value) {
    		throw new Error_1("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewChartElementHorizontalStackedBarColors() {
    		throw new Error_1("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementHorizontalStackedBarColors(value) {
    		throw new Error_1("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewChartElementHorizontalStackedBarMaximum() {
    		throw new Error_1("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementHorizontalStackedBarMaximum(value) {
    		throw new Error_1("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-review/submodules/KOMReviewChartElementDateBarTable/main.svelte generated by Svelte v3.29.4 */
    const file$5 = "os-app/open-review/submodules/KOMReviewChartElementDateBarTable/main.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    // (30:0) {#each KOMReviewChartElementDateBarTableData as item }
    function create_each_block$1(ctx) {
    	let komreviewchartelementdatebartablerow;
    	let current;

    	komreviewchartelementdatebartablerow = new Main$4({
    			props: {
    				KOMReviewChartElementDateBarTableRowData: /*item*/ ctx[3],
    				KOMReviewChartElementHorizontalStackedBarMaximum: /*mod*/ ctx[2].DataMaximum(),
    				KOMReviewChartElementHorizontalStackedBarColors: /*KOMReviewChartElementHorizontalStackedBarColors*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(komreviewchartelementdatebartablerow.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(komreviewchartelementdatebartablerow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komreviewchartelementdatebartablerow_changes = {};
    			if (dirty & /*KOMReviewChartElementDateBarTableData*/ 1) komreviewchartelementdatebartablerow_changes.KOMReviewChartElementDateBarTableRowData = /*item*/ ctx[3];
    			if (dirty & /*KOMReviewChartElementHorizontalStackedBarColors*/ 2) komreviewchartelementdatebartablerow_changes.KOMReviewChartElementHorizontalStackedBarColors = /*KOMReviewChartElementHorizontalStackedBarColors*/ ctx[1];
    			komreviewchartelementdatebartablerow.$set(komreviewchartelementdatebartablerow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewchartelementdatebartablerow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewchartelementdatebartablerow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(komreviewchartelementdatebartablerow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(30:0) {#each KOMReviewChartElementDateBarTableData as item }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let table;
    	let current;
    	let each_value = /*KOMReviewChartElementDateBarTableData*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			table = element("table");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(table, "class", "KOMReviewChartElementDateBarTable");
    			add_location(table, file$5, 27, 0, 566);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(table, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*KOMReviewChartElementDateBarTableData, mod, KOMReviewChartElementHorizontalStackedBarColors*/ 7) {
    				each_value = /*KOMReviewChartElementDateBarTableData*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(table, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(table);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMReviewChartElementDateBarTableData } = $$props;
    	let { KOMReviewChartElementHorizontalStackedBarColors } = $$props;

    	const mod = {
    		// DATA
    		DataMaximum() {
    			return KOMReviewChartElementDateBarTableData.reduce(
    				function (coll, item) {
    					const sum = item.KOMReviewChartElementDateBarTableRowDataValues.reduce(
    						function (coll, item) {
    							return coll + item;
    						},
    						0
    					);

    					if (sum > coll) {
    						return sum;
    					}

    					return coll;
    				},
    				0
    			);
    		}
    	};

    	const writable_props = [
    		"KOMReviewChartElementDateBarTableData",
    		"KOMReviewChartElementHorizontalStackedBarColors"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("KOMReviewChartElementDateBarTableData" in $$props) $$invalidate(0, KOMReviewChartElementDateBarTableData = $$props.KOMReviewChartElementDateBarTableData);
    		if ("KOMReviewChartElementHorizontalStackedBarColors" in $$props) $$invalidate(1, KOMReviewChartElementHorizontalStackedBarColors = $$props.KOMReviewChartElementHorizontalStackedBarColors);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewChartElementDateBarTableData,
    		KOMReviewChartElementHorizontalStackedBarColors,
    		mod,
    		KOMReviewChartElementDateBarTableRow: Main$4
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMReviewChartElementDateBarTableData" in $$props) $$invalidate(0, KOMReviewChartElementDateBarTableData = $$props.KOMReviewChartElementDateBarTableData);
    		if ("KOMReviewChartElementHorizontalStackedBarColors" in $$props) $$invalidate(1, KOMReviewChartElementHorizontalStackedBarColors = $$props.KOMReviewChartElementHorizontalStackedBarColors);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewChartElementDateBarTableData,
    		KOMReviewChartElementHorizontalStackedBarColors,
    		mod
    	];
    }

    class Main$5 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
    			KOMReviewChartElementDateBarTableData: 0,
    			KOMReviewChartElementHorizontalStackedBarColors: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMReviewChartElementDateBarTableData*/ ctx[0] === undefined && !("KOMReviewChartElementDateBarTableData" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartElementDateBarTableData'");
    		}

    		if (/*KOMReviewChartElementHorizontalStackedBarColors*/ ctx[1] === undefined && !("KOMReviewChartElementHorizontalStackedBarColors" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartElementHorizontalStackedBarColors'");
    		}
    	}

    	get KOMReviewChartElementDateBarTableData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementDateBarTableData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewChartElementHorizontalStackedBarColors() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementHorizontalStackedBarColors(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-review/submodules/KOMReviewGeneral/main.svelte generated by Svelte v3.29.4 */
    const file$6 = "os-app/open-review/submodules/KOMReviewGeneral/main.svelte";

    // (19:0) {#if KOMReviewGeneralUpcomingData.length }
    function create_if_block_1(ctx) {
    	let div;
    	let h2;
    	let t1;
    	let komreviewchartelementdatebartable;
    	let current;

    	komreviewchartelementdatebartable = new Main$5({
    			props: {
    				KOMReviewChartElementDateBarTableData: /*KOMReviewGeneralUpcomingData*/ ctx[0],
    				KOMReviewChartElementHorizontalStackedBarColors: mod$e.KOMReviewGeneralUpcomingColors()
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			h2 = element("h2");
    			h2.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMReviewGeneralUpcomingHeadingText")}`;
    			t1 = space();
    			create_component(komreviewchartelementdatebartable.$$.fragment);
    			attr_dev(h2, "class", "KOMReviewGeneralUpcomingHeading");
    			add_location(h2, file$6, 21, 1, 847);
    			attr_dev(div, "class", "KOMReviewGeneralUpcoming");
    			add_location(div, file$6, 20, 0, 807);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h2);
    			append_dev(div, t1);
    			mount_component(komreviewchartelementdatebartable, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komreviewchartelementdatebartable_changes = {};
    			if (dirty & /*KOMReviewGeneralUpcomingData*/ 1) komreviewchartelementdatebartable_changes.KOMReviewChartElementDateBarTableData = /*KOMReviewGeneralUpcomingData*/ ctx[0];
    			komreviewchartelementdatebartable.$set(komreviewchartelementdatebartable_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewchartelementdatebartable.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewchartelementdatebartable.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(komreviewchartelementdatebartable);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(19:0) {#if KOMReviewGeneralUpcomingData.length }",
    		ctx
    	});

    	return block;
    }

    // (29:0) {#if KOMReviewGeneralHistoricalData.length }
    function create_if_block(ctx) {
    	let div;
    	let h2;
    	let t1;
    	let komreviewchartelementdatebartable;
    	let current;

    	komreviewchartelementdatebartable = new Main$5({
    			props: {
    				KOMReviewChartElementDateBarTableData: /*KOMReviewGeneralHistoricalData*/ ctx[1],
    				KOMReviewChartElementHorizontalStackedBarColors: mod$e.KOMReviewGeneralHistoricalColors()
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			h2 = element("h2");
    			h2.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMReviewGeneralHistoricalHeadingText")}`;
    			t1 = space();
    			create_component(komreviewchartelementdatebartable.$$.fragment);
    			attr_dev(h2, "class", "KOMReviewGeneralHistoricalHeading");
    			add_location(h2, file$6, 31, 1, 1275);
    			attr_dev(div, "class", "KOMReviewGeneralHistorical");
    			add_location(div, file$6, 30, 0, 1233);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h2);
    			append_dev(div, t1);
    			mount_component(komreviewchartelementdatebartable, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komreviewchartelementdatebartable_changes = {};
    			if (dirty & /*KOMReviewGeneralHistoricalData*/ 2) komreviewchartelementdatebartable_changes.KOMReviewChartElementDateBarTableData = /*KOMReviewGeneralHistoricalData*/ ctx[1];
    			komreviewchartelementdatebartable.$set(komreviewchartelementdatebartable_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewchartelementdatebartable.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewchartelementdatebartable.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(komreviewchartelementdatebartable);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(29:0) {#if KOMReviewGeneralHistoricalData.length }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let div1;
    	let t0;
    	let t1;
    	let div0;
    	let h2;
    	let t3;
    	let komreviewchartcompositioncollection;
    	let current;
    	let if_block0 = /*KOMReviewGeneralUpcomingData*/ ctx[0].length && create_if_block_1(ctx);
    	let if_block1 = /*KOMReviewGeneralHistoricalData*/ ctx[1].length && create_if_block(ctx);

    	komreviewchartcompositioncollection = new Main$3({
    			props: {
    				KOMReviewChartCompositionCollectionData: /*KOMReviewChartCompositionCollectionData*/ ctx[2],
    				KOMReviewChartElementHorizontalStackedBarColors: mod$e.KOMReviewGeneralCollectionColors()
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			div0 = element("div");
    			h2 = element("h2");
    			h2.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMReviewGeneralCollectionHeadingText")}`;
    			t3 = space();
    			create_component(komreviewchartcompositioncollection.$$.fragment);
    			attr_dev(h2, "class", "KOMReviewGeneralCollectionHeading");
    			add_location(h2, file$6, 39, 1, 1665);
    			attr_dev(div0, "class", "KOMReviewGeneralCollection");
    			add_location(div0, file$6, 38, 0, 1623);
    			attr_dev(div1, "class", "KOMReviewGeneral");
    			add_location(div1, file$6, 16, 0, 731);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div1, t0);
    			if (if_block1) if_block1.m(div1, null);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, h2);
    			append_dev(div0, t3);
    			mount_component(komreviewchartcompositioncollection, div0, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*KOMReviewGeneralUpcomingData*/ ctx[0].length) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*KOMReviewGeneralUpcomingData*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div1, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*KOMReviewGeneralHistoricalData*/ ctx[1].length) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*KOMReviewGeneralHistoricalData*/ 2) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div1, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			const komreviewchartcompositioncollection_changes = {};
    			if (dirty & /*KOMReviewChartCompositionCollectionData*/ 4) komreviewchartcompositioncollection_changes.KOMReviewChartCompositionCollectionData = /*KOMReviewChartCompositionCollectionData*/ ctx[2];
    			komreviewchartcompositioncollection.$set(komreviewchartcompositioncollection_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(komreviewchartcompositioncollection.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(komreviewchartcompositioncollection.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			destroy_component(komreviewchartcompositioncollection);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMReviewGeneralUpcomingData } = $$props;
    	let { KOMReviewGeneralHistoricalData } = $$props;
    	let { KOMReviewChartCompositionCollectionData } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const writable_props = [
    		"KOMReviewGeneralUpcomingData",
    		"KOMReviewGeneralHistoricalData",
    		"KOMReviewChartCompositionCollectionData"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("KOMReviewGeneralUpcomingData" in $$props) $$invalidate(0, KOMReviewGeneralUpcomingData = $$props.KOMReviewGeneralUpcomingData);
    		if ("KOMReviewGeneralHistoricalData" in $$props) $$invalidate(1, KOMReviewGeneralHistoricalData = $$props.KOMReviewGeneralHistoricalData);
    		if ("KOMReviewChartCompositionCollectionData" in $$props) $$invalidate(2, KOMReviewChartCompositionCollectionData = $$props.KOMReviewChartCompositionCollectionData);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewGeneralUpcomingData,
    		KOMReviewGeneralHistoricalData,
    		KOMReviewChartCompositionCollectionData,
    		OLSKInternational,
    		OLSKLocalized,
    		KOMReviewGeneralLogic: mod$e,
    		KOMReviewChartCompositionCollection: Main$3,
    		KOMReviewChartElementDateBarTable: Main$5
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMReviewGeneralUpcomingData" in $$props) $$invalidate(0, KOMReviewGeneralUpcomingData = $$props.KOMReviewGeneralUpcomingData);
    		if ("KOMReviewGeneralHistoricalData" in $$props) $$invalidate(1, KOMReviewGeneralHistoricalData = $$props.KOMReviewGeneralHistoricalData);
    		if ("KOMReviewChartCompositionCollectionData" in $$props) $$invalidate(2, KOMReviewChartCompositionCollectionData = $$props.KOMReviewChartCompositionCollectionData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewGeneralUpcomingData,
    		KOMReviewGeneralHistoricalData,
    		KOMReviewChartCompositionCollectionData,
    		OLSKLocalized
    	];
    }

    class Main$6 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
    			KOMReviewGeneralUpcomingData: 0,
    			KOMReviewGeneralHistoricalData: 1,
    			KOMReviewChartCompositionCollectionData: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMReviewGeneralUpcomingData*/ ctx[0] === undefined && !("KOMReviewGeneralUpcomingData" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewGeneralUpcomingData'");
    		}

    		if (/*KOMReviewGeneralHistoricalData*/ ctx[1] === undefined && !("KOMReviewGeneralHistoricalData" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewGeneralHistoricalData'");
    		}

    		if (/*KOMReviewChartCompositionCollectionData*/ ctx[2] === undefined && !("KOMReviewChartCompositionCollectionData" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartCompositionCollectionData'");
    		}
    	}

    	get KOMReviewGeneralUpcomingData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewGeneralUpcomingData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewGeneralHistoricalData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewGeneralHistoricalData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewChartCompositionCollectionData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartCompositionCollectionData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-review/submodules/KOMReviewStats/main.svelte generated by Svelte v3.29.4 */
    const file$7 = "os-app/open-review/submodules/KOMReviewStats/main.svelte";

    // (21:1) {#if KOMReviewTodayTotalCards }
    function create_if_block$1(ctx) {
    	let komreviewtoday;
    	let current;

    	komreviewtoday = new Main$1({
    			props: {
    				KOMReviewTodayTotalCards: /*KOMReviewTodayTotalCards*/ ctx[0],
    				KOMReviewTodayTimeMinutes: /*KOMReviewTodayTimeMinutes*/ ctx[1],
    				KOMReviewTodayReviewAccuracy: /*KOMReviewTodayReviewAccuracy*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(komreviewtoday.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(komreviewtoday, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komreviewtoday_changes = {};
    			if (dirty & /*KOMReviewTodayTotalCards*/ 1) komreviewtoday_changes.KOMReviewTodayTotalCards = /*KOMReviewTodayTotalCards*/ ctx[0];
    			if (dirty & /*KOMReviewTodayTimeMinutes*/ 2) komreviewtoday_changes.KOMReviewTodayTimeMinutes = /*KOMReviewTodayTimeMinutes*/ ctx[1];
    			if (dirty & /*KOMReviewTodayReviewAccuracy*/ 4) komreviewtoday_changes.KOMReviewTodayReviewAccuracy = /*KOMReviewTodayReviewAccuracy*/ ctx[2];
    			komreviewtoday.$set(komreviewtoday_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewtoday.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewtoday.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(komreviewtoday, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(21:1) {#if KOMReviewTodayTotalCards }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div;
    	let h1;
    	let t1;
    	let t2;
    	let komreviewgeneral;
    	let current;
    	let if_block = /*KOMReviewTodayTotalCards*/ ctx[0] && create_if_block$1(ctx);

    	komreviewgeneral = new Main$6({
    			props: {
    				KOMReviewGeneralUpcomingData: /*KOMReviewGeneralUpcomingData*/ ctx[3],
    				KOMReviewGeneralHistoricalData: /*KOMReviewGeneralHistoricalData*/ ctx[4],
    				KOMReviewChartCompositionCollectionData: /*KOMReviewChartCompositionCollectionData*/ ctx[5]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			h1 = element("h1");
    			h1.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewStatsHeadingText")}`;
    			t1 = space();
    			if (if_block) if_block.c();
    			t2 = space();
    			create_component(komreviewgeneral.$$.fragment);
    			attr_dev(h1, "class", "KOMReviewStatsHeading");
    			add_location(h1, file$7, 18, 1, 749);
    			attr_dev(div, "class", "KOMReviewStats");
    			add_location(div, file$7, 17, 0, 719);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h1);
    			append_dev(div, t1);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t2);
    			mount_component(komreviewgeneral, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*KOMReviewTodayTotalCards*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*KOMReviewTodayTotalCards*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, t2);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const komreviewgeneral_changes = {};
    			if (dirty & /*KOMReviewGeneralUpcomingData*/ 8) komreviewgeneral_changes.KOMReviewGeneralUpcomingData = /*KOMReviewGeneralUpcomingData*/ ctx[3];
    			if (dirty & /*KOMReviewGeneralHistoricalData*/ 16) komreviewgeneral_changes.KOMReviewGeneralHistoricalData = /*KOMReviewGeneralHistoricalData*/ ctx[4];
    			if (dirty & /*KOMReviewChartCompositionCollectionData*/ 32) komreviewgeneral_changes.KOMReviewChartCompositionCollectionData = /*KOMReviewChartCompositionCollectionData*/ ctx[5];
    			komreviewgeneral.$set(komreviewgeneral_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(komreviewgeneral.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(komreviewgeneral.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			destroy_component(komreviewgeneral);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMReviewTodayTotalCards } = $$props;
    	let { KOMReviewTodayTimeMinutes } = $$props;
    	let { KOMReviewTodayReviewAccuracy } = $$props;
    	let { KOMReviewGeneralUpcomingData } = $$props;
    	let { KOMReviewGeneralHistoricalData } = $$props;
    	let { KOMReviewChartCompositionCollectionData } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const writable_props = [
    		"KOMReviewTodayTotalCards",
    		"KOMReviewTodayTimeMinutes",
    		"KOMReviewTodayReviewAccuracy",
    		"KOMReviewGeneralUpcomingData",
    		"KOMReviewGeneralHistoricalData",
    		"KOMReviewChartCompositionCollectionData"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("KOMReviewTodayTotalCards" in $$props) $$invalidate(0, KOMReviewTodayTotalCards = $$props.KOMReviewTodayTotalCards);
    		if ("KOMReviewTodayTimeMinutes" in $$props) $$invalidate(1, KOMReviewTodayTimeMinutes = $$props.KOMReviewTodayTimeMinutes);
    		if ("KOMReviewTodayReviewAccuracy" in $$props) $$invalidate(2, KOMReviewTodayReviewAccuracy = $$props.KOMReviewTodayReviewAccuracy);
    		if ("KOMReviewGeneralUpcomingData" in $$props) $$invalidate(3, KOMReviewGeneralUpcomingData = $$props.KOMReviewGeneralUpcomingData);
    		if ("KOMReviewGeneralHistoricalData" in $$props) $$invalidate(4, KOMReviewGeneralHistoricalData = $$props.KOMReviewGeneralHistoricalData);
    		if ("KOMReviewChartCompositionCollectionData" in $$props) $$invalidate(5, KOMReviewChartCompositionCollectionData = $$props.KOMReviewChartCompositionCollectionData);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewTodayTotalCards,
    		KOMReviewTodayTimeMinutes,
    		KOMReviewTodayReviewAccuracy,
    		KOMReviewGeneralUpcomingData,
    		KOMReviewGeneralHistoricalData,
    		KOMReviewChartCompositionCollectionData,
    		OLSKInternational,
    		OLSKLocalized,
    		KOMReviewToday: Main$1,
    		KOMReviewGeneral: Main$6
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMReviewTodayTotalCards" in $$props) $$invalidate(0, KOMReviewTodayTotalCards = $$props.KOMReviewTodayTotalCards);
    		if ("KOMReviewTodayTimeMinutes" in $$props) $$invalidate(1, KOMReviewTodayTimeMinutes = $$props.KOMReviewTodayTimeMinutes);
    		if ("KOMReviewTodayReviewAccuracy" in $$props) $$invalidate(2, KOMReviewTodayReviewAccuracy = $$props.KOMReviewTodayReviewAccuracy);
    		if ("KOMReviewGeneralUpcomingData" in $$props) $$invalidate(3, KOMReviewGeneralUpcomingData = $$props.KOMReviewGeneralUpcomingData);
    		if ("KOMReviewGeneralHistoricalData" in $$props) $$invalidate(4, KOMReviewGeneralHistoricalData = $$props.KOMReviewGeneralHistoricalData);
    		if ("KOMReviewChartCompositionCollectionData" in $$props) $$invalidate(5, KOMReviewChartCompositionCollectionData = $$props.KOMReviewChartCompositionCollectionData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewTodayTotalCards,
    		KOMReviewTodayTimeMinutes,
    		KOMReviewTodayReviewAccuracy,
    		KOMReviewGeneralUpcomingData,
    		KOMReviewGeneralHistoricalData,
    		KOMReviewChartCompositionCollectionData,
    		OLSKLocalized
    	];
    }

    class Main$7 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			KOMReviewTodayTotalCards: 0,
    			KOMReviewTodayTimeMinutes: 1,
    			KOMReviewTodayReviewAccuracy: 2,
    			KOMReviewGeneralUpcomingData: 3,
    			KOMReviewGeneralHistoricalData: 4,
    			KOMReviewChartCompositionCollectionData: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMReviewTodayTotalCards*/ ctx[0] === undefined && !("KOMReviewTodayTotalCards" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewTodayTotalCards'");
    		}

    		if (/*KOMReviewTodayTimeMinutes*/ ctx[1] === undefined && !("KOMReviewTodayTimeMinutes" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewTodayTimeMinutes'");
    		}

    		if (/*KOMReviewTodayReviewAccuracy*/ ctx[2] === undefined && !("KOMReviewTodayReviewAccuracy" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewTodayReviewAccuracy'");
    		}

    		if (/*KOMReviewGeneralUpcomingData*/ ctx[3] === undefined && !("KOMReviewGeneralUpcomingData" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewGeneralUpcomingData'");
    		}

    		if (/*KOMReviewGeneralHistoricalData*/ ctx[4] === undefined && !("KOMReviewGeneralHistoricalData" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewGeneralHistoricalData'");
    		}

    		if (/*KOMReviewChartCompositionCollectionData*/ ctx[5] === undefined && !("KOMReviewChartCompositionCollectionData" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartCompositionCollectionData'");
    		}
    	}

    	get KOMReviewTodayTotalCards() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewTodayTotalCards(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewTodayTimeMinutes() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewTodayTimeMinutes(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewTodayReviewAccuracy() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewTodayReviewAccuracy(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewGeneralUpcomingData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewGeneralUpcomingData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewGeneralHistoricalData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewGeneralHistoricalData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewChartCompositionCollectionData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartCompositionCollectionData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-review/submodules/KOMReviewMaster/main.svelte generated by Svelte v3.29.4 */

    const { Object: Object_1$1 } = globals;
    const file$8 = "os-app/open-review/submodules/KOMReviewMaster/main.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    // (185:1) {#each KOMReviewMasterItems as e}
    function create_each_block$2(ctx) {
    	let komreviewmasterlistitem;
    	let current;

    	function func(...args) {
    		return /*func*/ ctx[11](/*e*/ ctx[12], ...args);
    	}

    	komreviewmasterlistitem = new Main({
    			props: {
    				KOMReviewMasterListItemName: /*e*/ ctx[12].KOMDeckName,
    				KOMReviewMasterListItemReviewCount: /*e*/ ctx[12].$KOMDeckTodayReviewCount,
    				KOMReviewMasterListItemUnseenCount: /*e*/ ctx[12].$KOMDeckTodayUnseenCount,
    				KOMReviewMasterListItemDispatchClick: func
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(komreviewmasterlistitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(komreviewmasterlistitem, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const komreviewmasterlistitem_changes = {};
    			if (dirty & /*KOMReviewMasterItems*/ 1) komreviewmasterlistitem_changes.KOMReviewMasterListItemName = /*e*/ ctx[12].KOMDeckName;
    			if (dirty & /*KOMReviewMasterItems*/ 1) komreviewmasterlistitem_changes.KOMReviewMasterListItemReviewCount = /*e*/ ctx[12].$KOMDeckTodayReviewCount;
    			if (dirty & /*KOMReviewMasterItems*/ 1) komreviewmasterlistitem_changes.KOMReviewMasterListItemUnseenCount = /*e*/ ctx[12].$KOMDeckTodayUnseenCount;
    			if (dirty & /*KOMReviewMasterDispatchSelect, KOMReviewMasterItems*/ 3) komreviewmasterlistitem_changes.KOMReviewMasterListItemDispatchClick = func;
    			komreviewmasterlistitem.$set(komreviewmasterlistitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewmasterlistitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewmasterlistitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(komreviewmasterlistitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(185:1) {#each KOMReviewMasterItems as e}",
    		ctx
    	});

    	return block;
    }

    // (199:0) {#if KOMReviewMasterItems.length && mod.DataUnseenCount(KOMReviewMasterItems) }
    function create_if_block_1$1(ctx) {
    	let hr;
    	let t;
    	let komreviewstats;
    	let current;

    	const komreviewstats_spread_levels = [
    		/*mod*/ ctx[4].DataTodayParameters(/*KOMReviewMasterItems*/ ctx[0]),
    		/*mod*/ ctx[4].DataGeneralParameters(/*KOMReviewMasterItems*/ ctx[0])
    	];

    	let komreviewstats_props = {};

    	for (let i = 0; i < komreviewstats_spread_levels.length; i += 1) {
    		komreviewstats_props = assign(komreviewstats_props, komreviewstats_spread_levels[i]);
    	}

    	komreviewstats = new Main$7({
    			props: komreviewstats_props,
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			hr = element("hr");
    			t = space();
    			create_component(komreviewstats.$$.fragment);
    			attr_dev(hr, "class", "svelte-18pfyou");
    			add_location(hr, file$8, 199, 1, 7608);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(komreviewstats, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komreviewstats_changes = (dirty & /*mod, KOMReviewMasterItems*/ 17)
    			? get_spread_update(komreviewstats_spread_levels, [
    					get_spread_object(/*mod*/ ctx[4].DataTodayParameters(/*KOMReviewMasterItems*/ ctx[0])),
    					get_spread_object(/*mod*/ ctx[4].DataGeneralParameters(/*KOMReviewMasterItems*/ ctx[0]))
    				])
    			: {};

    			komreviewstats.$set(komreviewstats_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewstats.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewstats.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(hr);
    			if (detaching) detach_dev(t);
    			destroy_component(komreviewstats, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(199:0) {#if KOMReviewMasterItems.length && mod.DataUnseenCount(KOMReviewMasterItems) }",
    		ctx
    	});

    	return block;
    }

    // (212:0) {#if OLSK_TESTING_BEHAVIOUR() && KOMReviewMaster_DebugShowLauncherButton }
    function create_if_block$2(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			attr_dev(button, "class", "OLSKAppToolbarLauncherButton");
    			add_location(button, file$8, 212, 1, 7847);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*mod*/ ctx[4]._OLSKAppToolbarDispatchLauncher, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(212:0) {#if OLSK_TESTING_BEHAVIOUR() && KOMReviewMaster_DebugShowLauncherButton }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let div3;
    	let header;
    	let div0;
    	let span;
    	let t1;
    	let div2;
    	let div1;
    	let t2;
    	let p;
    	let button;
    	let t4;
    	let show_if_1 = /*KOMReviewMasterItems*/ ctx[0].length && /*mod*/ ctx[4].DataUnseenCount(/*KOMReviewMasterItems*/ ctx[0]);
    	let t5;
    	let show_if = main_12() && /*KOMReviewMaster_DebugShowLauncherButton*/ ctx[2];
    	let if_block1_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*KOMReviewMasterItems*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block0 = show_if_1 && create_if_block_1$1(ctx);
    	let if_block1 = show_if && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			header = element("header");
    			div0 = element("div");
    			span = element("span");
    			span.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMReviewMasterToolbarTitleText")}`;
    			t1 = space();
    			div2 = element("div");
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			p = element("p");
    			button = element("button");
    			button.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMReviewMasterCreateButtonText")}`;
    			t4 = space();
    			if (if_block0) if_block0.c();
    			t5 = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    			attr_dev(span, "class", "KOMReviewMasterToolbarTitle svelte-18pfyou");
    			add_location(span, file$8, 177, 2, 6782);
    			attr_dev(div0, "class", "OLSKToolbarElementGroup");
    			add_location(div0, file$8, 176, 1, 6742);
    			attr_dev(header, "class", "KOMReviewMasterToolbar OLSKToolbar OLSKToolbarJustify OLSKMobileViewHeader svelte-18pfyou");
    			add_location(header, file$8, 175, 0, 6649);
    			attr_dev(div1, "class", "KOMReviewMasterBodyItems svelte-18pfyou");
    			add_location(div1, file$8, 183, 0, 6938);
    			attr_dev(button, "class", "KOMReviewMasterCreateButton OLSKCommonButton");
    			attr_dev(button, "accesskey", "n");
    			add_location(button, file$8, 195, 1, 7337);
    			add_location(p, file$8, 194, 0, 7332);
    			attr_dev(div2, "class", "KOMReviewMasterBody svelte-18pfyou");
    			add_location(div2, file$8, 181, 0, 6903);
    			attr_dev(div3, "class", "KOMReviewMaster svelte-18pfyou");
    			add_location(div3, file$8, 173, 0, 6618);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, header);
    			append_dev(header, div0);
    			append_dev(div0, span);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div2, t2);
    			append_dev(div2, p);
    			append_dev(p, button);
    			append_dev(div2, t4);
    			if (if_block0) if_block0.m(div2, null);
    			insert_dev(target, t5, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*mod*/ ctx[4].InterfaceCreateButtonDidClick, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*KOMReviewMasterItems, KOMReviewMasterDispatchSelect*/ 3) {
    				each_value = /*KOMReviewMasterItems*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div1, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (dirty & /*KOMReviewMasterItems*/ 1) show_if_1 = /*KOMReviewMasterItems*/ ctx[0].length && /*mod*/ ctx[4].DataUnseenCount(/*KOMReviewMasterItems*/ ctx[0]);

    			if (show_if_1) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*KOMReviewMasterItems*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1$1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div2, null);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*KOMReviewMaster_DebugShowLauncherButton*/ 4) show_if = main_12() && /*KOMReviewMaster_DebugShowLauncherButton*/ ctx[2];

    			if (show_if) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$2(ctx);
    					if_block1.c();
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block0);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_each(each_blocks, detaching);
    			if (if_block0) if_block0.d();
    			if (detaching) detach_dev(t5);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMReviewMasterItems } = $$props;
    	let { KOMReviewMasterDispatchCreate } = $$props;
    	let { KOMReviewMasterDispatchSelect } = $$props;
    	let { KOMReviewMasterDispatchToggleExcludeTripleQuestionMark } = $$props;
    	let { KOMReviewMasterDispatchToggleDeckFiguresCaching } = $$props;
    	let { KOMReviewMasterDispatchImportData } = $$props;
    	let { KOMReviewMasterDispatchExportData } = $$props;
    	let { KOMReviewMaster_DebugShowLauncherButton = false } = $$props;

    	const modPublic = {
    		KOMReviewMasterRecipes() {
    			return mod.DataReviewMasterRecipes();
    		}
    	};

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const mod = {
    		// DATA
    		DataUnseenCount(inputData) {
    			return inputData.reduce(
    				function (coll, item) {
    					return coll + (item.$KOMDeckGeneralNotUnseenCount || 0);
    				},
    				0
    			);
    		},
    		DataTodayParameters(inputData) {
    			const filtered = inputData.filter(function (e) {
    				return e.$KOMReviewTodayTotalCards;
    			});

    			return (function (obj) {
    				return Object.assign(obj, {
    					KOMReviewTodayTimeMinutes: Math.round(obj.KOMReviewTodayTimeMinutes * 10) / 10,
    					KOMReviewTodayReviewAccuracy: Math.round(obj.KOMReviewTodayReviewAccuracy / filtered.length * 10) / 10
    				});
    			})(filtered.reduce(
    				function (coll, item) {
    					return Object.assign(coll, {
    						KOMReviewTodayTotalCards: coll.KOMReviewTodayTotalCards + item.$KOMReviewTodayTotalCards,
    						KOMReviewTodayTimeMinutes: coll.KOMReviewTodayTimeMinutes + item.$KOMReviewTodayTimeMinutes,
    						KOMReviewTodayReviewAccuracy: coll.KOMReviewTodayReviewAccuracy + item.$KOMReviewTodayReviewAccuracy
    					});
    				},
    				{
    					KOMReviewTodayTotalCards: 0,
    					KOMReviewTodayTimeMinutes: 0,
    					KOMReviewTodayReviewAccuracy: 0
    				}
    			));
    		},
    		DataGeneralParameters(inputData) {
    			const filtered = inputData.filter(function (e) {
    				return e.$KOMDeckGeneralNotUnseenCount;
    			});

    			return {
    				KOMReviewGeneralUpcomingData: Object.entries(filtered.reduce(
    					function (coll, item) {
    						return item.$KOMReviewGeneralUpcomingData.reduce(
    							function (coll, item) {
    								return Object.assign(coll, {
    									[item.KOMReviewChartElementDateBarTableRowDataKey]: coll[item.KOMReviewChartElementDateBarTableRowDataKey]
    									? coll[item.KOMReviewChartElementDateBarTableRowDataKey].map(function (e, i) {
    											return e + item.KOMReviewChartElementDateBarTableRowDataValues[i];
    										})
    									: item.KOMReviewChartElementDateBarTableRowDataValues
    								});
    							},
    							coll
    						);
    					},
    					{}
    				)).map(function (e) {
    					return {
    						KOMReviewChartElementDateBarTableRowDataKey: e[0],
    						KOMReviewChartElementDateBarTableRowDataValues: e[1]
    					};
    				}),
    				KOMReviewGeneralHistoricalData: Object.entries(filtered.reduce(
    					function (coll, item) {
    						return item.$KOMReviewGeneralHistoricalData.reduce(
    							function (coll, item) {
    								return Object.assign(coll, {
    									[item.KOMReviewChartElementDateBarTableRowDataKey]: coll[item.KOMReviewChartElementDateBarTableRowDataKey]
    									? coll[item.KOMReviewChartElementDateBarTableRowDataKey].map(function (e, i) {
    											return e + item.KOMReviewChartElementDateBarTableRowDataValues[i];
    										})
    									: item.KOMReviewChartElementDateBarTableRowDataValues
    								});
    							},
    							coll
    						);
    					},
    					{}
    				)).map(function (e) {
    					return {
    						KOMReviewChartElementDateBarTableRowDataKey: e[0],
    						KOMReviewChartElementDateBarTableRowDataValues: e[1]
    					};
    				}),
    				KOMReviewChartCompositionCollectionData: filtered.reduce(
    					function (coll, item) {
    						return Object.assign(coll, {
    							KOMSpacingGroupingTotal: coll.KOMSpacingGroupingTotal + item.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingTotal,
    							KOMSpacingGroupingUnseen: coll.KOMSpacingGroupingUnseen + item.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingUnseen,
    							KOMSpacingGroupingDeveloping: coll.KOMSpacingGroupingDeveloping + item.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingDeveloping,
    							KOMSpacingGroupingMature: coll.KOMSpacingGroupingMature + item.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingMature,
    							KOMSpacingGroupingRetired: coll.KOMSpacingGroupingRetired + item.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingRetired
    						});
    					},
    					{
    						KOMSpacingGroupingTotal: 0,
    						KOMSpacingGroupingUnseen: 0,
    						KOMSpacingGroupingDeveloping: 0,
    						KOMSpacingGroupingMature: 0,
    						KOMSpacingGroupingRetired: 0
    					}
    				)
    			};
    		},
    		DataReviewMasterRecipes() {
    			const items = [
    				{
    					LCHRecipeSignature: "KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMark",
    					LCHRecipeName: OLSKLocalized("KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText"),
    					LCHRecipeCallback: function KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMark() {
    						return KOMReviewMasterDispatchToggleExcludeTripleQuestionMark();
    					}
    				},
    				{
    					LCHRecipeSignature: "KOMReviewMasterLauncherItemToggleDeckFiguresCaching",
    					LCHRecipeName: OLSKLocalized("KOMReviewMasterLauncherItemToggleDeckFiguresCachingText"),
    					LCHRecipeCallback: function KOMReviewMasterLauncherItemToggleDeckFiguresCaching() {
    						return KOMReviewMasterDispatchToggleDeckFiguresCaching();
    					}
    				},
    				{
    					LCHRecipeSignature: "KOMReviewMasterLauncherItemImportData",
    					LCHRecipeName: OLSKLocalized("KOMReviewMasterLauncherItemImportDataText"),
    					LCHRecipeCallback: function KOMReviewMasterLauncherItemImportData() {
    						return KOMReviewMasterDispatchImportData();
    					}
    				},
    				{
    					LCHRecipeSignature: "KOMReviewMasterLauncherItemExportData",
    					LCHRecipeName: OLSKLocalized("KOMReviewMasterLauncherItemExportDataText"),
    					LCHRecipeCallback: function KOMReviewMasterLauncherItemExportData() {
    						return KOMReviewMasterDispatchExportData();
    					}
    				}
    			];

    			if (main_12()) {
    				items.push({
    					LCHRecipeName: "KOMReviewMasterLauncherFakeItemProxy",
    					LCHRecipeCallback: function KOMReviewMasterLauncherFakeItemProxy() {
    						
    					}
    				});
    			}

    			return items;
    		},
    		// INTERFACE
    		InterfaceCreateButtonDidClick() {
    			let outputData = window.prompt(OLSKLocalized("KOMReviewMasterCreateButtonPromptText"));

    			if (!outputData) {
    				return;
    			}

    			KOMReviewMasterDispatchCreate(outputData);
    		},
    		// MESSAGES
    		_OLSKAppToolbarDispatchLauncher() {
    			window.Launchlet.LCHSingletonCreate({
    				LCHOptionRecipes: mod.DataReviewMasterRecipes()
    			});
    		}
    	};

    	const writable_props = [
    		"KOMReviewMasterItems",
    		"KOMReviewMasterDispatchCreate",
    		"KOMReviewMasterDispatchSelect",
    		"KOMReviewMasterDispatchToggleExcludeTripleQuestionMark",
    		"KOMReviewMasterDispatchToggleDeckFiguresCaching",
    		"KOMReviewMasterDispatchImportData",
    		"KOMReviewMasterDispatchExportData",
    		"KOMReviewMaster_DebugShowLauncherButton"
    	];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const func = e => KOMReviewMasterDispatchSelect(e);

    	$$self.$$set = $$props => {
    		if ("KOMReviewMasterItems" in $$props) $$invalidate(0, KOMReviewMasterItems = $$props.KOMReviewMasterItems);
    		if ("KOMReviewMasterDispatchCreate" in $$props) $$invalidate(5, KOMReviewMasterDispatchCreate = $$props.KOMReviewMasterDispatchCreate);
    		if ("KOMReviewMasterDispatchSelect" in $$props) $$invalidate(1, KOMReviewMasterDispatchSelect = $$props.KOMReviewMasterDispatchSelect);
    		if ("KOMReviewMasterDispatchToggleExcludeTripleQuestionMark" in $$props) $$invalidate(6, KOMReviewMasterDispatchToggleExcludeTripleQuestionMark = $$props.KOMReviewMasterDispatchToggleExcludeTripleQuestionMark);
    		if ("KOMReviewMasterDispatchToggleDeckFiguresCaching" in $$props) $$invalidate(7, KOMReviewMasterDispatchToggleDeckFiguresCaching = $$props.KOMReviewMasterDispatchToggleDeckFiguresCaching);
    		if ("KOMReviewMasterDispatchImportData" in $$props) $$invalidate(8, KOMReviewMasterDispatchImportData = $$props.KOMReviewMasterDispatchImportData);
    		if ("KOMReviewMasterDispatchExportData" in $$props) $$invalidate(9, KOMReviewMasterDispatchExportData = $$props.KOMReviewMasterDispatchExportData);
    		if ("KOMReviewMaster_DebugShowLauncherButton" in $$props) $$invalidate(2, KOMReviewMaster_DebugShowLauncherButton = $$props.KOMReviewMaster_DebugShowLauncherButton);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewMasterItems,
    		KOMReviewMasterDispatchCreate,
    		KOMReviewMasterDispatchSelect,
    		KOMReviewMasterDispatchToggleExcludeTripleQuestionMark,
    		KOMReviewMasterDispatchToggleDeckFiguresCaching,
    		KOMReviewMasterDispatchImportData,
    		KOMReviewMasterDispatchExportData,
    		KOMReviewMaster_DebugShowLauncherButton,
    		modPublic,
    		OLSKInternational,
    		OLSKLocalized,
    		OLSK_TESTING_BEHAVIOUR: main_12,
    		mod,
    		KOMReviewMasterListItem: Main,
    		KOMReviewStats: Main$7
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMReviewMasterItems" in $$props) $$invalidate(0, KOMReviewMasterItems = $$props.KOMReviewMasterItems);
    		if ("KOMReviewMasterDispatchCreate" in $$props) $$invalidate(5, KOMReviewMasterDispatchCreate = $$props.KOMReviewMasterDispatchCreate);
    		if ("KOMReviewMasterDispatchSelect" in $$props) $$invalidate(1, KOMReviewMasterDispatchSelect = $$props.KOMReviewMasterDispatchSelect);
    		if ("KOMReviewMasterDispatchToggleExcludeTripleQuestionMark" in $$props) $$invalidate(6, KOMReviewMasterDispatchToggleExcludeTripleQuestionMark = $$props.KOMReviewMasterDispatchToggleExcludeTripleQuestionMark);
    		if ("KOMReviewMasterDispatchToggleDeckFiguresCaching" in $$props) $$invalidate(7, KOMReviewMasterDispatchToggleDeckFiguresCaching = $$props.KOMReviewMasterDispatchToggleDeckFiguresCaching);
    		if ("KOMReviewMasterDispatchImportData" in $$props) $$invalidate(8, KOMReviewMasterDispatchImportData = $$props.KOMReviewMasterDispatchImportData);
    		if ("KOMReviewMasterDispatchExportData" in $$props) $$invalidate(9, KOMReviewMasterDispatchExportData = $$props.KOMReviewMasterDispatchExportData);
    		if ("KOMReviewMaster_DebugShowLauncherButton" in $$props) $$invalidate(2, KOMReviewMaster_DebugShowLauncherButton = $$props.KOMReviewMaster_DebugShowLauncherButton);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewMasterItems,
    		KOMReviewMasterDispatchSelect,
    		KOMReviewMaster_DebugShowLauncherButton,
    		OLSKLocalized,
    		mod,
    		KOMReviewMasterDispatchCreate,
    		KOMReviewMasterDispatchToggleExcludeTripleQuestionMark,
    		KOMReviewMasterDispatchToggleDeckFiguresCaching,
    		KOMReviewMasterDispatchImportData,
    		KOMReviewMasterDispatchExportData,
    		modPublic,
    		func
    	];
    }

    class Main$8 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
    			KOMReviewMasterItems: 0,
    			KOMReviewMasterDispatchCreate: 5,
    			KOMReviewMasterDispatchSelect: 1,
    			KOMReviewMasterDispatchToggleExcludeTripleQuestionMark: 6,
    			KOMReviewMasterDispatchToggleDeckFiguresCaching: 7,
    			KOMReviewMasterDispatchImportData: 8,
    			KOMReviewMasterDispatchExportData: 9,
    			KOMReviewMaster_DebugShowLauncherButton: 2,
    			modPublic: 10
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMReviewMasterItems*/ ctx[0] === undefined && !("KOMReviewMasterItems" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterItems'");
    		}

    		if (/*KOMReviewMasterDispatchCreate*/ ctx[5] === undefined && !("KOMReviewMasterDispatchCreate" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterDispatchCreate'");
    		}

    		if (/*KOMReviewMasterDispatchSelect*/ ctx[1] === undefined && !("KOMReviewMasterDispatchSelect" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterDispatchSelect'");
    		}

    		if (/*KOMReviewMasterDispatchToggleExcludeTripleQuestionMark*/ ctx[6] === undefined && !("KOMReviewMasterDispatchToggleExcludeTripleQuestionMark" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterDispatchToggleExcludeTripleQuestionMark'");
    		}

    		if (/*KOMReviewMasterDispatchToggleDeckFiguresCaching*/ ctx[7] === undefined && !("KOMReviewMasterDispatchToggleDeckFiguresCaching" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterDispatchToggleDeckFiguresCaching'");
    		}

    		if (/*KOMReviewMasterDispatchImportData*/ ctx[8] === undefined && !("KOMReviewMasterDispatchImportData" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterDispatchImportData'");
    		}

    		if (/*KOMReviewMasterDispatchExportData*/ ctx[9] === undefined && !("KOMReviewMasterDispatchExportData" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterDispatchExportData'");
    		}
    	}

    	get KOMReviewMasterItems() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterItems(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMasterDispatchCreate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterDispatchCreate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMasterDispatchSelect() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterDispatchSelect(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMasterDispatchToggleExcludeTripleQuestionMark() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterDispatchToggleExcludeTripleQuestionMark(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMasterDispatchToggleDeckFiguresCaching() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterDispatchToggleDeckFiguresCaching(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMasterDispatchImportData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterDispatchImportData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMasterDispatchExportData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterDispatchExportData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMaster_DebugShowLauncherButton() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMaster_DebugShowLauncherButton(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[10];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var _OLSKSharedBack = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedBack\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedBack-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 11,1 L 4,8 11,15\" />\n</svg>\n";

    /* os-app/open-review/submodules/KOMReviewDetailLanguageCode/main.svelte generated by Svelte v3.29.4 */
    const file$9 = "os-app/open-review/submodules/KOMReviewDetailLanguageCode/main.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	return child_ctx;
    }

    // (47:2) {#each KOMReviewDetailLanguageCodeOptions as item}
    function create_each_block$3(ctx) {
    	let option;
    	let t_value = /*item*/ ctx[7] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*item*/ ctx[7];
    			option.value = option.__value;
    			add_location(option, file$9, 47, 3, 1859);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*KOMReviewDetailLanguageCodeOptions*/ 4 && t_value !== (t_value = /*item*/ ctx[7] + "")) set_data_dev(t, t_value);

    			if (dirty & /*KOMReviewDetailLanguageCodeOptions*/ 4 && option_value_value !== (option_value_value = /*item*/ ctx[7])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(47:2) {#each KOMReviewDetailLanguageCodeOptions as item}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let label;
    	let span;
    	let t1;
    	let select;
    	let option;
    	let select_tabindex_value;
    	let mounted;
    	let dispose;
    	let each_value = /*KOMReviewDetailLanguageCodeOptions*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			label = element("label");
    			span = element("span");
    			span.textContent = `${/*OLSKLocalized*/ ctx[4]("KOMReviewDetailLanguageCodeFieldLabelText")}`;
    			t1 = space();
    			select = element("select");
    			option = element("option");
    			option.textContent = `${/*OLSKLocalized*/ ctx[4]("KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText")}`;

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(span, "class", "KOMReviewDetailLanguageCodeFieldLabel");
    			add_location(span, file$9, 43, 1, 1291);
    			attr_dev(option, "class", "KOMReviewDetailLanguageCodeFieldOptionUnspecified");
    			option.__value = "";
    			option.value = option.__value;
    			add_location(option, file$9, 45, 2, 1644);
    			attr_dev(select, "class", "KOMReviewDetailLanguageCodeField");

    			attr_dev(select, "tabindex", select_tabindex_value = /*KOMReviewDetailLanguageCodeItem*/ ctx[0][/*KOMReviewDetailLanguageCodeItemProperty*/ ctx[1]]
    			? -1
    			: null);

    			if (/*mod*/ ctx[3]._ValueLanguageCode === void 0) add_render_callback(() => /*select_change_handler*/ ctx[6].call(select));
    			add_location(select, file$9, 44, 1, 1414);
    			attr_dev(label, "class", "KOMReviewDetailLanguageCode svelte-wp7xnx");
    			add_location(label, file$9, 42, 0, 1246);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, span);
    			append_dev(label, t1);
    			append_dev(label, select);
    			append_dev(select, option);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select, null);
    			}

    			select_option(select, /*mod*/ ctx[3]._ValueLanguageCode);

    			if (!mounted) {
    				dispose = [
    					listen_dev(select, "change", /*select_change_handler*/ ctx[6]),
    					listen_dev(
    						select,
    						"change",
    						function () {
    							if (is_function(/*mod*/ ctx[3].InterfaceFieldDidChange)) /*mod*/ ctx[3].InterfaceFieldDidChange.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (dirty & /*KOMReviewDetailLanguageCodeOptions*/ 4) {
    				each_value = /*KOMReviewDetailLanguageCodeOptions*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*KOMReviewDetailLanguageCodeItem, KOMReviewDetailLanguageCodeItemProperty*/ 3 && select_tabindex_value !== (select_tabindex_value = /*KOMReviewDetailLanguageCodeItem*/ ctx[0][/*KOMReviewDetailLanguageCodeItemProperty*/ ctx[1]]
    			? -1
    			: null)) {
    				attr_dev(select, "tabindex", select_tabindex_value);
    			}

    			if (dirty & /*mod, KOMReviewDetailLanguageCodeOptions*/ 12) {
    				select_option(select, /*mod*/ ctx[3]._ValueLanguageCode);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMReviewDetailLanguageCodeItem } = $$props;
    	let { KOMReviewDetailLanguageCodeItemProperty } = $$props;
    	let { KOMReviewDetailLanguageCodeOptions } = $$props;
    	let { KOMReviewDetailLanguageCodeDispatchUpdate } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const mod = {
    		// VALUE
    		_ValueLanguageCode: KOMReviewDetailLanguageCodeItem[KOMReviewDetailLanguageCodeItemProperty],
    		// INTERFACE
    		InterfaceFieldDidChange() {
    			if (!mod._ValueLanguageCode) {
    				delete KOMReviewDetailLanguageCodeItem[KOMReviewDetailLanguageCodeItemProperty];
    			}

    			if (mod._ValueLanguageCode) {
    				$$invalidate(0, KOMReviewDetailLanguageCodeItem[KOMReviewDetailLanguageCodeItemProperty] = mod._ValueLanguageCode, KOMReviewDetailLanguageCodeItem);
    			}

    			KOMReviewDetailLanguageCodeDispatchUpdate(KOMReviewDetailLanguageCodeItem);
    		},
    		// REACT
    		ReactItemDidChange(inputData) {
    			$$invalidate(3, mod._ValueLanguageCode = inputData[KOMReviewDetailLanguageCodeItemProperty], mod);
    		}
    	};

    	const writable_props = [
    		"KOMReviewDetailLanguageCodeItem",
    		"KOMReviewDetailLanguageCodeItemProperty",
    		"KOMReviewDetailLanguageCodeOptions",
    		"KOMReviewDetailLanguageCodeDispatchUpdate"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function select_change_handler() {
    		mod._ValueLanguageCode = select_value(this);
    		$$invalidate(3, mod);
    		$$invalidate(2, KOMReviewDetailLanguageCodeOptions);
    	}

    	$$self.$$set = $$props => {
    		if ("KOMReviewDetailLanguageCodeItem" in $$props) $$invalidate(0, KOMReviewDetailLanguageCodeItem = $$props.KOMReviewDetailLanguageCodeItem);
    		if ("KOMReviewDetailLanguageCodeItemProperty" in $$props) $$invalidate(1, KOMReviewDetailLanguageCodeItemProperty = $$props.KOMReviewDetailLanguageCodeItemProperty);
    		if ("KOMReviewDetailLanguageCodeOptions" in $$props) $$invalidate(2, KOMReviewDetailLanguageCodeOptions = $$props.KOMReviewDetailLanguageCodeOptions);
    		if ("KOMReviewDetailLanguageCodeDispatchUpdate" in $$props) $$invalidate(5, KOMReviewDetailLanguageCodeDispatchUpdate = $$props.KOMReviewDetailLanguageCodeDispatchUpdate);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewDetailLanguageCodeItem,
    		KOMReviewDetailLanguageCodeItemProperty,
    		KOMReviewDetailLanguageCodeOptions,
    		KOMReviewDetailLanguageCodeDispatchUpdate,
    		OLSKInternational,
    		OLSKLocalized,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMReviewDetailLanguageCodeItem" in $$props) $$invalidate(0, KOMReviewDetailLanguageCodeItem = $$props.KOMReviewDetailLanguageCodeItem);
    		if ("KOMReviewDetailLanguageCodeItemProperty" in $$props) $$invalidate(1, KOMReviewDetailLanguageCodeItemProperty = $$props.KOMReviewDetailLanguageCodeItemProperty);
    		if ("KOMReviewDetailLanguageCodeOptions" in $$props) $$invalidate(2, KOMReviewDetailLanguageCodeOptions = $$props.KOMReviewDetailLanguageCodeOptions);
    		if ("KOMReviewDetailLanguageCodeDispatchUpdate" in $$props) $$invalidate(5, KOMReviewDetailLanguageCodeDispatchUpdate = $$props.KOMReviewDetailLanguageCodeDispatchUpdate);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewDetailLanguageCodeItem,
    		KOMReviewDetailLanguageCodeItemProperty,
    		KOMReviewDetailLanguageCodeOptions,
    		mod,
    		OLSKLocalized,
    		KOMReviewDetailLanguageCodeDispatchUpdate,
    		select_change_handler
    	];
    }

    class Main$9 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			KOMReviewDetailLanguageCodeItem: 0,
    			KOMReviewDetailLanguageCodeItemProperty: 1,
    			KOMReviewDetailLanguageCodeOptions: 2,
    			KOMReviewDetailLanguageCodeDispatchUpdate: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMReviewDetailLanguageCodeItem*/ ctx[0] === undefined && !("KOMReviewDetailLanguageCodeItem" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailLanguageCodeItem'");
    		}

    		if (/*KOMReviewDetailLanguageCodeItemProperty*/ ctx[1] === undefined && !("KOMReviewDetailLanguageCodeItemProperty" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailLanguageCodeItemProperty'");
    		}

    		if (/*KOMReviewDetailLanguageCodeOptions*/ ctx[2] === undefined && !("KOMReviewDetailLanguageCodeOptions" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailLanguageCodeOptions'");
    		}

    		if (/*KOMReviewDetailLanguageCodeDispatchUpdate*/ ctx[5] === undefined && !("KOMReviewDetailLanguageCodeDispatchUpdate" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailLanguageCodeDispatchUpdate'");
    		}
    	}

    	get KOMReviewDetailLanguageCodeItem() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailLanguageCodeItem(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailLanguageCodeItemProperty() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailLanguageCodeItemProperty(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailLanguageCodeOptions() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailLanguageCodeOptions(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailLanguageCodeDispatchUpdate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailLanguageCodeDispatchUpdate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-review/submodules/KOMReviewDetail/main.svelte generated by Svelte v3.29.4 */

    const { Object: Object_1$2, window: window_1 } = globals;
    const file$a = "os-app/open-review/submodules/KOMReviewDetail/main.svelte";

    // (294:0) {#if !KOMReviewDetailDeck.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingTotal }
    function create_if_block_4(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailNoCardsText")}`;
    			attr_dev(p, "class", "KOMReviewDetailNoCards");
    			add_location(p, file$a, 294, 1, 10035);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(294:0) {#if !KOMReviewDetailDeck.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingTotal }",
    		ctx
    	});

    	return block;
    }

    // (298:0) {#if KOMReviewDetailDeck.$KOMDeckTodayReviewCount || KOMReviewDetailDeck.$KOMDeckTodayUnseenCount}
    function create_if_block_3(ctx) {
    	let div;
    	let p;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			button = element("button");
    			button.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailPlayButtonText")}`;
    			attr_dev(button, "class", "KOMReviewDetailPlayButton OLSKCommonButton svelte-1dn0tsn");
    			attr_dev(button, "accesskey", "g");
    			add_location(button, file$a, 300, 3, 10271);
    			add_location(p, file$a, 299, 2, 10264);
    			attr_dev(div, "class", "KOMReviewDetailPlay");
    			add_location(div, file$a, 298, 1, 10228);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    			append_dev(p, button);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[5].InterfaceMixedButtonDidClick)) /*mod*/ ctx[5].InterfaceMixedButtonDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(298:0) {#if KOMReviewDetailDeck.$KOMDeckTodayReviewCount || KOMReviewDetailDeck.$KOMDeckTodayUnseenCount}",
    		ctx
    	});

    	return block;
    }

    // (306:0) {#if KOMReviewDetailDeck.$KOMDeckTodayStudiedCount && !KOMReviewDetailDeck.$KOMDeckTodayReviewCount && !KOMReviewDetailDeck.$KOMDeckTodayUnseenCount}
    function create_if_block_2(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailNoSpacingsText")}`;
    			attr_dev(p, "class", "KOMReviewDetailNoSpacings");
    			add_location(p, file$a, 306, 1, 10623);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(306:0) {#if KOMReviewDetailDeck.$KOMDeckTodayStudiedCount && !KOMReviewDetailDeck.$KOMDeckTodayReviewCount && !KOMReviewDetailDeck.$KOMDeckTodayUnseenCount}",
    		ctx
    	});

    	return block;
    }

    // (310:0) {#if KOMReviewDetailDeck.$KOMDeckGeneralNotUnseenCount }
    function create_if_block_1$2(ctx) {
    	let hr;
    	let t;
    	let komreviewstats;
    	let current;

    	komreviewstats = new Main$7({
    			props: {
    				KOMReviewTodayTotalCards: /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewTodayTotalCards,
    				KOMReviewTodayTimeMinutes: /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewTodayTimeMinutes,
    				KOMReviewTodayReviewAccuracy: /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewTodayReviewAccuracy,
    				KOMReviewGeneralUpcomingData: /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewGeneralUpcomingData,
    				KOMReviewGeneralHistoricalData: /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewGeneralHistoricalData,
    				KOMReviewChartCompositionCollectionData: /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewChartCompositionCollectionData
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			hr = element("hr");
    			t = space();
    			create_component(komreviewstats.$$.fragment);
    			attr_dev(hr, "class", "svelte-1dn0tsn");
    			add_location(hr, file$a, 310, 1, 10780);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(komreviewstats, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komreviewstats_changes = {};
    			if (dirty & /*KOMReviewDetailDeck*/ 1) komreviewstats_changes.KOMReviewTodayTotalCards = /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewTodayTotalCards;
    			if (dirty & /*KOMReviewDetailDeck*/ 1) komreviewstats_changes.KOMReviewTodayTimeMinutes = /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewTodayTimeMinutes;
    			if (dirty & /*KOMReviewDetailDeck*/ 1) komreviewstats_changes.KOMReviewTodayReviewAccuracy = /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewTodayReviewAccuracy;
    			if (dirty & /*KOMReviewDetailDeck*/ 1) komreviewstats_changes.KOMReviewGeneralUpcomingData = /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewGeneralUpcomingData;
    			if (dirty & /*KOMReviewDetailDeck*/ 1) komreviewstats_changes.KOMReviewGeneralHistoricalData = /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewGeneralHistoricalData;
    			if (dirty & /*KOMReviewDetailDeck*/ 1) komreviewstats_changes.KOMReviewChartCompositionCollectionData = /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewChartCompositionCollectionData;
    			komreviewstats.$set(komreviewstats_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewstats.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewstats.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(hr);
    			if (detaching) detach_dev(t);
    			destroy_component(komreviewstats, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(310:0) {#if KOMReviewDetailDeck.$KOMDeckGeneralNotUnseenCount }",
    		ctx
    	});

    	return block;
    }

    // (341:0) {#if OLSK_TESTING_BEHAVIOUR() && KOMReviewDetail_DebugShowLauncherButton }
    function create_if_block$3(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			attr_dev(button, "class", "OLSKAppToolbarLauncherButton");
    			add_location(button, file$a, 341, 1, 12124);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[5]._OLSKAppToolbarDispatchLauncher)) /*mod*/ ctx[5]._OLSKAppToolbarDispatchLauncher.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(341:0) {#if OLSK_TESTING_BEHAVIOUR() && KOMReviewDetail_DebugShowLauncherButton }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let div6;
    	let header;
    	let div1;
    	let button0;
    	let div0;
    	let button0_title_value;
    	let t0;
    	let div2;
    	let strong;
    	let t1_value = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckName + "";
    	let t1;
    	let t2;
    	let div3;
    	let button1;
    	let t4;
    	let div5;
    	let h10;
    	let t6;
    	let div4;
    	let p0;
    	let label0;
    	let input0;
    	let t7;
    	let span0;
    	let t9;
    	let p1;
    	let label1;
    	let input1;
    	let t10;
    	let span1;
    	let t12;
    	let span2;
    	let komreviewdetaillanguagecode0;
    	let t13;
    	let p2;
    	let label2;
    	let input2;
    	let t14;
    	let span3;
    	let t16;
    	let span4;
    	let komreviewdetaillanguagecode1;
    	let t17;
    	let p3;
    	let label3;
    	let input3;
    	let t18;
    	let span5;
    	let t20;
    	let p4;
    	let label4;
    	let span6;
    	let t22;
    	let select;
    	let option0;
    	let option0_value_value;
    	let option1;
    	let option1_value_value;
    	let option2;
    	let option2_value_value;
    	let option3;
    	let option3_value_value;
    	let option4;
    	let option4_value_value;
    	let t28;
    	let t29;
    	let t30;
    	let t31;
    	let t32;
    	let hr0;
    	let t33;
    	let h11;
    	let t35;
    	let p5;
    	let button2;
    	let t37;
    	let hr1;
    	let t38;
    	let p6;
    	let button3;
    	let t40;
    	let show_if = main_12() && /*KOMReviewDetail_DebugShowLauncherButton*/ ctx[4];
    	let if_block4_anchor;
    	let current;
    	let mounted;
    	let dispose;

    	komreviewdetaillanguagecode0 = new Main$9({
    			props: {
    				KOMReviewDetailLanguageCodeItem: /*KOMReviewDetailDeck*/ ctx[0],
    				KOMReviewDetailLanguageCodeItemProperty: "KOMDeckFrontLanguageCode",
    				KOMReviewDetailLanguageCodeOptions: /*mod*/ ctx[5]._ValueLanguages,
    				KOMReviewDetailLanguageCodeDispatchUpdate: /*mod*/ ctx[5].InterfaceFormDidUpdate
    			},
    			$$inline: true
    		});

    	komreviewdetaillanguagecode1 = new Main$9({
    			props: {
    				KOMReviewDetailLanguageCodeItem: /*KOMReviewDetailDeck*/ ctx[0],
    				KOMReviewDetailLanguageCodeItemProperty: "KOMDeckRearLanguageCode",
    				KOMReviewDetailLanguageCodeOptions: /*mod*/ ctx[5]._ValueLanguages,
    				KOMReviewDetailLanguageCodeDispatchUpdate: /*mod*/ ctx[5].InterfaceFormDidUpdate
    			},
    			$$inline: true
    		});

    	let if_block0 = !/*KOMReviewDetailDeck*/ ctx[0].$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingTotal && create_if_block_4(ctx);
    	let if_block1 = (/*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayReviewCount || /*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayUnseenCount) && create_if_block_3(ctx);
    	let if_block2 = /*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayStudiedCount && !/*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayReviewCount && !/*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayUnseenCount && create_if_block_2(ctx);
    	let if_block3 = /*KOMReviewDetailDeck*/ ctx[0].$KOMDeckGeneralNotUnseenCount && create_if_block_1$2(ctx);
    	let if_block4 = show_if && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			header = element("header");
    			div1 = element("div");
    			button0 = element("button");
    			div0 = element("div");
    			t0 = space();
    			div2 = element("div");
    			strong = element("strong");
    			t1 = text(t1_value);
    			t2 = space();
    			div3 = element("div");
    			button1 = element("button");
    			button1.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailToolbarCardsButtonText")}`;
    			t4 = space();
    			div5 = element("div");
    			h10 = element("h1");
    			h10.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailGameOptionsHeadingText")}`;
    			t6 = space();
    			div4 = element("div");
    			p0 = element("p");
    			label0 = element("label");
    			input0 = element("input");
    			t7 = space();
    			span0 = element("span");
    			span0.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailFormAudioIsEnabledFieldLabelText")}`;
    			t9 = space();
    			p1 = element("p");
    			label1 = element("label");
    			input1 = element("input");
    			t10 = space();
    			span1 = element("span");
    			span1.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText")}`;
    			t12 = space();
    			span2 = element("span");
    			create_component(komreviewdetaillanguagecode0.$$.fragment);
    			t13 = space();
    			p2 = element("p");
    			label2 = element("label");
    			input2 = element("input");
    			t14 = space();
    			span3 = element("span");
    			span3.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText")}`;
    			t16 = space();
    			span4 = element("span");
    			create_component(komreviewdetaillanguagecode1.$$.fragment);
    			t17 = space();
    			p3 = element("p");
    			label3 = element("label");
    			input3 = element("input");
    			t18 = space();
    			span5 = element("span");
    			span5.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailFormIsForwardOnlyFieldLabelText")}`;
    			t20 = space();
    			p4 = element("p");
    			label4 = element("label");
    			span6 = element("span");
    			span6.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailFormRetireCardsFieldLabelText")}`;
    			t22 = space();
    			select = element("select");
    			option0 = element("option");
    			option0.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailFormRetireCardsFieldOptionNeverText")}`;
    			option1 = element("option");
    			option1.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailFormRetireCardsFieldOptionOneMonthText")}`;
    			option2 = element("option");
    			option2.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText")}`;
    			option3 = element("option");
    			option3.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText")}`;
    			option4 = element("option");
    			option4.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText")}`;
    			t28 = space();
    			if (if_block0) if_block0.c();
    			t29 = space();
    			if (if_block1) if_block1.c();
    			t30 = space();
    			if (if_block2) if_block2.c();
    			t31 = space();
    			if (if_block3) if_block3.c();
    			t32 = space();
    			hr0 = element("hr");
    			t33 = space();
    			h11 = element("h1");
    			h11.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailDeckHeadingText")}`;
    			t35 = space();
    			p5 = element("p");
    			button2 = element("button");
    			button2.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailRenameButtonText")}`;
    			t37 = space();
    			hr1 = element("hr");
    			t38 = space();
    			p6 = element("p");
    			button3 = element("button");
    			button3.textContent = `${/*OLSKLocalized*/ ctx[6]("KOMReviewDetailDiscardButtonText")}`;
    			t40 = space();
    			if (if_block4) if_block4.c();
    			if_block4_anchor = empty();
    			attr_dev(div0, "class", "KOMReviewDetailToolbarBackButtonImage");
    			add_location(div0, file$a, 219, 3, 5887);
    			attr_dev(button0, "class", "KOMReviewDetailToolbarBackButton OLSKLayoutButtonNoStyle OLSKLayoutElementTappable OLSKToolbarButton");
    			attr_dev(button0, "title", button0_title_value = /*OLSKLocalized*/ ctx[6]("KOMReviewDetailToolbarBackButtonText"));
    			add_location(button0, file$a, 218, 2, 5661);
    			attr_dev(div1, "class", "OLSKToolbarElementGroup");
    			add_location(div1, file$a, 217, 1, 5621);
    			attr_dev(strong, "class", "KOMReviewDetailToolbarTitle");
    			add_location(strong, file$a, 224, 2, 6031);
    			attr_dev(div2, "class", "OLSKToolbarElementGroup");
    			add_location(div2, file$a, 223, 1, 5991);
    			attr_dev(button1, "class", "KOMReviewDetailToolbarCardsButton OLSKLayoutButtonNoStyle OLSKLayoutElementTappable");
    			attr_dev(button1, "accesskey", "c");
    			add_location(button1, file$a, 228, 2, 6170);
    			attr_dev(div3, "class", "OLSKToolbarElementGroup");
    			add_location(div3, file$a, 227, 1, 6130);
    			attr_dev(header, "class", "KOMReviewDetailToolbar OLSKToolbar OLSKToolbarJustify OLSKMobileViewHeader svelte-1dn0tsn");
    			add_location(header, file$a, 216, 0, 5528);
    			attr_dev(h10, "class", "KOMReviewDetailStudyHeading");
    			add_location(h10, file$a, 234, 0, 6449);
    			attr_dev(input0, "class", "KOMReviewDetailFormAudioIsEnabledField");
    			attr_dev(input0, "type", "checkbox");
    			add_location(input0, file$a, 239, 3, 6606);
    			attr_dev(span0, "class", "KOMReviewDetailFormAudioIsEnabledFieldLabel");
    			add_location(span0, file$a, 240, 3, 6781);
    			add_location(label0, file$a, 238, 2, 6595);
    			add_location(p0, file$a, 237, 1, 6589);
    			attr_dev(input1, "class", "KOMReviewDetailFormFrontSpeechIsEnabledField");
    			attr_dev(input1, "type", "checkbox");
    			add_location(input1, file$a, 245, 3, 6950);
    			attr_dev(span1, "class", "KOMReviewDetailFormFrontSpeechIsEnabledFieldLabel");
    			add_location(span1, file$a, 246, 3, 7137);
    			add_location(label1, file$a, 244, 2, 6939);
    			attr_dev(span2, "class", "KOMReviewDetailFormFrontLanguageCode");
    			add_location(span2, file$a, 249, 2, 7297);
    			add_location(p1, file$a, 243, 1, 6933);
    			attr_dev(input2, "class", "KOMReviewDetailFormRearSpeechIsEnabledField");
    			attr_dev(input2, "type", "checkbox");
    			add_location(input2, file$a, 260, 3, 7697);
    			attr_dev(span3, "class", "KOMReviewDetailFormRearSpeechIsEnabledFieldLabel");
    			add_location(span3, file$a, 261, 3, 7882);
    			add_location(label2, file$a, 259, 2, 7686);
    			attr_dev(span4, "class", "KOMReviewDetailFormRearLanguageCode");
    			add_location(span4, file$a, 264, 2, 8040);
    			add_location(p2, file$a, 258, 1, 7680);
    			attr_dev(input3, "class", "KOMReviewDetailFormIsForwardOnlyField");
    			attr_dev(input3, "type", "checkbox");
    			add_location(input3, file$a, 275, 3, 8438);
    			attr_dev(span5, "class", "KOMReviewDetailFormIsForwardOnlyFieldLabel");
    			add_location(span5, file$a, 276, 3, 8611);
    			add_location(label3, file$a, 274, 2, 8427);
    			add_location(p3, file$a, 273, 1, 8421);
    			attr_dev(span6, "class", "KOMReviewDetailFormRetireCardsFieldLabel");
    			add_location(span6, file$a, 281, 3, 8778);
    			attr_dev(option0, "class", "KOMReviewDetailFormRetireCardsFieldOptionNever");
    			option0.__value = option0_value_value = 0;
    			option0.value = option0.__value;
    			add_location(option0, file$a, 283, 4, 9066);
    			attr_dev(option1, "class", "KOMReviewDetailFormRetireCardsFieldOptionOneMonth");
    			option1.__value = option1_value_value = 1;
    			option1.value = option1.__value;
    			add_location(option1, file$a, 284, 4, 9226);
    			attr_dev(option2, "class", "KOMReviewDetailFormRetireCardsFieldOptionThreeMonths");
    			option2.__value = option2_value_value = 3;
    			option2.value = option2.__value;
    			add_location(option2, file$a, 285, 4, 9392);
    			attr_dev(option3, "class", "KOMReviewDetailFormRetireCardsFieldOptionSixMonths");
    			option3.__value = option3_value_value = 6;
    			option3.value = option3.__value;
    			add_location(option3, file$a, 286, 4, 9564);
    			attr_dev(option4, "class", "KOMReviewDetailFormRetireCardsFieldOptionTwelveMonths");
    			option4.__value = option4_value_value = 12;
    			option4.value = option4.__value;
    			add_location(option4, file$a, 287, 4, 9732);
    			attr_dev(select, "class", "KOMReviewDetailFormRetireCardsField");
    			if (/*KOMReviewDetailDeck*/ ctx[0].KOMDeckRetireCardsMonths === void 0) add_render_callback(() => /*select_change_handler*/ ctx[16].call(select));
    			add_location(select, file$a, 282, 3, 8909);
    			add_location(label4, file$a, 280, 2, 8767);
    			add_location(p4, file$a, 279, 1, 8761);
    			attr_dev(div4, "class", "KOMReviewDetailForm");
    			add_location(div4, file$a, 236, 0, 6554);
    			attr_dev(hr0, "class", "svelte-1dn0tsn");
    			add_location(hr0, file$a, 322, 0, 11337);
    			attr_dev(h11, "class", "KOMReviewDetailDeckHeading");
    			add_location(h11, file$a, 324, 0, 11343);
    			attr_dev(button2, "class", "KOMReviewDetailRenameButton OLSKCommonButton");
    			add_location(button2, file$a, 327, 1, 11445);
    			add_location(p5, file$a, 326, 0, 11440);
    			attr_dev(hr1, "class", "svelte-1dn0tsn");
    			add_location(hr1, file$a, 330, 0, 11621);
    			attr_dev(button3, "class", "KOMReviewDetailDiscardButton OLSKCommonButton OLSKCommonButtonDestructive");
    			add_location(button3, file$a, 333, 1, 11632);
    			add_location(p6, file$a, 332, 0, 11627);
    			attr_dev(div5, "class", "KOMReviewDetailBody svelte-1dn0tsn");
    			add_location(div5, file$a, 232, 0, 6414);
    			attr_dev(div6, "class", "KOMReviewDetail svelte-1dn0tsn");
    			add_location(div6, file$a, 214, 0, 5497);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, header);
    			append_dev(header, div1);
    			append_dev(div1, button0);
    			append_dev(button0, div0);
    			div0.innerHTML = _OLSKSharedBack;
    			append_dev(header, t0);
    			append_dev(header, div2);
    			append_dev(div2, strong);
    			append_dev(strong, t1);
    			append_dev(header, t2);
    			append_dev(header, div3);
    			append_dev(div3, button1);
    			append_dev(div6, t4);
    			append_dev(div6, div5);
    			append_dev(div5, h10);
    			append_dev(div5, t6);
    			append_dev(div5, div4);
    			append_dev(div4, p0);
    			append_dev(p0, label0);
    			append_dev(label0, input0);
    			input0.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckAudioIsEnabled;
    			append_dev(label0, t7);
    			append_dev(label0, span0);
    			append_dev(div4, t9);
    			append_dev(div4, p1);
    			append_dev(p1, label1);
    			append_dev(label1, input1);
    			input1.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckFrontSpeechIsEnabled;
    			append_dev(label1, t10);
    			append_dev(label1, span1);
    			append_dev(p1, t12);
    			append_dev(p1, span2);
    			mount_component(komreviewdetaillanguagecode0, span2, null);
    			append_dev(div4, t13);
    			append_dev(div4, p2);
    			append_dev(p2, label2);
    			append_dev(label2, input2);
    			input2.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckRearSpeechIsEnabled;
    			append_dev(label2, t14);
    			append_dev(label2, span3);
    			append_dev(p2, t16);
    			append_dev(p2, span4);
    			mount_component(komreviewdetaillanguagecode1, span4, null);
    			append_dev(div4, t17);
    			append_dev(div4, p3);
    			append_dev(p3, label3);
    			append_dev(label3, input3);
    			input3.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckIsForwardOnly;
    			append_dev(label3, t18);
    			append_dev(label3, span5);
    			append_dev(div4, t20);
    			append_dev(div4, p4);
    			append_dev(p4, label4);
    			append_dev(label4, span6);
    			append_dev(label4, t22);
    			append_dev(label4, select);
    			append_dev(select, option0);
    			append_dev(select, option1);
    			append_dev(select, option2);
    			append_dev(select, option3);
    			append_dev(select, option4);
    			select_option(select, /*KOMReviewDetailDeck*/ ctx[0].KOMDeckRetireCardsMonths);
    			append_dev(div5, t28);
    			if (if_block0) if_block0.m(div5, null);
    			append_dev(div5, t29);
    			if (if_block1) if_block1.m(div5, null);
    			append_dev(div5, t30);
    			if (if_block2) if_block2.m(div5, null);
    			append_dev(div5, t31);
    			if (if_block3) if_block3.m(div5, null);
    			append_dev(div5, t32);
    			append_dev(div5, hr0);
    			append_dev(div5, t33);
    			append_dev(div5, h11);
    			append_dev(div5, t35);
    			append_dev(div5, p5);
    			append_dev(p5, button2);
    			append_dev(div5, t37);
    			append_dev(div5, hr1);
    			append_dev(div5, t38);
    			append_dev(div5, p6);
    			append_dev(p6, button3);
    			insert_dev(target, t40, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, if_block4_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						window_1,
    						"keydown",
    						function () {
    							if (is_function(/*mod*/ ctx[5].InterfaceWindowDidKeydown)) /*mod*/ ctx[5].InterfaceWindowDidKeydown.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*KOMReviewDetailDispatchBack*/ ctx[1])) /*KOMReviewDetailDispatchBack*/ ctx[1].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button1,
    						"click",
    						function () {
    							if (is_function(/*KOMReviewDetailDispatchBrowse*/ ctx[2])) /*KOMReviewDetailDispatchBrowse*/ ctx[2].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(input0, "change", /*input0_change_handler*/ ctx[12]),
    					listen_dev(
    						input0,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[5].InterfaceFormDidUpdate)) /*mod*/ ctx[5].InterfaceFormDidUpdate.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(input1, "change", /*input1_change_handler*/ ctx[13]),
    					listen_dev(
    						input1,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[5].InterfaceFormDidUpdate)) /*mod*/ ctx[5].InterfaceFormDidUpdate.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(input2, "change", /*input2_change_handler*/ ctx[14]),
    					listen_dev(
    						input2,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[5].InterfaceFormDidUpdate)) /*mod*/ ctx[5].InterfaceFormDidUpdate.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(input3, "change", /*input3_change_handler*/ ctx[15]),
    					listen_dev(
    						input3,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[5].InterfaceFormDidUpdate)) /*mod*/ ctx[5].InterfaceFormDidUpdate.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[16]),
    					listen_dev(
    						select,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[5].InterfaceFormDidUpdate)) /*mod*/ ctx[5].InterfaceFormDidUpdate.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button2,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[5].InterfaceRenameButtonDidClick)) /*mod*/ ctx[5].InterfaceRenameButtonDidClick.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(button3, "click", /*click_handler*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if ((!current || dirty & /*KOMReviewDetailDeck*/ 1) && t1_value !== (t1_value = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckName + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*KOMReviewDetailDeck*/ 1) {
    				input0.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckAudioIsEnabled;
    			}

    			if (dirty & /*KOMReviewDetailDeck*/ 1) {
    				input1.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckFrontSpeechIsEnabled;
    			}

    			const komreviewdetaillanguagecode0_changes = {};
    			if (dirty & /*KOMReviewDetailDeck*/ 1) komreviewdetaillanguagecode0_changes.KOMReviewDetailLanguageCodeItem = /*KOMReviewDetailDeck*/ ctx[0];
    			if (dirty & /*mod*/ 32) komreviewdetaillanguagecode0_changes.KOMReviewDetailLanguageCodeOptions = /*mod*/ ctx[5]._ValueLanguages;
    			if (dirty & /*mod*/ 32) komreviewdetaillanguagecode0_changes.KOMReviewDetailLanguageCodeDispatchUpdate = /*mod*/ ctx[5].InterfaceFormDidUpdate;
    			komreviewdetaillanguagecode0.$set(komreviewdetaillanguagecode0_changes);

    			if (dirty & /*KOMReviewDetailDeck*/ 1) {
    				input2.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckRearSpeechIsEnabled;
    			}

    			const komreviewdetaillanguagecode1_changes = {};
    			if (dirty & /*KOMReviewDetailDeck*/ 1) komreviewdetaillanguagecode1_changes.KOMReviewDetailLanguageCodeItem = /*KOMReviewDetailDeck*/ ctx[0];
    			if (dirty & /*mod*/ 32) komreviewdetaillanguagecode1_changes.KOMReviewDetailLanguageCodeOptions = /*mod*/ ctx[5]._ValueLanguages;
    			if (dirty & /*mod*/ 32) komreviewdetaillanguagecode1_changes.KOMReviewDetailLanguageCodeDispatchUpdate = /*mod*/ ctx[5].InterfaceFormDidUpdate;
    			komreviewdetaillanguagecode1.$set(komreviewdetaillanguagecode1_changes);

    			if (dirty & /*KOMReviewDetailDeck*/ 1) {
    				input3.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckIsForwardOnly;
    			}

    			if (dirty & /*KOMReviewDetailDeck*/ 1) {
    				select_option(select, /*KOMReviewDetailDeck*/ ctx[0].KOMDeckRetireCardsMonths);
    			}

    			if (!/*KOMReviewDetailDeck*/ ctx[0].$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingTotal) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_4(ctx);
    					if_block0.c();
    					if_block0.m(div5, t29);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayReviewCount || /*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayUnseenCount) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_3(ctx);
    					if_block1.c();
    					if_block1.m(div5, t30);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayStudiedCount && !/*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayReviewCount && !/*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayUnseenCount) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_2(ctx);
    					if_block2.c();
    					if_block2.m(div5, t31);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*KOMReviewDetailDeck*/ ctx[0].$KOMDeckGeneralNotUnseenCount) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty & /*KOMReviewDetailDeck*/ 1) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_1$2(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div5, t32);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*KOMReviewDetail_DebugShowLauncherButton*/ 16) show_if = main_12() && /*KOMReviewDetail_DebugShowLauncherButton*/ ctx[4];

    			if (show_if) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block$3(ctx);
    					if_block4.c();
    					if_block4.m(if_block4_anchor.parentNode, if_block4_anchor);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewdetaillanguagecode0.$$.fragment, local);
    			transition_in(komreviewdetaillanguagecode1.$$.fragment, local);
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewdetaillanguagecode0.$$.fragment, local);
    			transition_out(komreviewdetaillanguagecode1.$$.fragment, local);
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			destroy_component(komreviewdetaillanguagecode0);
    			destroy_component(komreviewdetaillanguagecode1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (detaching) detach_dev(t40);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(if_block4_anchor);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const kMaxUnseenCards = 10;

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMReviewDetailDeck } = $$props;
    	let { KOMReviewDetailDispatchBack } = $$props;
    	let { KOMReviewDetailDispatchBrowse } = $$props;
    	let { KOMReviewDetailDispatchUpdate } = $$props;
    	let { KOMReviewDetailDispatchRecount } = $$props;
    	let { KOMReviewDetailDispatchPlay } = $$props;
    	let { KOMReviewDetailDispatchDiscard } = $$props;
    	let { KOMReviewDetailDispatchExport } = $$props;
    	let { KOMReviewDetail_DebugShowLauncherButton = false } = $$props;

    	const modPublic = {
    		KOMReviewDetailRecipes() {
    			return mod.DataReviewDetailRecipes();
    		}
    	};

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const mod = {
    		// VALUE
    		_ValueLanguages: [],
    		ValueLanguages(inputData) {
    			$$invalidate(
    				5,
    				mod._ValueLanguages = inputData.map(function (e) {
    					return e.lang;
    				}).filter(function (e, i, coll) {
    					return coll.indexOf(e) === i;
    				}).sort(),
    				mod
    			);
    		},
    		// DATA
    		DataReviewDetailRecipes() {
    			const items = [
    				{
    					LCHRecipeSignature: "KOMReviewDetailLauncherItemExport",
    					LCHRecipeName: OLSKLocalized("KOMReviewDetailLauncherItemExportText"),
    					LCHRecipeCallback: function KOMReviewDetailLauncherItemExport() {
    						return KOMReviewDetailDispatchExport();
    					}
    				}
    			];

    			if (KOMReviewDetailDeck.$KOMDeckTodayReviewCount) {
    				items.push({
    					LCHRecipeSignature: "KOMReviewDetailLauncherItemPlayReviewing",
    					LCHRecipeName: OLSKLocalized("KOMReviewDetailLauncherItemPlayReviewingText"),
    					LCHRecipeCallback() {
    						mod.ContolPlay(mod$f.KOMReviewSchemeReviewing());
    					}
    				});
    			}

    			if (KOMReviewDetailDeck.$KOMDeckTodayUnseenCount) {
    				items.push({
    					LCHRecipeSignature: "KOMReviewDetailLauncherItemPlayUnseen",
    					LCHRecipeName: OLSKLocalized("KOMReviewDetailLauncherItemPlayUnseenText"),
    					LCHRecipeCallback() {
    						mod.ContolPlay(mod$f.KOMReviewSchemeUnseen());
    					}
    				});
    			}

    			if (main_12()) {
    				items.push({
    					LCHRecipeName: "KOMReviewDetailLauncherFakeItemProxy",
    					LCHRecipeCallback: function KOMReviewDetailLauncherFakeItemProxy() {
    						
    					}
    				});
    			}

    			return items;
    		},
    		// INTERFACE
    		InterfaceFormDidUpdate() {
    			// if (!KOMReviewDetailDeck.KOMDeckFrontLanguageCode && KOMReviewDetailDeck.KOMDeckFrontSpeechIsEnabled) {
    			// 	KOMReviewDetailDeck.KOMDeckFrontSpeechIsEnabled = false;
    			// 	delete KOMReviewDetailDeck.KOMDeckFrontSpeechIsEnabled;
    			// }
    			// if (!KOMReviewDetailDeck.KOMDeckRearLanguageCode && KOMReviewDetailDeck.KOMDeckRearSpeechIsEnabled) {
    			// 	KOMReviewDetailDeck.KOMDeckRearSpeechIsEnabled = false;
    			// 	delete KOMReviewDetailDeck.KOMDeckRearSpeechIsEnabled;
    			// }
    			setTimeout(function () {
    				KOMReviewDetailDispatchUpdate(KOMReviewDetailDeck);

    				setTimeout(
    					function () {
    						KOMReviewDetailDispatchRecount();
    					},
    					100
    				);
    			});
    		},
    		InterfaceReviewingButtonDidClick() {
    			mod.ContolPlay(mod$f.KOMReviewSchemeReviewing());
    		},
    		InterfaceUnseenButtonDidClick() {
    			mod.ContolPlay(mod$f.KOMReviewSchemeUnseen());
    		},
    		InterfaceMixedButtonDidClick() {
    			mod.ContolPlay(mod$f.KOMReviewSchemeMixed());
    		},
    		InterfaceRenameButtonDidClick() {
    			mod.ControlRename();
    		},
    		InterfaceWindowDidKeydown(event) {
    			if (document.querySelector(".LCHLauncher")) {
    				// #spec
    				return;
    			}

    			const handlerFunctions = {
    				Escape() {
    					KOMReviewDetailDispatchBack();
    				}
    			};

    			handlerFunctions[event.key] && handlerFunctions[event.key]();
    		},
    		// CONTROL
    		ControlRename() {
    			let outputData = window.prompt(OLSKLocalized("KOMReviewDetailRenameButtonPromptText"), KOMReviewDetailDeck.KOMDeckName);

    			if (!outputData) {
    				return;
    			}

    			if (outputData === KOMReviewDetailDeck.KOMDeckName) {
    				return;
    			}

    			KOMReviewDetailDispatchUpdate(Object.assign(KOMReviewDetailDeck, { KOMDeckName: outputData }));
    		},
    		ContolPlay(inputData) {
    			const outputData = { KOMReviewScheme: inputData };

    			if (inputData !== mod$f.KOMReviewSchemeReviewing()) {
    				outputData.KOMReviewMaxUnseenCards = kMaxUnseenCards;
    			}

    			KOMReviewDetailDispatchPlay(outputData);
    		},
    		// MESSAGES
    		_OLSKAppToolbarDispatchLauncher() {
    			window.Launchlet.LCHSingletonCreate({
    				LCHOptionRecipes: mod.DataReviewDetailRecipes()
    			});
    		},
    		// SETUP
    		SetupEverything() {
    			mod.SetupLanguages();
    		},
    		SetupLanguages() {
    			if (!("speechSynthesis" in window)) {
    				return;
    			}

    			mod.ValueLanguages(speechSynthesis.getVoices());

    			if (mod._ValueLanguages.length) {
    				return;
    			}

    			// dom events - Getting the list of voices in speechSynthesis (Web Speech API) - Stack Overflow https://stackoverflow.com/questions/21513706/getting-the-list-of-voices-in-speechsynthesis-web-speech-api
    			window.speechSynthesis.onvoiceschanged = function () {
    				mod.ValueLanguages(window.speechSynthesis.getVoices());
    			};
    		},
    		// LIFECYCLE
    		LifecycleModuleDidLoad() {
    			mod.SetupEverything();
    		}
    	};

    	mod.LifecycleModuleDidLoad();

    	const writable_props = [
    		"KOMReviewDetailDeck",
    		"KOMReviewDetailDispatchBack",
    		"KOMReviewDetailDispatchBrowse",
    		"KOMReviewDetailDispatchUpdate",
    		"KOMReviewDetailDispatchRecount",
    		"KOMReviewDetailDispatchPlay",
    		"KOMReviewDetailDispatchDiscard",
    		"KOMReviewDetailDispatchExport",
    		"KOMReviewDetail_DebugShowLauncherButton"
    	];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function input0_change_handler() {
    		KOMReviewDetailDeck.KOMDeckAudioIsEnabled = this.checked;
    		$$invalidate(0, KOMReviewDetailDeck);
    	}

    	function input1_change_handler() {
    		KOMReviewDetailDeck.KOMDeckFrontSpeechIsEnabled = this.checked;
    		$$invalidate(0, KOMReviewDetailDeck);
    	}

    	function input2_change_handler() {
    		KOMReviewDetailDeck.KOMDeckRearSpeechIsEnabled = this.checked;
    		$$invalidate(0, KOMReviewDetailDeck);
    	}

    	function input3_change_handler() {
    		KOMReviewDetailDeck.KOMDeckIsForwardOnly = this.checked;
    		$$invalidate(0, KOMReviewDetailDeck);
    	}

    	function select_change_handler() {
    		KOMReviewDetailDeck.KOMDeckRetireCardsMonths = select_value(this);
    		$$invalidate(0, KOMReviewDetailDeck);
    	}

    	const click_handler = () => window.prompt(OLSKLocalized("KOMReviewDetailDiscardPromptText")) === KOMReviewDetailDeck.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingTotal.toString() && KOMReviewDetailDispatchDiscard(KOMReviewDetailDeck);

    	$$self.$$set = $$props => {
    		if ("KOMReviewDetailDeck" in $$props) $$invalidate(0, KOMReviewDetailDeck = $$props.KOMReviewDetailDeck);
    		if ("KOMReviewDetailDispatchBack" in $$props) $$invalidate(1, KOMReviewDetailDispatchBack = $$props.KOMReviewDetailDispatchBack);
    		if ("KOMReviewDetailDispatchBrowse" in $$props) $$invalidate(2, KOMReviewDetailDispatchBrowse = $$props.KOMReviewDetailDispatchBrowse);
    		if ("KOMReviewDetailDispatchUpdate" in $$props) $$invalidate(7, KOMReviewDetailDispatchUpdate = $$props.KOMReviewDetailDispatchUpdate);
    		if ("KOMReviewDetailDispatchRecount" in $$props) $$invalidate(8, KOMReviewDetailDispatchRecount = $$props.KOMReviewDetailDispatchRecount);
    		if ("KOMReviewDetailDispatchPlay" in $$props) $$invalidate(9, KOMReviewDetailDispatchPlay = $$props.KOMReviewDetailDispatchPlay);
    		if ("KOMReviewDetailDispatchDiscard" in $$props) $$invalidate(3, KOMReviewDetailDispatchDiscard = $$props.KOMReviewDetailDispatchDiscard);
    		if ("KOMReviewDetailDispatchExport" in $$props) $$invalidate(10, KOMReviewDetailDispatchExport = $$props.KOMReviewDetailDispatchExport);
    		if ("KOMReviewDetail_DebugShowLauncherButton" in $$props) $$invalidate(4, KOMReviewDetail_DebugShowLauncherButton = $$props.KOMReviewDetail_DebugShowLauncherButton);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewDetailDeck,
    		KOMReviewDetailDispatchBack,
    		KOMReviewDetailDispatchBrowse,
    		KOMReviewDetailDispatchUpdate,
    		KOMReviewDetailDispatchRecount,
    		KOMReviewDetailDispatchPlay,
    		KOMReviewDetailDispatchDiscard,
    		KOMReviewDetailDispatchExport,
    		KOMReviewDetail_DebugShowLauncherButton,
    		modPublic,
    		OLSKInternational,
    		OLSKLocalized,
    		OLSK_TESTING_BEHAVIOUR: main_12,
    		KOMReviewLogic: mod$f,
    		kMaxUnseenCards,
    		mod,
    		_OLSKSharedBack,
    		KOMReviewDetailLanguageCode: Main$9,
    		KOMReviewStats: Main$7
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMReviewDetailDeck" in $$props) $$invalidate(0, KOMReviewDetailDeck = $$props.KOMReviewDetailDeck);
    		if ("KOMReviewDetailDispatchBack" in $$props) $$invalidate(1, KOMReviewDetailDispatchBack = $$props.KOMReviewDetailDispatchBack);
    		if ("KOMReviewDetailDispatchBrowse" in $$props) $$invalidate(2, KOMReviewDetailDispatchBrowse = $$props.KOMReviewDetailDispatchBrowse);
    		if ("KOMReviewDetailDispatchUpdate" in $$props) $$invalidate(7, KOMReviewDetailDispatchUpdate = $$props.KOMReviewDetailDispatchUpdate);
    		if ("KOMReviewDetailDispatchRecount" in $$props) $$invalidate(8, KOMReviewDetailDispatchRecount = $$props.KOMReviewDetailDispatchRecount);
    		if ("KOMReviewDetailDispatchPlay" in $$props) $$invalidate(9, KOMReviewDetailDispatchPlay = $$props.KOMReviewDetailDispatchPlay);
    		if ("KOMReviewDetailDispatchDiscard" in $$props) $$invalidate(3, KOMReviewDetailDispatchDiscard = $$props.KOMReviewDetailDispatchDiscard);
    		if ("KOMReviewDetailDispatchExport" in $$props) $$invalidate(10, KOMReviewDetailDispatchExport = $$props.KOMReviewDetailDispatchExport);
    		if ("KOMReviewDetail_DebugShowLauncherButton" in $$props) $$invalidate(4, KOMReviewDetail_DebugShowLauncherButton = $$props.KOMReviewDetail_DebugShowLauncherButton);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewDetailDeck,
    		KOMReviewDetailDispatchBack,
    		KOMReviewDetailDispatchBrowse,
    		KOMReviewDetailDispatchDiscard,
    		KOMReviewDetail_DebugShowLauncherButton,
    		mod,
    		OLSKLocalized,
    		KOMReviewDetailDispatchUpdate,
    		KOMReviewDetailDispatchRecount,
    		KOMReviewDetailDispatchPlay,
    		KOMReviewDetailDispatchExport,
    		modPublic,
    		input0_change_handler,
    		input1_change_handler,
    		input2_change_handler,
    		input3_change_handler,
    		select_change_handler,
    		click_handler
    	];
    }

    class Main$a extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
    			KOMReviewDetailDeck: 0,
    			KOMReviewDetailDispatchBack: 1,
    			KOMReviewDetailDispatchBrowse: 2,
    			KOMReviewDetailDispatchUpdate: 7,
    			KOMReviewDetailDispatchRecount: 8,
    			KOMReviewDetailDispatchPlay: 9,
    			KOMReviewDetailDispatchDiscard: 3,
    			KOMReviewDetailDispatchExport: 10,
    			KOMReviewDetail_DebugShowLauncherButton: 4,
    			modPublic: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMReviewDetailDeck*/ ctx[0] === undefined && !("KOMReviewDetailDeck" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailDeck'");
    		}

    		if (/*KOMReviewDetailDispatchBack*/ ctx[1] === undefined && !("KOMReviewDetailDispatchBack" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailDispatchBack'");
    		}

    		if (/*KOMReviewDetailDispatchBrowse*/ ctx[2] === undefined && !("KOMReviewDetailDispatchBrowse" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailDispatchBrowse'");
    		}

    		if (/*KOMReviewDetailDispatchUpdate*/ ctx[7] === undefined && !("KOMReviewDetailDispatchUpdate" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailDispatchUpdate'");
    		}

    		if (/*KOMReviewDetailDispatchRecount*/ ctx[8] === undefined && !("KOMReviewDetailDispatchRecount" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailDispatchRecount'");
    		}

    		if (/*KOMReviewDetailDispatchPlay*/ ctx[9] === undefined && !("KOMReviewDetailDispatchPlay" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailDispatchPlay'");
    		}

    		if (/*KOMReviewDetailDispatchDiscard*/ ctx[3] === undefined && !("KOMReviewDetailDispatchDiscard" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailDispatchDiscard'");
    		}

    		if (/*KOMReviewDetailDispatchExport*/ ctx[10] === undefined && !("KOMReviewDetailDispatchExport" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailDispatchExport'");
    		}
    	}

    	get KOMReviewDetailDeck() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailDeck(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailDispatchBack() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailDispatchBack(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailDispatchBrowse() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailDispatchBrowse(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailDispatchUpdate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailDispatchUpdate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailDispatchRecount() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailDispatchRecount(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailDispatchPlay() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailDispatchPlay(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailDispatchDiscard() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailDispatchDiscard(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailDispatchExport() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailDispatchExport(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetail_DebugShowLauncherButton() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetail_DebugShowLauncherButton(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[11];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const mod$i = {

    	KOMBrowseSort(a, b) {
    		if (a.KOMCardModificationDate && b.KOMCardModificationDate) {
    			return b.KOMCardModificationDate - a.KOMCardModificationDate;
    		}

    		return b.KOMCardCreationDate - a.KOMCardCreationDate;
    	},

    	KOMBrowseFilterFunction(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return function (e) {
    			return [e.KOMCardFrontText, e.KOMCardRearText, e.KOMCardNotes].filter(function (e) {
    				return !!e;
    			}).concat(e.KOMCardTags || []).filter(function (e) {
    				return OLSKString.OLSKStringMatch(inputData, e);
    			}).length;
    		};
    	},

    	KOMBrowseExactMatchFirst(param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!Array.isArray(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return param2.slice().sort(function (a, b) {
    			const isExact = function (e) {
    				return [e.KOMCardFrontText, e.KOMCardRearText].filter(function (e) {
    					if (!e) {
    						return;
    					}
    					
    					return OLSKString.OLSKStringMatch(e, param1);
    				}).length;
    			};

    			return isExact(a) > isExact(b) ? -1 : 1;
    		});
    	},

    };

    var uiLogic = createCommonjsModule(function (module, exports) {
    const mod = {

    	KOMBrowseListItemAccessibilitySummary(inputData, OLSKLocalized) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return [
    			inputData.KOMCardFrontText || OLSKLocalized('KOMBrowseListItemUntitledText')
    		].join('\n');
    	},

    };

    Object.assign(exports, mod);
    });

    var _OLSKInputClear = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKInputClear\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <circle id=\"_OLSKInputClear-oval2\" stroke=\"rgb(170, 170, 170)\" stroke-width=\"1.5\" fill=\"rgb(170, 170, 170)\" cx=\"8\" cy=\"8\" r=\"5.5\" />\n    <path id=\"_OLSKInputClear-bezier\" stroke=\"rgb(255, 255, 255)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 6,6 L 10,10\" />\n    <path id=\"_OLSKInputClear-bezier2\" stroke=\"rgb(255, 255, 255)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 6,10 L 10,6\" />\n</svg>\n";

    /* node_modules/OLSKInputWrapper/main.svelte generated by Svelte v3.29.4 */
    const file$b = "node_modules/OLSKInputWrapper/main.svelte";

    // (17:0) {#if OLSKInputWrapperValue}
    function create_if_block$4(ctx) {
    	let button;
    	let div;
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKInputWrapperClearButtonImage");
    			add_location(div, file$b, 18, 2, 850);
    			attr_dev(button, "class", "OLSKInputWrapperClearButton OLSKLayoutElementTappable OLSKLayoutButtonNoStyle OLSKToolbarButton svelte-1koggvb");
    			attr_dev(button, "title", button_title_value = /*OLSKLocalized*/ ctx[2]("OLSKInputWrapperClearButtonText"));
    			add_location(button, file$b, 17, 1, 582);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = _OLSKInputClear;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button, "mousedown", mousedown_handler, false, false, false),
    					listen_dev(
    						button,
    						"click",
    						function () {
    							if (is_function(/*OLSKInputWrapperDispatchClear*/ ctx[1])) /*OLSKInputWrapperDispatchClear*/ ctx[1].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(17:0) {#if OLSKInputWrapperValue}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let div;
    	let t;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
    	let if_block = /*OLSKInputWrapperValue*/ ctx[0] && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "OLSKInputWrapper OLSKToolbarFlexible svelte-1koggvb");
    			add_location(div, file$b, 12, 0, 486);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			append_dev(div, t);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 8) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
    				}
    			}

    			if (/*OLSKInputWrapperValue*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$4(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const mousedown_handler = event => event.preventDefault();

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, ['default']);
    	let { OLSKInputWrapperValue } = $$props;
    	let { OLSKInputWrapperDispatchClear } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const writable_props = ["OLSKInputWrapperValue", "OLSKInputWrapperDispatchClear"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("OLSKInputWrapperValue" in $$props) $$invalidate(0, OLSKInputWrapperValue = $$props.OLSKInputWrapperValue);
    		if ("OLSKInputWrapperDispatchClear" in $$props) $$invalidate(1, OLSKInputWrapperDispatchClear = $$props.OLSKInputWrapperDispatchClear);
    		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		OLSKInputWrapperValue,
    		OLSKInputWrapperDispatchClear,
    		OLSKInternational,
    		OLSKLocalized,
    		_OLSKInputClear
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKInputWrapperValue" in $$props) $$invalidate(0, OLSKInputWrapperValue = $$props.OLSKInputWrapperValue);
    		if ("OLSKInputWrapperDispatchClear" in $$props) $$invalidate(1, OLSKInputWrapperDispatchClear = $$props.OLSKInputWrapperDispatchClear);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		OLSKInputWrapperValue,
    		OLSKInputWrapperDispatchClear,
    		OLSKLocalized,
    		$$scope,
    		slots
    	];
    }

    class Main$b extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			OLSKInputWrapperValue: 0,
    			OLSKInputWrapperDispatchClear: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$b.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKInputWrapperValue*/ ctx[0] === undefined && !("OLSKInputWrapperValue" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKInputWrapperValue'");
    		}

    		if (/*OLSKInputWrapperDispatchClear*/ ctx[1] === undefined && !("OLSKInputWrapperDispatchClear" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKInputWrapperDispatchClear'");
    		}
    	}

    	get OLSKInputWrapperValue() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKInputWrapperValue(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKInputWrapperDispatchClear() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKInputWrapperDispatchClear(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var uiLogic$1 = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKResultsConstrainIndex (param1, param2) {
    		if (!Array.isArray(param1)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (param2 < 0) {
    			return param1.length - 1;
    		}

    		if (param2 >= param1.length) {
    			return 0;
    		}

    		return param2;
    	},

    };

    Object.assign(exports, mod);
    });

    /* node_modules/OLSKResults/main.svelte generated by Svelte v3.29.4 */
    const file$c = "node_modules/OLSKResults/main.svelte";

    const get_OLSKResultsEmpty_slot_changes = dirty => ({
    	OLSKResultsListItem: dirty & /*OLSKResultsListItems*/ 1
    });

    const get_OLSKResultsEmpty_slot_context = ctx => ({ OLSKResultsListItem: /*e*/ ctx[10] });

    const get_default_slot_changes = dirty => ({
    	OLSKResultsListItem: dirty & /*OLSKResultsListItems*/ 1
    });

    const get_default_slot_context = ctx => ({ OLSKResultsListItem: /*e*/ ctx[10] });

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    // (72:0) {:else}
    function create_else_block(ctx) {
    	let div;
    	let current;
    	const OLSKResultsEmpty_slot_template = /*#slots*/ ctx[8].OLSKResultsEmpty;
    	const OLSKResultsEmpty_slot = create_slot(OLSKResultsEmpty_slot_template, ctx, /*$$scope*/ ctx[7], get_OLSKResultsEmpty_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (OLSKResultsEmpty_slot) OLSKResultsEmpty_slot.c();
    			attr_dev(div, "class", "OLSKResultsEmpty");
    			add_location(div, file$c, 72, 1, 1765);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (OLSKResultsEmpty_slot) {
    				OLSKResultsEmpty_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKResultsEmpty_slot) {
    				if (OLSKResultsEmpty_slot.p && dirty & /*$$scope, OLSKResultsListItems*/ 129) {
    					update_slot(OLSKResultsEmpty_slot, OLSKResultsEmpty_slot_template, ctx, /*$$scope*/ ctx[7], dirty, get_OLSKResultsEmpty_slot_changes, get_OLSKResultsEmpty_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKResultsEmpty_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKResultsEmpty_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (OLSKResultsEmpty_slot) OLSKResultsEmpty_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(72:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (64:0) {#if OLSKResultsListItems.length}
    function create_if_block$5(ctx) {
    	let div;
    	let current;
    	let each_value = /*OLSKResultsListItems*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "OLSKResultsList");
    			add_location(div, file$c, 64, 1, 1462);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*OLSKResultsListItems, OLSKResultsListItemSelected, OLSKResultsDispatchClick, $$scope*/ 135) {
    				each_value = /*OLSKResultsListItems*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(64:0) {#if OLSKResultsListItems.length}",
    		ctx
    	});

    	return block;
    }

    // (66:2) {#each OLSKResultsListItems as e}
    function create_each_block$4(ctx) {
    	let div;
    	let t;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context);

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[9](/*e*/ ctx[10], ...args);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			t = space();
    			attr_dev(div, "class", "OLSKResultsListItem svelte-1tcoest");
    			toggle_class(div, "OLSKResultsListItemSelected", /*e*/ ctx[10] === /*OLSKResultsListItemSelected*/ ctx[1]);
    			add_location(div, file$c, 66, 3, 1531);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			append_dev(div, t);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, OLSKResultsListItems*/ 129) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, get_default_slot_changes, get_default_slot_context);
    				}
    			}

    			if (dirty & /*OLSKResultsListItems, OLSKResultsListItemSelected*/ 3) {
    				toggle_class(div, "OLSKResultsListItemSelected", /*e*/ ctx[10] === /*OLSKResultsListItemSelected*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(66:2) {#each OLSKResultsListItems as e}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$5, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*OLSKResultsListItems*/ ctx[0].length) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "OLSKResults");
    			add_location(div, file$c, 61, 0, 1400);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(window, "keydown", /*mod*/ ctx[3].InterfaceWindowDidKeydown, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, ['default','OLSKResultsEmpty']);
    	let { OLSKResultsListItems } = $$props;
    	let { OLSKResultsListItemSelected } = $$props;
    	let { OLSKResultsDispatchArrow } = $$props;
    	let { OLSKResultsDispatchClick } = $$props;
    	let { OLSKResultsEnableLooping = false } = $$props;
    	let { OLSKResultsIgnoreKeyboard = false } = $$props;

    	const mod = {
    		// INTERFACE
    		InterfaceWindowDidKeydown(event) {
    			if (OLSKResultsIgnoreKeyboard) {
    				return;
    			}

    			if (!OLSKResultsListItems.length) {
    				return;
    			}

    			const handlerFunctions = {
    				ArrowUp() {
    					(function () {
    						if (!OLSKResultsEnableLooping && OLSKResultsListItems[0] === OLSKResultsListItemSelected) {
    							return;
    						}

    						mod.ControlArrowIncrement(-1);
    					})();

    					return event.preventDefault();
    				},
    				ArrowDown() {
    					(function () {
    						if (!OLSKResultsEnableLooping && OLSKResultsListItems.slice(-1).pop() === OLSKResultsListItemSelected) {
    							return;
    						}

    						mod.ControlArrowIncrement(1);
    					})();

    					return event.preventDefault();
    				}
    			};

    			handlerFunctions[event.code] && handlerFunctions[event.code]();
    		},
    		// CONTROL
    		ControlArrowIncrement(inputData) {
    			OLSKResultsDispatchArrow(OLSKResultsListItems[uiLogic$1.OLSKResultsConstrainIndex(OLSKResultsListItems, OLSKResultsListItems.indexOf(OLSKResultsListItemSelected) + inputData)]);
    		}
    	};

    	const writable_props = [
    		"OLSKResultsListItems",
    		"OLSKResultsListItemSelected",
    		"OLSKResultsDispatchArrow",
    		"OLSKResultsDispatchClick",
    		"OLSKResultsEnableLooping",
    		"OLSKResultsIgnoreKeyboard"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const click_handler = e => OLSKResultsDispatchClick(e);

    	$$self.$$set = $$props => {
    		if ("OLSKResultsListItems" in $$props) $$invalidate(0, OLSKResultsListItems = $$props.OLSKResultsListItems);
    		if ("OLSKResultsListItemSelected" in $$props) $$invalidate(1, OLSKResultsListItemSelected = $$props.OLSKResultsListItemSelected);
    		if ("OLSKResultsDispatchArrow" in $$props) $$invalidate(4, OLSKResultsDispatchArrow = $$props.OLSKResultsDispatchArrow);
    		if ("OLSKResultsDispatchClick" in $$props) $$invalidate(2, OLSKResultsDispatchClick = $$props.OLSKResultsDispatchClick);
    		if ("OLSKResultsEnableLooping" in $$props) $$invalidate(5, OLSKResultsEnableLooping = $$props.OLSKResultsEnableLooping);
    		if ("OLSKResultsIgnoreKeyboard" in $$props) $$invalidate(6, OLSKResultsIgnoreKeyboard = $$props.OLSKResultsIgnoreKeyboard);
    		if ("$$scope" in $$props) $$invalidate(7, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		OLSKResultsListItems,
    		OLSKResultsListItemSelected,
    		OLSKResultsDispatchArrow,
    		OLSKResultsDispatchClick,
    		OLSKResultsEnableLooping,
    		OLSKResultsIgnoreKeyboard,
    		OLSKResultsLogic: uiLogic$1,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKResultsListItems" in $$props) $$invalidate(0, OLSKResultsListItems = $$props.OLSKResultsListItems);
    		if ("OLSKResultsListItemSelected" in $$props) $$invalidate(1, OLSKResultsListItemSelected = $$props.OLSKResultsListItemSelected);
    		if ("OLSKResultsDispatchArrow" in $$props) $$invalidate(4, OLSKResultsDispatchArrow = $$props.OLSKResultsDispatchArrow);
    		if ("OLSKResultsDispatchClick" in $$props) $$invalidate(2, OLSKResultsDispatchClick = $$props.OLSKResultsDispatchClick);
    		if ("OLSKResultsEnableLooping" in $$props) $$invalidate(5, OLSKResultsEnableLooping = $$props.OLSKResultsEnableLooping);
    		if ("OLSKResultsIgnoreKeyboard" in $$props) $$invalidate(6, OLSKResultsIgnoreKeyboard = $$props.OLSKResultsIgnoreKeyboard);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		OLSKResultsListItems,
    		OLSKResultsListItemSelected,
    		OLSKResultsDispatchClick,
    		mod,
    		OLSKResultsDispatchArrow,
    		OLSKResultsEnableLooping,
    		OLSKResultsIgnoreKeyboard,
    		$$scope,
    		slots,
    		click_handler
    	];
    }

    class Main$c extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
    			OLSKResultsListItems: 0,
    			OLSKResultsListItemSelected: 1,
    			OLSKResultsDispatchArrow: 4,
    			OLSKResultsDispatchClick: 2,
    			OLSKResultsEnableLooping: 5,
    			OLSKResultsIgnoreKeyboard: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$c.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKResultsListItems*/ ctx[0] === undefined && !("OLSKResultsListItems" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKResultsListItems'");
    		}

    		if (/*OLSKResultsListItemSelected*/ ctx[1] === undefined && !("OLSKResultsListItemSelected" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKResultsListItemSelected'");
    		}

    		if (/*OLSKResultsDispatchArrow*/ ctx[4] === undefined && !("OLSKResultsDispatchArrow" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKResultsDispatchArrow'");
    		}

    		if (/*OLSKResultsDispatchClick*/ ctx[2] === undefined && !("OLSKResultsDispatchClick" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKResultsDispatchClick'");
    		}
    	}

    	get OLSKResultsListItems() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKResultsListItems(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKResultsListItemSelected() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKResultsListItemSelected(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKResultsDispatchArrow() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKResultsDispatchArrow(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKResultsDispatchClick() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKResultsDispatchClick(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKResultsEnableLooping() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKResultsEnableLooping(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKResultsIgnoreKeyboard() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKResultsIgnoreKeyboard(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKMasterList/main.svelte generated by Svelte v3.29.4 */
    const file$d = "node_modules/OLSKMasterList/main.svelte";
    const get_OLSKMasterListBodyTail_slot_changes = dirty => ({});
    const get_OLSKMasterListBodyTail_slot_context = ctx => ({ OLSKResultsListItem: /*item*/ ctx[21] });

    const get_default_slot_changes$1 = dirty => ({
    	OLSKResultsListItem: dirty & /*item*/ 2097152
    });

    const get_default_slot_context$1 = ctx => ({ OLSKResultsListItem: /*item*/ ctx[21] });
    const get_OLSKMasterListBodyHead_slot_changes = dirty => ({});
    const get_OLSKMasterListBodyHead_slot_context = ctx => ({ OLSKResultsListItem: /*item*/ ctx[21] });
    const get_OLSKMasterListToolbarTail_slot_changes = dirty => ({});
    const get_OLSKMasterListToolbarTail_slot_context = ctx => ({ OLSKResultsListItem: /*item*/ ctx[21] });
    const get_OLSKMasterListToolbarHead_slot_changes = dirty => ({});
    const get_OLSKMasterListToolbarHead_slot_context = ctx => ({ OLSKResultsListItem: /*item*/ ctx[21] });

    // (120:1) {:else}
    function create_else_block$1(ctx) {
    	let input;
    	let input_class_value;
    	let input_placeholder_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "class", input_class_value = "OLSKMasterListFilterField OLSKMobileSafariRemoveDefaultInputStyle " + /*OLSKMasterListFilterFieldClass*/ ctx[8]);
    			attr_dev(input, "placeholder", input_placeholder_value = /*OLSKMasterListFilterFieldPlaceholderText*/ ctx[9] || /*OLSKLocalized*/ ctx[14]("OLSKMasterListFilterFieldText"));
    			input.autofocus = /*OLSKMasterListFilterFieldAutofocus*/ ctx[11];
    			add_location(input, file$d, 120, 2, 3512);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*OLSKMasterListFilterText*/ ctx[0]);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler_1*/ ctx[18]),
    					listen_dev(
    						input,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[13].InterfaceFilterFieldDidInput)) /*mod*/ ctx[13].InterfaceFilterFieldDidInput.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*OLSKMasterListFilterFieldClass*/ 256 && input_class_value !== (input_class_value = "OLSKMasterListFilterField OLSKMobileSafariRemoveDefaultInputStyle " + /*OLSKMasterListFilterFieldClass*/ ctx[8])) {
    				attr_dev(input, "class", input_class_value);
    			}

    			if (dirty & /*OLSKMasterListFilterFieldPlaceholderText*/ 512 && input_placeholder_value !== (input_placeholder_value = /*OLSKMasterListFilterFieldPlaceholderText*/ ctx[9] || /*OLSKLocalized*/ ctx[14]("OLSKMasterListFilterFieldText"))) {
    				attr_dev(input, "placeholder", input_placeholder_value);
    			}

    			if (dirty & /*OLSKMasterListFilterFieldAutofocus*/ 2048) {
    				prop_dev(input, "autofocus", /*OLSKMasterListFilterFieldAutofocus*/ ctx[11]);
    			}

    			if (dirty & /*OLSKMasterListFilterText*/ 1 && input.value !== /*OLSKMasterListFilterText*/ ctx[0]) {
    				set_input_value(input, /*OLSKMasterListFilterText*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(120:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (116:1) {#if OLSKMasterListFilterFieldClearButton }
    function create_if_block$6(ctx) {
    	let olskinputwrapper;
    	let current;

    	olskinputwrapper = new Main$b({
    			props: {
    				OLSKInputWrapperValue: /*OLSKMasterListFilterFieldClearButton*/ ctx[10]
    				? /*OLSKMasterListFilterText*/ ctx[0]
    				: "",
    				OLSKInputWrapperDispatchClear: /*mod*/ ctx[13].OLSKInputWrapperDispatchClear,
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(olskinputwrapper.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskinputwrapper, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const olskinputwrapper_changes = {};

    			if (dirty & /*OLSKMasterListFilterFieldClearButton, OLSKMasterListFilterText*/ 1025) olskinputwrapper_changes.OLSKInputWrapperValue = /*OLSKMasterListFilterFieldClearButton*/ ctx[10]
    			? /*OLSKMasterListFilterText*/ ctx[0]
    			: "";

    			if (dirty & /*mod*/ 8192) olskinputwrapper_changes.OLSKInputWrapperDispatchClear = /*mod*/ ctx[13].OLSKInputWrapperDispatchClear;

    			if (dirty & /*$$scope, OLSKMasterListFilterFieldClass, OLSKMasterListFilterFieldPlaceholderText, OLSKMasterListFilterFieldAutofocus, OLSKMasterListFilterText, mod*/ 1059585) {
    				olskinputwrapper_changes.$$scope = { dirty, ctx };
    			}

    			olskinputwrapper.$set(olskinputwrapper_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskinputwrapper.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskinputwrapper.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskinputwrapper, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(116:1) {#if OLSKMasterListFilterFieldClearButton }",
    		ctx
    	});

    	return block;
    }

    // (117:2) <OLSKInputWrapper OLSKInputWrapperValue={ OLSKMasterListFilterFieldClearButton ? OLSKMasterListFilterText : '' } OLSKInputWrapperDispatchClear={ mod.OLSKInputWrapperDispatchClear } >
    function create_default_slot_1(ctx) {
    	let input;
    	let input_class_value;
    	let input_placeholder_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "class", input_class_value = "OLSKMasterListFilterField OLSKMobileSafariRemoveDefaultInputStyle " + /*OLSKMasterListFilterFieldClass*/ ctx[8]);
    			attr_dev(input, "placeholder", input_placeholder_value = /*OLSKMasterListFilterFieldPlaceholderText*/ ctx[9] || /*OLSKLocalized*/ ctx[14]("OLSKMasterListFilterFieldText"));
    			input.autofocus = /*OLSKMasterListFilterFieldAutofocus*/ ctx[11];
    			add_location(input, file$d, 117, 3, 3118);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*OLSKMasterListFilterText*/ ctx[0]);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[17]),
    					listen_dev(
    						input,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[13].InterfaceFilterFieldDidInput)) /*mod*/ ctx[13].InterfaceFilterFieldDidInput.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*OLSKMasterListFilterFieldClass*/ 256 && input_class_value !== (input_class_value = "OLSKMasterListFilterField OLSKMobileSafariRemoveDefaultInputStyle " + /*OLSKMasterListFilterFieldClass*/ ctx[8])) {
    				attr_dev(input, "class", input_class_value);
    			}

    			if (dirty & /*OLSKMasterListFilterFieldPlaceholderText*/ 512 && input_placeholder_value !== (input_placeholder_value = /*OLSKMasterListFilterFieldPlaceholderText*/ ctx[9] || /*OLSKLocalized*/ ctx[14]("OLSKMasterListFilterFieldText"))) {
    				attr_dev(input, "placeholder", input_placeholder_value);
    			}

    			if (dirty & /*OLSKMasterListFilterFieldAutofocus*/ 2048) {
    				prop_dev(input, "autofocus", /*OLSKMasterListFilterFieldAutofocus*/ ctx[11]);
    			}

    			if (dirty & /*OLSKMasterListFilterText*/ 1 && input.value !== /*OLSKMasterListFilterText*/ ctx[0]) {
    				set_input_value(input, /*OLSKMasterListFilterText*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(117:2) <OLSKInputWrapper OLSKInputWrapperValue={ OLSKMasterListFilterFieldClearButton ? OLSKMasterListFilterText : '' } OLSKInputWrapperDispatchClear={ mod.OLSKInputWrapperDispatchClear } >",
    		ctx
    	});

    	return block;
    }

    // (130:1) <OLSKResults   OLSKResultsListItems={ OLSKMasterListItems }   OLSKResultsListItemSelected={ OLSKMasterListItemSelected }   OLSKResultsDispatchClick={ OLSKMasterListDispatchClick }   OLSKResultsDispatchArrow={ (inputData) => OLSKMasterListDispatchArrow(inputData) }   let:OLSKResultsListItem={ item }   OLSKResultsIgnoreKeyboard={ !mod.DataIsFocused() }   >
    function create_default_slot(ctx) {
    	let div;
    	let div_class_value;
    	let div_aria_label_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[16].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[20], get_default_slot_context$1);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "OLSKMasterListItem " + /*OLSKMasterItemClass*/ ctx[12]);
    			attr_dev(div, "aria-label", div_aria_label_value = /*OLSKMasterListItemAccessibilitySummaryFor*/ ctx[3](/*item*/ ctx[21]));
    			attr_dev(div, "role", "button");
    			add_location(div, file$d, 137, 2, 4403);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, item*/ 3145728) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[20], dirty, get_default_slot_changes$1, get_default_slot_context$1);
    				}
    			}

    			if (!current || dirty & /*OLSKMasterItemClass*/ 4096 && div_class_value !== (div_class_value = "OLSKMasterListItem " + /*OLSKMasterItemClass*/ ctx[12])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*OLSKMasterListItemAccessibilitySummaryFor, item*/ 2097160 && div_aria_label_value !== (div_aria_label_value = /*OLSKMasterListItemAccessibilitySummaryFor*/ ctx[3](/*item*/ ctx[21]))) {
    				attr_dev(div, "aria-label", div_aria_label_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(130:1) <OLSKResults   OLSKResultsListItems={ OLSKMasterListItems }   OLSKResultsListItemSelected={ OLSKMasterListItemSelected }   OLSKResultsDispatchClick={ OLSKMasterListDispatchClick }   OLSKResultsDispatchArrow={ (inputData) => OLSKMasterListDispatchArrow(inputData) }   let:OLSKResultsListItem={ item }   OLSKResultsIgnoreKeyboard={ !mod.DataIsFocused() }   >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let div;
    	let header;
    	let t0;
    	let current_block_type_index;
    	let if_block;
    	let t1;
    	let t2;
    	let section;
    	let t3;
    	let olskresults;
    	let t4;
    	let div_class_value;
    	let div_aria_hidden_value;
    	let current;
    	const OLSKMasterListToolbarHead_slot_template = /*#slots*/ ctx[16].OLSKMasterListToolbarHead;
    	const OLSKMasterListToolbarHead_slot = create_slot(OLSKMasterListToolbarHead_slot_template, ctx, /*$$scope*/ ctx[20], get_OLSKMasterListToolbarHead_slot_context);
    	const if_block_creators = [create_if_block$6, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*OLSKMasterListFilterFieldClearButton*/ ctx[10]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	const OLSKMasterListToolbarTail_slot_template = /*#slots*/ ctx[16].OLSKMasterListToolbarTail;
    	const OLSKMasterListToolbarTail_slot = create_slot(OLSKMasterListToolbarTail_slot_template, ctx, /*$$scope*/ ctx[20], get_OLSKMasterListToolbarTail_slot_context);
    	const OLSKMasterListBodyHead_slot_template = /*#slots*/ ctx[16].OLSKMasterListBodyHead;
    	const OLSKMasterListBodyHead_slot = create_slot(OLSKMasterListBodyHead_slot_template, ctx, /*$$scope*/ ctx[20], get_OLSKMasterListBodyHead_slot_context);

    	olskresults = new Main$c({
    			props: {
    				OLSKResultsListItems: /*OLSKMasterListItems*/ ctx[1],
    				OLSKResultsListItemSelected: /*OLSKMasterListItemSelected*/ ctx[2],
    				OLSKResultsDispatchClick: /*OLSKMasterListDispatchClick*/ ctx[4],
    				OLSKResultsDispatchArrow: /*func*/ ctx[19],
    				OLSKResultsIgnoreKeyboard: !/*mod*/ ctx[13].DataIsFocused(),
    				$$slots: {
    					default: [
    						create_default_slot,
    						({ OLSKResultsListItem: item }) => ({ 21: item }),
    						({ OLSKResultsListItem: item }) => item ? 2097152 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const OLSKMasterListBodyTail_slot_template = /*#slots*/ ctx[16].OLSKMasterListBodyTail;
    	const OLSKMasterListBodyTail_slot = create_slot(OLSKMasterListBodyTail_slot_template, ctx, /*$$scope*/ ctx[20], get_OLSKMasterListBodyTail_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			header = element("header");
    			if (OLSKMasterListToolbarHead_slot) OLSKMasterListToolbarHead_slot.c();
    			t0 = space();
    			if_block.c();
    			t1 = space();
    			if (OLSKMasterListToolbarTail_slot) OLSKMasterListToolbarTail_slot.c();
    			t2 = space();
    			section = element("section");
    			if (OLSKMasterListBodyHead_slot) OLSKMasterListBodyHead_slot.c();
    			t3 = space();
    			create_component(olskresults.$$.fragment);
    			t4 = space();
    			if (OLSKMasterListBodyTail_slot) OLSKMasterListBodyTail_slot.c();
    			attr_dev(header, "class", "OLSKMasterListToolbar OLSKMobileViewHeader OLSKToolbar");
    			add_location(header, file$d, 112, 0, 2763);
    			attr_dev(section, "class", "OLSKMasterListBody OLSKMobileViewBody");
    			add_location(section, file$d, 126, 0, 3941);
    			attr_dev(div, "class", div_class_value = "OLSKMasterList OLSKViewportMaster " + /*OLSKMasterListClass*/ ctx[7]);
    			attr_dev(div, "aria-hidden", div_aria_hidden_value = /*OLSKMobileViewInactive*/ ctx[6] ? true : null);
    			toggle_class(div, "OLSKMobileViewInactive", /*OLSKMobileViewInactive*/ ctx[6]);
    			toggle_class(div, "OLSKMasterListFocused", /*mod*/ ctx[13]._ValueFilterFieldFocused);
    			add_location(div, file$d, 110, 0, 2520);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, header);

    			if (OLSKMasterListToolbarHead_slot) {
    				OLSKMasterListToolbarHead_slot.m(header, null);
    			}

    			append_dev(header, t0);
    			if_blocks[current_block_type_index].m(header, null);
    			append_dev(header, t1);

    			if (OLSKMasterListToolbarTail_slot) {
    				OLSKMasterListToolbarTail_slot.m(header, null);
    			}

    			append_dev(div, t2);
    			append_dev(div, section);

    			if (OLSKMasterListBodyHead_slot) {
    				OLSKMasterListBodyHead_slot.m(section, null);
    			}

    			append_dev(section, t3);
    			mount_component(olskresults, section, null);
    			append_dev(section, t4);

    			if (OLSKMasterListBodyTail_slot) {
    				OLSKMasterListBodyTail_slot.m(section, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (OLSKMasterListToolbarHead_slot) {
    				if (OLSKMasterListToolbarHead_slot.p && dirty & /*$$scope*/ 1048576) {
    					update_slot(OLSKMasterListToolbarHead_slot, OLSKMasterListToolbarHead_slot_template, ctx, /*$$scope*/ ctx[20], dirty, get_OLSKMasterListToolbarHead_slot_changes, get_OLSKMasterListToolbarHead_slot_context);
    				}
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(header, t1);
    			}

    			if (OLSKMasterListToolbarTail_slot) {
    				if (OLSKMasterListToolbarTail_slot.p && dirty & /*$$scope*/ 1048576) {
    					update_slot(OLSKMasterListToolbarTail_slot, OLSKMasterListToolbarTail_slot_template, ctx, /*$$scope*/ ctx[20], dirty, get_OLSKMasterListToolbarTail_slot_changes, get_OLSKMasterListToolbarTail_slot_context);
    				}
    			}

    			if (OLSKMasterListBodyHead_slot) {
    				if (OLSKMasterListBodyHead_slot.p && dirty & /*$$scope*/ 1048576) {
    					update_slot(OLSKMasterListBodyHead_slot, OLSKMasterListBodyHead_slot_template, ctx, /*$$scope*/ ctx[20], dirty, get_OLSKMasterListBodyHead_slot_changes, get_OLSKMasterListBodyHead_slot_context);
    				}
    			}

    			const olskresults_changes = {};
    			if (dirty & /*OLSKMasterListItems*/ 2) olskresults_changes.OLSKResultsListItems = /*OLSKMasterListItems*/ ctx[1];
    			if (dirty & /*OLSKMasterListItemSelected*/ 4) olskresults_changes.OLSKResultsListItemSelected = /*OLSKMasterListItemSelected*/ ctx[2];
    			if (dirty & /*OLSKMasterListDispatchClick*/ 16) olskresults_changes.OLSKResultsDispatchClick = /*OLSKMasterListDispatchClick*/ ctx[4];
    			if (dirty & /*OLSKMasterListDispatchArrow*/ 32) olskresults_changes.OLSKResultsDispatchArrow = /*func*/ ctx[19];
    			if (dirty & /*mod*/ 8192) olskresults_changes.OLSKResultsIgnoreKeyboard = !/*mod*/ ctx[13].DataIsFocused();

    			if (dirty & /*$$scope, OLSKMasterItemClass, OLSKMasterListItemAccessibilitySummaryFor, item*/ 3149832) {
    				olskresults_changes.$$scope = { dirty, ctx };
    			}

    			olskresults.$set(olskresults_changes);

    			if (OLSKMasterListBodyTail_slot) {
    				if (OLSKMasterListBodyTail_slot.p && dirty & /*$$scope*/ 1048576) {
    					update_slot(OLSKMasterListBodyTail_slot, OLSKMasterListBodyTail_slot_template, ctx, /*$$scope*/ ctx[20], dirty, get_OLSKMasterListBodyTail_slot_changes, get_OLSKMasterListBodyTail_slot_context);
    				}
    			}

    			if (!current || dirty & /*OLSKMasterListClass*/ 128 && div_class_value !== (div_class_value = "OLSKMasterList OLSKViewportMaster " + /*OLSKMasterListClass*/ ctx[7])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*OLSKMobileViewInactive*/ 64 && div_aria_hidden_value !== (div_aria_hidden_value = /*OLSKMobileViewInactive*/ ctx[6] ? true : null)) {
    				attr_dev(div, "aria-hidden", div_aria_hidden_value);
    			}

    			if (dirty & /*OLSKMasterListClass, OLSKMobileViewInactive*/ 192) {
    				toggle_class(div, "OLSKMobileViewInactive", /*OLSKMobileViewInactive*/ ctx[6]);
    			}

    			if (dirty & /*OLSKMasterListClass, mod*/ 8320) {
    				toggle_class(div, "OLSKMasterListFocused", /*mod*/ ctx[13]._ValueFilterFieldFocused);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKMasterListToolbarHead_slot, local);
    			transition_in(if_block);
    			transition_in(OLSKMasterListToolbarTail_slot, local);
    			transition_in(OLSKMasterListBodyHead_slot, local);
    			transition_in(olskresults.$$.fragment, local);
    			transition_in(OLSKMasterListBodyTail_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKMasterListToolbarHead_slot, local);
    			transition_out(if_block);
    			transition_out(OLSKMasterListToolbarTail_slot, local);
    			transition_out(OLSKMasterListBodyHead_slot, local);
    			transition_out(olskresults.$$.fragment, local);
    			transition_out(OLSKMasterListBodyTail_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (OLSKMasterListToolbarHead_slot) OLSKMasterListToolbarHead_slot.d(detaching);
    			if_blocks[current_block_type_index].d();
    			if (OLSKMasterListToolbarTail_slot) OLSKMasterListToolbarTail_slot.d(detaching);
    			if (OLSKMasterListBodyHead_slot) OLSKMasterListBodyHead_slot.d(detaching);
    			destroy_component(olskresults);
    			if (OLSKMasterListBodyTail_slot) OLSKMasterListBodyTail_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;

    	validate_slots("Main", slots, [
    		'OLSKMasterListToolbarHead','OLSKMasterListToolbarTail','OLSKMasterListBodyHead','default','OLSKMasterListBodyTail'
    	]);

    	let { OLSKMasterListFilterText } = $$props;
    	let { OLSKMasterListItems } = $$props;
    	let { OLSKMasterListItemSelected = null } = $$props;
    	let { OLSKMasterListItemAccessibilitySummaryFor } = $$props;
    	let { OLSKMasterListDispatchClick } = $$props;
    	let { OLSKMasterListDispatchArrow } = $$props;
    	let { OLSKMasterListDispatchFilter } = $$props;
    	let { OLSKMobileViewInactive = false } = $$props;
    	let { OLSKMasterListClass = "" } = $$props;
    	let { OLSKMasterListFilterFieldClass = "" } = $$props;
    	let { OLSKMasterListFilterFieldPlaceholderText = "" } = $$props;
    	let { OLSKMasterListFilterFieldClearButton = true } = $$props;
    	let { OLSKMasterListFilterFieldAutofocus = false } = $$props;
    	let { OLSKMasterItemClass = "" } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const mod = {
    		// VALUE
    		_ValueFilterFieldFocused: false,
    		// DATA
    		DataIsFocused() {
    			return document.activeElement === document.querySelector(".OLSKMasterListFilterField");
    		},
    		DataIsMobile() {
    			return window.innerWidth <= 760;
    		},
    		// INTERFACE
    		InterfaceFilterFieldDidInput(event) {
    			OLSKMasterListDispatchFilter(this.value);
    		},
    		// MESSAGE
    		OLSKInputWrapperDispatchClear() {
    			OLSKMasterListDispatchFilter("");
    		},
    		// SETUP
    		SetupEverything() {
    			mod.SetupFilterFieldEventListeners();
    		},
    		SetupFilterFieldEventListeners() {
    			document.querySelector(".OLSKMasterListFilterField").addEventListener("focus", function () {
    				$$invalidate(13, mod._ValueFilterFieldFocused = true, mod);
    			});

    			document.querySelector(".OLSKMasterListFilterField").addEventListener("blur", function () {
    				$$invalidate(13, mod._ValueFilterFieldFocused = false, mod);
    			});
    		},
    		// LIFECYCLE
    		LifecycleComponentDidMount() {
    			mod.SetupEverything();
    		},
    		LifecycleComponentDidUpdate() {
    			if (main_12()) {
    				return;
    			}

    			if (mod.DataIsMobile()) {
    				return;
    			}

    			const element = document.querySelector(".OLSKResultsListItemSelected");

    			if (!element) {
    				return;
    			}

    			element.scrollIntoView({ block: "nearest", inline: "nearest" });
    		}
    	};

    	onMount(mod.LifecycleComponentDidMount);
    	afterUpdate(mod.LifecycleComponentDidUpdate);

    	const writable_props = [
    		"OLSKMasterListFilterText",
    		"OLSKMasterListItems",
    		"OLSKMasterListItemSelected",
    		"OLSKMasterListItemAccessibilitySummaryFor",
    		"OLSKMasterListDispatchClick",
    		"OLSKMasterListDispatchArrow",
    		"OLSKMasterListDispatchFilter",
    		"OLSKMobileViewInactive",
    		"OLSKMasterListClass",
    		"OLSKMasterListFilterFieldClass",
    		"OLSKMasterListFilterFieldPlaceholderText",
    		"OLSKMasterListFilterFieldClearButton",
    		"OLSKMasterListFilterFieldAutofocus",
    		"OLSKMasterItemClass"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		OLSKMasterListFilterText = this.value;
    		$$invalidate(0, OLSKMasterListFilterText);
    	}

    	function input_input_handler_1() {
    		OLSKMasterListFilterText = this.value;
    		$$invalidate(0, OLSKMasterListFilterText);
    	}

    	const func = inputData => OLSKMasterListDispatchArrow(inputData);

    	$$self.$$set = $$props => {
    		if ("OLSKMasterListFilterText" in $$props) $$invalidate(0, OLSKMasterListFilterText = $$props.OLSKMasterListFilterText);
    		if ("OLSKMasterListItems" in $$props) $$invalidate(1, OLSKMasterListItems = $$props.OLSKMasterListItems);
    		if ("OLSKMasterListItemSelected" in $$props) $$invalidate(2, OLSKMasterListItemSelected = $$props.OLSKMasterListItemSelected);
    		if ("OLSKMasterListItemAccessibilitySummaryFor" in $$props) $$invalidate(3, OLSKMasterListItemAccessibilitySummaryFor = $$props.OLSKMasterListItemAccessibilitySummaryFor);
    		if ("OLSKMasterListDispatchClick" in $$props) $$invalidate(4, OLSKMasterListDispatchClick = $$props.OLSKMasterListDispatchClick);
    		if ("OLSKMasterListDispatchArrow" in $$props) $$invalidate(5, OLSKMasterListDispatchArrow = $$props.OLSKMasterListDispatchArrow);
    		if ("OLSKMasterListDispatchFilter" in $$props) $$invalidate(15, OLSKMasterListDispatchFilter = $$props.OLSKMasterListDispatchFilter);
    		if ("OLSKMobileViewInactive" in $$props) $$invalidate(6, OLSKMobileViewInactive = $$props.OLSKMobileViewInactive);
    		if ("OLSKMasterListClass" in $$props) $$invalidate(7, OLSKMasterListClass = $$props.OLSKMasterListClass);
    		if ("OLSKMasterListFilterFieldClass" in $$props) $$invalidate(8, OLSKMasterListFilterFieldClass = $$props.OLSKMasterListFilterFieldClass);
    		if ("OLSKMasterListFilterFieldPlaceholderText" in $$props) $$invalidate(9, OLSKMasterListFilterFieldPlaceholderText = $$props.OLSKMasterListFilterFieldPlaceholderText);
    		if ("OLSKMasterListFilterFieldClearButton" in $$props) $$invalidate(10, OLSKMasterListFilterFieldClearButton = $$props.OLSKMasterListFilterFieldClearButton);
    		if ("OLSKMasterListFilterFieldAutofocus" in $$props) $$invalidate(11, OLSKMasterListFilterFieldAutofocus = $$props.OLSKMasterListFilterFieldAutofocus);
    		if ("OLSKMasterItemClass" in $$props) $$invalidate(12, OLSKMasterItemClass = $$props.OLSKMasterItemClass);
    		if ("$$scope" in $$props) $$invalidate(20, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		OLSKMasterListFilterText,
    		OLSKMasterListItems,
    		OLSKMasterListItemSelected,
    		OLSKMasterListItemAccessibilitySummaryFor,
    		OLSKMasterListDispatchClick,
    		OLSKMasterListDispatchArrow,
    		OLSKMasterListDispatchFilter,
    		OLSKMobileViewInactive,
    		OLSKMasterListClass,
    		OLSKMasterListFilterFieldClass,
    		OLSKMasterListFilterFieldPlaceholderText,
    		OLSKMasterListFilterFieldClearButton,
    		OLSKMasterListFilterFieldAutofocus,
    		OLSKMasterItemClass,
    		OLSKInternational,
    		OLSKLocalized,
    		OLSK_TESTING_BEHAVIOUR: main_12,
    		mod,
    		onMount,
    		afterUpdate,
    		OLSKInputWrapper: Main$b,
    		OLSKResults: Main$c
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKMasterListFilterText" in $$props) $$invalidate(0, OLSKMasterListFilterText = $$props.OLSKMasterListFilterText);
    		if ("OLSKMasterListItems" in $$props) $$invalidate(1, OLSKMasterListItems = $$props.OLSKMasterListItems);
    		if ("OLSKMasterListItemSelected" in $$props) $$invalidate(2, OLSKMasterListItemSelected = $$props.OLSKMasterListItemSelected);
    		if ("OLSKMasterListItemAccessibilitySummaryFor" in $$props) $$invalidate(3, OLSKMasterListItemAccessibilitySummaryFor = $$props.OLSKMasterListItemAccessibilitySummaryFor);
    		if ("OLSKMasterListDispatchClick" in $$props) $$invalidate(4, OLSKMasterListDispatchClick = $$props.OLSKMasterListDispatchClick);
    		if ("OLSKMasterListDispatchArrow" in $$props) $$invalidate(5, OLSKMasterListDispatchArrow = $$props.OLSKMasterListDispatchArrow);
    		if ("OLSKMasterListDispatchFilter" in $$props) $$invalidate(15, OLSKMasterListDispatchFilter = $$props.OLSKMasterListDispatchFilter);
    		if ("OLSKMobileViewInactive" in $$props) $$invalidate(6, OLSKMobileViewInactive = $$props.OLSKMobileViewInactive);
    		if ("OLSKMasterListClass" in $$props) $$invalidate(7, OLSKMasterListClass = $$props.OLSKMasterListClass);
    		if ("OLSKMasterListFilterFieldClass" in $$props) $$invalidate(8, OLSKMasterListFilterFieldClass = $$props.OLSKMasterListFilterFieldClass);
    		if ("OLSKMasterListFilterFieldPlaceholderText" in $$props) $$invalidate(9, OLSKMasterListFilterFieldPlaceholderText = $$props.OLSKMasterListFilterFieldPlaceholderText);
    		if ("OLSKMasterListFilterFieldClearButton" in $$props) $$invalidate(10, OLSKMasterListFilterFieldClearButton = $$props.OLSKMasterListFilterFieldClearButton);
    		if ("OLSKMasterListFilterFieldAutofocus" in $$props) $$invalidate(11, OLSKMasterListFilterFieldAutofocus = $$props.OLSKMasterListFilterFieldAutofocus);
    		if ("OLSKMasterItemClass" in $$props) $$invalidate(12, OLSKMasterItemClass = $$props.OLSKMasterItemClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		OLSKMasterListFilterText,
    		OLSKMasterListItems,
    		OLSKMasterListItemSelected,
    		OLSKMasterListItemAccessibilitySummaryFor,
    		OLSKMasterListDispatchClick,
    		OLSKMasterListDispatchArrow,
    		OLSKMobileViewInactive,
    		OLSKMasterListClass,
    		OLSKMasterListFilterFieldClass,
    		OLSKMasterListFilterFieldPlaceholderText,
    		OLSKMasterListFilterFieldClearButton,
    		OLSKMasterListFilterFieldAutofocus,
    		OLSKMasterItemClass,
    		mod,
    		OLSKLocalized,
    		OLSKMasterListDispatchFilter,
    		slots,
    		input_input_handler,
    		input_input_handler_1,
    		func,
    		$$scope
    	];
    }

    class Main$d extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {
    			OLSKMasterListFilterText: 0,
    			OLSKMasterListItems: 1,
    			OLSKMasterListItemSelected: 2,
    			OLSKMasterListItemAccessibilitySummaryFor: 3,
    			OLSKMasterListDispatchClick: 4,
    			OLSKMasterListDispatchArrow: 5,
    			OLSKMasterListDispatchFilter: 15,
    			OLSKMobileViewInactive: 6,
    			OLSKMasterListClass: 7,
    			OLSKMasterListFilterFieldClass: 8,
    			OLSKMasterListFilterFieldPlaceholderText: 9,
    			OLSKMasterListFilterFieldClearButton: 10,
    			OLSKMasterListFilterFieldAutofocus: 11,
    			OLSKMasterItemClass: 12
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$d.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKMasterListFilterText*/ ctx[0] === undefined && !("OLSKMasterListFilterText" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKMasterListFilterText'");
    		}

    		if (/*OLSKMasterListItems*/ ctx[1] === undefined && !("OLSKMasterListItems" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKMasterListItems'");
    		}

    		if (/*OLSKMasterListItemAccessibilitySummaryFor*/ ctx[3] === undefined && !("OLSKMasterListItemAccessibilitySummaryFor" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKMasterListItemAccessibilitySummaryFor'");
    		}

    		if (/*OLSKMasterListDispatchClick*/ ctx[4] === undefined && !("OLSKMasterListDispatchClick" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKMasterListDispatchClick'");
    		}

    		if (/*OLSKMasterListDispatchArrow*/ ctx[5] === undefined && !("OLSKMasterListDispatchArrow" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKMasterListDispatchArrow'");
    		}

    		if (/*OLSKMasterListDispatchFilter*/ ctx[15] === undefined && !("OLSKMasterListDispatchFilter" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKMasterListDispatchFilter'");
    		}
    	}

    	get OLSKMasterListFilterText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMasterListFilterText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMasterListItems() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMasterListItems(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMasterListItemSelected() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMasterListItemSelected(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMasterListItemAccessibilitySummaryFor() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMasterListItemAccessibilitySummaryFor(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMasterListDispatchClick() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMasterListDispatchClick(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMasterListDispatchArrow() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMasterListDispatchArrow(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMasterListDispatchFilter() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMasterListDispatchFilter(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMobileViewInactive() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMobileViewInactive(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMasterListClass() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMasterListClass(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMasterListFilterFieldClass() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMasterListFilterFieldClass(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMasterListFilterFieldPlaceholderText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMasterListFilterFieldPlaceholderText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMasterListFilterFieldClearButton() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMasterListFilterFieldClearButton(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMasterListFilterFieldAutofocus() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMasterListFilterFieldAutofocus(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMasterItemClass() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMasterItemClass(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var _OLSKSharedCreate = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedCreate\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedCreate-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,1 L 8,15\" />\n    <path id=\"_OLSKSharedCreate-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1,8 L 15,8\" />\n</svg>\n";

    /* os-app/sub-browse/submodules/KOMBrowseListItem/main.svelte generated by Svelte v3.29.4 */
    const file$e = "os-app/sub-browse/submodules/KOMBrowseListItem/main.svelte";

    // (12:0) {#if KOMBrowseListItemObject.KOMCardIsRetired }
    function create_if_block$7(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = `${/*OLSKLocalized*/ ctx[1]("KOMBrowseListItemRetiredText")}`;
    			attr_dev(span, "class", "KOMBrowseListItemRetired");
    			add_location(span, file$e, 12, 1, 460);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(12:0) {#if KOMBrowseListItemObject.KOMCardIsRetired }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let div;
    	let t0;
    	let strong;
    	let t1_value = /*KOMBrowseListItemObject*/ ctx[0].KOMCardFrontText + "";
    	let t1;
    	let br0;
    	let t2;
    	let span0;
    	let t3_value = /*KOMBrowseListItemObject*/ ctx[0].KOMCardRearText + "";
    	let t3;
    	let br1;
    	let t4;
    	let span1;
    	let t5_value = (/*KOMBrowseListItemObject*/ ctx[0].KOMCardTags || []).join(", ") + "";
    	let t5;
    	let if_block = /*KOMBrowseListItemObject*/ ctx[0].KOMCardIsRetired && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			t0 = space();
    			strong = element("strong");
    			t1 = text(t1_value);
    			br0 = element("br");
    			t2 = space();
    			span0 = element("span");
    			t3 = text(t3_value);
    			br1 = element("br");
    			t4 = space();
    			span1 = element("span");
    			t5 = text(t5_value);
    			attr_dev(strong, "class", "KOMBrowseListItemFront svelte-d9jk62");
    			attr_dev(strong, "aria-hidden", "true");
    			add_location(strong, file$e, 15, 0, 563);
    			add_location(br0, file$e, 15, 111, 674);
    			attr_dev(span0, "class", "KOMBrowseListItemRear");
    			attr_dev(span0, "aria-hidden", "true");
    			add_location(span0, file$e, 16, 0, 679);
    			add_location(br1, file$e, 16, 105, 784);
    			attr_dev(span1, "class", "KOMBrowseListItemTags svelte-d9jk62");
    			attr_dev(span1, "aria-hidden", "true");
    			add_location(span1, file$e, 17, 0, 789);
    			attr_dev(div, "class", "KOMBrowseListItem svelte-d9jk62");
    			add_location(div, file$e, 9, 0, 378);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t0);
    			append_dev(div, strong);
    			append_dev(strong, t1);
    			append_dev(div, br0);
    			append_dev(div, t2);
    			append_dev(div, span0);
    			append_dev(span0, t3);
    			append_dev(div, br1);
    			append_dev(div, t4);
    			append_dev(div, span1);
    			append_dev(span1, t5);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*KOMBrowseListItemObject*/ ctx[0].KOMCardIsRetired) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$7(ctx);
    					if_block.c();
    					if_block.m(div, t0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*KOMBrowseListItemObject*/ 1 && t1_value !== (t1_value = /*KOMBrowseListItemObject*/ ctx[0].KOMCardFrontText + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*KOMBrowseListItemObject*/ 1 && t3_value !== (t3_value = /*KOMBrowseListItemObject*/ ctx[0].KOMCardRearText + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*KOMBrowseListItemObject*/ 1 && t5_value !== (t5_value = (/*KOMBrowseListItemObject*/ ctx[0].KOMCardTags || []).join(", ") + "")) set_data_dev(t5, t5_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMBrowseListItemObject } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const writable_props = ["KOMBrowseListItemObject"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("KOMBrowseListItemObject" in $$props) $$invalidate(0, KOMBrowseListItemObject = $$props.KOMBrowseListItemObject);
    	};

    	$$self.$capture_state = () => ({
    		KOMBrowseListItemObject,
    		OLSKInternational,
    		OLSKLocalized
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMBrowseListItemObject" in $$props) $$invalidate(0, KOMBrowseListItemObject = $$props.KOMBrowseListItemObject);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [KOMBrowseListItemObject, OLSKLocalized];
    }

    class Main$e extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { KOMBrowseListItemObject: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$e.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMBrowseListItemObject*/ ctx[0] === undefined && !("KOMBrowseListItemObject" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseListItemObject'");
    		}
    	}

    	get KOMBrowseListItemObject() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseListItemObject(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/sub-browse/submodules/KOMBrowseList/main.svelte generated by Svelte v3.29.4 */
    const file$f = "os-app/sub-browse/submodules/KOMBrowseList/main.svelte";

    // (49:1) <div slot="OLSKMasterListToolbarHead">
    function create_OLSKMasterListToolbarHead_slot(ctx) {
    	let div0;
    	let div2;
    	let button;
    	let div1;
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div2 = element("div");
    			button = element("button");
    			div1 = element("div");
    			attr_dev(div1, "class", "KOMBrowseListToolbarCloseButtonImage");
    			add_location(div1, file$f, 51, 4, 2141);
    			attr_dev(button, "class", "KOMBrowseListToolbarCloseButton OLSKLayoutButtonNoStyle OLSKLayoutElementTappable OLSKToolbarButton");
    			attr_dev(button, "title", button_title_value = /*OLSKLocalized*/ ctx[8]("KOMBrowseListToolbarCloseButtonText"));
    			add_location(button, file$f, 50, 3, 1917);
    			attr_dev(div2, "class", "OLSKToolbarElementGroup");
    			add_location(div2, file$f, 49, 2, 1876);
    			attr_dev(div0, "slot", "OLSKMasterListToolbarHead");
    			add_location(div0, file$f, 48, 1, 1835);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, div2);
    			append_dev(div2, button);
    			append_dev(button, div1);
    			div1.innerHTML = _OLSKSharedBack;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*KOMBrowseListDispatchClose*/ ctx[3])) /*KOMBrowseListDispatchClose*/ ctx[3].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKMasterListToolbarHead_slot.name,
    		type: "slot",
    		source: "(49:1) <div slot=\\\"OLSKMasterListToolbarHead\\\">",
    		ctx
    	});

    	return block;
    }

    // (57:1) <div slot="OLSKMasterListToolbarTail">
    function create_OLSKMasterListToolbarTail_slot(ctx) {
    	let div0;
    	let div2;
    	let button;
    	let div1;
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div2 = element("div");
    			button = element("button");
    			div1 = element("div");
    			attr_dev(div1, "class", "KOMBrowseListToolbarCreateButtonImage");
    			add_location(div1, file$f, 59, 4, 2583);
    			attr_dev(button, "class", "KOMBrowseListToolbarCreateButton OLSKLayoutButtonNoStyle OLSKLayoutElementTappable OLSKToolbarButton svelte-qhgd8y");
    			attr_dev(button, "title", button_title_value = /*OLSKLocalized*/ ctx[8]("KOMBrowseListToolbarCreateButtonText"));
    			attr_dev(button, "accesskey", "n");
    			add_location(button, file$f, 58, 3, 2336);
    			attr_dev(div2, "class", "OLSKToolbarElementGroup");
    			add_location(div2, file$f, 57, 2, 2295);
    			attr_dev(div0, "slot", "OLSKMasterListToolbarTail");
    			add_location(div0, file$f, 56, 1, 2254);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, div2);
    			append_dev(div2, button);
    			append_dev(button, div1);
    			div1.innerHTML = _OLSKSharedCreate;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*mod*/ ctx[9].InterfaceCreateButtonDidClick, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKMasterListToolbarTail_slot.name,
    		type: "slot",
    		source: "(57:1) <div slot=\\\"OLSKMasterListToolbarTail\\\">",
    		ctx
    	});

    	return block;
    }

    // (37:0) <OLSKMasterList  OLSKMasterListItems={ KOMBrowseListItems }  OLSKMasterListItemSelected={ KOMBrowseListItemSelected }  OLSKMasterListFilterText={ KOMBrowseListFilterText }  OLSKMasterListDispatchClick={ KOMBrowseListDispatchClick }  OLSKMasterListDispatchArrow={ KOMBrowseListDispatchArrow }  OLSKMasterListDispatchFilter={ KOMBrowseListDispatchFilter }  let:OLSKResultsListItem={ item }  OLSKMasterListItemAccessibilitySummaryFor={ (inputData) => KOMBrowseListLogic.KOMBrowseListItemAccessibilitySummary(inputData, OLSKLocalized) }   OLSKMasterListClass={ 'KOMBrowseList' }  OLSKMobileViewInactive={ OLSKMobileViewInactive }  >
    function create_default_slot$1(ctx) {
    	let t0;
    	let t1;
    	let kombrowselistitem;
    	let current;

    	kombrowselistitem = new Main$e({
    			props: {
    				KOMBrowseListItemObject: /*item*/ ctx[12]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			t0 = space();
    			t1 = space();
    			create_component(kombrowselistitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(kombrowselistitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const kombrowselistitem_changes = {};
    			if (dirty & /*item*/ 4096) kombrowselistitem_changes.KOMBrowseListItemObject = /*item*/ ctx[12];
    			kombrowselistitem.$set(kombrowselistitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kombrowselistitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kombrowselistitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			destroy_component(kombrowselistitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(37:0) <OLSKMasterList  OLSKMasterListItems={ KOMBrowseListItems }  OLSKMasterListItemSelected={ KOMBrowseListItemSelected }  OLSKMasterListFilterText={ KOMBrowseListFilterText }  OLSKMasterListDispatchClick={ KOMBrowseListDispatchClick }  OLSKMasterListDispatchArrow={ KOMBrowseListDispatchArrow }  OLSKMasterListDispatchFilter={ KOMBrowseListDispatchFilter }  let:OLSKResultsListItem={ item }  OLSKMasterListItemAccessibilitySummaryFor={ (inputData) => KOMBrowseListLogic.KOMBrowseListItemAccessibilitySummary(inputData, OLSKLocalized) }   OLSKMasterListClass={ 'KOMBrowseList' }  OLSKMobileViewInactive={ OLSKMobileViewInactive }  >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let olskmasterlist;
    	let current;

    	olskmasterlist = new Main$d({
    			props: {
    				OLSKMasterListItems: /*KOMBrowseListItems*/ ctx[1],
    				OLSKMasterListItemSelected: /*KOMBrowseListItemSelected*/ ctx[2],
    				OLSKMasterListFilterText: /*KOMBrowseListFilterText*/ ctx[0],
    				OLSKMasterListDispatchClick: /*KOMBrowseListDispatchClick*/ ctx[4],
    				OLSKMasterListDispatchArrow: /*KOMBrowseListDispatchArrow*/ ctx[5],
    				OLSKMasterListDispatchFilter: /*KOMBrowseListDispatchFilter*/ ctx[6],
    				OLSKMasterListItemAccessibilitySummaryFor: /*func*/ ctx[11],
    				OLSKMasterListClass: "KOMBrowseList",
    				OLSKMobileViewInactive: /*OLSKMobileViewInactive*/ ctx[7],
    				$$slots: {
    					default: [
    						create_default_slot$1,
    						({ OLSKResultsListItem: item }) => ({ 12: item }),
    						({ OLSKResultsListItem: item }) => item ? 4096 : 0
    					],
    					OLSKMasterListToolbarTail: [
    						create_OLSKMasterListToolbarTail_slot,
    						({ OLSKResultsListItem: item }) => ({ 12: item }),
    						({ OLSKResultsListItem: item }) => item ? 4096 : 0
    					],
    					OLSKMasterListToolbarHead: [
    						create_OLSKMasterListToolbarHead_slot,
    						({ OLSKResultsListItem: item }) => ({ 12: item }),
    						({ OLSKResultsListItem: item }) => item ? 4096 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(olskmasterlist.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskmasterlist, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const olskmasterlist_changes = {};
    			if (dirty & /*KOMBrowseListItems*/ 2) olskmasterlist_changes.OLSKMasterListItems = /*KOMBrowseListItems*/ ctx[1];
    			if (dirty & /*KOMBrowseListItemSelected*/ 4) olskmasterlist_changes.OLSKMasterListItemSelected = /*KOMBrowseListItemSelected*/ ctx[2];
    			if (dirty & /*KOMBrowseListFilterText*/ 1) olskmasterlist_changes.OLSKMasterListFilterText = /*KOMBrowseListFilterText*/ ctx[0];
    			if (dirty & /*KOMBrowseListDispatchClick*/ 16) olskmasterlist_changes.OLSKMasterListDispatchClick = /*KOMBrowseListDispatchClick*/ ctx[4];
    			if (dirty & /*KOMBrowseListDispatchArrow*/ 32) olskmasterlist_changes.OLSKMasterListDispatchArrow = /*KOMBrowseListDispatchArrow*/ ctx[5];
    			if (dirty & /*KOMBrowseListDispatchFilter*/ 64) olskmasterlist_changes.OLSKMasterListDispatchFilter = /*KOMBrowseListDispatchFilter*/ ctx[6];
    			if (dirty & /*OLSKMobileViewInactive*/ 128) olskmasterlist_changes.OLSKMobileViewInactive = /*OLSKMobileViewInactive*/ ctx[7];

    			if (dirty & /*$$scope, item, KOMBrowseListDispatchClose*/ 12296) {
    				olskmasterlist_changes.$$scope = { dirty, ctx };
    			}

    			olskmasterlist.$set(olskmasterlist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskmasterlist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskmasterlist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskmasterlist, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMBrowseListFilterText } = $$props;
    	let { KOMBrowseListItems } = $$props;
    	let { KOMBrowseListItemSelected = null } = $$props;
    	let { KOMBrowseListDispatchClose } = $$props;
    	let { KOMBrowseListDispatchCreate } = $$props;
    	let { KOMBrowseListDispatchClick } = $$props;
    	let { KOMBrowseListDispatchArrow } = $$props;
    	let { KOMBrowseListDispatchFilter } = $$props;
    	let { OLSKMobileViewInactive = false } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const mod = {
    		// INTERFACE
    		InterfaceCreateButtonDidClick() {
    			KOMBrowseListDispatchCreate();
    		}
    	};

    	const writable_props = [
    		"KOMBrowseListFilterText",
    		"KOMBrowseListItems",
    		"KOMBrowseListItemSelected",
    		"KOMBrowseListDispatchClose",
    		"KOMBrowseListDispatchCreate",
    		"KOMBrowseListDispatchClick",
    		"KOMBrowseListDispatchArrow",
    		"KOMBrowseListDispatchFilter",
    		"OLSKMobileViewInactive"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const func = inputData => uiLogic.KOMBrowseListItemAccessibilitySummary(inputData, OLSKLocalized);

    	$$self.$$set = $$props => {
    		if ("KOMBrowseListFilterText" in $$props) $$invalidate(0, KOMBrowseListFilterText = $$props.KOMBrowseListFilterText);
    		if ("KOMBrowseListItems" in $$props) $$invalidate(1, KOMBrowseListItems = $$props.KOMBrowseListItems);
    		if ("KOMBrowseListItemSelected" in $$props) $$invalidate(2, KOMBrowseListItemSelected = $$props.KOMBrowseListItemSelected);
    		if ("KOMBrowseListDispatchClose" in $$props) $$invalidate(3, KOMBrowseListDispatchClose = $$props.KOMBrowseListDispatchClose);
    		if ("KOMBrowseListDispatchCreate" in $$props) $$invalidate(10, KOMBrowseListDispatchCreate = $$props.KOMBrowseListDispatchCreate);
    		if ("KOMBrowseListDispatchClick" in $$props) $$invalidate(4, KOMBrowseListDispatchClick = $$props.KOMBrowseListDispatchClick);
    		if ("KOMBrowseListDispatchArrow" in $$props) $$invalidate(5, KOMBrowseListDispatchArrow = $$props.KOMBrowseListDispatchArrow);
    		if ("KOMBrowseListDispatchFilter" in $$props) $$invalidate(6, KOMBrowseListDispatchFilter = $$props.KOMBrowseListDispatchFilter);
    		if ("OLSKMobileViewInactive" in $$props) $$invalidate(7, OLSKMobileViewInactive = $$props.OLSKMobileViewInactive);
    	};

    	$$self.$capture_state = () => ({
    		KOMBrowseListFilterText,
    		KOMBrowseListItems,
    		KOMBrowseListItemSelected,
    		KOMBrowseListDispatchClose,
    		KOMBrowseListDispatchCreate,
    		KOMBrowseListDispatchClick,
    		KOMBrowseListDispatchArrow,
    		KOMBrowseListDispatchFilter,
    		OLSKMobileViewInactive,
    		OLSKInternational,
    		OLSKLocalized,
    		OLSK_TESTING_BEHAVIOUR: main_12,
    		KOMBrowseListLogic: uiLogic,
    		mod,
    		OLSKMasterList: Main$d,
    		_OLSKSharedBack,
    		_OLSKSharedCreate,
    		KOMBrowseListItem: Main$e
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMBrowseListFilterText" in $$props) $$invalidate(0, KOMBrowseListFilterText = $$props.KOMBrowseListFilterText);
    		if ("KOMBrowseListItems" in $$props) $$invalidate(1, KOMBrowseListItems = $$props.KOMBrowseListItems);
    		if ("KOMBrowseListItemSelected" in $$props) $$invalidate(2, KOMBrowseListItemSelected = $$props.KOMBrowseListItemSelected);
    		if ("KOMBrowseListDispatchClose" in $$props) $$invalidate(3, KOMBrowseListDispatchClose = $$props.KOMBrowseListDispatchClose);
    		if ("KOMBrowseListDispatchCreate" in $$props) $$invalidate(10, KOMBrowseListDispatchCreate = $$props.KOMBrowseListDispatchCreate);
    		if ("KOMBrowseListDispatchClick" in $$props) $$invalidate(4, KOMBrowseListDispatchClick = $$props.KOMBrowseListDispatchClick);
    		if ("KOMBrowseListDispatchArrow" in $$props) $$invalidate(5, KOMBrowseListDispatchArrow = $$props.KOMBrowseListDispatchArrow);
    		if ("KOMBrowseListDispatchFilter" in $$props) $$invalidate(6, KOMBrowseListDispatchFilter = $$props.KOMBrowseListDispatchFilter);
    		if ("OLSKMobileViewInactive" in $$props) $$invalidate(7, OLSKMobileViewInactive = $$props.OLSKMobileViewInactive);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMBrowseListFilterText,
    		KOMBrowseListItems,
    		KOMBrowseListItemSelected,
    		KOMBrowseListDispatchClose,
    		KOMBrowseListDispatchClick,
    		KOMBrowseListDispatchArrow,
    		KOMBrowseListDispatchFilter,
    		OLSKMobileViewInactive,
    		OLSKLocalized,
    		mod,
    		KOMBrowseListDispatchCreate,
    		func
    	];
    }

    class Main$f extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {
    			KOMBrowseListFilterText: 0,
    			KOMBrowseListItems: 1,
    			KOMBrowseListItemSelected: 2,
    			KOMBrowseListDispatchClose: 3,
    			KOMBrowseListDispatchCreate: 10,
    			KOMBrowseListDispatchClick: 4,
    			KOMBrowseListDispatchArrow: 5,
    			KOMBrowseListDispatchFilter: 6,
    			OLSKMobileViewInactive: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$f.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMBrowseListFilterText*/ ctx[0] === undefined && !("KOMBrowseListFilterText" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseListFilterText'");
    		}

    		if (/*KOMBrowseListItems*/ ctx[1] === undefined && !("KOMBrowseListItems" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseListItems'");
    		}

    		if (/*KOMBrowseListDispatchClose*/ ctx[3] === undefined && !("KOMBrowseListDispatchClose" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseListDispatchClose'");
    		}

    		if (/*KOMBrowseListDispatchCreate*/ ctx[10] === undefined && !("KOMBrowseListDispatchCreate" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseListDispatchCreate'");
    		}

    		if (/*KOMBrowseListDispatchClick*/ ctx[4] === undefined && !("KOMBrowseListDispatchClick" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseListDispatchClick'");
    		}

    		if (/*KOMBrowseListDispatchArrow*/ ctx[5] === undefined && !("KOMBrowseListDispatchArrow" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseListDispatchArrow'");
    		}

    		if (/*KOMBrowseListDispatchFilter*/ ctx[6] === undefined && !("KOMBrowseListDispatchFilter" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseListDispatchFilter'");
    		}
    	}

    	get KOMBrowseListFilterText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseListFilterText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseListItems() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseListItems(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseListItemSelected() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseListItemSelected(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseListDispatchClose() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseListDispatchClose(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseListDispatchCreate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseListDispatchCreate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseListDispatchClick() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseListDispatchClick(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseListDispatchArrow() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseListDispatchArrow(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseListDispatchFilter() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseListDispatchFilter(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMobileViewInactive() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMobileViewInactive(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKDetailPlaceholder/main.svelte generated by Svelte v3.29.4 */
    const file$g = "node_modules/OLSKDetailPlaceholder/main.svelte";

    function create_fragment$g(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = `${/*OLSKLocalized*/ ctx[0]("OLSKDetailPlaceholderText")}`;
    			attr_dev(div, "class", "OLSKDetailPlaceholder OLSKLayoutElementTextVisual svelte-17q25b6");
    			add_location(div, file$g, 7, 0, 341);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ OLSKInternational, OLSKLocalized });
    	return [OLSKLocalized];
    }

    class Main$g extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$g.name
    		});
    	}
    }

    var _OLSKSharedDiscard = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedDiscard\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedDiscard-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" d=\"M 4.53,6 L 13,6 13,13.47 C 13,13.91 13,14.13 12.93,14.33 L 12.93,14.37 C 12.83,14.63 12.63,14.83 12.37,14.93 12.13,15 11.91,15 11.47,15 L 4.53,15 C 4.09,15 3.87,15 3.67,14.93 L 3.63,14.93 C 3.37,14.83 3.17,14.63 3.07,14.37 3,14.13 3,13.91 3,13.47 L 3,6 Z M 4.53,6\" />\n    <path id=\"_OLSKSharedDiscard-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1,3.5 L 15,3.5\" />\n    <path id=\"_OLSKSharedDiscard-rectangle2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" d=\"M 8,1 L 8,1 C 9.75,1 9.75,1 9.75,1 L 9.75,1 C 10.44,1 11,1.56 11,2.25 11,2.25 11,2.25 11,2.25 11,2.25 11,2.25 11,2.25 L 11,2.25 C 11,2.25 11,2.25 11,2.25 L 11,3.5 5,3.5 5,2.25 C 5,1.56 5.56,1 6.25,1 6.25,1 6.25,1 6.25,1 L 8,1 Z M 8,1\" />\n    <path id=\"_OLSKSharedDiscard-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 5.5,5.5 L 5.5,15\" />\n    <path id=\"_OLSKSharedDiscard-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,6 L 8,15\" />\n    <path id=\"_OLSKSharedDiscard-bezier4\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 10.5,5.5 L 10.5,15\" />\n</svg>\n";

    var _OLSKSharedClone = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedClone\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <rect id=\"_OLSKSharedClone-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" x=\"1\" y=\"1\" width=\"11.5\" height=\"11.5\" rx=\"1\" />\n    <rect id=\"_OLSKSharedClone-rectangle2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"rgb(255, 255, 255)\" x=\"3.5\" y=\"3.5\" width=\"11.5\" height=\"11.5\" rx=\"1\" />\n    <g id=\"_OLSKSharedClone-group\">\n        <path id=\"_OLSKSharedClone-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 9.5,6.5 L 9.5,12.5\" />\n        <path id=\"_OLSKSharedClone-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 6.5,9.5 L 12.5,9.5\" />\n    </g>\n</svg>\n";

    /* eslint-disable */

    function pad2(n) {
      n |= 0;
      return n < 10 ? `0${n}` : `${Math.min(n, 99)}`;
    }

    function inlineWorker() {
      // TODO(Kagami): Cache compiled module in IndexedDB? It works in FF
      // and Edge, see: https://github.com/mdn/webassembly-examples/issues/4
      // Though gzipped WASM module currently weights ~70kb so it should be
      // perfectly cached by the browser itself.
      function fetchAndInstantiate(url, imports) {
        if (!WebAssembly.instantiateStreaming) return fetchAndInstantiateFallback(url, imports);
        const req = fetch(url, {credentials: "same-origin"});
        return WebAssembly.instantiateStreaming(req, imports).catch(err => {
          // https://github.com/Kagami/vmsg/issues/11
          if (err.message && err.message.indexOf("Argument 0 must be provided and must be a Response") > 0) {
            return fetchAndInstantiateFallback(url, imports);
          } else {
            throw err;
          }
        });
      }

      function fetchAndInstantiateFallback(url, imports) {
        return new Promise((resolve, reject) => {
          const req = new XMLHttpRequest();
          req.open("GET", url);
          req.responseType = "arraybuffer";
          req.onload = () => {
            resolve(WebAssembly.instantiate(req.response, imports));
          };
          req.onerror = reject;
          req.send();
        });
      }

      // Must be in sync with emcc settings!
      const TOTAL_STACK = 5 * 1024 * 1024;
      const TOTAL_MEMORY = 16 * 1024 * 1024;
      const WASM_PAGE_SIZE = 64 * 1024;
      let memory = null;
      let dynamicTop = TOTAL_STACK;
      // TODO(Kagami): Grow memory?
      function sbrk(increment) {
        const oldDynamicTop = dynamicTop;
        dynamicTop += increment;
        return oldDynamicTop;
      }
      // TODO(Kagami): LAME calls exit(-1) on internal error. Would be nice
      // to provide custom DEBUGF/ERRORF for easier debugging. Currenty
      // those functions do nothing.
      function exit(status) {
        postMessage({type: "internal-error", data: status});
      }

      let FFI = null;
      let ref = null;
      let pcm_l = null;
      function vmsg_init(rate) {
        ref = FFI.vmsg_init(rate);
        if (!ref) return false;
        const pcm_l_ref = new Uint32Array(memory.buffer, ref, 1)[0];
        pcm_l = new Float32Array(memory.buffer, pcm_l_ref);
        return true;
      }
      function vmsg_encode(data) {
        pcm_l.set(data);
        return FFI.vmsg_encode(ref, data.length) >= 0;
      }
      function vmsg_flush() {
        if (FFI.vmsg_flush(ref) < 0) return null;
        const mp3_ref = new Uint32Array(memory.buffer, ref + 4, 1)[0];
        const size = new Uint32Array(memory.buffer, ref + 8, 1)[0];
        const mp3 = new Uint8Array(memory.buffer, mp3_ref, size);
        const blob = new Blob([mp3], {type: "audio/mpeg"});
        FFI.vmsg_free(ref);
        ref = null;
        pcm_l = null;
        return blob;
      }

      // https://github.com/brion/min-wasm-fail
      function testSafariWebAssemblyBug() {
        const bin = new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,127,1,127,3,2,1,0,5,3,1,0,1,7,8,1,4,116,101,115,116,0,0,10,16,1,14,0,32,0,65,1,54,2,0,32,0,40,2,0,11]);
        const mod = new WebAssembly.Module(bin);
        const inst = new WebAssembly.Instance(mod, {});
        // test storing to and loading from a non-zero location via a parameter.
        // Safari on iOS 11.2.5 returns 0 unexpectedly at non-zero locations
        return (inst.exports.test(4) !== 0);
      }

      onmessage = (e) => {
        const msg = e.data;
        switch (msg.type) {
        case "init":
          const { wasmURL, shimURL } = msg.data;
          Promise.resolve().then(() => {
            if (self.WebAssembly && !testSafariWebAssemblyBug()) {
              delete self.WebAssembly;
            }
            if (!self.WebAssembly) {
              importScripts(shimURL);
            }
            memory = new WebAssembly.Memory({
              initial: TOTAL_MEMORY / WASM_PAGE_SIZE,
              maximum: TOTAL_MEMORY / WASM_PAGE_SIZE,
            });
            return {
              memory: memory,
              pow: Math.pow,
              exit: exit,
              powf: Math.pow,
              exp: Math.exp,
              sqrtf: Math.sqrt,
              cos: Math.cos,
              log: Math.log,
              sin: Math.sin,
              sbrk: sbrk,
            };
          }).then(Runtime => {
            return fetchAndInstantiate(wasmURL, {env: Runtime})
          }).then(wasm => {
            FFI = wasm.instance.exports;
            postMessage({type: "init", data: null});
          }).catch(err => {
            postMessage({type: "init-error", data: err.toString()});
          });
          break;
        case "start":
          if (!vmsg_init(msg.data)) return postMessage({type: "error", data: "vmsg_init"});
          break;
        case "data":
          if (!vmsg_encode(msg.data)) return postMessage({type: "error", data: "vmsg_encode"});
          break;
        case "stop":
          const blob = vmsg_flush();
          if (!blob) return postMessage({type: "error", data: "vmsg_flush"});
          postMessage({type: "stop", data: blob});
          break;
        }
      };
    }

    class Recorder {
      constructor(opts = {}, onStop = null) {
        // Can't use relative URL in blob worker, see:
        // https://stackoverflow.com/a/22582695
        this.wasmURL = new URL(opts.wasmURL || "/static/js/vmsg.wasm", location).href;
        this.shimURL = new URL(opts.shimURL || "/static/js/wasm-polyfill.js", location).href;
        this.onStop = onStop;
        this.pitch = opts.pitch || 0;
        this.stream = null;
        this.audioCtx = null;
        this.gainNode = null;
        this.pitchFX = null;
        this.encNode = null;
        this.worker = null;
        this.workerURL = null;
        this.blob = null;
        this.blobURL = null;
        this.resolve = null;
        this.reject = null;
        Object.seal(this);
      }

      close() {
        if (this.encNode) this.encNode.disconnect();
        if (this.encNode) this.encNode.onaudioprocess = null;
        if (this.stream) this.stopTracks();
        if (this.audioCtx) this.audioCtx.close();
        if (this.worker) this.worker.terminate();
        if (this.workerURL) URL.revokeObjectURL(this.workerURL);
        if (this.blobURL) URL.revokeObjectURL(this.blobURL);
      }

      // Without pitch shift:
      //   [sourceNode] -> [gainNode] -> [encNode] -> [audioCtx.destination]
      //                                     |
      //                                     -> [worker]
      // With pitch shift:
      //   [sourceNode] -> [gainNode] -> [pitchFX] -> [encNode] -> [audioCtx.destination]
      //                                                  |
      //                                                  -> [worker]
      initAudio() {
        const getUserMedia = navigator.mediaDevices && navigator.mediaDevices.getUserMedia
          ? function(constraints) {
              return navigator.mediaDevices.getUserMedia(constraints);
            }
          : function(constraints) {
              const oldGetUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
              if (!oldGetUserMedia) {
                return Promise.reject(new Error("getUserMedia is not implemented in this browser"));
              }
              return new Promise(function(resolve, reject) {
                oldGetUserMedia.call(navigator, constraints, resolve, reject);
              });
            };

        return getUserMedia({audio: true}).then((stream) => {
          this.stream = stream;
          const audioCtx = this.audioCtx = new (window.AudioContext
            || window.webkitAudioContext)();

          const sourceNode = audioCtx.createMediaStreamSource(stream);
          const gainNode = this.gainNode = (audioCtx.createGain
            || audioCtx.createGainNode).call(audioCtx);
          gainNode.gain.value = 1;
          sourceNode.connect(gainNode);

          const pitchFX = this.pitchFX = new Jungle(audioCtx);
          pitchFX.setPitchOffset(this.pitch);

          const encNode = this.encNode = (audioCtx.createScriptProcessor
            || audioCtx.createJavaScriptNode).call(audioCtx, 0, 1, 1);
          pitchFX.output.connect(encNode);

          gainNode.connect(this.pitch === 0 ? encNode : pitchFX.input);
        });
      }

      initWorker() {
        if (!this.stream) throw new Error("missing audio initialization");
        // https://stackoverflow.com/a/19201292
        const blob = new Blob(
          ["(", inlineWorker.toString(), ")()"],
          {type: "application/javascript"});
        const workerURL = this.workerURL = URL.createObjectURL(blob);
        const worker = this.worker = new Worker(workerURL);
        const { wasmURL, shimURL } = this;
        worker.postMessage({type: "init", data: {wasmURL, shimURL}});
        return new Promise((resolve, reject) => {
          worker.onmessage = (e) => {
            const msg = e.data;
            switch (msg.type) {
            case "init":
              resolve();
              break;
            case "init-error":
              reject(new Error(msg.data));
              break;
            // TODO(Kagami): Error handling.
            case "error":
            case "internal-error":
              console.error("Worker error:", msg.data);
              if (this.reject) this.reject(msg.data);
              break;
            case "stop":
              this.blob = msg.data;
              this.blobURL = URL.createObjectURL(msg.data);
              if (this.onStop) this.onStop();
              if (this.resolve) this.resolve(this.blob);
              break;
            }
          };
        });
      }

      init() {
        return this.initAudio().then(this.initWorker.bind(this));
      }

      startRecording() {
        if (!this.stream) throw new Error("missing audio initialization");
        if (!this.worker) throw new Error("missing worker initialization");
        this.blob = null;
        if (this.blobURL) URL.revokeObjectURL(this.blobURL);
        this.blobURL = null;
        this.resolve = null;
        this.reject = null;
        this.worker.postMessage({type: "start", data: this.audioCtx.sampleRate});
        this.encNode.onaudioprocess = (e) => {
          const samples = e.inputBuffer.getChannelData(0);
          this.worker.postMessage({type: "data", data: samples});
        };
        this.encNode.connect(this.audioCtx.destination);
      }

      stopRecording() {
        if (!this.stream) throw new Error("missing audio initialization");
        if (!this.worker) throw new Error("missing worker initialization");
        this.encNode.disconnect();
        this.encNode.onaudioprocess = null;
        this.stopTracks();
        this.worker.postMessage({type: "stop", data: null});
        return new Promise((resolve, reject) => {
          this.resolve = resolve;
          this.reject = reject;
        });
      }

      stopTracks() {
        // Might be missed in Safari and old FF/Chrome per MDN.
        if (this.stream.getTracks) {
          // Hide browser's recording indicator.
          this.stream.getTracks().forEach((track) => track.stop());
        }
      }
    }

    class Form {
      constructor(opts = {}, resolve, reject) {
        this.recorder = new Recorder(opts, this.onStop.bind(this));
        this.resolve = resolve;
        this.reject = reject;
        this.backdrop = null;
        this.popup = null;
        this.recordBtn = null;
        this.stopBtn = null;
        this.timer = null;
        this.audio = null;
        this.saveBtn = null;
        this.tid = 0;
        this.start = 0;
        Object.seal(this);

        this.recorder.initAudio()
          .then(() => this.drawInit())
          .then(() => this.recorder.initWorker())
          .then(() => this.drawAll())
          .catch((err) => this.drawError(err));
      }

      drawInit() {
        if (this.backdrop) return;
        const backdrop = this.backdrop = document.createElement("div");
        backdrop.className = "vmsg-backdrop";
        backdrop.addEventListener("click", () => this.close(null));

        const popup = this.popup = document.createElement("div");
        popup.className = "vmsg-popup";
        popup.addEventListener("click", (e) => e.stopPropagation());

        const progress = document.createElement("div");
        progress.className = "vmsg-progress";
        for (let i = 0; i < 3; i++) {
          const progressDot = document.createElement("div");
          progressDot.className = "vmsg-progress-dot";
          progress.appendChild(progressDot);
        }
        popup.appendChild(progress);

        backdrop.appendChild(popup);
        document.body.appendChild(backdrop);
      }

      drawTime(msecs) {
        const secs = Math.round(msecs / 1000);
        this.timer.textContent = pad2(secs / 60) + ":" + pad2(secs % 60);
      }

      drawAll() {
        this.drawInit();
        this.clearAll();

        const recordRow = document.createElement("div");
        recordRow.className = "vmsg-record-row";
        this.popup.appendChild(recordRow);

        const recordBtn = this.recordBtn = document.createElement("button");
        recordBtn.className = "vmsg-button vmsg-record-button";
        recordBtn.textContent = "●";
        recordBtn.addEventListener("click", () => this.startRecording());
        recordRow.appendChild(recordBtn);

        const stopBtn = this.stopBtn = document.createElement("button");
        stopBtn.className = "vmsg-button vmsg-stop-button";
        stopBtn.style.display = "none";
        stopBtn.textContent = "■";
        stopBtn.addEventListener("click", () => this.stopRecording());
        recordRow.appendChild(stopBtn);

        const audio = this.audio = new Audio();
        audio.autoplay = true;

        const timer = this.timer = document.createElement("span");
        timer.className = "vmsg-timer";
        timer.addEventListener("click", () => {
          if (audio.paused) {
            if (this.recorder.blobURL) {
              audio.src = this.recorder.blobURL;
            }
          } else {
            audio.pause();
          }
        });
        this.drawTime(0);
        recordRow.appendChild(timer);

        const saveBtn = this.saveBtn = document.createElement("button");
        saveBtn.className = "vmsg-button vmsg-save-button";
        saveBtn.textContent = "✓";
        saveBtn.disabled = true;
        saveBtn.addEventListener("click", () => this.close(this.recorder.blob));
        recordRow.appendChild(saveBtn);

        const gainWrapper = document.createElement("div");
        gainWrapper.className = "vmsg-slider-wrapper vmsg-gain-slider-wrapper";
        const gainSlider = document.createElement("input");
        gainSlider.className = "vmsg-slider vmsg-gain-slider";
        gainSlider.setAttribute("type", "range");
        gainSlider.min = 0;
        gainSlider.max = 2;
        gainSlider.step = 0.2;
        gainSlider.value = 1;
        gainSlider.onchange = () => {
          const gain = +gainSlider.value;
          this.recorder.gainNode.gain.value = gain;
        };
        gainWrapper.appendChild(gainSlider);
        this.popup.appendChild(gainWrapper);

        const pitchWrapper = document.createElement("div");
        pitchWrapper.className = "vmsg-slider-wrapper vmsg-pitch-slider-wrapper";
        const pitchSlider = document.createElement("input");
        pitchSlider.className = "vmsg-slider vmsg-pitch-slider";
        pitchSlider.setAttribute("type", "range");
        pitchSlider.min = -1;
        pitchSlider.max = 1;
        pitchSlider.step = 0.2;
        pitchSlider.value = this.recorder.pitch;
        pitchSlider.onchange = () => {
          const pitch = +pitchSlider.value;
          this.recorder.pitchFX.setPitchOffset(pitch);
          this.recorder.gainNode.disconnect();
          this.recorder.gainNode.connect(
            pitch === 0 ? this.recorder.encNode : this.recorder.pitchFX.input
          );
        };
        pitchWrapper.appendChild(pitchSlider);
        this.popup.appendChild(pitchWrapper);
      }

      drawError(err) {
        console.error(err);
        this.drawInit();
        this.clearAll();
        const error = document.createElement("div");
        error.className = "vmsg-error";
        error.textContent = err.toString();
        this.popup.appendChild(error);
      }

      clearAll() {
        if (!this.popup) return;
        this.popup.innerHTML = "";
      }

      close(blob) {
        if (this.audio) this.audio.pause();
        if (this.tid) clearTimeout(this.tid);
        this.recorder.close();
        this.backdrop.remove();
        if (blob) {
          this.resolve(blob);
        } else {
          this.reject(new Error("No record made"));
        }
      }

      onStop() {
        this.recordBtn.style.display = "";
        this.stopBtn.style.display = "none";
        this.stopBtn.disabled = false;
        this.saveBtn.disabled = false;
      }

      startRecording() {
        this.audio.pause();
        this.start = Date.now();
        this.updateTime();
        this.recordBtn.style.display = "none";
        this.stopBtn.style.display = "";
        this.saveBtn.disabled = true;
        this.recorder.startRecording();
      }

      stopRecording() {
        clearTimeout(this.tid);
        this.tid = 0;
        this.stopBtn.disabled = true;
        this.recorder.stopRecording();
      }

      updateTime() {
        // NOTE(Kagami): We can do this in `onaudioprocess` but that would
        // run too often and create unnecessary DOM updates.
        this.drawTime(Date.now() - this.start);
        this.tid = setTimeout(() => this.updateTime(), 300);
      }
    }

    let shown = false;

    /**
     * Record a new voice message.
     *
     * @param {Object=} opts - Options
     * @param {string=} opts.wasmURL - URL of the module
     *                                 ("/static/js/vmsg.wasm" by default)
     * @param {string=} opts.shimURL - URL of the WebAssembly polyfill
     *                                 ("/static/js/wasm-polyfill.js" by default)
     * @param {number=} opts.pitch - Initial pitch shift ([-1, 1], 0 by default)
     * @return {Promise.<Blob>} A promise that contains recorded blob when fulfilled.
     */
    function record(opts) {
      return new Promise((resolve, reject) => {
        if (shown) throw new Error("Record form is already opened");
        shown = true;
        new Form(opts, resolve, reject);
      // Use `.finally` once it's available in Safari and Edge.
      }).then(result => {
        shown = false;
        return result;
      }, err => {
        shown = false;
        throw err;
      });
    }

    /**
     * All available public items.
     */
    var record$1 = { Recorder, Form, record };

    // Borrowed from and slightly modified:
    // https://github.com/cwilso/Audio-Input-Effects/blob/master/js/jungle.js

    // Copyright 2012, Google Inc.
    // All rights reserved.
    //
    // Redistribution and use in source and binary forms, with or without
    // modification, are permitted provided that the following conditions are
    // met:
    //
    //     * Redistributions of source code must retain the above copyright
    // notice, this list of conditions and the following disclaimer.
    //     * Redistributions in binary form must reproduce the above
    // copyright notice, this list of conditions and the following disclaimer
    // in the documentation and/or other materials provided with the
    // distribution.
    //     * Neither the name of Google Inc. nor the names of its
    // contributors may be used to endorse or promote products derived from
    // this software without specific prior written permission.
    //
    // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

    const delayTime = 0.100;
    const fadeTime = 0.050;
    const bufferTime = 0.100;

    function createFadeBuffer(context, activeTime, fadeTime) {
      var length1 = activeTime * context.sampleRate;
      var length2 = (activeTime - 2*fadeTime) * context.sampleRate;
      var length = length1 + length2;
      var buffer = context.createBuffer(1, length, context.sampleRate);
      var p = buffer.getChannelData(0);

      var fadeLength = fadeTime * context.sampleRate;

      var fadeIndex1 = fadeLength;
      var fadeIndex2 = length1 - fadeLength;

      // 1st part of cycle
      for (var i = 0; i < length1; ++i) {
        var value;

        if (i < fadeIndex1) {
            value = Math.sqrt(i / fadeLength);
        } else if (i >= fadeIndex2) {
            value = Math.sqrt(1 - (i - fadeIndex2) / fadeLength);
        } else {
            value = 1;
        }

        p[i] = value;
      }

      // 2nd part
      for (var i = length1; i < length; ++i) {
        p[i] = 0;
      }

      return buffer;
    }

    function createDelayTimeBuffer(context, activeTime, fadeTime, shiftUp) {
      var length1 = activeTime * context.sampleRate;
      var length2 = (activeTime - 2*fadeTime) * context.sampleRate;
      var length = length1 + length2;
      var buffer = context.createBuffer(1, length, context.sampleRate);
      var p = buffer.getChannelData(0);

      // 1st part of cycle
      for (var i = 0; i < length1; ++i) {
        if (shiftUp)
          // This line does shift-up transpose
          p[i] = (length1-i)/length;
        else
          // This line does shift-down transpose
          p[i] = i / length1;
      }

      // 2nd part
      for (var i = length1; i < length; ++i) {
        p[i] = 0;
      }

      return buffer;
    }

    function Jungle(context) {
      this.context = context;
      // Create nodes for the input and output of this "module".
      var input = (context.createGain || context.createGainNode).call(context);
      var output = (context.createGain || context.createGainNode).call(context);
      this.input = input;
      this.output = output;

      // Delay modulation.
      var mod1 = context.createBufferSource();
      var mod2 = context.createBufferSource();
      var mod3 = context.createBufferSource();
      var mod4 = context.createBufferSource();
      this.shiftDownBuffer = createDelayTimeBuffer(context, bufferTime, fadeTime, false);
      this.shiftUpBuffer = createDelayTimeBuffer(context, bufferTime, fadeTime, true);
      mod1.buffer = this.shiftDownBuffer;
      mod2.buffer = this.shiftDownBuffer;
      mod3.buffer = this.shiftUpBuffer;
      mod4.buffer = this.shiftUpBuffer;
      mod1.loop = true;
      mod2.loop = true;
      mod3.loop = true;
      mod4.loop = true;

      // for switching between oct-up and oct-down
      var mod1Gain = (context.createGain || context.createGainNode).call(context);
      var mod2Gain = (context.createGain || context.createGainNode).call(context);
      var mod3Gain = (context.createGain || context.createGainNode).call(context);
      mod3Gain.gain.value = 0;
      var mod4Gain = (context.createGain || context.createGainNode).call(context);
      mod4Gain.gain.value = 0;

      mod1.connect(mod1Gain);
      mod2.connect(mod2Gain);
      mod3.connect(mod3Gain);
      mod4.connect(mod4Gain);

      // Delay amount for changing pitch.
      var modGain1 = (context.createGain || context.createGainNode).call(context);
      var modGain2 = (context.createGain || context.createGainNode).call(context);

      var delay1 = (context.createDelay || context.createDelayNode).call(context);
      var delay2 = (context.createDelay || context.createDelayNode).call(context);
      mod1Gain.connect(modGain1);
      mod2Gain.connect(modGain2);
      mod3Gain.connect(modGain1);
      mod4Gain.connect(modGain2);
      modGain1.connect(delay1.delayTime);
      modGain2.connect(delay2.delayTime);

      // Crossfading.
      var fade1 = context.createBufferSource();
      var fade2 = context.createBufferSource();
      var fadeBuffer = createFadeBuffer(context, bufferTime, fadeTime);
      fade1.buffer = fadeBuffer;
      fade2.buffer = fadeBuffer;
      fade1.loop = true;
      fade2.loop = true;

      var mix1 = (context.createGain || context.createGainNode).call(context);
      var mix2 = (context.createGain || context.createGainNode).call(context);
      mix1.gain.value = 0;
      mix2.gain.value = 0;

      fade1.connect(mix1.gain);
      fade2.connect(mix2.gain);

      // Connect processing graph.
      input.connect(delay1);
      input.connect(delay2);
      delay1.connect(mix1);
      delay2.connect(mix2);
      mix1.connect(output);
      mix2.connect(output);

      // Start
      var t = context.currentTime + 0.050;
      var t2 = t + bufferTime - fadeTime;
      mod1.start(t);
      mod2.start(t2);
      mod3.start(t);
      mod4.start(t2);
      fade1.start(t);
      fade2.start(t2);

      this.mod1 = mod1;
      this.mod2 = mod2;
      this.mod1Gain = mod1Gain;
      this.mod2Gain = mod2Gain;
      this.mod3Gain = mod3Gain;
      this.mod4Gain = mod4Gain;
      this.modGain1 = modGain1;
      this.modGain2 = modGain2;
      this.fade1 = fade1;
      this.fade2 = fade2;
      this.mix1 = mix1;
      this.mix2 = mix2;
      this.delay1 = delay1;
      this.delay2 = delay2;

      this.setDelay(delayTime);
    }

    Jungle.prototype.setDelay = function(delayTime) {
      this.modGain1.gain.setTargetAtTime(0.5*delayTime, 0, 0.010);
      this.modGain2.gain.setTargetAtTime(0.5*delayTime, 0, 0.010);
    };

    Jungle.prototype.setPitchOffset = function(mult) {
      if (mult>0) { // pitch up
        this.mod1Gain.gain.value = 0;
        this.mod2Gain.gain.value = 0;
        this.mod3Gain.gain.value = 1;
        this.mod4Gain.gain.value = 1;
      } else { // pitch down
        this.mod1Gain.gain.value = 1;
        this.mod2Gain.gain.value = 1;
        this.mod3Gain.gain.value = 0;
        this.mod4Gain.gain.value = 0;
      }
      this.setDelay(delayTime*Math.abs(mult));
    };

    /* os-app/sub-browse/submodules/KOMBrowseInfoAudio/main.svelte generated by Svelte v3.29.4 */

    const { Object: Object_1$3, console: console_1 } = globals;
    const file$h = "os-app/sub-browse/submodules/KOMBrowseInfoAudio/main.svelte";

    // (196:0) {#if KOMBrowseInfoAudioAvailable }
    function create_if_block_2$1(ctx) {
    	let t0;
    	let t1;
    	let if_block2_anchor;
    	let if_block0 = !/*KOMBrowseInfoAudioItem*/ ctx[0][/*KOMBrowseInfoAudioItemProperty*/ ctx[2]] && create_if_block_5(ctx);
    	let if_block1 = /*mod*/ ctx[3]._ValueIsRecording && create_if_block_4$1(ctx);
    	let if_block2 = /*KOMBrowseInfoAudioItem*/ ctx[0][/*KOMBrowseInfoAudioItemProperty*/ ctx[2]] && create_if_block_3$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (!/*KOMBrowseInfoAudioItem*/ ctx[0][/*KOMBrowseInfoAudioItemProperty*/ ctx[2]]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_5(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*mod*/ ctx[3]._ValueIsRecording) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_4$1(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*KOMBrowseInfoAudioItem*/ ctx[0][/*KOMBrowseInfoAudioItemProperty*/ ctx[2]]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_3$1(ctx);
    					if_block2.c();
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(196:0) {#if KOMBrowseInfoAudioAvailable }",
    		ctx
    	});

    	return block;
    }

    // (198:1) {#if !KOMBrowseInfoAudioItem[KOMBrowseInfoAudioItemProperty] }
    function create_if_block_5(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = `${/*OLSKLocalized*/ ctx[4]("KOMBrowseInfoAudioRecordButtonText")}`;
    			attr_dev(button, "class", "KOMBrowseInfoAudioRecordButton");
    			add_location(button, file$h, 198, 2, 4463);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[3].InterfaceRecordButtonDidClick)) /*mod*/ ctx[3].InterfaceRecordButtonDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(198:1) {#if !KOMBrowseInfoAudioItem[KOMBrowseInfoAudioItemProperty] }",
    		ctx
    	});

    	return block;
    }

    // (202:1) {#if mod._ValueIsRecording}
    function create_if_block_4$1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = `${/*OLSKLocalized*/ ctx[4]("KOMBrowseInfoAudioRecordingAlertText")}`;
    			attr_dev(span, "class", "KOMBrowseInfoAudioRecordingAlert");
    			add_location(span, file$h, 202, 2, 4661);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(202:1) {#if mod._ValueIsRecording}",
    		ctx
    	});

    	return block;
    }

    // (206:1) {#if KOMBrowseInfoAudioItem[KOMBrowseInfoAudioItemProperty] }
    function create_if_block_3$1(ctx) {
    	let button0;
    	let t1;
    	let button1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button0 = element("button");
    			button0.textContent = `${/*OLSKLocalized*/ ctx[4]("KOMBrowseInfoAudioPlaybackButtonText")}`;
    			t1 = space();
    			button1 = element("button");
    			button1.textContent = `${/*OLSKLocalized*/ ctx[4]("KOMBrowseInfoAudioClearButtonText")}`;
    			attr_dev(button0, "class", "KOMBrowseInfoAudioPlaybackButton");
    			add_location(button0, file$h, 206, 2, 4846);
    			attr_dev(button1, "class", "KOMBrowseInfoAudioClearButton");
    			add_location(button1, file$h, 208, 2, 5014);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[3].InterfacePlaybackButtonDidClick)) /*mod*/ ctx[3].InterfacePlaybackButtonDidClick.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button1,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[3].InterfaceClearButtonDidClick)) /*mod*/ ctx[3].InterfaceClearButtonDidClick.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(button1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(206:1) {#if KOMBrowseInfoAudioItem[KOMBrowseInfoAudioItemProperty] }",
    		ctx
    	});

    	return block;
    }

    // (214:0) {#if !KOMBrowseInfoAudioAvailable }
    function create_if_block_1$3(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = `${/*OLSKLocalized*/ ctx[4]("KOMBrowseInfoAudioNotAvailableAlertText")}`;
    			attr_dev(span, "class", "KOMBrowseInfoAudioNotAvailableAlert");
    			add_location(span, file$h, 214, 1, 5222);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(214:0) {#if !KOMBrowseInfoAudioAvailable }",
    		ctx
    	});

    	return block;
    }

    // (218:0) {#if OLSK_TESTING_BEHAVIOUR() }
    function create_if_block$8(ctx) {
    	let p;
    	let strong;
    	let t1;
    	let span;

    	const block = {
    		c: function create() {
    			p = element("p");
    			strong = element("strong");
    			strong.textContent = "KOMBrowseInfoAudioLog";
    			t1 = space();
    			span = element("span");
    			add_location(strong, file$h, 219, 2, 5386);
    			attr_dev(span, "id", "TestKOMBrowseInfoAudioLog");
    			add_location(span, file$h, 220, 2, 5427);
    			add_location(p, file$h, 218, 1, 5380);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, strong);
    			append_dev(p, t1);
    			append_dev(p, span);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(218:0) {#if OLSK_TESTING_BEHAVIOUR() }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let show_if = main_12();
    	let if_block0 = /*KOMBrowseInfoAudioAvailable*/ ctx[1] && create_if_block_2$1(ctx);
    	let if_block1 = !/*KOMBrowseInfoAudioAvailable*/ ctx[1] && create_if_block_1$3(ctx);
    	let if_block2 = show_if && create_if_block$8(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(div, "class", "KOMBrowseInfoAudio");
    			add_location(div, file$h, 193, 0, 4327);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t0);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t1);
    			if (if_block2) if_block2.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*KOMBrowseInfoAudioAvailable*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$1(ctx);
    					if_block0.c();
    					if_block0.m(div, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (!/*KOMBrowseInfoAudioAvailable*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$3(ctx);
    					if_block1.c();
    					if_block1.m(div, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const kMaxLengthSeconds = 10;

    function instance$h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMBrowseInfoAudioAvailable } = $$props;
    	let { KOMBrowseInfoAudioItem } = $$props;
    	let { KOMBrowseInfoAudioItemProperty } = $$props;
    	let { KOMBrowseInfoAudioDispatchCapture } = $$props;
    	let { KOMBrowseInfoAudioDispatchFetch } = $$props;
    	let { KOMBrowseInfoAudioDispatchClear } = $$props;
    	let { DebugFakeChangeObject = null } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const mod = {
    		// VALUE
    		_ValueIsRecording: false,
    		_ValueAudioID: undefined,
    		_ValueAudio: undefined,
    		_ValueAudioIsPlaying: false,
    		// DATA
    		DataFakeRecorder() {
    			return {
    				initAudio() {
    					
    				},
    				initWorker() {
    					
    				},
    				startRecording() {
    					
    				},
    				stopRecording() {
    					
    				}
    			};
    		},
    		DataFakeAudio(inputData) {
    			return {
    				play() {
    					
    				},
    				pause() {
    					
    				},
    				src: inputData
    			};
    		},
    		// INTERFACE
    		InterfaceRecordButtonDidClick() {
    			!mod._ValueIsRecording
    			? mod.ControlRecordStart()
    			: mod.ControlRecordStop();
    		},
    		InterfacePlaybackButtonDidClick() {
    			if (main_12() && DebugFakeChangeObject && mod._ValueAudioIsPlaying) {
    				$$invalidate(0, KOMBrowseInfoAudioItem = DebugFakeChangeObject);
    			}

    			mod.ControlSetAudio();

    			!mod._ValueAudioIsPlaying
    			? mod.ControlPlaybackStart()
    			: mod.ControlPlaybackStop();
    		},
    		InterfaceClearButtonDidClick() {
    			mod.ControlAudioClear();
    			KOMBrowseInfoAudioDispatchClear(KOMBrowseInfoAudioItemProperty);
    		},
    		// CONTROL
    		async ControlRecordStart() {
    			if (mod._ValueIsRecording) {
    				await mod.ControlRecordStop();
    			}

    			try {
    				await mod._ValueRecorder.initAudio();
    				await mod._ValueRecorder.initWorker();

    				if (main_12()) {
    					mod.DebugLog("record");
    				}

    				await mod._ValueRecorder.startRecording();
    				$$invalidate(3, mod._ValueIsRecording = true, mod);

    				setTimeout(
    					function () {
    						mod._ValueIsRecording && mod.ControlRecordStop();
    					},
    					1000 * kMaxLengthSeconds
    				);
    			} catch(e) {
    				console.error(e);
    			}
    		},
    		async ControlRecordStop() {
    			if (!mod._ValueIsRecording) {
    				return;
    			}

    			if (main_12()) {
    				mod.DebugLog("stop");
    			}

    			KOMBrowseInfoAudioDispatchCapture(KOMBrowseInfoAudioItemProperty, await mod._ValueRecorder.stopRecording());
    			$$invalidate(3, mod._ValueIsRecording = false, mod);
    		},
    		async ControlSetAudio() {
    			if (mod._ValueAudioID === KOMBrowseInfoAudioItem.KOMCardID) {
    				return;
    			}

    			if (mod._ValueAudioID) {
    				mod.ControlAudioClear();
    			}

    			$$invalidate(3, mod._ValueAudioID = KOMBrowseInfoAudioItem.KOMCardID, mod);
    		},
    		async ControlAudioClear() {
    			if (mod._ValueAudioIsPlaying) {
    				mod.ControlPlaybackStop();
    			}

    			
    			delete mod._ValueAudio;
    			delete mod._ValueAudioID;

    			if (main_12()) {
    				mod.DebugLog("clear");
    			}
    		},
    		async ControlPlaybackStart() {
    			if (!mod._ValueAudio && main_12()) {
    				$$invalidate(3, mod._ValueAudio = mod.DataFakeAudio(await KOMBrowseInfoAudioDispatchFetch(KOMBrowseInfoAudioItemProperty) || KOMBrowseInfoAudioItem[KOMBrowseInfoAudioItemProperty]), mod);
    			}

    			if (!mod._ValueAudio) {
    				$$invalidate(
    					3,
    					mod._ValueAudio = Object.assign(new Audio(), {
    						src: URL.createObjectURL(await KOMBrowseInfoAudioDispatchFetch(KOMBrowseInfoAudioItemProperty)),
    						onended() {
    							$$invalidate(3, mod._ValueAudioIsPlaying = false, mod);
    						}
    					}),
    					mod
    				);
    			}

    			if (main_12()) {
    				mod.DebugLog("play:" + mod._ValueAudio.src);
    			}

    			$$invalidate(3, mod._ValueAudio.currentTime = 0, mod);
    			mod._ValueAudio.play();
    			$$invalidate(3, mod._ValueAudioIsPlaying = true, mod);
    		},
    		ControlPlaybackStop() {
    			if (main_12()) {
    				mod.DebugLog("stop");
    			}

    			mod._ValueAudio.pause();
    			$$invalidate(3, mod._ValueAudioIsPlaying = false, mod);
    		},
    		// SETUP
    		SetupEverything() {
    			mod.SetupRecorder();
    		},
    		SetupRecorder() {
    			$$invalidate(
    				3,
    				mod._ValueRecorder = main_12()
    				? mod.DataFakeRecorder()
    				: new record$1.Recorder({
    							wasmURL: "/_shared/__external/vmsg/vmsg.wasm"
    						}),
    				mod
    			);
    		},
    		// DEBUG
    		DebugLog(inputData) {
    			window.TestKOMBrowseInfoAudioLog.innerHTML = window.TestKOMBrowseInfoAudioLog.innerHTML
    			? window.TestKOMBrowseInfoAudioLog.innerHTML.split(",").concat(inputData).join(",")
    			: inputData;
    		}
    	};

    	mod.SetupEverything();

    	const writable_props = [
    		"KOMBrowseInfoAudioAvailable",
    		"KOMBrowseInfoAudioItem",
    		"KOMBrowseInfoAudioItemProperty",
    		"KOMBrowseInfoAudioDispatchCapture",
    		"KOMBrowseInfoAudioDispatchFetch",
    		"KOMBrowseInfoAudioDispatchClear",
    		"DebugFakeChangeObject"
    	];

    	Object_1$3.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("KOMBrowseInfoAudioAvailable" in $$props) $$invalidate(1, KOMBrowseInfoAudioAvailable = $$props.KOMBrowseInfoAudioAvailable);
    		if ("KOMBrowseInfoAudioItem" in $$props) $$invalidate(0, KOMBrowseInfoAudioItem = $$props.KOMBrowseInfoAudioItem);
    		if ("KOMBrowseInfoAudioItemProperty" in $$props) $$invalidate(2, KOMBrowseInfoAudioItemProperty = $$props.KOMBrowseInfoAudioItemProperty);
    		if ("KOMBrowseInfoAudioDispatchCapture" in $$props) $$invalidate(5, KOMBrowseInfoAudioDispatchCapture = $$props.KOMBrowseInfoAudioDispatchCapture);
    		if ("KOMBrowseInfoAudioDispatchFetch" in $$props) $$invalidate(6, KOMBrowseInfoAudioDispatchFetch = $$props.KOMBrowseInfoAudioDispatchFetch);
    		if ("KOMBrowseInfoAudioDispatchClear" in $$props) $$invalidate(7, KOMBrowseInfoAudioDispatchClear = $$props.KOMBrowseInfoAudioDispatchClear);
    		if ("DebugFakeChangeObject" in $$props) $$invalidate(8, DebugFakeChangeObject = $$props.DebugFakeChangeObject);
    	};

    	$$self.$capture_state = () => ({
    		KOMBrowseInfoAudioAvailable,
    		KOMBrowseInfoAudioItem,
    		KOMBrowseInfoAudioItemProperty,
    		KOMBrowseInfoAudioDispatchCapture,
    		KOMBrowseInfoAudioDispatchFetch,
    		KOMBrowseInfoAudioDispatchClear,
    		DebugFakeChangeObject,
    		OLSKInternational,
    		OLSKLocalized,
    		kMaxLengthSeconds,
    		OLSK_TESTING_BEHAVIOUR: main_12,
    		record: record$1,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMBrowseInfoAudioAvailable" in $$props) $$invalidate(1, KOMBrowseInfoAudioAvailable = $$props.KOMBrowseInfoAudioAvailable);
    		if ("KOMBrowseInfoAudioItem" in $$props) $$invalidate(0, KOMBrowseInfoAudioItem = $$props.KOMBrowseInfoAudioItem);
    		if ("KOMBrowseInfoAudioItemProperty" in $$props) $$invalidate(2, KOMBrowseInfoAudioItemProperty = $$props.KOMBrowseInfoAudioItemProperty);
    		if ("KOMBrowseInfoAudioDispatchCapture" in $$props) $$invalidate(5, KOMBrowseInfoAudioDispatchCapture = $$props.KOMBrowseInfoAudioDispatchCapture);
    		if ("KOMBrowseInfoAudioDispatchFetch" in $$props) $$invalidate(6, KOMBrowseInfoAudioDispatchFetch = $$props.KOMBrowseInfoAudioDispatchFetch);
    		if ("KOMBrowseInfoAudioDispatchClear" in $$props) $$invalidate(7, KOMBrowseInfoAudioDispatchClear = $$props.KOMBrowseInfoAudioDispatchClear);
    		if ("DebugFakeChangeObject" in $$props) $$invalidate(8, DebugFakeChangeObject = $$props.DebugFakeChangeObject);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMBrowseInfoAudioItem,
    		KOMBrowseInfoAudioAvailable,
    		KOMBrowseInfoAudioItemProperty,
    		mod,
    		OLSKLocalized,
    		KOMBrowseInfoAudioDispatchCapture,
    		KOMBrowseInfoAudioDispatchFetch,
    		KOMBrowseInfoAudioDispatchClear,
    		DebugFakeChangeObject
    	];
    }

    class Main$h extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {
    			KOMBrowseInfoAudioAvailable: 1,
    			KOMBrowseInfoAudioItem: 0,
    			KOMBrowseInfoAudioItemProperty: 2,
    			KOMBrowseInfoAudioDispatchCapture: 5,
    			KOMBrowseInfoAudioDispatchFetch: 6,
    			KOMBrowseInfoAudioDispatchClear: 7,
    			DebugFakeChangeObject: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$h.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMBrowseInfoAudioAvailable*/ ctx[1] === undefined && !("KOMBrowseInfoAudioAvailable" in props)) {
    			console_1.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioAvailable'");
    		}

    		if (/*KOMBrowseInfoAudioItem*/ ctx[0] === undefined && !("KOMBrowseInfoAudioItem" in props)) {
    			console_1.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioItem'");
    		}

    		if (/*KOMBrowseInfoAudioItemProperty*/ ctx[2] === undefined && !("KOMBrowseInfoAudioItemProperty" in props)) {
    			console_1.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioItemProperty'");
    		}

    		if (/*KOMBrowseInfoAudioDispatchCapture*/ ctx[5] === undefined && !("KOMBrowseInfoAudioDispatchCapture" in props)) {
    			console_1.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioDispatchCapture'");
    		}

    		if (/*KOMBrowseInfoAudioDispatchFetch*/ ctx[6] === undefined && !("KOMBrowseInfoAudioDispatchFetch" in props)) {
    			console_1.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioDispatchFetch'");
    		}

    		if (/*KOMBrowseInfoAudioDispatchClear*/ ctx[7] === undefined && !("KOMBrowseInfoAudioDispatchClear" in props)) {
    			console_1.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioDispatchClear'");
    		}
    	}

    	get KOMBrowseInfoAudioAvailable() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioAvailable(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoAudioItem() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioItem(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoAudioItemProperty() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioItemProperty(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoAudioDispatchCapture() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioDispatchCapture(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoAudioDispatchFetch() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioDispatchFetch(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoAudioDispatchClear() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioDispatchClear(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get DebugFakeChangeObject() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set DebugFakeChangeObject(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/sub-browse/submodules/KOMBrowseInfoTags/main.svelte generated by Svelte v3.29.4 */
    const file$i = "os-app/sub-browse/submodules/KOMBrowseInfoTags/main.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	return child_ctx;
    }

    // (36:1) {#each KOMBrowseInfoTagsItems as item }
    function create_each_block_1(ctx) {
    	let button;
    	let t_value = OLSKString.OLSKStringWithFormat(/*OLSKLocalized*/ ctx[5]("KOMBrowseInfoTagsRemoveButtonTextFormat"), /*item*/ ctx[9]) + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[6](/*item*/ ctx[9], ...args);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text(t_value);
    			attr_dev(button, "class", "KOMBrowseInfoTagsRemoveButton");
    			add_location(button, file$i, 36, 2, 840);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*KOMBrowseInfoTagsItems*/ 1 && t_value !== (t_value = OLSKString.OLSKStringWithFormat(/*OLSKLocalized*/ ctx[5]("KOMBrowseInfoTagsRemoveButtonTextFormat"), /*item*/ ctx[9]) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(36:1) {#each KOMBrowseInfoTagsItems as item }",
    		ctx
    	});

    	return block;
    }

    // (49:1) {#each KOMBrowseInfoTagsSuggestions as item }
    function create_each_block$5(ctx) {
    	let button;
    	let t_value = OLSKString.OLSKStringWithFormat(/*OLSKLocalized*/ ctx[5]("KOMBrowseInfoTagsSuggestButtonTextFormat"), /*item*/ ctx[9]) + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_1(...args) {
    		return /*click_handler_1*/ ctx[8](/*item*/ ctx[9], ...args);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text(t_value);
    			attr_dev(button, "class", "KOMBrowseInfoTagsSuggestButton");
    			add_location(button, file$i, 49, 2, 1580);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*KOMBrowseInfoTagsSuggestions*/ 2 && t_value !== (t_value = OLSKString.OLSKStringWithFormat(/*OLSKLocalized*/ ctx[5]("KOMBrowseInfoTagsSuggestButtonTextFormat"), /*item*/ ctx[9]) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(49:1) {#each KOMBrowseInfoTagsSuggestions as item }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let div;
    	let p0;
    	let t0;
    	let form;
    	let p1;
    	let input;
    	let input_placeholder_value;
    	let t1;
    	let button;
    	let t2_value = /*OLSKLocalized*/ ctx[5]("KOMBrowseInfoTagsCreateButtonText") + "";
    	let t2;
    	let button_disabled_value;
    	let t3;
    	let p2;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*KOMBrowseInfoTagsItems*/ ctx[0];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let each_value = /*KOMBrowseInfoTagsSuggestions*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			p0 = element("p");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t0 = space();
    			form = element("form");
    			p1 = element("p");
    			input = element("input");
    			t1 = space();
    			button = element("button");
    			t2 = text(t2_value);
    			t3 = space();
    			p2 = element("p");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			add_location(p0, file$i, 34, 0, 793);
    			attr_dev(input, "class", "KOMBrowseInfoTagsInputField OLSKMobileSafariRemoveDefaultInputStyle");
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", input_placeholder_value = /*OLSKLocalized*/ ctx[5]("KOMBrowseInfoTagsInputFieldText"));
    			add_location(input, file$i, 42, 2, 1153);
    			add_location(p1, file$i, 41, 1, 1147);
    			attr_dev(button, "class", "KOMBrowseInfoTagsCreateButton");
    			attr_dev(button, "type", "submit");
    			button.disabled = button_disabled_value = !/*mod*/ ctx[4]._ValueNewTagName;
    			add_location(button, file$i, 44, 1, 1359);
    			attr_dev(form, "class", "KOMBrowseInfoTagsForm");
    			add_location(form, file$i, 40, 0, 1068);
    			add_location(p2, file$i, 47, 0, 1527);
    			attr_dev(div, "class", "KOMBrowseInfoTags");
    			add_location(div, file$i, 32, 0, 760);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(p0, null);
    			}

    			append_dev(div, t0);
    			append_dev(div, form);
    			append_dev(form, p1);
    			append_dev(p1, input);
    			set_input_value(input, /*mod*/ ctx[4]._ValueNewTagName);
    			append_dev(form, t1);
    			append_dev(form, button);
    			append_dev(button, t2);
    			append_dev(div, t3);
    			append_dev(div, p2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(p2, null);
    			}

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[7]),
    					listen_dev(
    						form,
    						"submit",
    						function () {
    							if (is_function(/*mod*/ ctx[4].InterfaceFormDidSubmit)) /*mod*/ ctx[4].InterfaceFormDidSubmit.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (dirty & /*KOMBrowseInfoTagsDispatchRemove, KOMBrowseInfoTagsItems, OLSKString, OLSKLocalized*/ 41) {
    				each_value_1 = /*KOMBrowseInfoTagsItems*/ ctx[0];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(p0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*mod*/ 16 && input.value !== /*mod*/ ctx[4]._ValueNewTagName) {
    				set_input_value(input, /*mod*/ ctx[4]._ValueNewTagName);
    			}

    			if (dirty & /*mod*/ 16 && button_disabled_value !== (button_disabled_value = !/*mod*/ ctx[4]._ValueNewTagName)) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}

    			if (dirty & /*KOMBrowseInfoTagsDispatchAdd, KOMBrowseInfoTagsSuggestions, OLSKString, OLSKLocalized*/ 38) {
    				each_value = /*KOMBrowseInfoTagsSuggestions*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(p2, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMBrowseInfoTagsItems } = $$props;
    	let { KOMBrowseInfoTagsSuggestions = [] } = $$props;
    	let { KOMBrowseInfoTagsDispatchAdd } = $$props;
    	let { KOMBrowseInfoTagsDispatchRemove } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const mod = {
    		// VALUE
    		_ValueNewTagName: "",
    		// INTERFACE
    		InterfaceFormDidSubmit() {
    			KOMBrowseInfoTagsDispatchAdd(mod._ValueNewTagName);
    			$$invalidate(4, mod._ValueNewTagName = "", mod);
    			event.preventDefault();
    		}
    	};

    	const writable_props = [
    		"KOMBrowseInfoTagsItems",
    		"KOMBrowseInfoTagsSuggestions",
    		"KOMBrowseInfoTagsDispatchAdd",
    		"KOMBrowseInfoTagsDispatchRemove"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const click_handler = item => KOMBrowseInfoTagsDispatchRemove(item);

    	function input_input_handler() {
    		mod._ValueNewTagName = this.value;
    		$$invalidate(4, mod);
    	}

    	const click_handler_1 = item => KOMBrowseInfoTagsDispatchAdd(item);

    	$$self.$$set = $$props => {
    		if ("KOMBrowseInfoTagsItems" in $$props) $$invalidate(0, KOMBrowseInfoTagsItems = $$props.KOMBrowseInfoTagsItems);
    		if ("KOMBrowseInfoTagsSuggestions" in $$props) $$invalidate(1, KOMBrowseInfoTagsSuggestions = $$props.KOMBrowseInfoTagsSuggestions);
    		if ("KOMBrowseInfoTagsDispatchAdd" in $$props) $$invalidate(2, KOMBrowseInfoTagsDispatchAdd = $$props.KOMBrowseInfoTagsDispatchAdd);
    		if ("KOMBrowseInfoTagsDispatchRemove" in $$props) $$invalidate(3, KOMBrowseInfoTagsDispatchRemove = $$props.KOMBrowseInfoTagsDispatchRemove);
    	};

    	$$self.$capture_state = () => ({
    		KOMBrowseInfoTagsItems,
    		KOMBrowseInfoTagsSuggestions,
    		KOMBrowseInfoTagsDispatchAdd,
    		KOMBrowseInfoTagsDispatchRemove,
    		OLSKInternational,
    		OLSKLocalized,
    		OLSKString,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMBrowseInfoTagsItems" in $$props) $$invalidate(0, KOMBrowseInfoTagsItems = $$props.KOMBrowseInfoTagsItems);
    		if ("KOMBrowseInfoTagsSuggestions" in $$props) $$invalidate(1, KOMBrowseInfoTagsSuggestions = $$props.KOMBrowseInfoTagsSuggestions);
    		if ("KOMBrowseInfoTagsDispatchAdd" in $$props) $$invalidate(2, KOMBrowseInfoTagsDispatchAdd = $$props.KOMBrowseInfoTagsDispatchAdd);
    		if ("KOMBrowseInfoTagsDispatchRemove" in $$props) $$invalidate(3, KOMBrowseInfoTagsDispatchRemove = $$props.KOMBrowseInfoTagsDispatchRemove);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMBrowseInfoTagsItems,
    		KOMBrowseInfoTagsSuggestions,
    		KOMBrowseInfoTagsDispatchAdd,
    		KOMBrowseInfoTagsDispatchRemove,
    		mod,
    		OLSKLocalized,
    		click_handler,
    		input_input_handler,
    		click_handler_1
    	];
    }

    class Main$i extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {
    			KOMBrowseInfoTagsItems: 0,
    			KOMBrowseInfoTagsSuggestions: 1,
    			KOMBrowseInfoTagsDispatchAdd: 2,
    			KOMBrowseInfoTagsDispatchRemove: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$i.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMBrowseInfoTagsItems*/ ctx[0] === undefined && !("KOMBrowseInfoTagsItems" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoTagsItems'");
    		}

    		if (/*KOMBrowseInfoTagsDispatchAdd*/ ctx[2] === undefined && !("KOMBrowseInfoTagsDispatchAdd" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoTagsDispatchAdd'");
    		}

    		if (/*KOMBrowseInfoTagsDispatchRemove*/ ctx[3] === undefined && !("KOMBrowseInfoTagsDispatchRemove" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoTagsDispatchRemove'");
    		}
    	}

    	get KOMBrowseInfoTagsItems() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoTagsItems(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoTagsSuggestions() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoTagsSuggestions(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoTagsDispatchAdd() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoTagsDispatchAdd(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoTagsDispatchRemove() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoTagsDispatchRemove(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/sub-browse/submodules/KOMBrowseInfo/main.svelte generated by Svelte v3.29.4 */

    const { Object: Object_1$4 } = globals;
    const file$j = "os-app/sub-browse/submodules/KOMBrowseInfo/main.svelte";

    // (114:0) {#if !KOMBrowseInfoItem}
    function create_if_block_2$2(ctx) {
    	let olskdetailplaceholder;
    	let current;
    	olskdetailplaceholder = new Main$g({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(olskdetailplaceholder.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskdetailplaceholder, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskdetailplaceholder.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskdetailplaceholder.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskdetailplaceholder, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(114:0) {#if !KOMBrowseInfoItem}",
    		ctx
    	});

    	return block;
    }

    // (118:0) {#if KOMBrowseInfoItem}
    function create_if_block_1$4(ctx) {
    	let header;
    	let div1;
    	let button0;
    	let div0;
    	let button0_title_value;
    	let t0;
    	let div4;
    	let button1;
    	let div2;
    	let button1_title_value;
    	let t1;
    	let button2;
    	let div3;
    	let button2_title_value;
    	let t2;
    	let div5;
    	let p0;
    	let input0;
    	let input0_placeholder_value;
    	let t3;
    	let p1;
    	let button3;
    	let t4_value = /*OLSKLocalized*/ ctx[14]("KOMBrowseInfoFormFrontReadButtonText") + "";
    	let t4;
    	let button3_disabled_value;
    	let t5;
    	let kombrowseinfoaudio0;
    	let t6;
    	let p2;
    	let input1;
    	let input1_placeholder_value;
    	let t7;
    	let p3;
    	let button4;
    	let t8_value = /*OLSKLocalized*/ ctx[14]("KOMBrowseInfoFormRearReadButtonText") + "";
    	let t8;
    	let button4_disabled_value;
    	let t9;
    	let kombrowseinfoaudio1;
    	let t10;
    	let p4;
    	let input2;
    	let input2_placeholder_value;
    	let t11;
    	let hr;
    	let t12;
    	let p5;
    	let kombrowseinfotags;
    	let current;
    	let mounted;
    	let dispose;

    	kombrowseinfoaudio0 = new Main$h({
    			props: {
    				KOMBrowseInfoAudioItem: /*KOMBrowseInfoItem*/ ctx[0],
    				KOMBrowseInfoAudioItemProperty: "KOMCardFrontAudio",
    				KOMBrowseInfoAudioAvailable: "WebAssembly" in window,
    				KOMBrowseInfoAudioDispatchCapture: /*KOMBrowseInfoAudioDispatchCapture*/ ctx[9],
    				KOMBrowseInfoAudioDispatchFetch: /*KOMBrowseInfoAudioDispatchFetch*/ ctx[10],
    				KOMBrowseInfoAudioDispatchClear: /*KOMBrowseInfoAudioDispatchClear*/ ctx[11]
    			},
    			$$inline: true
    		});

    	kombrowseinfoaudio1 = new Main$h({
    			props: {
    				KOMBrowseInfoAudioItem: /*KOMBrowseInfoItem*/ ctx[0],
    				KOMBrowseInfoAudioItemProperty: "KOMCardRearAudio",
    				KOMBrowseInfoAudioAvailable: "WebAssembly" in window,
    				KOMBrowseInfoAudioDispatchCapture: /*KOMBrowseInfoAudioDispatchCapture*/ ctx[9],
    				KOMBrowseInfoAudioDispatchFetch: /*KOMBrowseInfoAudioDispatchFetch*/ ctx[10],
    				KOMBrowseInfoAudioDispatchClear: /*KOMBrowseInfoAudioDispatchClear*/ ctx[11]
    			},
    			$$inline: true
    		});

    	kombrowseinfotags = new Main$i({
    			props: {
    				KOMBrowseInfoTagsItems: /*KOMBrowseInfoItem*/ ctx[0].KOMCardTags || [],
    				KOMBrowseInfoTagsSuggestions: /*KOMBrowseInfoTagsSuggestions*/ ctx[2],
    				KOMBrowseInfoTagsDispatchAdd: /*mod*/ ctx[15].KOMBrowseInfoTagsDispatchAdd,
    				KOMBrowseInfoTagsDispatchRemove: /*mod*/ ctx[15].KOMBrowseInfoTagsDispatchRemove
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			header = element("header");
    			div1 = element("div");
    			button0 = element("button");
    			div0 = element("div");
    			t0 = space();
    			div4 = element("div");
    			button1 = element("button");
    			div2 = element("div");
    			t1 = space();
    			button2 = element("button");
    			div3 = element("div");
    			t2 = space();
    			div5 = element("div");
    			p0 = element("p");
    			input0 = element("input");
    			t3 = space();
    			p1 = element("p");
    			button3 = element("button");
    			t4 = text(t4_value);
    			t5 = space();
    			create_component(kombrowseinfoaudio0.$$.fragment);
    			t6 = space();
    			p2 = element("p");
    			input1 = element("input");
    			t7 = space();
    			p3 = element("p");
    			button4 = element("button");
    			t8 = text(t8_value);
    			t9 = space();
    			create_component(kombrowseinfoaudio1.$$.fragment);
    			t10 = space();
    			p4 = element("p");
    			input2 = element("input");
    			t11 = space();
    			hr = element("hr");
    			t12 = space();
    			p5 = element("p");
    			create_component(kombrowseinfotags.$$.fragment);
    			attr_dev(div0, "class", "KOMBrowseInfoToolbarBackButtonImage");
    			add_location(div0, file$j, 121, 3, 3886);
    			attr_dev(button0, "class", "KOMBrowseInfoToolbarBackButton OLSKLayoutButtonNoStyle OLSKLayoutElementTappable OLSKToolbarButton OLSKVisibilityMobile");
    			attr_dev(button0, "title", button0_title_value = /*OLSKLocalized*/ ctx[14]("KOMBrowseInfoToolbarBackButtonText"));
    			add_location(button0, file$j, 120, 2, 3645);
    			attr_dev(div1, "class", "OLSKToolbarElementGroup");
    			add_location(div1, file$j, 119, 1, 3605);
    			attr_dev(div2, "class", "KOMBrowseInfoToolbarDiscardButtonImage");
    			add_location(div2, file$j, 127, 3, 4350);
    			attr_dev(button1, "class", "KOMBrowseInfoToolbarDiscardButton OLSKLayoutButtonNoStyle OLSKLayoutElementTappable OLSKToolbarButton");
    			attr_dev(button1, "title", button1_title_value = /*OLSKLocalized*/ ctx[14]("KOMBrowseInfoToolbarDiscardButtonText"));
    			add_location(button1, file$j, 126, 2, 4028);
    			attr_dev(div3, "class", "KOMBrowseInfoToolbarTemplateButtonImage");
    			add_location(div3, file$j, 133, 3, 4821);
    			attr_dev(button2, "class", "KOMBrowseInfoToolbarTemplateButton OLSKLayoutButtonNoStyle OLSKLayoutElementTappable OLSKToolbarButton");
    			attr_dev(button2, "title", button2_title_value = /*OLSKLocalized*/ ctx[14]("KOMBrowseInfoToolbarTemplateButtonText"));
    			attr_dev(button2, "accesskey", "t");
    			add_location(button2, file$j, 130, 2, 4453);
    			attr_dev(div4, "class", "OLSKToolbarElementGroup");
    			add_location(div4, file$j, 125, 1, 3988);
    			attr_dev(header, "class", "KOMBrowseInfoToolbar OLSKMobileViewHeader OLSKToolbar OLSKToolbarJustify svelte-3m0krl");
    			add_location(header, file$j, 118, 0, 3514);
    			attr_dev(input0, "class", "KOMBrowseInfoFormFrontTextField OLSKMobileSafariRemoveDefaultInputStyle");
    			attr_dev(input0, "placeholder", input0_placeholder_value = /*OLSKLocalized*/ ctx[14]("KOMBrowseInfoFormFrontTextFieldText"));
    			attr_dev(input0, "type", "text");
    			add_location(input0, file$j, 141, 1, 4975);
    			attr_dev(p0, "class", "svelte-3m0krl");
    			add_location(p0, file$j, 140, 0, 4970);
    			attr_dev(button3, "class", "KOMBrowseInfoFormFrontReadButton");
    			button3.disabled = button3_disabled_value = !/*KOMBrowseInfoSpeechAvailable*/ ctx[3] || !/*KOMBrowseInfoDeck*/ ctx[1].KOMDeckFrontLanguageCode;
    			add_location(button3, file$j, 145, 1, 5286);
    			attr_dev(p1, "class", "KOMBrowseInfoFormFrontAudio svelte-3m0krl");
    			add_location(p1, file$j, 144, 0, 5245);
    			attr_dev(input1, "class", "KOMBrowseInfoFormRearTextField OLSKMobileSafariRemoveDefaultInputStyle");
    			attr_dev(input1, "placeholder", input1_placeholder_value = /*OLSKLocalized*/ ctx[14]("KOMBrowseInfoFormRearTextFieldText"));
    			attr_dev(input1, "type", "text");
    			add_location(input1, file$j, 158, 1, 6027);
    			attr_dev(p2, "class", "svelte-3m0krl");
    			add_location(p2, file$j, 157, 0, 6022);
    			attr_dev(button4, "class", "KOMBrowseInfoFormRearReadButton");
    			button4.disabled = button4_disabled_value = !/*KOMBrowseInfoSpeechAvailable*/ ctx[3] || !/*KOMBrowseInfoDeck*/ ctx[1].KOMDeckRearLanguageCode;
    			add_location(button4, file$j, 162, 1, 6334);
    			attr_dev(p3, "class", "KOMBrowseInfoFormRearAudio svelte-3m0krl");
    			add_location(p3, file$j, 161, 0, 6294);
    			attr_dev(input2, "class", "KOMBrowseInfoFormNotesField OLSKMobileSafariRemoveDefaultInputStyle");
    			attr_dev(input2, "placeholder", input2_placeholder_value = /*OLSKLocalized*/ ctx[14]("KOMBrowseInfoFormNotesFieldText"));
    			attr_dev(input2, "type", "text");
    			add_location(input2, file$j, 175, 1, 7069);
    			attr_dev(p4, "class", "svelte-3m0krl");
    			add_location(p4, file$j, 174, 0, 7064);
    			attr_dev(hr, "class", "svelte-3m0krl");
    			add_location(hr, file$j, 178, 0, 7327);
    			attr_dev(p5, "class", "KOMBrowseInfoFormTags svelte-3m0krl");
    			add_location(p5, file$j, 180, 0, 7335);
    			attr_dev(div5, "class", "KOMBrowseInfoForm svelte-3m0krl");
    			add_location(div5, file$j, 138, 0, 4937);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, header, anchor);
    			append_dev(header, div1);
    			append_dev(div1, button0);
    			append_dev(button0, div0);
    			div0.innerHTML = _OLSKSharedBack;
    			append_dev(header, t0);
    			append_dev(header, div4);
    			append_dev(div4, button1);
    			append_dev(button1, div2);
    			div2.innerHTML = _OLSKSharedDiscard;
    			append_dev(div4, t1);
    			append_dev(div4, button2);
    			append_dev(button2, div3);
    			div3.innerHTML = _OLSKSharedClone;
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, p0);
    			append_dev(p0, input0);
    			set_input_value(input0, /*KOMBrowseInfoItem*/ ctx[0].KOMCardFrontText);
    			append_dev(div5, t3);
    			append_dev(div5, p1);
    			append_dev(p1, button3);
    			append_dev(button3, t4);
    			append_dev(p1, t5);
    			mount_component(kombrowseinfoaudio0, p1, null);
    			append_dev(div5, t6);
    			append_dev(div5, p2);
    			append_dev(p2, input1);
    			set_input_value(input1, /*KOMBrowseInfoItem*/ ctx[0].KOMCardRearText);
    			append_dev(div5, t7);
    			append_dev(div5, p3);
    			append_dev(p3, button4);
    			append_dev(button4, t8);
    			append_dev(p3, t9);
    			mount_component(kombrowseinfoaudio1, p3, null);
    			append_dev(div5, t10);
    			append_dev(div5, p4);
    			append_dev(p4, input2);
    			set_input_value(input2, /*KOMBrowseInfoItem*/ ctx[0].KOMCardNotes);
    			append_dev(div5, t11);
    			append_dev(div5, hr);
    			append_dev(div5, t12);
    			append_dev(div5, p5);
    			mount_component(kombrowseinfotags, p5, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*KOMBrowseInfoDispatchBack*/ ctx[4])) /*KOMBrowseInfoDispatchBack*/ ctx[4].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(button1, "click", /*click_handler*/ ctx[18], false, false, false),
    					listen_dev(button2, "click", /*click_handler_1*/ ctx[19], false, false, false),
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[20]),
    					listen_dev(
    						input0,
    						"input",
    						function () {
    							if (is_function(/*KOMBrowseInfoDispatchUpdate*/ ctx[5])) /*KOMBrowseInfoDispatchUpdate*/ ctx[5].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(button3, "click", /*click_handler_2*/ ctx[21], false, false, false),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[22]),
    					listen_dev(
    						input1,
    						"input",
    						function () {
    							if (is_function(/*KOMBrowseInfoDispatchUpdate*/ ctx[5])) /*KOMBrowseInfoDispatchUpdate*/ ctx[5].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(button4, "click", /*click_handler_3*/ ctx[23], false, false, false),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[24]),
    					listen_dev(
    						input2,
    						"input",
    						function () {
    							if (is_function(/*KOMBrowseInfoDispatchUpdate*/ ctx[5])) /*KOMBrowseInfoDispatchUpdate*/ ctx[5].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*KOMBrowseInfoItem*/ 1 && input0.value !== /*KOMBrowseInfoItem*/ ctx[0].KOMCardFrontText) {
    				set_input_value(input0, /*KOMBrowseInfoItem*/ ctx[0].KOMCardFrontText);
    			}

    			if (!current || dirty & /*KOMBrowseInfoSpeechAvailable, KOMBrowseInfoDeck*/ 10 && button3_disabled_value !== (button3_disabled_value = !/*KOMBrowseInfoSpeechAvailable*/ ctx[3] || !/*KOMBrowseInfoDeck*/ ctx[1].KOMDeckFrontLanguageCode)) {
    				prop_dev(button3, "disabled", button3_disabled_value);
    			}

    			const kombrowseinfoaudio0_changes = {};
    			if (dirty & /*KOMBrowseInfoItem*/ 1) kombrowseinfoaudio0_changes.KOMBrowseInfoAudioItem = /*KOMBrowseInfoItem*/ ctx[0];
    			if (dirty & /*KOMBrowseInfoAudioDispatchCapture*/ 512) kombrowseinfoaudio0_changes.KOMBrowseInfoAudioDispatchCapture = /*KOMBrowseInfoAudioDispatchCapture*/ ctx[9];
    			if (dirty & /*KOMBrowseInfoAudioDispatchFetch*/ 1024) kombrowseinfoaudio0_changes.KOMBrowseInfoAudioDispatchFetch = /*KOMBrowseInfoAudioDispatchFetch*/ ctx[10];
    			if (dirty & /*KOMBrowseInfoAudioDispatchClear*/ 2048) kombrowseinfoaudio0_changes.KOMBrowseInfoAudioDispatchClear = /*KOMBrowseInfoAudioDispatchClear*/ ctx[11];
    			kombrowseinfoaudio0.$set(kombrowseinfoaudio0_changes);

    			if (dirty & /*KOMBrowseInfoItem*/ 1 && input1.value !== /*KOMBrowseInfoItem*/ ctx[0].KOMCardRearText) {
    				set_input_value(input1, /*KOMBrowseInfoItem*/ ctx[0].KOMCardRearText);
    			}

    			if (!current || dirty & /*KOMBrowseInfoSpeechAvailable, KOMBrowseInfoDeck*/ 10 && button4_disabled_value !== (button4_disabled_value = !/*KOMBrowseInfoSpeechAvailable*/ ctx[3] || !/*KOMBrowseInfoDeck*/ ctx[1].KOMDeckRearLanguageCode)) {
    				prop_dev(button4, "disabled", button4_disabled_value);
    			}

    			const kombrowseinfoaudio1_changes = {};
    			if (dirty & /*KOMBrowseInfoItem*/ 1) kombrowseinfoaudio1_changes.KOMBrowseInfoAudioItem = /*KOMBrowseInfoItem*/ ctx[0];
    			if (dirty & /*KOMBrowseInfoAudioDispatchCapture*/ 512) kombrowseinfoaudio1_changes.KOMBrowseInfoAudioDispatchCapture = /*KOMBrowseInfoAudioDispatchCapture*/ ctx[9];
    			if (dirty & /*KOMBrowseInfoAudioDispatchFetch*/ 1024) kombrowseinfoaudio1_changes.KOMBrowseInfoAudioDispatchFetch = /*KOMBrowseInfoAudioDispatchFetch*/ ctx[10];
    			if (dirty & /*KOMBrowseInfoAudioDispatchClear*/ 2048) kombrowseinfoaudio1_changes.KOMBrowseInfoAudioDispatchClear = /*KOMBrowseInfoAudioDispatchClear*/ ctx[11];
    			kombrowseinfoaudio1.$set(kombrowseinfoaudio1_changes);

    			if (dirty & /*KOMBrowseInfoItem*/ 1 && input2.value !== /*KOMBrowseInfoItem*/ ctx[0].KOMCardNotes) {
    				set_input_value(input2, /*KOMBrowseInfoItem*/ ctx[0].KOMCardNotes);
    			}

    			const kombrowseinfotags_changes = {};
    			if (dirty & /*KOMBrowseInfoItem*/ 1) kombrowseinfotags_changes.KOMBrowseInfoTagsItems = /*KOMBrowseInfoItem*/ ctx[0].KOMCardTags || [];
    			if (dirty & /*KOMBrowseInfoTagsSuggestions*/ 4) kombrowseinfotags_changes.KOMBrowseInfoTagsSuggestions = /*KOMBrowseInfoTagsSuggestions*/ ctx[2];
    			kombrowseinfotags.$set(kombrowseinfotags_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kombrowseinfoaudio0.$$.fragment, local);
    			transition_in(kombrowseinfoaudio1.$$.fragment, local);
    			transition_in(kombrowseinfotags.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kombrowseinfoaudio0.$$.fragment, local);
    			transition_out(kombrowseinfoaudio1.$$.fragment, local);
    			transition_out(kombrowseinfotags.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(header);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div5);
    			destroy_component(kombrowseinfoaudio0);
    			destroy_component(kombrowseinfoaudio1);
    			destroy_component(kombrowseinfotags);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(118:0) {#if KOMBrowseInfoItem}",
    		ctx
    	});

    	return block;
    }

    // (195:0) {#if OLSK_TESTING_BEHAVIOUR() && KOMBrowseInfo_DebugShowLauncherButton }
    function create_if_block$9(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			attr_dev(button, "class", "OLSKAppToolbarLauncherButton");
    			add_location(button, file$j, 195, 1, 7767);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*mod*/ ctx[15]._OLSKAppToolbarDispatchLauncher, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(195:0) {#if OLSK_TESTING_BEHAVIOUR() && KOMBrowseInfo_DebugShowLauncherButton }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let div;
    	let t0;
    	let div_aria_hidden_value;
    	let t1;
    	let show_if = main_12() && /*KOMBrowseInfo_DebugShowLauncherButton*/ ctx[13];
    	let if_block2_anchor;
    	let current;
    	let if_block0 = !/*KOMBrowseInfoItem*/ ctx[0] && create_if_block_2$2(ctx);
    	let if_block1 = /*KOMBrowseInfoItem*/ ctx[0] && create_if_block_1$4(ctx);
    	let if_block2 = show_if && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    			attr_dev(div, "class", "KOMBrowseInfo OLSKViewportDetail svelte-3m0krl");
    			attr_dev(div, "aria-hidden", div_aria_hidden_value = /*OLSKMobileViewInactive*/ ctx[12] ? true : null);
    			toggle_class(div, "OLSKMobileViewInactive", /*OLSKMobileViewInactive*/ ctx[12]);
    			add_location(div, file$j, 111, 0, 3275);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t0);
    			if (if_block1) if_block1.m(div, null);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!/*KOMBrowseInfoItem*/ ctx[0]) {
    				if (if_block0) {
    					if (dirty & /*KOMBrowseInfoItem*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_2$2(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*KOMBrowseInfoItem*/ ctx[0]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*KOMBrowseInfoItem*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$4(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*OLSKMobileViewInactive*/ 4096 && div_aria_hidden_value !== (div_aria_hidden_value = /*OLSKMobileViewInactive*/ ctx[12] ? true : null)) {
    				attr_dev(div, "aria-hidden", div_aria_hidden_value);
    			}

    			if (dirty & /*OLSKMobileViewInactive*/ 4096) {
    				toggle_class(div, "OLSKMobileViewInactive", /*OLSKMobileViewInactive*/ ctx[12]);
    			}

    			if (dirty & /*KOMBrowseInfo_DebugShowLauncherButton*/ 8192) show_if = main_12() && /*KOMBrowseInfo_DebugShowLauncherButton*/ ctx[13];

    			if (show_if) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$9(ctx);
    					if_block2.c();
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMBrowseInfoItem } = $$props;
    	let { KOMBrowseInfoDeck } = $$props;
    	let { KOMBrowseInfoTagsSuggestions } = $$props;
    	let { KOMBrowseInfoSpeechAvailable } = $$props;
    	let { KOMBrowseInfoDispatchBack } = $$props;
    	let { KOMBrowseInfoDispatchUpdate } = $$props;
    	let { KOMBrowseInfoDispatchDiscard } = $$props;
    	let { KOMBrowseInfoDispatchTemplate } = $$props;
    	let { KOMBrowseInfoDispatchRead } = $$props;
    	let { KOMBrowseInfoAudioDispatchCapture } = $$props;
    	let { KOMBrowseInfoAudioDispatchFetch } = $$props;
    	let { KOMBrowseInfoAudioDispatchClear } = $$props;
    	let { KOMBrowseInfoDispatchDebug } = $$props;
    	let { OLSKMobileViewInactive = false } = $$props;
    	let { KOMBrowseInfo_DebugShowLauncherButton = false } = $$props;

    	const modPublic = {
    		KOMBrowseInfoRecipes() {
    			return mod.DataBrowseInfoRecipes();
    		}
    	};

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const mod = {
    		// DATA
    		DataBrowseInfoRecipes() {
    			if (!KOMBrowseInfoItem) {
    				return [];
    			}

    			const items = [
    				{
    					LCHRecipeSignature: "KOMBrowseInfoLauncherItemToggleRetire",
    					LCHRecipeName: OLSKLocalized("KOMBrowseInfoLauncherItemToggleRetireText"),
    					LCHRecipeCallback: function KOMBrowseInfoLauncherItemToggleRetire() {
    						if (KOMBrowseInfoItem.KOMCardIsRetired) {
    							delete KOMBrowseInfoItem.KOMCardIsRetired;
    						} else {
    							$$invalidate(0, KOMBrowseInfoItem.KOMCardIsRetired = true, KOMBrowseInfoItem);
    						}

    						KOMBrowseInfoDispatchUpdate();
    					}
    				},
    				{
    					LCHRecipeSignature: "KOMBrowseInfoLauncherItemDebug",
    					LCHRecipeName: OLSKLocalized("KOMBrowseInfoLauncherItemDebugText"),
    					LCHRecipeCallback: function KOMBrowseInfoLauncherItemDebug() {
    						KOMBrowseInfoDispatchDebug(KOMBrowseInfoItem);
    					}
    				}
    			];

    			if (main_12()) {
    				items.push({
    					LCHRecipeName: "KOMBrowseInfoLauncherFakeItemProxy",
    					LCHRecipeCallback: function KOMBrowseInfoLauncherFakeItemProxy() {
    						
    					}
    				});
    			}

    			return items;
    		},
    		// MESSAGE
    		KOMBrowseInfoTagsDispatchAdd(inputData) {
    			if (!inputData.trim()) {
    				return;
    			}

    			if ((KOMBrowseInfoItem.KOMCardTags || []).includes(inputData)) {
    				return;
    			}

    			$$invalidate(0, KOMBrowseInfoItem.KOMCardTags = (KOMBrowseInfoItem.KOMCardTags || []).concat(inputData), KOMBrowseInfoItem);
    			KOMBrowseInfoDispatchUpdate();
    		},
    		KOMBrowseInfoTagsDispatchRemove(inputData) {
    			$$invalidate(
    				0,
    				KOMBrowseInfoItem.KOMCardTags = KOMBrowseInfoItem.KOMCardTags.filter(function (e) {
    					return e !== inputData;
    				}),
    				KOMBrowseInfoItem
    			);

    			KOMBrowseInfoDispatchUpdate();
    		},
    		_OLSKAppToolbarDispatchLauncher() {
    			window.Launchlet.LCHSingletonCreate({
    				LCHOptionRecipes: mod.DataBrowseInfoRecipes()
    			});
    		}
    	};

    	const writable_props = [
    		"KOMBrowseInfoItem",
    		"KOMBrowseInfoDeck",
    		"KOMBrowseInfoTagsSuggestions",
    		"KOMBrowseInfoSpeechAvailable",
    		"KOMBrowseInfoDispatchBack",
    		"KOMBrowseInfoDispatchUpdate",
    		"KOMBrowseInfoDispatchDiscard",
    		"KOMBrowseInfoDispatchTemplate",
    		"KOMBrowseInfoDispatchRead",
    		"KOMBrowseInfoAudioDispatchCapture",
    		"KOMBrowseInfoAudioDispatchFetch",
    		"KOMBrowseInfoAudioDispatchClear",
    		"KOMBrowseInfoDispatchDebug",
    		"OLSKMobileViewInactive",
    		"KOMBrowseInfo_DebugShowLauncherButton"
    	];

    	Object_1$4.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => window.confirm(OLSKLocalized("KOMBrowseInfoDiscardConfirmText")) && KOMBrowseInfoDispatchDiscard(KOMBrowseInfoItem);

    	const click_handler_1 = () => KOMBrowseInfoDispatchTemplate(Object.fromEntries(Object.entries(KOMBrowseInfoItem).filter(function (e) {
    		return e[0] === "KOMCardTags";
    	})));

    	function input0_input_handler() {
    		KOMBrowseInfoItem.KOMCardFrontText = this.value;
    		$$invalidate(0, KOMBrowseInfoItem);
    	}

    	const click_handler_2 = () => KOMBrowseInfoDispatchRead(KOMBrowseInfoItem.KOMCardFrontText, KOMBrowseInfoDeck.KOMDeckFrontLanguageCode);

    	function input1_input_handler() {
    		KOMBrowseInfoItem.KOMCardRearText = this.value;
    		$$invalidate(0, KOMBrowseInfoItem);
    	}

    	const click_handler_3 = () => KOMBrowseInfoDispatchRead(KOMBrowseInfoItem.KOMCardRearText, KOMBrowseInfoDeck.KOMDeckRearLanguageCode);

    	function input2_input_handler() {
    		KOMBrowseInfoItem.KOMCardNotes = this.value;
    		$$invalidate(0, KOMBrowseInfoItem);
    	}

    	$$self.$$set = $$props => {
    		if ("KOMBrowseInfoItem" in $$props) $$invalidate(0, KOMBrowseInfoItem = $$props.KOMBrowseInfoItem);
    		if ("KOMBrowseInfoDeck" in $$props) $$invalidate(1, KOMBrowseInfoDeck = $$props.KOMBrowseInfoDeck);
    		if ("KOMBrowseInfoTagsSuggestions" in $$props) $$invalidate(2, KOMBrowseInfoTagsSuggestions = $$props.KOMBrowseInfoTagsSuggestions);
    		if ("KOMBrowseInfoSpeechAvailable" in $$props) $$invalidate(3, KOMBrowseInfoSpeechAvailable = $$props.KOMBrowseInfoSpeechAvailable);
    		if ("KOMBrowseInfoDispatchBack" in $$props) $$invalidate(4, KOMBrowseInfoDispatchBack = $$props.KOMBrowseInfoDispatchBack);
    		if ("KOMBrowseInfoDispatchUpdate" in $$props) $$invalidate(5, KOMBrowseInfoDispatchUpdate = $$props.KOMBrowseInfoDispatchUpdate);
    		if ("KOMBrowseInfoDispatchDiscard" in $$props) $$invalidate(6, KOMBrowseInfoDispatchDiscard = $$props.KOMBrowseInfoDispatchDiscard);
    		if ("KOMBrowseInfoDispatchTemplate" in $$props) $$invalidate(7, KOMBrowseInfoDispatchTemplate = $$props.KOMBrowseInfoDispatchTemplate);
    		if ("KOMBrowseInfoDispatchRead" in $$props) $$invalidate(8, KOMBrowseInfoDispatchRead = $$props.KOMBrowseInfoDispatchRead);
    		if ("KOMBrowseInfoAudioDispatchCapture" in $$props) $$invalidate(9, KOMBrowseInfoAudioDispatchCapture = $$props.KOMBrowseInfoAudioDispatchCapture);
    		if ("KOMBrowseInfoAudioDispatchFetch" in $$props) $$invalidate(10, KOMBrowseInfoAudioDispatchFetch = $$props.KOMBrowseInfoAudioDispatchFetch);
    		if ("KOMBrowseInfoAudioDispatchClear" in $$props) $$invalidate(11, KOMBrowseInfoAudioDispatchClear = $$props.KOMBrowseInfoAudioDispatchClear);
    		if ("KOMBrowseInfoDispatchDebug" in $$props) $$invalidate(16, KOMBrowseInfoDispatchDebug = $$props.KOMBrowseInfoDispatchDebug);
    		if ("OLSKMobileViewInactive" in $$props) $$invalidate(12, OLSKMobileViewInactive = $$props.OLSKMobileViewInactive);
    		if ("KOMBrowseInfo_DebugShowLauncherButton" in $$props) $$invalidate(13, KOMBrowseInfo_DebugShowLauncherButton = $$props.KOMBrowseInfo_DebugShowLauncherButton);
    	};

    	$$self.$capture_state = () => ({
    		KOMBrowseInfoItem,
    		KOMBrowseInfoDeck,
    		KOMBrowseInfoTagsSuggestions,
    		KOMBrowseInfoSpeechAvailable,
    		KOMBrowseInfoDispatchBack,
    		KOMBrowseInfoDispatchUpdate,
    		KOMBrowseInfoDispatchDiscard,
    		KOMBrowseInfoDispatchTemplate,
    		KOMBrowseInfoDispatchRead,
    		KOMBrowseInfoAudioDispatchCapture,
    		KOMBrowseInfoAudioDispatchFetch,
    		KOMBrowseInfoAudioDispatchClear,
    		KOMBrowseInfoDispatchDebug,
    		OLSKMobileViewInactive,
    		KOMBrowseInfo_DebugShowLauncherButton,
    		modPublic,
    		OLSKInternational,
    		OLSKLocalized,
    		OLSK_TESTING_BEHAVIOUR: main_12,
    		mod,
    		OLSKDetailPlaceholder: Main$g,
    		_OLSKSharedBack,
    		_OLSKSharedDiscard,
    		_OLSKSharedClone,
    		KOMBrowseInfoAudio: Main$h,
    		KOMBrowseInfoTags: Main$i
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMBrowseInfoItem" in $$props) $$invalidate(0, KOMBrowseInfoItem = $$props.KOMBrowseInfoItem);
    		if ("KOMBrowseInfoDeck" in $$props) $$invalidate(1, KOMBrowseInfoDeck = $$props.KOMBrowseInfoDeck);
    		if ("KOMBrowseInfoTagsSuggestions" in $$props) $$invalidate(2, KOMBrowseInfoTagsSuggestions = $$props.KOMBrowseInfoTagsSuggestions);
    		if ("KOMBrowseInfoSpeechAvailable" in $$props) $$invalidate(3, KOMBrowseInfoSpeechAvailable = $$props.KOMBrowseInfoSpeechAvailable);
    		if ("KOMBrowseInfoDispatchBack" in $$props) $$invalidate(4, KOMBrowseInfoDispatchBack = $$props.KOMBrowseInfoDispatchBack);
    		if ("KOMBrowseInfoDispatchUpdate" in $$props) $$invalidate(5, KOMBrowseInfoDispatchUpdate = $$props.KOMBrowseInfoDispatchUpdate);
    		if ("KOMBrowseInfoDispatchDiscard" in $$props) $$invalidate(6, KOMBrowseInfoDispatchDiscard = $$props.KOMBrowseInfoDispatchDiscard);
    		if ("KOMBrowseInfoDispatchTemplate" in $$props) $$invalidate(7, KOMBrowseInfoDispatchTemplate = $$props.KOMBrowseInfoDispatchTemplate);
    		if ("KOMBrowseInfoDispatchRead" in $$props) $$invalidate(8, KOMBrowseInfoDispatchRead = $$props.KOMBrowseInfoDispatchRead);
    		if ("KOMBrowseInfoAudioDispatchCapture" in $$props) $$invalidate(9, KOMBrowseInfoAudioDispatchCapture = $$props.KOMBrowseInfoAudioDispatchCapture);
    		if ("KOMBrowseInfoAudioDispatchFetch" in $$props) $$invalidate(10, KOMBrowseInfoAudioDispatchFetch = $$props.KOMBrowseInfoAudioDispatchFetch);
    		if ("KOMBrowseInfoAudioDispatchClear" in $$props) $$invalidate(11, KOMBrowseInfoAudioDispatchClear = $$props.KOMBrowseInfoAudioDispatchClear);
    		if ("KOMBrowseInfoDispatchDebug" in $$props) $$invalidate(16, KOMBrowseInfoDispatchDebug = $$props.KOMBrowseInfoDispatchDebug);
    		if ("OLSKMobileViewInactive" in $$props) $$invalidate(12, OLSKMobileViewInactive = $$props.OLSKMobileViewInactive);
    		if ("KOMBrowseInfo_DebugShowLauncherButton" in $$props) $$invalidate(13, KOMBrowseInfo_DebugShowLauncherButton = $$props.KOMBrowseInfo_DebugShowLauncherButton);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMBrowseInfoItem,
    		KOMBrowseInfoDeck,
    		KOMBrowseInfoTagsSuggestions,
    		KOMBrowseInfoSpeechAvailable,
    		KOMBrowseInfoDispatchBack,
    		KOMBrowseInfoDispatchUpdate,
    		KOMBrowseInfoDispatchDiscard,
    		KOMBrowseInfoDispatchTemplate,
    		KOMBrowseInfoDispatchRead,
    		KOMBrowseInfoAudioDispatchCapture,
    		KOMBrowseInfoAudioDispatchFetch,
    		KOMBrowseInfoAudioDispatchClear,
    		OLSKMobileViewInactive,
    		KOMBrowseInfo_DebugShowLauncherButton,
    		OLSKLocalized,
    		mod,
    		KOMBrowseInfoDispatchDebug,
    		modPublic,
    		click_handler,
    		click_handler_1,
    		input0_input_handler,
    		click_handler_2,
    		input1_input_handler,
    		click_handler_3,
    		input2_input_handler
    	];
    }

    class Main$j extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {
    			KOMBrowseInfoItem: 0,
    			KOMBrowseInfoDeck: 1,
    			KOMBrowseInfoTagsSuggestions: 2,
    			KOMBrowseInfoSpeechAvailable: 3,
    			KOMBrowseInfoDispatchBack: 4,
    			KOMBrowseInfoDispatchUpdate: 5,
    			KOMBrowseInfoDispatchDiscard: 6,
    			KOMBrowseInfoDispatchTemplate: 7,
    			KOMBrowseInfoDispatchRead: 8,
    			KOMBrowseInfoAudioDispatchCapture: 9,
    			KOMBrowseInfoAudioDispatchFetch: 10,
    			KOMBrowseInfoAudioDispatchClear: 11,
    			KOMBrowseInfoDispatchDebug: 16,
    			OLSKMobileViewInactive: 12,
    			KOMBrowseInfo_DebugShowLauncherButton: 13,
    			modPublic: 17
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$j.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMBrowseInfoItem*/ ctx[0] === undefined && !("KOMBrowseInfoItem" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoItem'");
    		}

    		if (/*KOMBrowseInfoDeck*/ ctx[1] === undefined && !("KOMBrowseInfoDeck" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoDeck'");
    		}

    		if (/*KOMBrowseInfoTagsSuggestions*/ ctx[2] === undefined && !("KOMBrowseInfoTagsSuggestions" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoTagsSuggestions'");
    		}

    		if (/*KOMBrowseInfoSpeechAvailable*/ ctx[3] === undefined && !("KOMBrowseInfoSpeechAvailable" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoSpeechAvailable'");
    		}

    		if (/*KOMBrowseInfoDispatchBack*/ ctx[4] === undefined && !("KOMBrowseInfoDispatchBack" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoDispatchBack'");
    		}

    		if (/*KOMBrowseInfoDispatchUpdate*/ ctx[5] === undefined && !("KOMBrowseInfoDispatchUpdate" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoDispatchUpdate'");
    		}

    		if (/*KOMBrowseInfoDispatchDiscard*/ ctx[6] === undefined && !("KOMBrowseInfoDispatchDiscard" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoDispatchDiscard'");
    		}

    		if (/*KOMBrowseInfoDispatchTemplate*/ ctx[7] === undefined && !("KOMBrowseInfoDispatchTemplate" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoDispatchTemplate'");
    		}

    		if (/*KOMBrowseInfoDispatchRead*/ ctx[8] === undefined && !("KOMBrowseInfoDispatchRead" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoDispatchRead'");
    		}

    		if (/*KOMBrowseInfoAudioDispatchCapture*/ ctx[9] === undefined && !("KOMBrowseInfoAudioDispatchCapture" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioDispatchCapture'");
    		}

    		if (/*KOMBrowseInfoAudioDispatchFetch*/ ctx[10] === undefined && !("KOMBrowseInfoAudioDispatchFetch" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioDispatchFetch'");
    		}

    		if (/*KOMBrowseInfoAudioDispatchClear*/ ctx[11] === undefined && !("KOMBrowseInfoAudioDispatchClear" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioDispatchClear'");
    		}

    		if (/*KOMBrowseInfoDispatchDebug*/ ctx[16] === undefined && !("KOMBrowseInfoDispatchDebug" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoDispatchDebug'");
    		}
    	}

    	get KOMBrowseInfoItem() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoItem(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoDeck() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoDeck(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoTagsSuggestions() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoTagsSuggestions(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoSpeechAvailable() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoSpeechAvailable(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoDispatchBack() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoDispatchBack(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoDispatchUpdate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoDispatchUpdate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoDispatchDiscard() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoDispatchDiscard(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoDispatchTemplate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoDispatchTemplate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoDispatchRead() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoDispatchRead(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoAudioDispatchCapture() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioDispatchCapture(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoAudioDispatchFetch() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioDispatchFetch(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoAudioDispatchClear() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioDispatchClear(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoDispatchDebug() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoDispatchDebug(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMobileViewInactive() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMobileViewInactive(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfo_DebugShowLauncherButton() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfo_DebugShowLauncherButton(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[17];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/sub-browse/main.svelte generated by Svelte v3.29.4 */

    const { Object: Object_1$5, window: window_1$1 } = globals;
    const file$k = "os-app/sub-browse/main.svelte";

    // (471:0) {#if OLSK_TESTING_BEHAVIOUR() && KOMBrowseStorageClient.FakeStorageClient }
    function create_if_block$a(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			attr_dev(button, "class", "OLSKAppToolbarLauncherButton");
    			add_location(button, file$k, 471, 2, 13498);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[5]._OLSKAppToolbarDispatchLauncher)) /*mod*/ ctx[5]._OLSKAppToolbarDispatchLauncher.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(471:0) {#if OLSK_TESTING_BEHAVIOUR() && KOMBrowseStorageClient.FakeStorageClient }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let kombrowselist;
    	let t0;
    	let kombrowseinfo;
    	let t1;
    	let show_if = main_12() && /*KOMBrowseStorageClient*/ ctx[0].FakeStorageClient;
    	let if_block_anchor;
    	let current;
    	let mounted;
    	let dispose;

    	kombrowselist = new Main$f({
    			props: {
    				KOMBrowseListItems: /*mod*/ ctx[5]._ValueCardsVisible,
    				KOMBrowseListItemSelected: /*mod*/ ctx[5]._ValueCardSelected,
    				KOMBrowseListFilterText: /*mod*/ ctx[5]._ValueFilterText,
    				KOMBrowseListDispatchClose: /*KOMBrowseListDispatchClose*/ ctx[2],
    				KOMBrowseListDispatchCreate: /*mod*/ ctx[5].KOMBrowseListDispatchCreate,
    				KOMBrowseListDispatchClick: /*mod*/ ctx[5].KOMBrowseListDispatchClick,
    				KOMBrowseListDispatchArrow: /*mod*/ ctx[5].KOMBrowseListDispatchArrow,
    				KOMBrowseListDispatchFilter: /*mod*/ ctx[5].KOMBrowseListDispatchFilter,
    				OLSKMobileViewInactive: !!/*mod*/ ctx[5].OLSKMobileViewInactive
    			},
    			$$inline: true
    		});

    	let kombrowseinfo_props = {
    		KOMBrowseInfoItem: /*mod*/ ctx[5]._ValueCardSelected,
    		KOMBrowseInfoDeck: /*KOMBrowseDeckSelected*/ ctx[1],
    		KOMBrowseInfoTagsSuggestions: /*mod*/ ctx[5]._ValueTagsAll,
    		KOMBrowseInfoSpeechAvailable: /*KOMBrowseInfoSpeechAvailable*/ ctx[3],
    		KOMBrowseInfoDispatchBack: /*mod*/ ctx[5].KOMBrowseInfoDispatchBack,
    		KOMBrowseInfoDispatchDiscard: /*mod*/ ctx[5].KOMBrowseInfoDispatchDiscard,
    		KOMBrowseInfoDispatchUpdate: /*mod*/ ctx[5].KOMBrowseInfoDispatchUpdate,
    		KOMBrowseInfoDispatchTemplate: /*mod*/ ctx[5].KOMBrowseInfoDispatchTemplate,
    		KOMBrowseInfoDispatchRead: /*KOMBrowseInfoDispatchRead*/ ctx[4],
    		KOMBrowseInfoAudioDispatchCapture: /*mod*/ ctx[5].KOMBrowseInfoAudioDispatchCapture,
    		KOMBrowseInfoAudioDispatchFetch: /*mod*/ ctx[5].KOMBrowseInfoAudioDispatchFetch,
    		KOMBrowseInfoAudioDispatchClear: /*mod*/ ctx[5].KOMBrowseInfoAudioDispatchClear,
    		OLSKMobileViewInactive: !/*mod*/ ctx[5].OLSKMobileViewInactive,
    		KOMBrowseInfoDispatchDebug: /*mod*/ ctx[5].KOMBrowseInfoDispatchDebug
    	};

    	kombrowseinfo = new Main$j({
    			props: kombrowseinfo_props,
    			$$inline: true
    		});

    	/*kombrowseinfo_binding*/ ctx[9](kombrowseinfo);
    	let if_block = show_if && create_if_block$a(ctx);

    	const block = {
    		c: function create() {
    			create_component(kombrowselist.$$.fragment);
    			t0 = space();
    			create_component(kombrowseinfo.$$.fragment);
    			t1 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(kombrowselist, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(kombrowseinfo, target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					window_1$1,
    					"keydown",
    					function () {
    						if (is_function(/*mod*/ ctx[5].InterfaceWindowDidKeydown)) /*mod*/ ctx[5].InterfaceWindowDidKeydown.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			const kombrowselist_changes = {};
    			if (dirty & /*mod*/ 32) kombrowselist_changes.KOMBrowseListItems = /*mod*/ ctx[5]._ValueCardsVisible;
    			if (dirty & /*mod*/ 32) kombrowselist_changes.KOMBrowseListItemSelected = /*mod*/ ctx[5]._ValueCardSelected;
    			if (dirty & /*mod*/ 32) kombrowselist_changes.KOMBrowseListFilterText = /*mod*/ ctx[5]._ValueFilterText;
    			if (dirty & /*KOMBrowseListDispatchClose*/ 4) kombrowselist_changes.KOMBrowseListDispatchClose = /*KOMBrowseListDispatchClose*/ ctx[2];
    			if (dirty & /*mod*/ 32) kombrowselist_changes.KOMBrowseListDispatchCreate = /*mod*/ ctx[5].KOMBrowseListDispatchCreate;
    			if (dirty & /*mod*/ 32) kombrowselist_changes.KOMBrowseListDispatchClick = /*mod*/ ctx[5].KOMBrowseListDispatchClick;
    			if (dirty & /*mod*/ 32) kombrowselist_changes.KOMBrowseListDispatchArrow = /*mod*/ ctx[5].KOMBrowseListDispatchArrow;
    			if (dirty & /*mod*/ 32) kombrowselist_changes.KOMBrowseListDispatchFilter = /*mod*/ ctx[5].KOMBrowseListDispatchFilter;
    			if (dirty & /*mod*/ 32) kombrowselist_changes.OLSKMobileViewInactive = !!/*mod*/ ctx[5].OLSKMobileViewInactive;
    			kombrowselist.$set(kombrowselist_changes);
    			const kombrowseinfo_changes = {};
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoItem = /*mod*/ ctx[5]._ValueCardSelected;
    			if (dirty & /*KOMBrowseDeckSelected*/ 2) kombrowseinfo_changes.KOMBrowseInfoDeck = /*KOMBrowseDeckSelected*/ ctx[1];
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoTagsSuggestions = /*mod*/ ctx[5]._ValueTagsAll;
    			if (dirty & /*KOMBrowseInfoSpeechAvailable*/ 8) kombrowseinfo_changes.KOMBrowseInfoSpeechAvailable = /*KOMBrowseInfoSpeechAvailable*/ ctx[3];
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoDispatchBack = /*mod*/ ctx[5].KOMBrowseInfoDispatchBack;
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoDispatchDiscard = /*mod*/ ctx[5].KOMBrowseInfoDispatchDiscard;
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoDispatchUpdate = /*mod*/ ctx[5].KOMBrowseInfoDispatchUpdate;
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoDispatchTemplate = /*mod*/ ctx[5].KOMBrowseInfoDispatchTemplate;
    			if (dirty & /*KOMBrowseInfoDispatchRead*/ 16) kombrowseinfo_changes.KOMBrowseInfoDispatchRead = /*KOMBrowseInfoDispatchRead*/ ctx[4];
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoAudioDispatchCapture = /*mod*/ ctx[5].KOMBrowseInfoAudioDispatchCapture;
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoAudioDispatchFetch = /*mod*/ ctx[5].KOMBrowseInfoAudioDispatchFetch;
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoAudioDispatchClear = /*mod*/ ctx[5].KOMBrowseInfoAudioDispatchClear;
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.OLSKMobileViewInactive = !/*mod*/ ctx[5].OLSKMobileViewInactive;
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoDispatchDebug = /*mod*/ ctx[5].KOMBrowseInfoDispatchDebug;
    			kombrowseinfo.$set(kombrowseinfo_changes);
    			if (dirty & /*KOMBrowseStorageClient*/ 1) show_if = main_12() && /*KOMBrowseStorageClient*/ ctx[0].FakeStorageClient;

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$a(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kombrowselist.$$.fragment, local);
    			transition_in(kombrowseinfo.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kombrowselist.$$.fragment, local);
    			transition_out(kombrowseinfo.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(kombrowselist, detaching);
    			if (detaching) detach_dev(t0);
    			/*kombrowseinfo_binding*/ ctx[9](null);
    			destroy_component(kombrowseinfo, detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMBrowseStorageClient } = $$props;
    	let { KOMBrowseDeckSelected } = $$props;
    	let { KOMBrowseDeckCards } = $$props;
    	let { KOMBrowseDispatchCreate } = $$props;
    	let { KOMBrowseListDispatchClose } = $$props;
    	let { KOMBrowseInfoSpeechAvailable } = $$props;
    	let { KOMBrowseInfoDispatchRead } = $$props;

    	const modPublic = {
    		KOMBrowseChangeDelegateCreateCard() {
    			mod.ChangeDelegateCreateCard(...arguments);
    		},
    		KOMBrowseChangeDelegateUpdateCard() {
    			mod.ChangeDelegateUpdateCard(...arguments);
    		},
    		KOMBrowseChangeDelegateDeleteCard() {
    			mod.ChangeDelegateDeleteCard(...arguments);
    		},
    		KOMBrowseRecipes() {
    			return mod.DataBrowseRecipes();
    		}
    	};

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const mod = {
    		// VALUE
    		_ValueTagsAll: [],
    		_ValueCardsAll: KOMBrowseDeckCards,
    		ValueCardsAll(inputData, shouldSort = true) {
    			mod.ValueCardsVisible($$invalidate(5, mod._ValueCardsAll = inputData, mod), shouldSort);
    			mod.ReactTags();
    		},
    		_ValueCardsVisible: [],
    		ValueCardsVisible(inputData, shouldSort = true) {
    			const items = !mod._ValueFilterText
    			? inputData
    			: inputData.filter(mod$i.KOMBrowseFilterFunction(mod._ValueFilterText));

    			$$invalidate(
    				5,
    				mod._ValueCardsVisible = shouldSort
    				? items.sort(mod$i.KOMBrowseSort)
    				: items,
    				mod
    			);
    		},
    		_ValueCardSelected: undefined,
    		ValueCardSelected(inputData) {
    			$$invalidate(5, mod._ValueCardSelected = inputData, mod);

    			if (!inputData) {
    				$$invalidate(5, mod.OLSKMobileViewInactive = false, mod);
    			}
    		},
    		_ValueFilterText: "",
    		_ValueCardUpdateThrottleMap: {},
    		OLSKMobileViewInactive: false,
    		// DATA
    		DataIsMobile() {
    			return window.innerWidth <= 760;
    		},
    		DataCardObjectTemplate(inputData = "") {
    			return {
    				KOMCardFrontText: inputData,
    				KOMCardRearText: "",
    				KOMCardNotes: ""
    			};
    		},
    		DataBrowseRecipes() {
    			const items = [];

    			if (mod._ValueCardsVisible.filter(function (e) {
    				return e.KOMCardIsRetired;
    			}).length) {
    				items.push(...[
    					{
    						LCHRecipeSignature: "KOMBrowseLauncherItemDiscardRetiredCards",
    						LCHRecipeName: OLSKLocalized("KOMBrowseLauncherItemDiscardRetiredCardsText"),
    						LCHRecipeCallback: function KOMBrowseLauncherItemDiscardRetiredCards() {
    							return mod.ControlDiscardRetiredCards();
    						}
    					}
    				]);
    			}

    			if (main_12()) {
    				items.push(...[
    					{
    						LCHRecipeName: "FakeChangeDelegateCreateCard",
    						LCHRecipeCallback: async function FakeChangeDelegateCreateCard() {
    							return mod.ChangeDelegateCreateCard(await mod$4.KOMCardActionCreate(KOMBrowseStorageClient, mod.DataCardObjectTemplate("FakeChangeDelegateCreateCard"), KOMBrowseDeckSelected));
    						}
    					},
    					{
    						LCHRecipeName: "FakeChangeDelegateUpdateCard",
    						LCHRecipeCallback: async function FakeChangeDelegateUpdateCard() {
    							return mod.ChangeDelegateUpdateCard(await mod$4.KOMCardActionUpdate(
    								KOMBrowseStorageClient,
    								Object.assign(
    									mod._ValueCardsAll.filter(function (e) {
    										return e.KOMCardFrontText.match("FakeChangeDelegate");
    									}).pop(),
    									{
    										KOMCardFrontText: "FakeChangeDelegateUpdateCard"
    									}
    								),
    								KOMBrowseDeckSelected
    							));
    						}
    					},
    					{
    						LCHRecipeName: "FakeChangeDelegateDeleteCard",
    						LCHRecipeCallback: async function FakeChangeDelegateDeleteCard() {
    							const item = mod._ValueCardsAll.filter(function (e) {
    								return e.KOMCardFrontText.match("FakeChangeDelegate");
    							}).pop();

    							await mod$4.KOMCardActionDelete(KOMBrowseStorageClient, item, KOMBrowseDeckSelected);
    							return mod.ChangeDelegateDeleteCard(item);
    						}
    					},
    					{
    						LCHRecipeName: "FakeEscapeWithoutSort",
    						LCHRecipeCallback: function FakeEscapeWithoutSort() {
    							mod.ControlCardSelect(null);
    						}
    					}
    				]);
    			}

    			if (mod._KOMBrowseInfo) {
    				items.push(...mod._KOMBrowseInfo.modPublic.KOMBrowseInfoRecipes());
    			}

    			return items;
    		},
    		// INTERFACE	
    		InterfaceWindowDidKeydown(event) {
    			if (document.querySelector(".LCHLauncher")) {
    				// #spec
    				return;
    			}

    			const handlerFunctions = {
    				Escape() {
    					if (document.activeElement === document.querySelector(".OLSKMasterListFilterField") && !mod._ValueFilterText) {
    						return KOMBrowseListDispatchClose();
    					}

    					mod.ControlFilter("");

    					if (!main_12()) {
    						document.querySelector(".OLSKMasterListBody").scrollTo(0, 0);
    					}
    				},
    				Tab() {
    					if (document.activeElement === document.querySelector(".OLSKMasterListFilterField") && mod._ValueCardSelected) {
    						mod.ControlFocusDetail();
    						return event.preventDefault();
    					}

    					if (document.activeElement === document.querySelector(".KOMBrowseInfoFormFrontTextField") && event.shiftKey) {
    						mod.ControlFocusMaster();
    						return event.preventDefault();
    					}
    				}
    			};

    			handlerFunctions[event.key] && handlerFunctions[event.key]();
    		},
    		// CONTROL
    		async ControlCardCreate(param1, param2 = {}) {
    			const item = await mod$4.KOMCardActionCreate(KOMBrowseStorageClient, Object.assign(mod.DataCardObjectTemplate(), param2), param1);
    			mod.ValueCardsAll(mod._ValueCardsAll.concat(item));
    			mod.ControlCardSelect(item);
    			KOMBrowseDispatchCreate(item);
    		},
    		ControlCardUpdate(param1, param2) {
    			main$4.OLSKThrottleMappedTimeout(mod._ValueCardUpdateThrottleMap, param1.KOMCardID, {
    				OLSKThrottleDuration: main_12() ? 0 : 500,
    				OLSKThrottleCallback() {
    					return mod$4.KOMCardActionUpdate(KOMBrowseStorageClient, param1, param2);
    				}
    			});
    		},
    		async ControlCardAudioCapture(param1, param2, param3, param4) {
    			await mod$4.KOMCardActionAudioCapture(...[KOMBrowseStorageClient].concat(Object.values(arguments)));
    			await mod.ControlCardUpdate(param3, param4);
    		},
    		async ControlCardAudioClear(param1, param2, param3) {
    			await mod$4.KOMCardActionAudioClear(...[KOMBrowseStorageClient].concat(Object.values(arguments)));
    			await mod.ControlCardUpdate(param2, param3);
    		},
    		async ControlCardDiscard(param1, param2) {
    			mod.ValueCardsAll(
    				mod._ValueCardsAll.filter(function (e) {
    					return e !== param1;
    				}),
    				false
    			);

    			await mod$4.KOMCardActionDelete(KOMBrowseStorageClient, param1, param2);
    			mod.ControlCardSelect(null);
    		},
    		async ControlDiscardRetiredCards() {
    			if (window.prompt(OLSKLocalized("KOMBrowseLauncherItemDiscardRetiredCardsPromptText")) !== KOMBrowseDeckSelected.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingRetired.toString()) {
    				return;
    			}

    			const retired = mod._ValueCardsAll.filter(function (e) {
    				return e.KOMCardIsRetired;
    			});

    			const selectedIsRetired = retired.includes(mod._ValueCardSelected);

    			mod.ValueCardsAll(
    				mod._ValueCardsAll.filter(function (e) {
    					return !retired.includes(e);
    				}),
    				false
    			);

    			await Promise.all(retired.map(function (e) {
    				return mod$4.KOMCardActionDelete(KOMBrowseStorageClient, e, KOMBrowseDeckSelected);
    			}));

    			if (selectedIsRetired) {
    				mod.ControlCardSelect(null);
    			}
    		},
    		ControlFocusMaster() {
    			document.querySelector(".OLSKMasterListFilterField").focus();
    		},
    		ControlFocusDetail() {
    			document.querySelector(".KOMBrowseInfoFormFrontTextField").focus();
    		},
    		ControlCardSelect(inputData) {
    			mod.ValueCardSelected(inputData);

    			if (!inputData) {
    				return !mod.DataIsMobile() && mod.ControlFocusMaster();
    			}

    			$$invalidate(5, mod.OLSKMobileViewInactive = true, mod);
    			setTimeout(mod.ControlFocusDetail);
    		},
    		ControlFilter(inputData) {
    			$$invalidate(5, mod._ValueFilterText = inputData, mod);
    			mod.ValueCardsVisible(mod._ValueCardsAll);

    			if (!inputData) {
    				return mod.ControlCardSelect(null);
    			}

    			if (!mod._ValueCardsVisible.length) {
    				return mod.ControlCardSelect(null);
    			}

    			mod.ValueCardSelected(mod$i.KOMBrowseExactMatchFirst(inputData, mod._ValueCardsVisible).shift());
    		},
    		// MESSAGE
    		KOMBrowseListDispatchCreate() {
    			mod.ControlCardCreate(KOMBrowseDeckSelected);
    		},
    		KOMBrowseListDispatchClick(inputData) {
    			mod.ControlCardSelect(inputData);
    		},
    		KOMBrowseListDispatchArrow(inputData) {
    			mod.ValueCardSelected(inputData);
    		},
    		KOMBrowseListDispatchFilter(inputData) {
    			mod.ControlFilter(inputData);
    		},
    		KOMBrowseInfoDispatchBack() {
    			$$invalidate(5, mod.OLSKMobileViewInactive = false, mod);
    		},
    		KOMBrowseInfoDispatchDiscard() {
    			mod.ControlCardDiscard(mod._ValueCardSelected, KOMBrowseDeckSelected);
    		},
    		KOMBrowseInfoDispatchTemplate(inputData) {
    			mod.ControlCardCreate(KOMBrowseDeckSelected, inputData);
    		},
    		KOMBrowseInfoDispatchUpdate() {
    			$$invalidate(5, mod); // #purge-svelte-force-update
    			mod.ControlCardUpdate(mod._ValueCardSelected, KOMBrowseDeckSelected);
    			mod.ReactTags();
    		},
    		async KOMBrowseInfoAudioDispatchCapture(param1, param2) {
    			await mod.ControlCardAudioCapture(param1, param2, mod._ValueCardSelected, KOMBrowseDeckSelected);
    			$$invalidate(5, mod); // #purge-svelte-force-update
    		},
    		async KOMBrowseInfoAudioDispatchClear(inputData) {
    			await mod.ControlCardAudioClear(inputData, mod._ValueCardSelected, KOMBrowseDeckSelected);
    			$$invalidate(5, mod); // #purge-svelte-force-update
    		},
    		async KOMBrowseInfoAudioDispatchFetch(inputData) {
    			return await mod$4.KOMCardActionAudioFetch(KOMBrowseStorageClient, inputData, mod._ValueCardSelected, KOMBrowseDeckSelected);
    		},
    		KOMBrowseInfoDispatchDebug(inputData) {
    			const url = `https://inspektor.5apps.com/?path=kommit%2F${encodeURIComponent(mod$3.KOMCardStorageFolderPath(inputData, KOMBrowseDeckSelected))}`;

    			if (main_12()) {
    				window.FakeWindowOpen = url;
    				return;
    			}

    			window.open(url);
    		},
    		_OLSKAppToolbarDispatchLauncher() {
    			window.Launchlet.LCHSingletonCreate({
    				LCHOptionRecipes: mod.DataBrowseRecipes()
    			});
    		},
    		ChangeDelegateCreateCard(inputData) {
    			mod.ValueCardsAll([inputData].concat(mod._ValueCardsAll), !mod._ValueCardSelected);
    		},
    		ChangeDelegateUpdateCard(inputData) {
    			if (mod._ValueCardSelected && mod._ValueCardSelected.KOMCardID === inputData.KOMCardID) {
    				mod.ControlCardSelect(inputData);
    			}

    			mod.ValueCardsAll(
    				mod._ValueCardsAll.map(function (e) {
    					return e.KOMCardID === inputData.KOMCardID ? inputData : e;
    				}),
    				!mod._ValueCardSelected
    			);
    		},
    		ChangeDelegateDeleteCard(inputData) {
    			if (mod._ValueCardSelected && mod._ValueCardSelected.KOMCardID === inputData.KOMCardID) {
    				mod.ControlCardSelect(null);
    			}

    			mod.ValueCardsAll(
    				mod._ValueCardsAll.filter(function (e) {
    					return e.KOMCardID !== inputData.KOMCardID;
    				}),
    				false
    			);
    		},
    		// REACT
    		ReactCardSelected() {
    			if (!mod._ValueCardSelected) {
    				return;
    			}

    			$$invalidate(
    				5,
    				mod._ValueCardSelected = mod._ValueCardsVisible.filter(function (e) {
    					return e.KOMCardID === mod._ValueCardSelected.KOMCardID;
    				}).pop(),
    				mod
    			);
    		},
    		ReactTags() {
    			$$invalidate(
    				5,
    				mod._ValueTagsAll = mod._ValueCardsAll.reduce(
    					function (coll, item) {
    						return coll.concat((item.KOMCardTags || []).filter(function (e) {
    							return !coll.includes(e);
    						}));
    					},
    					[]
    				).sort(),
    				mod
    			);
    		},
    		// SETUP
    		SetupEverything() {
    			mod.SetupValueCardsAll();
    			mod.SetupFocus();
    		},
    		SetupValueCardsAll() {
    			mod.ValueCardsAll(mod._ValueCardsAll);
    		},
    		SetupFocus() {
    			setTimeout(function () {
    				mod.ControlFocusMaster();
    			});
    		},
    		// LIFECYCLE
    		LifecycleModuleWillMount() {
    			mod.SetupEverything();
    		}
    	};

    	onMount(mod.LifecycleModuleWillMount);

    	const writable_props = [
    		"KOMBrowseStorageClient",
    		"KOMBrowseDeckSelected",
    		"KOMBrowseDeckCards",
    		"KOMBrowseDispatchCreate",
    		"KOMBrowseListDispatchClose",
    		"KOMBrowseInfoSpeechAvailable",
    		"KOMBrowseInfoDispatchRead"
    	];

    	Object_1$5.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function kombrowseinfo_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			mod._KOMBrowseInfo = $$value;
    			$$invalidate(5, mod);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("KOMBrowseStorageClient" in $$props) $$invalidate(0, KOMBrowseStorageClient = $$props.KOMBrowseStorageClient);
    		if ("KOMBrowseDeckSelected" in $$props) $$invalidate(1, KOMBrowseDeckSelected = $$props.KOMBrowseDeckSelected);
    		if ("KOMBrowseDeckCards" in $$props) $$invalidate(6, KOMBrowseDeckCards = $$props.KOMBrowseDeckCards);
    		if ("KOMBrowseDispatchCreate" in $$props) $$invalidate(7, KOMBrowseDispatchCreate = $$props.KOMBrowseDispatchCreate);
    		if ("KOMBrowseListDispatchClose" in $$props) $$invalidate(2, KOMBrowseListDispatchClose = $$props.KOMBrowseListDispatchClose);
    		if ("KOMBrowseInfoSpeechAvailable" in $$props) $$invalidate(3, KOMBrowseInfoSpeechAvailable = $$props.KOMBrowseInfoSpeechAvailable);
    		if ("KOMBrowseInfoDispatchRead" in $$props) $$invalidate(4, KOMBrowseInfoDispatchRead = $$props.KOMBrowseInfoDispatchRead);
    	};

    	$$self.$capture_state = () => ({
    		KOMBrowseStorageClient,
    		KOMBrowseDeckSelected,
    		KOMBrowseDeckCards,
    		KOMBrowseDispatchCreate,
    		KOMBrowseListDispatchClose,
    		KOMBrowseInfoSpeechAvailable,
    		KOMBrowseInfoDispatchRead,
    		modPublic,
    		OLSKInternational,
    		OLSKLocalized,
    		OLSK_TESTING_BEHAVIOUR: main_12,
    		OLSKThrottle: main$4,
    		KOMBrowseLogic: mod$i,
    		KOMCardAction: mod$4,
    		KOMCardStorage: mod$3,
    		mod,
    		onMount,
    		KOMBrowseList: Main$f,
    		KOMBrowseInfo: Main$j
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMBrowseStorageClient" in $$props) $$invalidate(0, KOMBrowseStorageClient = $$props.KOMBrowseStorageClient);
    		if ("KOMBrowseDeckSelected" in $$props) $$invalidate(1, KOMBrowseDeckSelected = $$props.KOMBrowseDeckSelected);
    		if ("KOMBrowseDeckCards" in $$props) $$invalidate(6, KOMBrowseDeckCards = $$props.KOMBrowseDeckCards);
    		if ("KOMBrowseDispatchCreate" in $$props) $$invalidate(7, KOMBrowseDispatchCreate = $$props.KOMBrowseDispatchCreate);
    		if ("KOMBrowseListDispatchClose" in $$props) $$invalidate(2, KOMBrowseListDispatchClose = $$props.KOMBrowseListDispatchClose);
    		if ("KOMBrowseInfoSpeechAvailable" in $$props) $$invalidate(3, KOMBrowseInfoSpeechAvailable = $$props.KOMBrowseInfoSpeechAvailable);
    		if ("KOMBrowseInfoDispatchRead" in $$props) $$invalidate(4, KOMBrowseInfoDispatchRead = $$props.KOMBrowseInfoDispatchRead);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMBrowseStorageClient,
    		KOMBrowseDeckSelected,
    		KOMBrowseListDispatchClose,
    		KOMBrowseInfoSpeechAvailable,
    		KOMBrowseInfoDispatchRead,
    		mod,
    		KOMBrowseDeckCards,
    		KOMBrowseDispatchCreate,
    		modPublic,
    		kombrowseinfo_binding
    	];
    }

    class Main$k extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$k, create_fragment$k, safe_not_equal, {
    			KOMBrowseStorageClient: 0,
    			KOMBrowseDeckSelected: 1,
    			KOMBrowseDeckCards: 6,
    			KOMBrowseDispatchCreate: 7,
    			KOMBrowseListDispatchClose: 2,
    			KOMBrowseInfoSpeechAvailable: 3,
    			KOMBrowseInfoDispatchRead: 4,
    			modPublic: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$k.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMBrowseStorageClient*/ ctx[0] === undefined && !("KOMBrowseStorageClient" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseStorageClient'");
    		}

    		if (/*KOMBrowseDeckSelected*/ ctx[1] === undefined && !("KOMBrowseDeckSelected" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseDeckSelected'");
    		}

    		if (/*KOMBrowseDeckCards*/ ctx[6] === undefined && !("KOMBrowseDeckCards" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseDeckCards'");
    		}

    		if (/*KOMBrowseDispatchCreate*/ ctx[7] === undefined && !("KOMBrowseDispatchCreate" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseDispatchCreate'");
    		}

    		if (/*KOMBrowseListDispatchClose*/ ctx[2] === undefined && !("KOMBrowseListDispatchClose" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseListDispatchClose'");
    		}

    		if (/*KOMBrowseInfoSpeechAvailable*/ ctx[3] === undefined && !("KOMBrowseInfoSpeechAvailable" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoSpeechAvailable'");
    		}

    		if (/*KOMBrowseInfoDispatchRead*/ ctx[4] === undefined && !("KOMBrowseInfoDispatchRead" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoDispatchRead'");
    		}
    	}

    	get KOMBrowseStorageClient() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseStorageClient(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseDeckSelected() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseDeckSelected(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseDeckCards() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseDeckCards(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseDispatchCreate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseDispatchCreate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseListDispatchClose() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseListDispatchClose(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoSpeechAvailable() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoSpeechAvailable(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoDispatchRead() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoDispatchRead(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[8];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/sub-play/main.svelte generated by Svelte v3.29.4 */

    const { Object: Object_1$6, window: window_1$2 } = globals;
    const file$l = "os-app/sub-play/main.svelte";

    // (435:0) {#if mod._ValueState.KOMPlayStateCurrent }
    function create_if_block$b(ctx) {
    	let div1;
    	let div0;
    	let t0_value = /*mod*/ ctx[2].DataQuestion() + "";
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let show_if_1 = /*mod*/ ctx[2].DataQuestionShouldSound() || /*mod*/ ctx[2]._ValueIsFlipped && /*mod*/ ctx[2].DataAnswerShouldSound();
    	let t4;
    	let t5;
    	let t6;
    	let t7;
    	let show_if = main_12();
    	let if_block6_anchor;
    	let mounted;
    	let dispose;
    	let if_block0 = /*mod*/ ctx[2]._ValueIsFlipped && create_if_block_9(ctx);
    	let if_block1 = /*mod*/ ctx[2]._ValueIsFlipped && create_if_block_8(ctx);
    	let if_block2 = show_if_1 && create_if_block_5$1(ctx);
    	let if_block3 = !/*mod*/ ctx[2]._ValueIsFlipped && create_if_block_4$2(ctx);
    	let if_block4 = /*mod*/ ctx[2]._ValueIsFlipped && !/*KOMPlaySimplifiedResponseButtons*/ ctx[1] && create_if_block_3$2(ctx);
    	let if_block5 = /*mod*/ ctx[2]._ValueIsFlipped && /*KOMPlaySimplifiedResponseButtons*/ ctx[1] && create_if_block_2$3(ctx);
    	let if_block6 = show_if && create_if_block_1$5(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			t4 = space();
    			if (if_block3) if_block3.c();
    			t5 = space();
    			if (if_block4) if_block4.c();
    			t6 = space();
    			if (if_block5) if_block5.c();
    			t7 = space();
    			if (if_block6) if_block6.c();
    			if_block6_anchor = empty();
    			attr_dev(div0, "class", "KOMPlayCardQuestion svelte-4giowp");
    			add_location(div0, file$l, 437, 2, 11540);
    			attr_dev(div1, "class", "KOMPlayCard OLSKLayoutElementTappable svelte-4giowp");
    			add_location(div1, file$l, 435, 1, 11446);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, t0);
    			append_dev(div1, t1);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div1, t2);
    			if (if_block1) if_block1.m(div1, null);
    			insert_dev(target, t3, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t6, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t7, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, if_block6_anchor, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					div1,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[2].InterfaceCardDidClick)) /*mod*/ ctx[2].InterfaceCardDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*mod*/ 4 && t0_value !== (t0_value = /*mod*/ ctx[2].DataQuestion() + "")) set_data_dev(t0, t0_value);

    			if (/*mod*/ ctx[2]._ValueIsFlipped) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_9(ctx);
    					if_block0.c();
    					if_block0.m(div1, t2);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*mod*/ ctx[2]._ValueIsFlipped) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_8(ctx);
    					if_block1.c();
    					if_block1.m(div1, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*mod*/ 4) show_if_1 = /*mod*/ ctx[2].DataQuestionShouldSound() || /*mod*/ ctx[2]._ValueIsFlipped && /*mod*/ ctx[2].DataAnswerShouldSound();

    			if (show_if_1) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_5$1(ctx);
    					if_block2.c();
    					if_block2.m(t4.parentNode, t4);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (!/*mod*/ ctx[2]._ValueIsFlipped) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_4$2(ctx);
    					if_block3.c();
    					if_block3.m(t5.parentNode, t5);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*mod*/ ctx[2]._ValueIsFlipped && !/*KOMPlaySimplifiedResponseButtons*/ ctx[1]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_3$2(ctx);
    					if_block4.c();
    					if_block4.m(t6.parentNode, t6);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*mod*/ ctx[2]._ValueIsFlipped && /*KOMPlaySimplifiedResponseButtons*/ ctx[1]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_2$3(ctx);
    					if_block5.c();
    					if_block5.m(t7.parentNode, t7);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (show_if) if_block6.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (detaching) detach_dev(t3);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t6);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t7);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(if_block6_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(435:0) {#if mod._ValueState.KOMPlayStateCurrent }",
    		ctx
    	});

    	return block;
    }

    // (440:2) {#if mod._ValueIsFlipped}
    function create_if_block_9(ctx) {
    	let div;
    	let t_value = /*mod*/ ctx[2].DataAnswer() + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "KOMPlayCardAnswer svelte-4giowp");
    			add_location(div, file$l, 440, 3, 11634);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mod*/ 4 && t_value !== (t_value = /*mod*/ ctx[2].DataAnswer() + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(440:2) {#if mod._ValueIsFlipped}",
    		ctx
    	});

    	return block;
    }

    // (444:2) {#if mod._ValueIsFlipped}
    function create_if_block_8(ctx) {
    	let div;
    	let t_value = /*mod*/ ctx[2]._ValueState.KOMPlayStateCurrent.$KOMSpacingCard.KOMCardNotes + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "KOMPlayCardNotes svelte-4giowp");
    			add_location(div, file$l, 444, 3, 11732);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mod*/ 4 && t_value !== (t_value = /*mod*/ ctx[2]._ValueState.KOMPlayStateCurrent.$KOMSpacingCard.KOMCardNotes + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(444:2) {#if mod._ValueIsFlipped}",
    		ctx
    	});

    	return block;
    }

    // (450:1) {#if mod.DataQuestionShouldSound() || (mod._ValueIsFlipped && mod.DataAnswerShouldSound()) }
    function create_if_block_5$1(ctx) {
    	let div;
    	let show_if_1 = /*mod*/ ctx[2].DataQuestionShouldSound();
    	let t;
    	let show_if = /*mod*/ ctx[2]._ValueIsFlipped && /*mod*/ ctx[2].DataAnswerShouldSound();
    	let if_block0 = show_if_1 && create_if_block_7(ctx);
    	let if_block1 = show_if && create_if_block_6(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div, "class", "KOMPlayHear svelte-4giowp");
    			add_location(div, file$l, 450, 2, 11954);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t);
    			if (if_block1) if_block1.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mod*/ 4) show_if_1 = /*mod*/ ctx[2].DataQuestionShouldSound();

    			if (show_if_1) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_7(ctx);
    					if_block0.c();
    					if_block0.m(div, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*mod*/ 4) show_if = /*mod*/ ctx[2]._ValueIsFlipped && /*mod*/ ctx[2].DataAnswerShouldSound();

    			if (show_if) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_6(ctx);
    					if_block1.c();
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(450:1) {#if mod.DataQuestionShouldSound() || (mod._ValueIsFlipped && mod.DataAnswerShouldSound()) }",
    		ctx
    	});

    	return block;
    }

    // (452:3) {#if mod.DataQuestionShouldSound()}
    function create_if_block_7(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMPlayHearQuestionButtonText")}`;
    			attr_dev(button, "class", "KOMPlayHearQuestionButton OLSKLayoutButtonNoStyle OLSKLayoutElementTappable svelte-4giowp");
    			add_location(button, file$l, 452, 4, 12023);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[2].InterfaceHearQuestionButtonDidClick)) /*mod*/ ctx[2].InterfaceHearQuestionButtonDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(452:3) {#if mod.DataQuestionShouldSound()}",
    		ctx
    	});

    	return block;
    }

    // (456:3) {#if mod._ValueIsFlipped && mod.DataAnswerShouldSound() }
    function create_if_block_6(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMPlayHearAnswerButtonText")}`;
    			attr_dev(button, "class", "KOMPlayHearAnswerButton OLSKLayoutButtonNoStyle OLSKLayoutElementTappable svelte-4giowp");
    			add_location(button, file$l, 456, 4, 12303);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[2].InterfaceHearAnswerButtonDidClick)) /*mod*/ ctx[2].InterfaceHearAnswerButtonDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(456:3) {#if mod._ValueIsFlipped && mod.DataAnswerShouldSound() }",
    		ctx
    	});

    	return block;
    }

    // (462:1) {#if !mod._ValueIsFlipped}
    function create_if_block_4$2(ctx) {
    	let button;
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			span = element("span");
    			span.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMPlayFlipButtonText")}`;
    			attr_dev(span, "class", "OLSKCommonButton svelte-4giowp");
    			add_location(span, file$l, 462, 131, 12687);
    			attr_dev(button, "class", "KOMPlayFlipButton OLSKLayoutButtonNoStyle OLSKLayoutElementTappable svelte-4giowp");
    			add_location(button, file$l, 462, 2, 12558);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, span);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[2].InterfaceFlipButtonDidClick)) /*mod*/ ctx[2].InterfaceFlipButtonDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(462:1) {#if !mod._ValueIsFlipped}",
    		ctx
    	});

    	return block;
    }

    // (466:1) {#if mod._ValueIsFlipped && !KOMPlaySimplifiedResponseButtons}
    function create_if_block_3$2(ctx) {
    	let button0;
    	let span0;
    	let t1;
    	let div;
    	let button1;
    	let span1;
    	let t3;
    	let button2;
    	let span2;
    	let t5;
    	let button3;
    	let span3;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button0 = element("button");
    			span0 = element("span");
    			span0.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMPlayResponseButtonAgainText")}`;
    			t1 = space();
    			div = element("div");
    			button1 = element("button");
    			span1 = element("span");
    			span1.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMPlayResponseButtonHardText")}`;
    			t3 = space();
    			button2 = element("button");
    			span2 = element("span");
    			span2.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMPlayResponseButtonGoodText")}`;
    			t5 = space();
    			button3 = element("button");
    			span3 = element("span");
    			span3.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMPlayResponseButtonEasyText")}`;
    			attr_dev(span0, "class", "OLSKCommonButton svelte-4giowp");
    			add_location(span0, file$l, 466, 149, 12998);
    			attr_dev(button0, "class", "KOMPlayResponseButtonAgain OLSKLayoutButtonNoStyle OLSKLayoutElementTappable svelte-4giowp");
    			add_location(button0, file$l, 466, 2, 12851);
    			attr_dev(span1, "class", "OLSKCommonButton svelte-4giowp");
    			add_location(span1, file$l, 469, 148, 13285);
    			attr_dev(button1, "class", "KOMPlayResponseButtonHard OLSKLayoutButtonNoStyle OLSKLayoutElementTappable svelte-4giowp");
    			add_location(button1, file$l, 469, 3, 13140);
    			attr_dev(span2, "class", "OLSKCommonButton svelte-4giowp");
    			add_location(span2, file$l, 471, 148, 13532);
    			attr_dev(button2, "class", "KOMPlayResponseButtonGood OLSKLayoutButtonNoStyle OLSKLayoutElementTappable svelte-4giowp");
    			add_location(button2, file$l, 471, 3, 13387);
    			attr_dev(span3, "class", "OLSKCommonButton svelte-4giowp");
    			add_location(span3, file$l, 473, 148, 13779);
    			attr_dev(button3, "class", "KOMPlayResponseButtonEasy OLSKLayoutButtonNoStyle OLSKLayoutElementTappable svelte-4giowp");
    			add_location(button3, file$l, 473, 3, 13634);
    			attr_dev(div, "class", "KOMPlayResponseCorrect svelte-4giowp");
    			add_location(div, file$l, 468, 2, 13100);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button0, anchor);
    			append_dev(button0, span0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, button1);
    			append_dev(button1, span1);
    			append_dev(div, t3);
    			append_dev(div, button2);
    			append_dev(button2, span2);
    			append_dev(div, t5);
    			append_dev(div, button3);
    			append_dev(button3, span3);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[2].InterfaceResponseButtonDidClickAgain)) /*mod*/ ctx[2].InterfaceResponseButtonDidClickAgain.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button1,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[2].InterfaceResponseButtonDidClickHard)) /*mod*/ ctx[2].InterfaceResponseButtonDidClickHard.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button2,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[2].InterfaceResponseButtonDidClickGood)) /*mod*/ ctx[2].InterfaceResponseButtonDidClickGood.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button3,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[2].InterfaceResponseButtonDidClickEasy)) /*mod*/ ctx[2].InterfaceResponseButtonDidClickEasy.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(466:1) {#if mod._ValueIsFlipped && !KOMPlaySimplifiedResponseButtons}",
    		ctx
    	});

    	return block;
    }

    // (478:1) {#if mod._ValueIsFlipped && KOMPlaySimplifiedResponseButtons}
    function create_if_block_2$3(ctx) {
    	let div;
    	let button0;
    	let span0;
    	let t1;
    	let button1;
    	let span1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			button0 = element("button");
    			span0 = element("span");
    			span0.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMPlayResponseButtonResetText")}`;
    			t1 = space();
    			button1 = element("button");
    			span1 = element("span");
    			span1.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMPlayResponseButtonNextText")}`;
    			attr_dev(span0, "class", "OLSKCommonButton svelte-4giowp");
    			add_location(span0, file$l, 479, 150, 14145);
    			attr_dev(button0, "class", "KOMPlayResponseButtonReset OLSKLayoutButtonNoStyle OLSKLayoutElementTappable svelte-4giowp");
    			add_location(button0, file$l, 479, 3, 13998);
    			attr_dev(span1, "class", "OLSKCommonButton svelte-4giowp");
    			add_location(span1, file$l, 481, 148, 14393);
    			attr_dev(button1, "class", "KOMPlayResponseButtonNext OLSKLayoutButtonNoStyle OLSKLayoutElementTappable svelte-4giowp");
    			add_location(button1, file$l, 481, 3, 14248);
    			attr_dev(div, "class", "KOMPlayResponseSimple svelte-4giowp");
    			add_location(div, file$l, 478, 2, 13959);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button0);
    			append_dev(button0, span0);
    			append_dev(div, t1);
    			append_dev(div, button1);
    			append_dev(button1, span1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[2].InterfaceResponseButtonDidClickAgain)) /*mod*/ ctx[2].InterfaceResponseButtonDidClickAgain.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button1,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[2].InterfaceResponseButtonDidClickGood)) /*mod*/ ctx[2].InterfaceResponseButtonDidClickGood.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(478:1) {#if mod._ValueIsFlipped && KOMPlaySimplifiedResponseButtons}",
    		ctx
    	});

    	return block;
    }

    // (486:1) {#if OLSK_TESTING_BEHAVIOUR()}
    function create_if_block_1$5(ctx) {
    	let div0;
    	let t0_value = /*mod*/ ctx[2]._ValueState.KOMPlayStateQueue.length + "";
    	let t0;
    	let t1;
    	let div1;
    	let t2_value = /*mod*/ ctx[2]._ValueState.KOMPlayStateWait.length + "";
    	let t2;
    	let t3;
    	let div2;

    	let t4_value = (/*mod*/ ctx[2]._ValueState.KOMPlayStateCurrent.KOMSpacingDrawDate
    	? mod$5.KOMSharedGroupingDay(/*mod*/ ctx[2]._ValueState.KOMPlayStateCurrent.KOMSpacingDrawDate)
    	: "undefined") + "";

    	let t4;
    	let t5;
    	let div3;
    	let t6_value = JSON.stringify(/*mod*/ ctx[2]._ValueChronicle.KOMChronicleDidDrawMultipleTimes) + "";
    	let t6;
    	let t7;
    	let div4;

    	let t8_value = (/*mod*/ ctx[2]._ValueState.KOMPlayStateCurrent.KOMSpacingFlipDate
    	? mod$5.KOMSharedGroupingDay(/*mod*/ ctx[2]._ValueState.KOMPlayStateCurrent.KOMSpacingFlipDate)
    	: "undefined") + "";

    	let t8;
    	let t9;
    	let div5;
    	let t10_value = JSON.stringify(/*mod*/ ctx[2]._ValueChronicle.KOMChronicleDidFlipMultipleTimes) + "";
    	let t10;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			div1 = element("div");
    			t2 = text(t2_value);
    			t3 = space();
    			div2 = element("div");
    			t4 = text(t4_value);
    			t5 = space();
    			div3 = element("div");
    			t6 = text(t6_value);
    			t7 = space();
    			div4 = element("div");
    			t8 = text(t8_value);
    			t9 = space();
    			div5 = element("div");
    			t10 = text(t10_value);
    			attr_dev(div0, "id", "TestKOMPlayStateQueueCount");
    			add_location(div0, file$l, 486, 2, 14542);
    			attr_dev(div1, "id", "TestKOMPlayStateWaitCount");
    			add_location(div1, file$l, 487, 2, 14632);
    			attr_dev(div2, "id", "TestKOMSpacingDrawDate");
    			add_location(div2, file$l, 488, 2, 14720);
    			attr_dev(div3, "id", "TestKOMChronicleDidDrawMultipleTimes");
    			add_location(div3, file$l, 489, 2, 14928);
    			attr_dev(div4, "id", "TestKOMSpacingFlipDate");
    			add_location(div4, file$l, 490, 2, 15056);
    			attr_dev(div5, "id", "TestKOMChronicleDidFlipMultipleTimes");
    			add_location(div5, file$l, 491, 2, 15264);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, t4);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, t6);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, t8);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, t10);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mod*/ 4 && t0_value !== (t0_value = /*mod*/ ctx[2]._ValueState.KOMPlayStateQueue.length + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*mod*/ 4 && t2_value !== (t2_value = /*mod*/ ctx[2]._ValueState.KOMPlayStateWait.length + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*mod*/ 4 && t4_value !== (t4_value = (/*mod*/ ctx[2]._ValueState.KOMPlayStateCurrent.KOMSpacingDrawDate
    			? mod$5.KOMSharedGroupingDay(/*mod*/ ctx[2]._ValueState.KOMPlayStateCurrent.KOMSpacingDrawDate)
    			: "undefined") + "")) set_data_dev(t4, t4_value);

    			if (dirty & /*mod*/ 4 && t6_value !== (t6_value = JSON.stringify(/*mod*/ ctx[2]._ValueChronicle.KOMChronicleDidDrawMultipleTimes) + "")) set_data_dev(t6, t6_value);

    			if (dirty & /*mod*/ 4 && t8_value !== (t8_value = (/*mod*/ ctx[2]._ValueState.KOMPlayStateCurrent.KOMSpacingFlipDate
    			? mod$5.KOMSharedGroupingDay(/*mod*/ ctx[2]._ValueState.KOMPlayStateCurrent.KOMSpacingFlipDate)
    			: "undefined") + "")) set_data_dev(t8, t8_value);

    			if (dirty & /*mod*/ 4 && t10_value !== (t10_value = JSON.stringify(/*mod*/ ctx[2]._ValueChronicle.KOMChronicleDidFlipMultipleTimes) + "")) set_data_dev(t10, t10_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(486:1) {#if OLSK_TESTING_BEHAVIOUR()}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let div3;
    	let header;
    	let div0;
    	let t0;
    	let div1;
    	let button0;
    	let t1_value = /*OLSKLocalized*/ ctx[3]("KOMPlayToolbarUndoButtonText") + "";
    	let t1;
    	let button0_disabled_value;
    	let t2;
    	let button1;
    	let t4;
    	let div2;
    	let mounted;
    	let dispose;
    	let if_block = /*mod*/ ctx[2]._ValueState.KOMPlayStateCurrent && create_if_block$b(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			header = element("header");
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			button0 = element("button");
    			t1 = text(t1_value);
    			t2 = space();
    			button1 = element("button");
    			button1.textContent = `${/*OLSKLocalized*/ ctx[3]("KOMPlayToolbarDoneButtonText")}`;
    			t4 = space();
    			div2 = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", "OLSKToolbarElementGroup");
    			add_location(div0, file$l, 422, 1, 10757);
    			attr_dev(button0, "class", "KOMPlayToolbarUndoButton OLSKLayoutButtonNoStyle OLSKLayoutElementTappable");
    			button0.disabled = button0_disabled_value = /*mod*/ ctx[2]._ValueHistory.length ? null : true;
    			add_location(button0, file$l, 426, 2, 10845);
    			attr_dev(button1, "class", "KOMPlayToolbarDoneButton OLSKLayoutButtonNoStyle OLSKLayoutElementTappable");
    			add_location(button1, file$l, 428, 2, 11097);
    			attr_dev(div1, "class", "OLSKToolbarElementGroup");
    			add_location(div1, file$l, 425, 1, 10805);
    			attr_dev(header, "class", "KOMPlayToolbar OLSKToolbar OLSKToolbarJustify svelte-4giowp");
    			add_location(header, file$l, 421, 0, 10693);
    			attr_dev(div2, "class", "KOMPlayBody svelte-4giowp");
    			toggle_class(div2, "KOMPlaySimplifiedResponseButtons", /*KOMPlaySimplifiedResponseButtons*/ ctx[1]);
    			add_location(div2, file$l, 432, 0, 11299);
    			attr_dev(div3, "class", "KOMPlay svelte-4giowp");
    			add_location(div3, file$l, 419, 0, 10670);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, header);
    			append_dev(header, div0);
    			append_dev(header, t0);
    			append_dev(header, div1);
    			append_dev(div1, button0);
    			append_dev(button0, t1);
    			append_dev(div1, t2);
    			append_dev(div1, button1);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			if (if_block) if_block.m(div2, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						window_1$2,
    						"keydown",
    						function () {
    							if (is_function(/*mod*/ ctx[2].InterfaceWindowDidKeydown)) /*mod*/ ctx[2].InterfaceWindowDidKeydown.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[2].InterfaceUndoButtonDidClick)) /*mod*/ ctx[2].InterfaceUndoButtonDidClick.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button1,
    						"click",
    						function () {
    							if (is_function(/*KOMPlayDispatchDone*/ ctx[0])) /*KOMPlayDispatchDone*/ ctx[0].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (dirty & /*mod*/ 4 && button0_disabled_value !== (button0_disabled_value = /*mod*/ ctx[2]._ValueHistory.length ? null : true)) {
    				prop_dev(button0, "disabled", button0_disabled_value);
    			}

    			if (/*mod*/ ctx[2]._ValueState.KOMPlayStateCurrent) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$b(ctx);
    					if_block.c();
    					if_block.m(div2, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*KOMPlaySimplifiedResponseButtons*/ 2) {
    				toggle_class(div2, "KOMPlaySimplifiedResponseButtons", /*KOMPlaySimplifiedResponseButtons*/ ctx[1]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { KOMPlaySpacings } = $$props;
    	let { KOMPlayDeck } = $$props;
    	let { KOMPlayDispatchDone } = $$props;
    	let { KOMPlayDispatchUpdate } = $$props;
    	let { KOMPlayDispatchFetch } = $$props;
    	let { KOMPlaySimplifiedResponseButtons = false } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const mod = {
    		// VALUE
    		_ValueIsFlipped: false,
    		_ValueState: {
    			KOMPlayStateCurrent: KOMPlaySpacings[0],
    			KOMPlayStateQueue: KOMPlaySpacings.slice(1),
    			KOMPlayStateWait: [],
    			KOMPlayStateShouldRandomize: true
    		},
    		_ValueHistory: [],
    		_ValueSpeechAvailable: "speechSynthesis" in window,
    		_ValueAudioCache: {},
    		_ValueAudioPlaying: undefined,
    		// DATA
    		DataQuestion() {
    			return mod._ValueState.KOMPlayStateCurrent.$KOMSpacingCard[mod$6.KOMSpacingModelIsBackward(mod._ValueState.KOMPlayStateCurrent)
    			? "KOMCardRearText"
    			: "KOMCardFrontText"];
    		},
    		DataAnswer() {
    			return mod._ValueState.KOMPlayStateCurrent.$KOMSpacingCard[!mod$6.KOMSpacingModelIsBackward(mod._ValueState.KOMPlayStateCurrent)
    			? "KOMCardRearText"
    			: "KOMCardFrontText"];
    		},
    		DataQuestionShouldSound() {
    			return mod._DataQuestionFrontShouldSound() || mod._DataQuestionRearShouldSound();
    		},
    		_DataQuestionFrontShouldSound() {
    			if (mod$6.KOMSpacingModelIsBackward(mod._ValueState.KOMPlayStateCurrent)) {
    				return false;
    			}

    			if (mod.DataFrontHasAudio()) {
    				return true;
    			}

    			return KOMPlayDeck.KOMDeckFrontSpeechIsEnabled;
    		},
    		_DataQuestionRearShouldSound() {
    			if (!mod$6.KOMSpacingModelIsBackward(mod._ValueState.KOMPlayStateCurrent)) {
    				return false;
    			}

    			if (mod.DataRearHasAudio()) {
    				return true;
    			}

    			return KOMPlayDeck.KOMDeckRearSpeechIsEnabled;
    		},
    		DataAnswerShouldSound() {
    			return mod._DataAnswerFrontShouldSound() || mod._DataAnswerRearShouldSound();
    		},
    		_DataAnswerFrontShouldSound() {
    			if (!mod$6.KOMSpacingModelIsBackward(mod._ValueState.KOMPlayStateCurrent)) {
    				return false;
    			}

    			if (mod.DataFrontHasAudio()) {
    				return true;
    			}

    			return KOMPlayDeck.KOMDeckFrontSpeechIsEnabled;
    		},
    		_DataAnswerRearShouldSound() {
    			if (mod$6.KOMSpacingModelIsBackward(mod._ValueState.KOMPlayStateCurrent)) {
    				return false;
    			}

    			if (mod.DataRearHasAudio()) {
    				return true;
    			}

    			return KOMPlayDeck.KOMDeckRearSpeechIsEnabled;
    		},
    		DataFrontHasAudio() {
    			return KOMPlayDeck.KOMDeckAudioIsEnabled && mod._ValueState.KOMPlayStateCurrent.$KOMSpacingCard.KOMCardFrontAudio;
    		},
    		DataRearHasAudio() {
    			return KOMPlayDeck.KOMDeckAudioIsEnabled && mod._ValueState.KOMPlayStateCurrent.$KOMSpacingCard.KOMCardRearAudio;
    		},
    		DataFakeAudio(inputData) {
    			return {
    				play() {
    					
    				},
    				pause() {
    					
    				},
    				src: inputData
    			};
    		},
    		// INTERFACE
    		InterfaceUndoButtonDidClick() {
    			mod.ControlUndo();
    		},
    		InterfaceHearQuestionButtonDidClick() {
    			mod.ControlQuestionRead();
    		},
    		InterfaceHearAnswerButtonDidClick() {
    			mod.ControlAnswerRead();
    		},
    		InterfaceWindowDidKeydown(event) {
    			if (document.querySelector(".LCHLauncher")) {
    				// #spec
    				return;
    			}

    			const handlersForCode = {
    				Escape() {
    					KOMPlayDispatchDone();
    				},
    				Space() {
    					mod.ControlProgress();
    				},
    				Digit1() {
    					mod._ValueIsFlipped && mod.ControlRespond(mod$d.KOMPlayResponseTypeAgain());
    				},
    				Digit2() {
    					mod._ValueIsFlipped && mod.ControlRespond(mod$d.KOMPlayResponseTypeHard());
    				},
    				Digit3() {
    					mod._ValueIsFlipped && mod.ControlRespond(mod$d.KOMPlayResponseTypeGood());
    				},
    				Digit4() {
    					mod._ValueIsFlipped && mod.ControlRespond(mod$d.KOMPlayResponseTypeEasy());
    				}
    			};

    			if (handlersForCode[event.code]) {
    				return handlersForCode[event.code]();
    			}

    			const handlersForKey = {
    				q() {
    					if (!mod.DataQuestionShouldSound()) {
    						return;
    					}

    					mod.InterfaceHearQuestionButtonDidClick();
    				},
    				a() {
    					if (!mod.DataAnswerShouldSound()) {
    						return;
    					}

    					mod.InterfaceHearAnswerButtonDidClick();
    				},
    				x() {
    					mod._ValueIsFlipped && mod.ControlRespond(mod$d.KOMPlayResponseTypeAgain());
    				}
    			};

    			handlersForKey[event.key] && handlersForKey[event.key]();
    		},
    		InterfaceCardDidClick() {
    			mod.ControlProgress();
    		},
    		InterfaceFlipButtonDidClick() {
    			mod.ControlFlip();
    		},
    		InterfaceResponseButtonDidClickAgain() {
    			mod.ControlRespond(mod$d.KOMPlayResponseTypeAgain());
    		},
    		InterfaceResponseButtonDidClickHard() {
    			mod.ControlRespond(mod$d.KOMPlayResponseTypeHard());
    		},
    		InterfaceResponseButtonDidClickGood() {
    			mod.ControlRespond(mod$d.KOMPlayResponseTypeGood());
    		},
    		InterfaceResponseButtonDidClickEasy() {
    			mod.ControlRespond(mod$d.KOMPlayResponseTypeEasy());
    		},
    		// CONTROL
    		ControlDraw() {
    			$$invalidate(2, mod); // #purge-svelte-force-update
    			$$invalidate(2, mod._ValueIsFlipped = false, mod);
    			mod.SetupChronicle();

    			if (mod.DataQuestionShouldSound()) {
    				mod.ControlQuestionRead();
    			}
    		},
    		ControlQuestionRead() {
    			if (mod.DataFrontHasAudio() && !mod$6.KOMSpacingModelIsBackward(mod._ValueState.KOMPlayStateCurrent)) {
    				return mod.ControlAudioStart("KOMCardFrontAudio");
    			}

    			if (mod.DataRearHasAudio() && mod$6.KOMSpacingModelIsBackward(mod._ValueState.KOMPlayStateCurrent)) {
    				return mod.ControlAudioStart("KOMCardRearAudio");
    			}

    			mod.ControlReadStart(mod.DataQuestion(), !mod$6.KOMSpacingModelIsBackward(mod._ValueState.KOMPlayStateCurrent)
    			? KOMPlayDeck.KOMDeckFrontLanguageCode
    			: KOMPlayDeck.KOMDeckRearLanguageCode);
    		},
    		ControlAnswerRead() {
    			if (mod.DataFrontHasAudio() && mod$6.KOMSpacingModelIsBackward(mod._ValueState.KOMPlayStateCurrent)) {
    				return mod.ControlAudioStart("KOMCardFrontAudio");
    			}

    			if (mod.DataRearHasAudio() && !mod$6.KOMSpacingModelIsBackward(mod._ValueState.KOMPlayStateCurrent)) {
    				return mod.ControlAudioStart("KOMCardRearAudio");
    			}

    			mod.ControlReadStart(mod.DataAnswer(), mod$6.KOMSpacingModelIsBackward(mod._ValueState.KOMPlayStateCurrent)
    			? KOMPlayDeck.KOMDeckFrontLanguageCode
    			: KOMPlayDeck.KOMDeckRearLanguageCode);
    		},
    		ControlReadStart(param1, param2) {
    			if (main_12()) {
    				mod.DebugAudioLog(`read:${param2}:${param1}`);
    			}

    			if (!mod._ValueSpeechAvailable) {
    				return;
    			}

    			if (speechSynthesis.speaking) {
    				speechSynthesis.cancel();
    			}

    			const item = new SpeechSynthesisUtterance(param1);
    			item.lang = param2;

    			item.voice = speechSynthesis.getVoices().filter(function (e) {
    				return e.lang == item.lang;
    			}).pop();

    			speechSynthesis.speak(item);
    		},
    		ControlReadStop() {
    			if (main_12()) {
    				mod.DebugAudioLog(mod._ValueAudioPlaying ? "stop:audio" : "stop");
    			}

    			if (mod._ValueAudioIsPlaying) {
    				for (let key in mod._ValueAudioCache) {
    					mod._ValueAudioCache[key].pause();
    				}

    				delete mod._ValueAudioPlaying;
    			}

    			

    			if (!mod._ValueSpeechAvailable) {
    				return;
    			}

    			if (speechSynthesis.speaking) {
    				speechSynthesis.cancel();
    			}
    		},
    		async ControlAudioStart(inputData) {
    			if (!mod._ValueAudioCache[inputData] && main_12()) {
    				mod.DebugAudioLog("fetch");
    				$$invalidate(2, mod._ValueAudioCache[inputData] = mod.DataFakeAudio(await KOMPlayDispatchFetch(inputData, mod._ValueState.KOMPlayStateCurrent.$KOMSpacingCard)), mod);
    			}

    			if (!mod._ValueAudioCache[inputData]) {
    				$$invalidate(2, mod._ValueAudioCache[inputData] = new Audio(), mod).src = URL.createObjectURL(await KOMPlayDispatchFetch(inputData, mod._ValueState.KOMPlayStateCurrent.$KOMSpacingCard));
    			}

    			if (main_12()) {
    				mod.DebugAudioLog("play:" + inputData);
    			}

    			$$invalidate(2, mod._ValueAudioCache[inputData].currentTime = 0, mod);
    			mod._ValueAudioCache[inputData].play();
    			$$invalidate(2, mod._ValueAudioPlaying = true, mod);
    		},
    		ControlFlush() {
    			if (main_12()) {
    				mod.DebugAudioLog("flush");
    			}

    			$$invalidate(2, mod._ValueAudioCache = {}, mod);
    		},
    		ControlProgress() {
    			if (mod._ValueIsFlipped) {
    				return mod.ControlRespond(mod$d.KOMPlayResponseTypeGood());
    			}

    			mod.ControlFlip();
    		},
    		ControlUndo() {
    			mod._ValueState.KOMPlayStateQueue.unshift(mod._ValueState.KOMPlayStateCurrent);
    			$$invalidate(2, mod._ValueState.KOMPlayStateCurrent = mod$d.KOMPlayUndo(mod._ValueHistory.pop()), mod);

    			if (mod.DataFrontHasAudio() || mod.DataRearHasAudio()) {
    				mod.ControlFlush();
    			}

    			mod.ControlDraw();
    		},
    		ControlFlip() {
    			$$invalidate(2, mod._ValueIsFlipped = true, mod);
    			Object.assign(mod._ValueChronicle, mod$d.KOMChronicleGenerateFlip(new Date(), mod._ValueState.KOMPlayStateCurrent));
    			$$invalidate(2, mod._ValueState.KOMPlayStateCurrent.KOMSpacingFlipDate = mod._ValueChronicle.KOMChronicleFlipDate, mod);
    			KOMPlayDispatchUpdate(mod._ValueState.KOMPlayStateCurrent);

    			if (mod.DataQuestionShouldSound()) {
    				mod.ControlReadStop();
    			}

    			if (mod.DataAnswerShouldSound()) {
    				mod.ControlAnswerRead();
    			}
    		},
    		ControlRespond(inputData) {
    			if (mod.DataAnswerShouldSound()) {
    				mod.ControlReadStop();
    			}

    			if (mod.DataFrontHasAudio() || mod.DataRearHasAudio()) {
    				mod.ControlFlush();
    			}

    			const item = mod._ValueState.KOMPlayStateCurrent;

    			mod$d.KOMPlayRespond(mod._ValueState, Object.assign(mod._ValueChronicle, {
    				KOMChronicleResponseDate: new Date(),
    				KOMChronicleResponseType: inputData
    			}));

    			KOMPlayDispatchUpdate(item);
    			mod._ValueHistory.push(item);

    			if (!mod._ValueState.KOMPlayStateCurrent) {
    				return KOMPlayDispatchDone();
    			}

    			mod.ControlDraw();
    		},
    		// DEBUG
    		DebugAudioLog(inputData) {
    			window.TestKOMPlayAudioLog.innerHTML = window.TestKOMPlayAudioLog.innerHTML
    			? window.TestKOMPlayAudioLog.innerHTML.split(",").concat(inputData).join(",")
    			: inputData;
    		},
    		// SETUP
    		SetupEverything() {
    			mod.ControlDraw();
    		},
    		SetupChronicle() {
    			$$invalidate(2, mod._ValueChronicle = mod$d.KOMChronicleGenerateDraw(new Date(), mod._ValueState.KOMPlayStateCurrent), mod);
    			$$invalidate(2, mod._ValueState.KOMPlayStateCurrent.KOMSpacingDrawDate = mod._ValueChronicle.KOMChronicleDrawDate, mod);
    			KOMPlayDispatchUpdate(mod._ValueState.KOMPlayStateCurrent);
    		},
    		// LIFECYCLE
    		LifecycleModuleWillMount() {
    			mod.SetupEverything();
    		}
    	};

    	main_12()
    	? mod.LifecycleModuleWillMount()
    	: onMount(mod.LifecycleModuleWillMount);

    	const writable_props = [
    		"KOMPlaySpacings",
    		"KOMPlayDeck",
    		"KOMPlayDispatchDone",
    		"KOMPlayDispatchUpdate",
    		"KOMPlayDispatchFetch",
    		"KOMPlaySimplifiedResponseButtons"
    	];

    	Object_1$6.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("KOMPlaySpacings" in $$props) $$invalidate(4, KOMPlaySpacings = $$props.KOMPlaySpacings);
    		if ("KOMPlayDeck" in $$props) $$invalidate(5, KOMPlayDeck = $$props.KOMPlayDeck);
    		if ("KOMPlayDispatchDone" in $$props) $$invalidate(0, KOMPlayDispatchDone = $$props.KOMPlayDispatchDone);
    		if ("KOMPlayDispatchUpdate" in $$props) $$invalidate(6, KOMPlayDispatchUpdate = $$props.KOMPlayDispatchUpdate);
    		if ("KOMPlayDispatchFetch" in $$props) $$invalidate(7, KOMPlayDispatchFetch = $$props.KOMPlayDispatchFetch);
    		if ("KOMPlaySimplifiedResponseButtons" in $$props) $$invalidate(1, KOMPlaySimplifiedResponseButtons = $$props.KOMPlaySimplifiedResponseButtons);
    	};

    	$$self.$capture_state = () => ({
    		KOMPlaySpacings,
    		KOMPlayDeck,
    		KOMPlayDispatchDone,
    		KOMPlayDispatchUpdate,
    		KOMPlayDispatchFetch,
    		KOMPlaySimplifiedResponseButtons,
    		OLSKInternational,
    		OLSKLocalized,
    		OLSK_TESTING_BEHAVIOUR: main_12,
    		KOMPlayLogic: mod$d,
    		KOMSpacingModel: mod$6,
    		KOMSharedLogic: mod$5,
    		mod,
    		onMount
    	});

    	$$self.$inject_state = $$props => {
    		if ("KOMPlaySpacings" in $$props) $$invalidate(4, KOMPlaySpacings = $$props.KOMPlaySpacings);
    		if ("KOMPlayDeck" in $$props) $$invalidate(5, KOMPlayDeck = $$props.KOMPlayDeck);
    		if ("KOMPlayDispatchDone" in $$props) $$invalidate(0, KOMPlayDispatchDone = $$props.KOMPlayDispatchDone);
    		if ("KOMPlayDispatchUpdate" in $$props) $$invalidate(6, KOMPlayDispatchUpdate = $$props.KOMPlayDispatchUpdate);
    		if ("KOMPlayDispatchFetch" in $$props) $$invalidate(7, KOMPlayDispatchFetch = $$props.KOMPlayDispatchFetch);
    		if ("KOMPlaySimplifiedResponseButtons" in $$props) $$invalidate(1, KOMPlaySimplifiedResponseButtons = $$props.KOMPlaySimplifiedResponseButtons);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMPlayDispatchDone,
    		KOMPlaySimplifiedResponseButtons,
    		mod,
    		OLSKLocalized,
    		KOMPlaySpacings,
    		KOMPlayDeck,
    		KOMPlayDispatchUpdate,
    		KOMPlayDispatchFetch
    	];
    }

    class Main$l extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {
    			KOMPlaySpacings: 4,
    			KOMPlayDeck: 5,
    			KOMPlayDispatchDone: 0,
    			KOMPlayDispatchUpdate: 6,
    			KOMPlayDispatchFetch: 7,
    			KOMPlaySimplifiedResponseButtons: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$l.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*KOMPlaySpacings*/ ctx[4] === undefined && !("KOMPlaySpacings" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMPlaySpacings'");
    		}

    		if (/*KOMPlayDeck*/ ctx[5] === undefined && !("KOMPlayDeck" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMPlayDeck'");
    		}

    		if (/*KOMPlayDispatchDone*/ ctx[0] === undefined && !("KOMPlayDispatchDone" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMPlayDispatchDone'");
    		}

    		if (/*KOMPlayDispatchUpdate*/ ctx[6] === undefined && !("KOMPlayDispatchUpdate" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMPlayDispatchUpdate'");
    		}

    		if (/*KOMPlayDispatchFetch*/ ctx[7] === undefined && !("KOMPlayDispatchFetch" in props)) {
    			console.warn("<Main> was created without expected prop 'KOMPlayDispatchFetch'");
    		}
    	}

    	get KOMPlaySpacings() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMPlaySpacings(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMPlayDeck() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMPlayDeck(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMPlayDispatchDone() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMPlayDispatchDone(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMPlayDispatchUpdate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMPlayDispatchUpdate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMPlayDispatchFetch() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMPlayDispatchFetch(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMPlaySimplifiedResponseButtons() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMPlaySimplifiedResponseButtons(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var _OLSKSharedReload = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedReload\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedReload-oval2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 13,9 C 13,11.76 10.76,14 8,14 5.24,14 3,11.76 3,9 3,6.24 5.24,4 8,4\" />\n    <path id=\"_OLSKSharedReload-bezier8\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"rgb(0, 0, 0)\" d=\"M 8,2 L 8,6 11,4 8,2\" />\n</svg>\n";

    /* node_modules/OLSKReloadButton/main.svelte generated by Svelte v3.29.4 */
    const file$m = "node_modules/OLSKReloadButton/main.svelte";

    function create_fragment$m(ctx) {
    	let button;
    	let div;
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKReloadButtonImage");
    			add_location(div, file$m, 10, 1, 608);
    			attr_dev(button, "class", "OLSKReloadButton OLSKToolbarButton OLSKLayoutElementTappable OLSKLayoutButtonNoStyle");
    			attr_dev(button, "title", button_title_value = /*OLSKLocalized*/ ctx[0]("OLSKReloadButtonText"));
    			add_location(button, file$m, 9, 0, 413);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = _OLSKSharedReload;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => window.location.reload();

    	$$self.$capture_state = () => ({
    		OLSKInternational,
    		OLSKLocalized,
    		_OLSKSharedReload
    	});

    	return [OLSKLocalized, click_handler];
    }

    class Main$m extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$m.name
    		});
    	}
    }

    /* node_modules/OLSKLanguageSwitcher/main.svelte generated by Svelte v3.29.4 */
    const file$n = "node_modules/OLSKLanguageSwitcher/main.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	return child_ctx;
    }

    // (26:1) {#if e === OLSKSharedPageCurrentLanguage }
    function create_if_block_1$6(ctx) {
    	let span;
    	let t_value = /*e*/ ctx[5].toUpperCase() + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "class", "OLSKLanguageSwitcherSelected");
    			add_location(span, file$n, 26, 2, 854);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*OLSKSharedPageLanguagesAvailable*/ 1 && t_value !== (t_value = /*e*/ ctx[5].toUpperCase() + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(26:1) {#if e === OLSKSharedPageCurrentLanguage }",
    		ctx
    	});

    	return block;
    }

    // (30:1) {#if e !== OLSKSharedPageCurrentLanguage}
    function create_if_block$c(ctx) {
    	let a;
    	let t_value = /*e*/ ctx[5].toUpperCase() + "";
    	let t;
    	let a_aria_label_value;
    	let a_title_value;
    	let a_href_value;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = text(t_value);
    			attr_dev(a, "class", "OLSKLanguageSwitcherVersion");
    			attr_dev(a, "aria-label", a_aria_label_value = /*mod*/ ctx[3].DataLinkTitle(/*e*/ ctx[5]));
    			attr_dev(a, "title", a_title_value = /*mod*/ ctx[3].DataLinkTitle(/*e*/ ctx[5]));
    			attr_dev(a, "href", a_href_value = window.OLSKCanonicalFor(/*OLSKSharedActiveRouteConstant*/ ctx[2], { OLSKRoutingLanguage: /*e*/ ctx[5] }));
    			add_location(a, file$n, 30, 2, 977);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*OLSKSharedPageLanguagesAvailable*/ 1 && t_value !== (t_value = /*e*/ ctx[5].toUpperCase() + "")) set_data_dev(t, t_value);

    			if (dirty & /*OLSKSharedPageLanguagesAvailable*/ 1 && a_aria_label_value !== (a_aria_label_value = /*mod*/ ctx[3].DataLinkTitle(/*e*/ ctx[5]))) {
    				attr_dev(a, "aria-label", a_aria_label_value);
    			}

    			if (dirty & /*OLSKSharedPageLanguagesAvailable*/ 1 && a_title_value !== (a_title_value = /*mod*/ ctx[3].DataLinkTitle(/*e*/ ctx[5]))) {
    				attr_dev(a, "title", a_title_value);
    			}

    			if (dirty & /*OLSKSharedActiveRouteConstant, OLSKSharedPageLanguagesAvailable*/ 5 && a_href_value !== (a_href_value = window.OLSKCanonicalFor(/*OLSKSharedActiveRouteConstant*/ ctx[2], { OLSKRoutingLanguage: /*e*/ ctx[5] }))) {
    				attr_dev(a, "href", a_href_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(30:1) {#if e !== OLSKSharedPageCurrentLanguage}",
    		ctx
    	});

    	return block;
    }

    // (25:0) {#each OLSKSharedPageLanguagesAvailable as e}
    function create_each_block$6(ctx) {
    	let t;
    	let if_block1_anchor;
    	let if_block0 = /*e*/ ctx[5] === /*OLSKSharedPageCurrentLanguage*/ ctx[1] && create_if_block_1$6(ctx);
    	let if_block1 = /*e*/ ctx[5] !== /*OLSKSharedPageCurrentLanguage*/ ctx[1] && create_if_block$c(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*e*/ ctx[5] === /*OLSKSharedPageCurrentLanguage*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$6(ctx);
    					if_block0.c();
    					if_block0.m(t.parentNode, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*e*/ ctx[5] !== /*OLSKSharedPageCurrentLanguage*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$c(ctx);
    					if_block1.c();
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(25:0) {#each OLSKSharedPageLanguagesAvailable as e}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let div;
    	let each_value = /*OLSKSharedPageLanguagesAvailable*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "OLSKLanguageSwitcher");
    			add_location(div, file$n, 22, 0, 726);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*mod, OLSKSharedPageLanguagesAvailable, window, OLSKSharedActiveRouteConstant, OLSKSharedPageCurrentLanguage*/ 15) {
    				each_value = /*OLSKSharedPageLanguagesAvailable*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { OLSKSharedPageLanguagesAvailable } = $$props;
    	let { OLSKSharedPageCurrentLanguage } = $$props;
    	let { OLSKSharedActiveRouteConstant } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const mod = {
    		// DATA
    		DataLinkTitle(inputData) {
    			return OLSKString.OLSKStringWithFormat(OLSKLocalized("OLSKLanguageSwitcherVersionFormat"), OLSKLocalized("OLSKLanguageSwitcherVersionName")[inputData]);
    		}
    	};

    	const writable_props = [
    		"OLSKSharedPageLanguagesAvailable",
    		"OLSKSharedPageCurrentLanguage",
    		"OLSKSharedActiveRouteConstant"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("OLSKSharedPageLanguagesAvailable" in $$props) $$invalidate(0, OLSKSharedPageLanguagesAvailable = $$props.OLSKSharedPageLanguagesAvailable);
    		if ("OLSKSharedPageCurrentLanguage" in $$props) $$invalidate(1, OLSKSharedPageCurrentLanguage = $$props.OLSKSharedPageCurrentLanguage);
    		if ("OLSKSharedActiveRouteConstant" in $$props) $$invalidate(2, OLSKSharedActiveRouteConstant = $$props.OLSKSharedActiveRouteConstant);
    	};

    	$$self.$capture_state = () => ({
    		OLSKSharedPageLanguagesAvailable,
    		OLSKSharedPageCurrentLanguage,
    		OLSKSharedActiveRouteConstant,
    		OLSKInternational,
    		OLSKString,
    		OLSKLocalized,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKSharedPageLanguagesAvailable" in $$props) $$invalidate(0, OLSKSharedPageLanguagesAvailable = $$props.OLSKSharedPageLanguagesAvailable);
    		if ("OLSKSharedPageCurrentLanguage" in $$props) $$invalidate(1, OLSKSharedPageCurrentLanguage = $$props.OLSKSharedPageCurrentLanguage);
    		if ("OLSKSharedActiveRouteConstant" in $$props) $$invalidate(2, OLSKSharedActiveRouteConstant = $$props.OLSKSharedActiveRouteConstant);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		OLSKSharedPageLanguagesAvailable,
    		OLSKSharedPageCurrentLanguage,
    		OLSKSharedActiveRouteConstant,
    		mod
    	];
    }

    class Main$n extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$n, create_fragment$n, safe_not_equal, {
    			OLSKSharedPageLanguagesAvailable: 0,
    			OLSKSharedPageCurrentLanguage: 1,
    			OLSKSharedActiveRouteConstant: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$n.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKSharedPageLanguagesAvailable*/ ctx[0] === undefined && !("OLSKSharedPageLanguagesAvailable" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKSharedPageLanguagesAvailable'");
    		}

    		if (/*OLSKSharedPageCurrentLanguage*/ ctx[1] === undefined && !("OLSKSharedPageCurrentLanguage" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKSharedPageCurrentLanguage'");
    		}

    		if (/*OLSKSharedActiveRouteConstant*/ ctx[2] === undefined && !("OLSKSharedActiveRouteConstant" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKSharedActiveRouteConstant'");
    		}
    	}

    	get OLSKSharedPageLanguagesAvailable() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKSharedPageLanguagesAvailable(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKSharedPageCurrentLanguage() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKSharedPageCurrentLanguage(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKSharedActiveRouteConstant() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKSharedActiveRouteConstant(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var _OLSKSharedCloud = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedCloud\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedCloud-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 9.44,3.25 C 8.04,3.25 7.01,4.06 6.52,5.03 L 6.53,5.03 C 6.44,5.21 6.22,5.28 6.05,5.19 5.44,4.89 4.72,4.92 4.15,5.26 3.58,5.61 3.15,6.24 3.15,7.21 L 3.15,7.21 C 3.15,7.38 3.03,7.53 2.86,7.56 1.78,7.75 1,8.83 1,9.91 1,11.21 2.02,12.25 3.69,12.25 L 12.49,12.25 C 13.88,12.25 15,11.13 15,9.73 15,8.5 14.13,7.48 12.98,7.25 L 12.97,7.25 C 12.79,7.21 12.66,7.04 12.68,6.86 12.86,5.08 11.46,3.25 9.44,3.25 Z M 9.44,3.25\" />\n</svg>\n";

    var _OLSKSharedLauncher = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedLauncher\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedLauncher-group\" transform=\"scale(1.07, 1.07)\" >\n        <path id=\"_OLSKSharedLauncher-prompt\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8.25,2.5 L 13.25,7.5 8.25,12.5\" />\n        <g id=\"_OLSKSharedLauncher-linesSolid\">\n            <path id=\"_OLSKSharedLauncher-bezier5\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 2,5.5 L 8,5.5\" />\n            <path id=\"_OLSKSharedLauncher-bezier6\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 4.5,7.5 L 10,7.5\" />\n            <path id=\"_OLSKSharedLauncher-bezier7\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 2.5,9.5 L 7.5,9.5\" />\n        </g>\n    </g>\n</svg>\n";

    /* node_modules/OLSKAppToolbar/main.svelte generated by Svelte v3.29.4 */

    const { window: window_1$3 } = globals;
    const file$o = "node_modules/OLSKAppToolbar/main.svelte";

    // (52:1) {#if OLSKAppToolbarGuideURL}
    function create_if_block_2$4(ctx) {
    	let a;
    	let t_value = /*OLSKLocalized*/ ctx[5]("OLSKAppToolbarGuideLinkText") + "";
    	let t;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = text(t_value);
    			attr_dev(a, "class", "OLSKAppToolbarGuideLink svelte-td6fvt");
    			attr_dev(a, "href", /*OLSKAppToolbarGuideURL*/ ctx[0]);
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$o, 52, 2, 1669);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*OLSKAppToolbarGuideURL*/ 1) {
    				attr_dev(a, "href", /*OLSKAppToolbarGuideURL*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(52:1) {#if OLSKAppToolbarGuideURL}",
    		ctx
    	});

    	return block;
    }

    // (56:1) {#if OLSKAppToolbarDispatchFund }
    function create_if_block_1$7(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = `${/*OLSKLocalized*/ ctx[5]("OLSKAppToolbarFundButtonText")}`;
    			attr_dev(button, "class", "OLSKAppToolbarFundButton OLSKCommonButton");
    			add_location(button, file$o, 56, 2, 1850);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKAppToolbarDispatchFund*/ ctx[4])) /*OLSKAppToolbarDispatchFund*/ ctx[4].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(56:1) {#if OLSKAppToolbarDispatchFund }",
    		ctx
    	});

    	return block;
    }

    // (68:1) {#if OLSKAppToolbarDispatchLauncher }
    function create_if_block$d(ctx) {
    	let button;
    	let div;
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKAppToolbarLauncherButtonImage svelte-td6fvt");
    			add_location(div, file$o, 69, 3, 2773);
    			attr_dev(button, "class", "OLSKAppToolbarLauncherButton OLSKLayoutButtonNoStyle OLSKLayoutElementTappable OLSKToolbarButton");
    			attr_dev(button, "title", button_title_value = /*OLSKLocalized*/ ctx[5]("OLSKAppToolbarLauncherButtonText"));
    			toggle_class(button, "OSWIconVisible", false);
    			add_location(button, file$o, 68, 2, 2521);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = _OLSKSharedLauncher;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKAppToolbarDispatchLauncher*/ ctx[2])) /*OLSKAppToolbarDispatchLauncher*/ ctx[2].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(68:1) {#if OLSKAppToolbarDispatchLauncher }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$o(ctx) {
    	let div4;
    	let div0;
    	let olskreloadbutton;
    	let t0;
    	let olsklanguageswitcher;
    	let t1;
    	let t2;
    	let t3;
    	let div3;
    	let div1;
    	let t4;
    	let t5;
    	let button;
    	let div2;
    	let button_title_value;
    	let t6;
    	let current;
    	let mounted;
    	let dispose;
    	olskreloadbutton = new Main$m({ $$inline: true });

    	olsklanguageswitcher = new Main$n({
    			props: {
    				OLSKSharedActiveRouteConstant: window.OLSKPublicConstants("OLSKSharedActiveRouteConstant"),
    				OLSKSharedPageLanguagesAvailable: window.OLSKPublicConstants("OLSKSharedPageLanguagesAvailable"),
    				OLSKSharedPageCurrentLanguage: window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")
    			},
    			$$inline: true
    		});

    	let if_block0 = /*OLSKAppToolbarGuideURL*/ ctx[0] && create_if_block_2$4(ctx);
    	let if_block1 = /*OLSKAppToolbarDispatchFund*/ ctx[4] && create_if_block_1$7(ctx);
    	let if_block2 = /*OLSKAppToolbarDispatchLauncher*/ ctx[2] && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");
    			create_component(olskreloadbutton.$$.fragment);
    			t0 = space();
    			create_component(olsklanguageswitcher.$$.fragment);
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			div3 = element("div");
    			div1 = element("div");
    			t4 = text(/*OLSKAppToolbarStorageStatus*/ ctx[1]);
    			t5 = space();
    			button = element("button");
    			div2 = element("div");
    			t6 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(div0, "class", "OLSKToolbarElementGroup svelte-td6fvt");
    			add_location(div0, file$o, 43, 0, 1254);
    			attr_dev(div1, "class", "OLSKAppToolbarStorageStatus svelte-td6fvt");
    			add_location(div1, file$o, 61, 1, 2061);
    			attr_dev(div2, "class", "OLSKAppToolbarStorageButtonImage svelte-td6fvt");
    			add_location(div2, file$o, 64, 2, 2390);
    			attr_dev(button, "class", "OLSKAppToolbarStorageButton OLSKLayoutButtonNoStyle OLSKLayoutElementTappable OLSKToolbarButton svelte-td6fvt");
    			attr_dev(button, "title", button_title_value = /*OLSKLocalized*/ ctx[5]("OLSKAppToolbarStorageButtonText"));
    			toggle_class(button, "OSWIconVisible", false);
    			add_location(button, file$o, 63, 1, 2142);
    			attr_dev(div3, "class", "OLSKToolbarElementGroup svelte-td6fvt");
    			add_location(div3, file$o, 60, 0, 2022);
    			attr_dev(div4, "class", "OLSKAppToolbar OLSKToolbar OLSKToolbarJustify svelte-td6fvt");
    			add_location(div4, file$o, 41, 0, 1193);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			mount_component(olskreloadbutton, div0, null);
    			append_dev(div0, t0);
    			mount_component(olsklanguageswitcher, div0, null);
    			append_dev(div0, t1);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t2);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(div4, t3);
    			append_dev(div4, div3);
    			append_dev(div3, div1);
    			append_dev(div1, t4);
    			append_dev(div3, t5);
    			append_dev(div3, button);
    			append_dev(button, div2);
    			div2.innerHTML = _OLSKSharedCloud;
    			append_dev(div3, t6);
    			if (if_block2) if_block2.m(div3, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window_1$3, "keydown", /*mod*/ ctx[6].InterfaceWindowDidKeydown, false, false, false),
    					listen_dev(
    						button,
    						"click",
    						function () {
    							if (is_function(/*OLSKAppToolbarDispatchStorage*/ ctx[3])) /*OLSKAppToolbarDispatchStorage*/ ctx[3].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (/*OLSKAppToolbarGuideURL*/ ctx[0]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$4(ctx);
    					if_block0.c();
    					if_block0.m(div0, t2);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*OLSKAppToolbarDispatchFund*/ ctx[4]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$7(ctx);
    					if_block1.c();
    					if_block1.m(div0, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (!current || dirty & /*OLSKAppToolbarStorageStatus*/ 2) set_data_dev(t4, /*OLSKAppToolbarStorageStatus*/ ctx[1]);

    			if (/*OLSKAppToolbarDispatchLauncher*/ ctx[2]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$d(ctx);
    					if_block2.c();
    					if_block2.m(div3, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskreloadbutton.$$.fragment, local);
    			transition_in(olsklanguageswitcher.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskreloadbutton.$$.fragment, local);
    			transition_out(olsklanguageswitcher.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_component(olskreloadbutton);
    			destroy_component(olsklanguageswitcher);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { OLSKAppToolbarGuideURL = "" } = $$props;
    	let { OLSKAppToolbarStorageStatus = "" } = $$props;
    	let { OLSKAppToolbarDispatchLauncher = null } = $$props;
    	let { OLSKAppToolbarDispatchStorage } = $$props;
    	let { OLSKAppToolbarDispatchFund = null } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const mod = {
    		// INTERFACE
    		InterfaceWindowDidKeydown(event) {
    			const handlerFunctions = {
    				Space() {
    					if (!event.altKey) {
    						return;
    					}

    					OLSKAppToolbarDispatchLauncher();
    					return event.preventDefault();
    				}
    			};

    			handlerFunctions[event.code] && handlerFunctions[event.code]();
    		}
    	};

    	const writable_props = [
    		"OLSKAppToolbarGuideURL",
    		"OLSKAppToolbarStorageStatus",
    		"OLSKAppToolbarDispatchLauncher",
    		"OLSKAppToolbarDispatchStorage",
    		"OLSKAppToolbarDispatchFund"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("OLSKAppToolbarGuideURL" in $$props) $$invalidate(0, OLSKAppToolbarGuideURL = $$props.OLSKAppToolbarGuideURL);
    		if ("OLSKAppToolbarStorageStatus" in $$props) $$invalidate(1, OLSKAppToolbarStorageStatus = $$props.OLSKAppToolbarStorageStatus);
    		if ("OLSKAppToolbarDispatchLauncher" in $$props) $$invalidate(2, OLSKAppToolbarDispatchLauncher = $$props.OLSKAppToolbarDispatchLauncher);
    		if ("OLSKAppToolbarDispatchStorage" in $$props) $$invalidate(3, OLSKAppToolbarDispatchStorage = $$props.OLSKAppToolbarDispatchStorage);
    		if ("OLSKAppToolbarDispatchFund" in $$props) $$invalidate(4, OLSKAppToolbarDispatchFund = $$props.OLSKAppToolbarDispatchFund);
    	};

    	$$self.$capture_state = () => ({
    		OLSKAppToolbarGuideURL,
    		OLSKAppToolbarStorageStatus,
    		OLSKAppToolbarDispatchLauncher,
    		OLSKAppToolbarDispatchStorage,
    		OLSKAppToolbarDispatchFund,
    		OLSKInternational,
    		OLSKLocalized,
    		mod,
    		OLSKReloadButton: Main$m,
    		OLSKLanguageSwitcher: Main$n,
    		_OLSKSharedCloud,
    		_OLSKSharedLauncher
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKAppToolbarGuideURL" in $$props) $$invalidate(0, OLSKAppToolbarGuideURL = $$props.OLSKAppToolbarGuideURL);
    		if ("OLSKAppToolbarStorageStatus" in $$props) $$invalidate(1, OLSKAppToolbarStorageStatus = $$props.OLSKAppToolbarStorageStatus);
    		if ("OLSKAppToolbarDispatchLauncher" in $$props) $$invalidate(2, OLSKAppToolbarDispatchLauncher = $$props.OLSKAppToolbarDispatchLauncher);
    		if ("OLSKAppToolbarDispatchStorage" in $$props) $$invalidate(3, OLSKAppToolbarDispatchStorage = $$props.OLSKAppToolbarDispatchStorage);
    		if ("OLSKAppToolbarDispatchFund" in $$props) $$invalidate(4, OLSKAppToolbarDispatchFund = $$props.OLSKAppToolbarDispatchFund);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		OLSKAppToolbarGuideURL,
    		OLSKAppToolbarStorageStatus,
    		OLSKAppToolbarDispatchLauncher,
    		OLSKAppToolbarDispatchStorage,
    		OLSKAppToolbarDispatchFund,
    		OLSKLocalized,
    		mod
    	];
    }

    class Main$o extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$o, create_fragment$o, safe_not_equal, {
    			OLSKAppToolbarGuideURL: 0,
    			OLSKAppToolbarStorageStatus: 1,
    			OLSKAppToolbarDispatchLauncher: 2,
    			OLSKAppToolbarDispatchStorage: 3,
    			OLSKAppToolbarDispatchFund: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$o.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKAppToolbarDispatchStorage*/ ctx[3] === undefined && !("OLSKAppToolbarDispatchStorage" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKAppToolbarDispatchStorage'");
    		}
    	}

    	get OLSKAppToolbarGuideURL() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarGuideURL(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarStorageStatus() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarStorageStatus(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarDispatchLauncher() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarDispatchLauncher(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarDispatchStorage() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarDispatchStorage(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarDispatchFund() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarDispatchFund(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/_shared/__external/OLSKServiceWorker/main.svelte generated by Svelte v3.29.4 */

    const { console: console_1$1 } = globals;
    const file$p = "os-app/_shared/__external/OLSKServiceWorker/main.svelte";

    // (107:0) {#if mod._ValueUpdateAlertIsVisible }
    function create_if_block$e(ctx) {
    	let div;
    	let span;
    	let t1;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			span.textContent = `${/*OLSKLocalized*/ ctx[1]("OLSKServiceWorkerUpdateAlertLabelText")}`;
    			t1 = space();
    			button = element("button");
    			button.textContent = `${/*OLSKLocalized*/ ctx[1]("OLSKServiceWorkerUpdateAlertReloadButtonText")}`;
    			attr_dev(span, "class", "OLSKServiceWorkerUpdateAlertLabel");
    			add_location(span, file$p, 108, 1, 2779);
    			attr_dev(button, "class", "OLSKServiceWorkerUpdateAlertReloadButton");
    			add_location(button, file$p, 109, 1, 2894);
    			attr_dev(div, "class", "OLSKServiceWorkerUpdateAlert svelte-1a039ew");
    			add_location(div, file$p, 107, 0, 2677);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(div, t1);
    			append_dev(div, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[0].InterfaceReloadButtonDidClick)) /*mod*/ ctx[0].InterfaceReloadButtonDidClick.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(div, "click", /*click_handler*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(107:0) {#if mod._ValueUpdateAlertIsVisible }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$p(ctx) {
    	let if_block_anchor;
    	let if_block = /*mod*/ ctx[0]._ValueUpdateAlertIsVisible && create_if_block$e(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*mod*/ ctx[0]._ValueUpdateAlertIsVisible) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$e(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { OLSKServiceWorkerRegistrationRoute } = $$props;
    	let { DebugFakeUpdateAlertVisible = false } = $$props;
    	let { DebugEnableLogging = true } = $$props;
    	let { DebugAllowLocalhost = false } = $$props;

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const mod = {
    		// VALUE
    		_ValueRegistration: undefined,
    		_ValueNextWorker: undefined,
    		_ValueUpdateAlertIsVisible: DebugFakeUpdateAlertVisible,
    		// INTERFACE
    		InterfaceReloadButtonDidClick() {
    			mod.ControlSkipWaiting();
    		},
    		// CONTROL
    		ControlSkipWaiting() {
    			mod._ValueNextWorker.postMessage("OLSKServiceWorker_SkipWaiting");
    		},
    		// MESSAGE
    		MessageUpdateFound(event) {
    			DebugEnableLogging && console.log("updatefound", event);
    			$$invalidate(0, mod._ValueNextWorker = mod._ValueRegistration.installing, mod);
    			mod._ValueNextWorker.addEventListener("statechange", mod.MessageNextWorkerStateChange);
    		},
    		MessageNextWorkerStateChange(event) {
    			DebugEnableLogging && console.log("statechange", mod._ValueNextWorker.state, event, navigator.serviceWorker.controller);

    			if (mod._ValueNextWorker.state !== "installed") {
    				return;
    			}

    			if (!navigator.serviceWorker.controller) {
    				return;
    			}

    			$$invalidate(0, mod._ValueUpdateAlertIsVisible = true, mod);
    		},
    		MessageControllerChange(event) {
    			DebugEnableLogging && console.log("controllerchange", event);
    			window.location.reload();
    		},
    		// SETUP
    		async SetupEverything() {
    			if (!navigator.serviceWorker) {
    				return DebugEnableLogging && console.info("Service worker not available");
    			}

    			if (!OLSKServiceWorkerRegistrationRoute) {
    				return DebugEnableLogging && console.info("Missing registration route");
    			}

    			if (document.location.hostname === "localhost" && !DebugAllowLocalhost) {
    				return DebugEnableLogging && console.info("OLSKServiceWorker: Skipping on localhost");
    			}

    			
    			await mod.SetupRegistration();
    			mod.SetupControllerChange();
    		},
    		async SetupRegistration() {
    			$$invalidate(0, mod._ValueRegistration = await navigator.serviceWorker.register(OLSKServiceWorkerRegistrationRoute), mod);
    			DebugEnableLogging && console.info("Service Worker Registered");
    			mod._ValueRegistration.addEventListener("updatefound", mod.MessageUpdateFound);
    		},
    		SetupControllerChange() {
    			navigator.serviceWorker.addEventListener("controllerchange", mod.MessageControllerChange);
    		},
    		// LIFECYCLE
    		LifecycleModuleDidMount() {
    			mod.SetupEverything();
    		}
    	};

    	mod.LifecycleModuleDidMount();

    	const writable_props = [
    		"OLSKServiceWorkerRegistrationRoute",
    		"DebugFakeUpdateAlertVisible",
    		"DebugEnableLogging",
    		"DebugAllowLocalhost"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => $$invalidate(0, mod._ValueUpdateAlertIsVisible = false, mod);

    	$$self.$$set = $$props => {
    		if ("OLSKServiceWorkerRegistrationRoute" in $$props) $$invalidate(2, OLSKServiceWorkerRegistrationRoute = $$props.OLSKServiceWorkerRegistrationRoute);
    		if ("DebugFakeUpdateAlertVisible" in $$props) $$invalidate(3, DebugFakeUpdateAlertVisible = $$props.DebugFakeUpdateAlertVisible);
    		if ("DebugEnableLogging" in $$props) $$invalidate(4, DebugEnableLogging = $$props.DebugEnableLogging);
    		if ("DebugAllowLocalhost" in $$props) $$invalidate(5, DebugAllowLocalhost = $$props.DebugAllowLocalhost);
    	};

    	$$self.$capture_state = () => ({
    		OLSKServiceWorkerRegistrationRoute,
    		DebugFakeUpdateAlertVisible,
    		DebugEnableLogging,
    		DebugAllowLocalhost,
    		OLSKInternational,
    		OLSKLocalized,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKServiceWorkerRegistrationRoute" in $$props) $$invalidate(2, OLSKServiceWorkerRegistrationRoute = $$props.OLSKServiceWorkerRegistrationRoute);
    		if ("DebugFakeUpdateAlertVisible" in $$props) $$invalidate(3, DebugFakeUpdateAlertVisible = $$props.DebugFakeUpdateAlertVisible);
    		if ("DebugEnableLogging" in $$props) $$invalidate(4, DebugEnableLogging = $$props.DebugEnableLogging);
    		if ("DebugAllowLocalhost" in $$props) $$invalidate(5, DebugAllowLocalhost = $$props.DebugAllowLocalhost);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		mod,
    		OLSKLocalized,
    		OLSKServiceWorkerRegistrationRoute,
    		DebugFakeUpdateAlertVisible,
    		DebugEnableLogging,
    		DebugAllowLocalhost,
    		click_handler
    	];
    }

    class Main$p extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$p, create_fragment$p, safe_not_equal, {
    			OLSKServiceWorkerRegistrationRoute: 2,
    			DebugFakeUpdateAlertVisible: 3,
    			DebugEnableLogging: 4,
    			DebugAllowLocalhost: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$p.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKServiceWorkerRegistrationRoute*/ ctx[2] === undefined && !("OLSKServiceWorkerRegistrationRoute" in props)) {
    			console_1$1.warn("<Main> was created without expected prop 'OLSKServiceWorkerRegistrationRoute'");
    		}
    	}

    	get OLSKServiceWorkerRegistrationRoute() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKServiceWorkerRegistrationRoute(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get DebugFakeUpdateAlertVisible() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set DebugFakeUpdateAlertVisible(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get DebugEnableLogging() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set DebugEnableLogging(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get DebugAllowLocalhost() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set DebugAllowLocalhost(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKStorageWidget/main.svelte generated by Svelte v3.29.4 */

    const file$q = "node_modules/OLSKStorageWidget/main.svelte";

    function create_fragment$q(ctx) {
    	let div;
    	let SetupStorageWidget_action;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "OLSKStorageWidget");
    			add_location(div, file$q, 8, 0, 158);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = action_destroyer(SetupStorageWidget_action = /*SetupStorageWidget*/ ctx[0].call(null, div));
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { StorageClient } = $$props;

    	function SetupStorageWidget(inputData) {
    		new window.OLSKStorageWidget(StorageClient).attach(inputData);
    	}

    	
    	const writable_props = ["StorageClient"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("StorageClient" in $$props) $$invalidate(1, StorageClient = $$props.StorageClient);
    	};

    	$$self.$capture_state = () => ({ StorageClient, SetupStorageWidget });

    	$$self.$inject_state = $$props => {
    		if ("StorageClient" in $$props) $$invalidate(1, StorageClient = $$props.StorageClient);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [SetupStorageWidget, StorageClient];
    }

    class Main$q extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, { StorageClient: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$q.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*StorageClient*/ ctx[1] === undefined && !("StorageClient" in props)) {
    			console.warn("<Main> was created without expected prop 'StorageClient'");
    		}
    	}

    	get StorageClient() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set StorageClient(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKPointer/main.svelte generated by Svelte v3.29.4 */

    const file$r = "node_modules/OLSKPointer/main.svelte";

    function create_fragment$r(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "OLSKPointer svelte-12pjk7c");
    			set_style(div, "--OLSKPointerSize", /*OLSKPointerSize*/ ctx[0] + "px");
    			set_style(div, "--OLSKPointerStroke", /*OLSKPointerStroke*/ ctx[1] + "px");
    			add_location(div, file$r, 5, 0, 87);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*OLSKPointerSize*/ 1) {
    				set_style(div, "--OLSKPointerSize", /*OLSKPointerSize*/ ctx[0] + "px");
    			}

    			if (dirty & /*OLSKPointerStroke*/ 2) {
    				set_style(div, "--OLSKPointerStroke", /*OLSKPointerStroke*/ ctx[1] + "px");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { OLSKPointerSize = 20 } = $$props;
    	let { OLSKPointerStroke = 2 } = $$props;
    	const writable_props = ["OLSKPointerSize", "OLSKPointerStroke"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("OLSKPointerSize" in $$props) $$invalidate(0, OLSKPointerSize = $$props.OLSKPointerSize);
    		if ("OLSKPointerStroke" in $$props) $$invalidate(1, OLSKPointerStroke = $$props.OLSKPointerStroke);
    	};

    	$$self.$capture_state = () => ({ OLSKPointerSize, OLSKPointerStroke });

    	$$self.$inject_state = $$props => {
    		if ("OLSKPointerSize" in $$props) $$invalidate(0, OLSKPointerSize = $$props.OLSKPointerSize);
    		if ("OLSKPointerStroke" in $$props) $$invalidate(1, OLSKPointerStroke = $$props.OLSKPointerStroke);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [OLSKPointerSize, OLSKPointerStroke];
    }

    class Main$r extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$r, create_fragment$r, safe_not_equal, { OLSKPointerSize: 0, OLSKPointerStroke: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$r.name
    		});
    	}

    	get OLSKPointerSize() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKPointerSize(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKPointerStroke() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKPointerStroke(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-review/main.svelte generated by Svelte v3.29.4 */

    const { Object: Object_1$7, console: console_1$2 } = globals;
    const file$s = "os-app/open-review/main.svelte";

    // (1079:1) {#if !mod._ValueDeckSelected }
    function create_if_block_7$1(ctx) {
    	let komreviewmaster;
    	let current;

    	let komreviewmaster_props = {
    		KOMReviewMasterItems: /*mod*/ ctx[0]._ValueDecksAll,
    		KOMReviewMasterDispatchCreate: /*mod*/ ctx[0].KOMReviewMasterDispatchCreate,
    		KOMReviewMasterDispatchSelect: /*mod*/ ctx[0].KOMReviewMasterDispatchSelect,
    		KOMReviewMasterDispatchToggleExcludeTripleQuestionMark: /*mod*/ ctx[0].KOMReviewMasterDispatchToggleExcludeTripleQuestionMark,
    		KOMReviewMasterDispatchToggleDeckFiguresCaching: /*mod*/ ctx[0].KOMReviewMasterDispatchToggleDeckFiguresCaching,
    		KOMReviewMasterDispatchImportData: /*mod*/ ctx[0].KOMReviewMasterDispatchImportData,
    		KOMReviewMasterDispatchExportData: /*mod*/ ctx[0].KOMReviewMasterDispatchExportData
    	};

    	komreviewmaster = new Main$8({
    			props: komreviewmaster_props,
    			$$inline: true
    		});

    	/*komreviewmaster_binding*/ ctx[1](komreviewmaster);

    	const block = {
    		c: function create() {
    			create_component(komreviewmaster.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(komreviewmaster, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komreviewmaster_changes = {};
    			if (dirty & /*mod*/ 1) komreviewmaster_changes.KOMReviewMasterItems = /*mod*/ ctx[0]._ValueDecksAll;
    			if (dirty & /*mod*/ 1) komreviewmaster_changes.KOMReviewMasterDispatchCreate = /*mod*/ ctx[0].KOMReviewMasterDispatchCreate;
    			if (dirty & /*mod*/ 1) komreviewmaster_changes.KOMReviewMasterDispatchSelect = /*mod*/ ctx[0].KOMReviewMasterDispatchSelect;
    			if (dirty & /*mod*/ 1) komreviewmaster_changes.KOMReviewMasterDispatchToggleExcludeTripleQuestionMark = /*mod*/ ctx[0].KOMReviewMasterDispatchToggleExcludeTripleQuestionMark;
    			if (dirty & /*mod*/ 1) komreviewmaster_changes.KOMReviewMasterDispatchToggleDeckFiguresCaching = /*mod*/ ctx[0].KOMReviewMasterDispatchToggleDeckFiguresCaching;
    			if (dirty & /*mod*/ 1) komreviewmaster_changes.KOMReviewMasterDispatchImportData = /*mod*/ ctx[0].KOMReviewMasterDispatchImportData;
    			if (dirty & /*mod*/ 1) komreviewmaster_changes.KOMReviewMasterDispatchExportData = /*mod*/ ctx[0].KOMReviewMasterDispatchExportData;
    			komreviewmaster.$set(komreviewmaster_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewmaster.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewmaster.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*komreviewmaster_binding*/ ctx[1](null);
    			destroy_component(komreviewmaster, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(1079:1) {#if !mod._ValueDeckSelected }",
    		ctx
    	});

    	return block;
    }

    // (1092:1) {#if mod._ValueDeckSelected && !mod._ValueBrowseVisible && !mod._ValuePlayVisible }
    function create_if_block_6$1(ctx) {
    	let komreviewdetail;
    	let current;

    	let komreviewdetail_props = {
    		KOMReviewDetailDeck: /*mod*/ ctx[0]._ValueDeckSelected,
    		KOMReviewDetailDispatchBack: /*mod*/ ctx[0].KOMReviewDetailDispatchBack,
    		KOMReviewDetailDispatchDiscard: /*mod*/ ctx[0].KOMReviewDetailDispatchDiscard,
    		KOMReviewDetailDispatchUpdate: /*mod*/ ctx[0].KOMReviewDetailDispatchUpdate,
    		KOMReviewDetailDispatchRecount: /*mod*/ ctx[0].KOMReviewDetailDispatchRecount,
    		KOMReviewDetailDispatchBrowse: /*mod*/ ctx[0].KOMReviewDetailDispatchBrowse,
    		KOMReviewDetailDispatchPlay: /*mod*/ ctx[0].KOMReviewDetailDispatchPlay,
    		KOMReviewDetailDispatchExport: /*mod*/ ctx[0].KOMReviewDetailDispatchExport
    	};

    	komreviewdetail = new Main$a({
    			props: komreviewdetail_props,
    			$$inline: true
    		});

    	/*komreviewdetail_binding*/ ctx[2](komreviewdetail);

    	const block = {
    		c: function create() {
    			create_component(komreviewdetail.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(komreviewdetail, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komreviewdetail_changes = {};
    			if (dirty & /*mod*/ 1) komreviewdetail_changes.KOMReviewDetailDeck = /*mod*/ ctx[0]._ValueDeckSelected;
    			if (dirty & /*mod*/ 1) komreviewdetail_changes.KOMReviewDetailDispatchBack = /*mod*/ ctx[0].KOMReviewDetailDispatchBack;
    			if (dirty & /*mod*/ 1) komreviewdetail_changes.KOMReviewDetailDispatchDiscard = /*mod*/ ctx[0].KOMReviewDetailDispatchDiscard;
    			if (dirty & /*mod*/ 1) komreviewdetail_changes.KOMReviewDetailDispatchUpdate = /*mod*/ ctx[0].KOMReviewDetailDispatchUpdate;
    			if (dirty & /*mod*/ 1) komreviewdetail_changes.KOMReviewDetailDispatchRecount = /*mod*/ ctx[0].KOMReviewDetailDispatchRecount;
    			if (dirty & /*mod*/ 1) komreviewdetail_changes.KOMReviewDetailDispatchBrowse = /*mod*/ ctx[0].KOMReviewDetailDispatchBrowse;
    			if (dirty & /*mod*/ 1) komreviewdetail_changes.KOMReviewDetailDispatchPlay = /*mod*/ ctx[0].KOMReviewDetailDispatchPlay;
    			if (dirty & /*mod*/ 1) komreviewdetail_changes.KOMReviewDetailDispatchExport = /*mod*/ ctx[0].KOMReviewDetailDispatchExport;
    			komreviewdetail.$set(komreviewdetail_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewdetail.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewdetail.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*komreviewdetail_binding*/ ctx[2](null);
    			destroy_component(komreviewdetail, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(1092:1) {#if mod._ValueDeckSelected && !mod._ValueBrowseVisible && !mod._ValuePlayVisible }",
    		ctx
    	});

    	return block;
    }

    // (1106:1) {#if mod._ValueDeckSelected && mod._ValueBrowseVisible && !mod._ValuePlayVisible }
    function create_if_block_5$2(ctx) {
    	let kombrowse;
    	let current;

    	let kombrowse_props = {
    		KOMBrowseStorageClient: /*mod*/ ctx[0]._ValueStorageClient,
    		KOMBrowseDeckSelected: /*mod*/ ctx[0]._ValueDeckSelected,
    		KOMBrowseDeckCards: /*mod*/ ctx[0]._ValueBrowseCards,
    		KOMBrowseDispatchCreate: /*mod*/ ctx[0].KOMBrowseDispatchCreate,
    		KOMBrowseListDispatchClose: /*mod*/ ctx[0].KOMBrowseListDispatchClose,
    		KOMBrowseInfoSpeechAvailable: /*mod*/ ctx[0]._ValueSpeechAvailable,
    		KOMBrowseInfoDispatchRead: /*mod*/ ctx[0].KOMBrowseInfoDispatchRead
    	};

    	kombrowse = new Main$k({ props: kombrowse_props, $$inline: true });
    	/*kombrowse_binding*/ ctx[3](kombrowse);

    	const block = {
    		c: function create() {
    			create_component(kombrowse.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(kombrowse, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const kombrowse_changes = {};
    			if (dirty & /*mod*/ 1) kombrowse_changes.KOMBrowseStorageClient = /*mod*/ ctx[0]._ValueStorageClient;
    			if (dirty & /*mod*/ 1) kombrowse_changes.KOMBrowseDeckSelected = /*mod*/ ctx[0]._ValueDeckSelected;
    			if (dirty & /*mod*/ 1) kombrowse_changes.KOMBrowseDeckCards = /*mod*/ ctx[0]._ValueBrowseCards;
    			if (dirty & /*mod*/ 1) kombrowse_changes.KOMBrowseDispatchCreate = /*mod*/ ctx[0].KOMBrowseDispatchCreate;
    			if (dirty & /*mod*/ 1) kombrowse_changes.KOMBrowseListDispatchClose = /*mod*/ ctx[0].KOMBrowseListDispatchClose;
    			if (dirty & /*mod*/ 1) kombrowse_changes.KOMBrowseInfoSpeechAvailable = /*mod*/ ctx[0]._ValueSpeechAvailable;
    			if (dirty & /*mod*/ 1) kombrowse_changes.KOMBrowseInfoDispatchRead = /*mod*/ ctx[0].KOMBrowseInfoDispatchRead;
    			kombrowse.$set(kombrowse_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kombrowse.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kombrowse.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*kombrowse_binding*/ ctx[3](null);
    			destroy_component(kombrowse, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(1106:1) {#if mod._ValueDeckSelected && mod._ValueBrowseVisible && !mod._ValuePlayVisible }",
    		ctx
    	});

    	return block;
    }

    // (1119:1) {#if mod._ValuePlayVisible}
    function create_if_block_4$3(ctx) {
    	let komplay;
    	let current;

    	komplay = new Main$l({
    			props: {
    				KOMPlaySpacings: /*mod*/ ctx[0]._ValuePlaySpacings,
    				KOMPlayDeck: /*mod*/ ctx[0]._ValueDeckSelected,
    				KOMPlayDispatchDone: /*mod*/ ctx[0].KOMPlayDispatchDone,
    				KOMPlayDispatchUpdate: /*mod*/ ctx[0].KOMPlayDispatchUpdate,
    				KOMPlayDispatchFetch: /*mod*/ ctx[0].KOMPlayDispatchFetch,
    				KOMPlaySimplifiedResponseButtons: /*mod*/ ctx[0]._ValuePlaySimplifiedResponseButtons
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(komplay.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(komplay, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komplay_changes = {};
    			if (dirty & /*mod*/ 1) komplay_changes.KOMPlaySpacings = /*mod*/ ctx[0]._ValuePlaySpacings;
    			if (dirty & /*mod*/ 1) komplay_changes.KOMPlayDeck = /*mod*/ ctx[0]._ValueDeckSelected;
    			if (dirty & /*mod*/ 1) komplay_changes.KOMPlayDispatchDone = /*mod*/ ctx[0].KOMPlayDispatchDone;
    			if (dirty & /*mod*/ 1) komplay_changes.KOMPlayDispatchUpdate = /*mod*/ ctx[0].KOMPlayDispatchUpdate;
    			if (dirty & /*mod*/ 1) komplay_changes.KOMPlayDispatchFetch = /*mod*/ ctx[0].KOMPlayDispatchFetch;
    			if (dirty & /*mod*/ 1) komplay_changes.KOMPlaySimplifiedResponseButtons = /*mod*/ ctx[0]._ValuePlaySimplifiedResponseButtons;
    			komplay.$set(komplay_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komplay.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komplay.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(komplay, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$3.name,
    		type: "if",
    		source: "(1119:1) {#if mod._ValuePlayVisible}",
    		ctx
    	});

    	return block;
    }

    // (1131:0) {#if !mod._ValuePlayVisible }
    function create_if_block_2$5(ctx) {
    	let footer;
    	let t;
    	let olskapptoolbar;
    	let current;
    	let if_block = !/*mod*/ ctx[0]._ValueStorageToolbarHidden && create_if_block_3$3(ctx);

    	olskapptoolbar = new Main$o({
    			props: {
    				OLSKAppToolbarGuideURL: window.OLSKCanonicalFor("KOMGuideRoute"),
    				OLSKAppToolbarStorageStatus: /*mod*/ ctx[0]._ValueFooterStorageStatus,
    				OLSKAppToolbarDispatchStorage: /*mod*/ ctx[0].OLSKAppToolbarDispatchStorage,
    				OLSKAppToolbarDispatchLauncher: /*mod*/ ctx[0].OLSKAppToolbarDispatchLauncher
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			footer = element("footer");
    			if (if_block) if_block.c();
    			t = space();
    			create_component(olskapptoolbar.$$.fragment);
    			attr_dev(footer, "class", "KOMReviewViewportFooter OLSKMobileViewFooter");
    			add_location(footer, file$s, 1131, 1, 39889);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, footer, anchor);
    			if (if_block) if_block.m(footer, null);
    			append_dev(footer, t);
    			mount_component(olskapptoolbar, footer, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!/*mod*/ ctx[0]._ValueStorageToolbarHidden) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_3$3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(footer, t);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const olskapptoolbar_changes = {};
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarStorageStatus = /*mod*/ ctx[0]._ValueFooterStorageStatus;
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarDispatchStorage = /*mod*/ ctx[0].OLSKAppToolbarDispatchStorage;
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarDispatchLauncher = /*mod*/ ctx[0].OLSKAppToolbarDispatchLauncher;
    			olskapptoolbar.$set(olskapptoolbar_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(olskapptoolbar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(olskapptoolbar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(footer);
    			if (if_block) if_block.d();
    			destroy_component(olskapptoolbar);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(1131:0) {#if !mod._ValuePlayVisible }",
    		ctx
    	});

    	return block;
    }

    // (1134:2) {#if !mod._ValueStorageToolbarHidden }
    function create_if_block_3$3(ctx) {
    	let div2;
    	let div0;
    	let t;
    	let div1;
    	let olskstoragewidget;
    	let current;

    	olskstoragewidget = new Main$q({
    			props: {
    				StorageClient: /*mod*/ ctx[0]._ValueStorageClient
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			create_component(olskstoragewidget.$$.fragment);
    			attr_dev(div0, "class", "OLSKToolbarElementGroup");
    			add_location(div0, file$s, 1135, 4, 40088);
    			attr_dev(div1, "class", "OLSKToolbarElementGroup");
    			add_location(div1, file$s, 1137, 4, 40137);
    			attr_dev(div2, "class", "KOMReviewStorageToolbar OLSKToolbar OLSKToolbarJustify OLSKStorageToolbar svelte-18clh63");
    			add_location(div2, file$s, 1134, 3, 39996);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div2, t);
    			append_dev(div2, div1);
    			mount_component(olskstoragewidget, div1, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const olskstoragewidget_changes = {};
    			if (dirty & /*mod*/ 1) olskstoragewidget_changes.StorageClient = /*mod*/ ctx[0]._ValueStorageClient;
    			olskstoragewidget.$set(olskstoragewidget_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskstoragewidget.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskstoragewidget.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(olskstoragewidget);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(1134:2) {#if !mod._ValueStorageToolbarHidden }",
    		ctx
    	});

    	return block;
    }

    // (1155:0) {#if !OLSK_TESTING_BEHAVIOUR()}
    function create_if_block_1$8(ctx) {
    	let olskserviceworkerview;
    	let current;

    	olskserviceworkerview = new Main$p({
    			props: {
    				OLSKServiceWorkerRegistrationRoute: window.OLSKCanonicalFor("KOMServiceWorkerRoute")
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(olskserviceworkerview.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskserviceworkerview, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskserviceworkerview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskserviceworkerview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskserviceworkerview, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(1155:0) {#if !OLSK_TESTING_BEHAVIOUR()}",
    		ctx
    	});

    	return block;
    }

    // (1159:0) {#if mod._IsRunningDemo }
    function create_if_block$f(ctx) {
    	let olskpointer;
    	let current;
    	olskpointer = new Main$r({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(olskpointer.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskpointer, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskpointer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskpointer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskpointer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(1159:0) {#if mod._IsRunningDemo }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$s(ctx) {
    	let div1;
    	let div0;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let show_if = !main_12();
    	let t5;
    	let if_block6_anchor;
    	let current;
    	let if_block0 = !/*mod*/ ctx[0]._ValueDeckSelected && create_if_block_7$1(ctx);
    	let if_block1 = /*mod*/ ctx[0]._ValueDeckSelected && !/*mod*/ ctx[0]._ValueBrowseVisible && !/*mod*/ ctx[0]._ValuePlayVisible && create_if_block_6$1(ctx);
    	let if_block2 = /*mod*/ ctx[0]._ValueDeckSelected && /*mod*/ ctx[0]._ValueBrowseVisible && !/*mod*/ ctx[0]._ValuePlayVisible && create_if_block_5$2(ctx);
    	let if_block3 = /*mod*/ ctx[0]._ValuePlayVisible && create_if_block_4$3(ctx);
    	let if_block4 = !/*mod*/ ctx[0]._ValuePlayVisible && create_if_block_2$5(ctx);
    	let if_block5 = show_if && create_if_block_1$8(ctx);
    	let if_block6 = /*mod*/ ctx[0]._IsRunningDemo && create_if_block$f(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			if (if_block5) if_block5.c();
    			t5 = space();
    			if (if_block6) if_block6.c();
    			if_block6_anchor = empty();
    			attr_dev(div0, "class", "OLSKViewportContent");
    			add_location(div0, file$s, 1077, 0, 37513);
    			attr_dev(div1, "class", "KOMReview OLSKViewport svelte-18clh63");
    			toggle_class(div1, "OLSKIsLoading", /*mod*/ ctx[0]._ValueIsLoading);
    			add_location(div1, file$s, 1075, 0, 37431);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t0);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(div0, t1);
    			if (if_block2) if_block2.m(div0, null);
    			append_dev(div0, t2);
    			if (if_block3) if_block3.m(div0, null);
    			append_dev(div1, t3);
    			if (if_block4) if_block4.m(div1, null);
    			insert_dev(target, t4, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, if_block6_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!/*mod*/ ctx[0]._ValueDeckSelected) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_7$1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div0, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*mod*/ ctx[0]._ValueDeckSelected && !/*mod*/ ctx[0]._ValueBrowseVisible && !/*mod*/ ctx[0]._ValuePlayVisible) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_6$1(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div0, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*mod*/ ctx[0]._ValueDeckSelected && /*mod*/ ctx[0]._ValueBrowseVisible && !/*mod*/ ctx[0]._ValuePlayVisible) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_5$2(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div0, t2);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*mod*/ ctx[0]._ValuePlayVisible) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_4$3(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div0, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (!/*mod*/ ctx[0]._ValuePlayVisible) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);

    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block4, 1);
    					}
    				} else {
    					if_block4 = create_if_block_2$5(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(div1, null);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*mod*/ 1) {
    				toggle_class(div1, "OLSKIsLoading", /*mod*/ ctx[0]._ValueIsLoading);
    			}

    			if (show_if) if_block5.p(ctx, dirty);

    			if (/*mod*/ ctx[0]._IsRunningDemo) {
    				if (if_block6) {
    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block6, 1);
    					}
    				} else {
    					if_block6 = create_if_block$f(ctx);
    					if_block6.c();
    					transition_in(if_block6, 1);
    					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
    				}
    			} else if (if_block6) {
    				group_outros();

    				transition_out(if_block6, 1, 1, () => {
    					if_block6 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(if_block4);
    			transition_in(if_block5);
    			transition_in(if_block6);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(if_block4);
    			transition_out(if_block5);
    			transition_out(if_block6);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if (detaching) detach_dev(t4);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(if_block6_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);

    	const OLSKLocalized = function (translationConstant) {
    		return OLSKInternational.OLSKInternationalLocalizedString(translationConstant, JSON.parse(`{"en":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarStorageButtonText":"Storage","OLSKDetailPlaceholderText":"No item selected","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundConfirmText":"Are you sure?","OLSKFundLauncherItemEnterConfirmationText":"Enter confirmation code","OLSKFundLauncherItemEnterConfirmationPromptText":"Enter confirmation code","OLSKFundLauncherItemClearAuthorizationText":"Clear authorization","OLSKInputWrapperClearButtonText":"Clear text","OLSKLanguageSwitcherVersionFormat":"Version in %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish"},"OLSKMasterListFilterFieldText":"Filter","OLSKReloadButtonText":"Reload","OLSKRemoteStorageStatusOnline":"Online","OLSKRemoteStorageStatusNetworkOffline":"Offline","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Connect your storage to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","KOMReviewStorageImportErrorNotFilledAlertText":"Input not filled","KOMReviewStorageImportErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterCreateButtonPromptText":"Name","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewMasterLauncherItemImportDataText":"Import data","KOMReviewMasterLauncherItemExportDataText":"Export all decks","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewStatsHeadingText":"Statistics","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseListToolbarCloseButtonText":"Close","KOMBrowseListToolbarCreateButtonText":"Create","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseListItemRetiredText":"[retired]","KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"es":{"OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarStorageButtonText":"Almacenamiento","OLSKDetailPlaceholderText":"Ningún artículo seleccionado","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundConfirmText":"¿Est@s segur@?","OLSKFundLauncherItemEnterConfirmationText":"Entrar código de confirmación","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearAuthorizationText":"Despejar autorización","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKLanguageSwitcherVersionFormat":"Versión en %@","OLSKLanguageSwitcherVersionName":{"en":"inglés","fr":"francés","es":"español"},"OLSKMasterListFilterFieldText":"Filtrar","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageStatusOnline":"En líneo","OLSKRemoteStorageStatusNetworkOffline":"Sin conexión","OLSKRemoteStorageStatusError":"Error","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. Quieres hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","KOMReviewStorageImportErrorNotFilledAlertText":"Entrada no cargado","KOMReviewStorageImportErrorNotValidAlertText":"Entrada no válido","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Alternar botones de respuesta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"¿Est@as segur@?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"No vistos","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas para eliminar el mazo.","KOMReviewDetailLauncherItemExportText":"Exportar mazo seleccionado","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterCreateButtonPromptText":"Nombre","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewMasterLauncherItemImportDataText":"Importar datos","KOMReviewMasterLauncherItemExportDataText":"Exportar todos los mazos","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número de tarjetas jubiladas.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoDiscardConfirmText":"¿Est@as segur@?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseListToolbarCloseButtonText":"Cerrar","KOMBrowseListToolbarCreateButtonText":"Crear","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseListItemRetiredText":"[jubilada]","KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próxima"},"fr":{"OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarStorageButtonText":"Stockage","OLSKDetailPlaceholderText":"Aucun article sélectionné","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundConfirmText":"Êtes-vous sûr.e?","OLSKFundLauncherItemEnterConfirmationText":"Entrer code de confirmation","OLSKFundLauncherItemEnterConfirmationPromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearAuthorizationText":"Enlever autorisation","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKLanguageSwitcherVersionFormat":"Version en %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol"},"OLSKMasterListFilterFieldText":"Filtrer","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageStatusOnline":"En ligne","OLSKRemoteStorageStatusNetworkOffline":"Hors connexion","OLSKRemoteStorageStatusError":"Erreur","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Aimeriez-vous faire ça maintenant?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","KOMReviewStorageImportErrorNotFilledAlertText":"Entrée non remplie","KOMReviewStorageImportErrorNotValidAlertText":"Entrée non valide","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Commuter les boutons de réponse simplifiés","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Êtes-vous sûr.e?","KOMReviewTitle":"Kommit","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Non-vues","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes pour supprimer le paquet.","KOMReviewDetailLauncherItemExportText":"Export selected deck","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterCreateButtonPromptText":"Nom","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewMasterLauncherItemImportDataText":"Importer des données","KOMReviewMasterLauncherItemExportDataText":"Exporter tous les lots de cartes","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewStatsHeadingText":"Statistiques","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e? Veuillez entrer le nombre des cartes retraitées.","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoDiscardConfirmText":"Êtes-vous sûr.e?","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseListToolbarCloseButtonText":"Fermer","KOMBrowseListToolbarCreateButtonText":"Créer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseListItemRetiredText":"[retraitée]","KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Réinitialiser","KOMPlayResponseButtonNextText":"Prochaine"}}`)[window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")]);
    	};

    	const OLSKFormatted = OLSKString.OLSKStringWithFormat;

    	const mod = {
    		// VALUE
    		_ValueIsLoading: true,
    		_ValueDecksAll: [],
    		ValueDecksAll(inputData) {
    			$$invalidate(0, mod._ValueDecksAll = mod$f.KOMReviewDeckSort(inputData), mod);
    		},
    		_ValueDeckSelected: undefined,
    		_ValueDeckSelectedObjectsMap: {},
    		ValueDeckSelected(inputData) {
    			$$invalidate(0, mod._ValueDeckSelected = inputData, mod);

    			if (inputData) {
    				mod.DataDeckSelectedObjects(inputData);
    			}
    		},
    		_ValueBrowseVisible: false,
    		_ValueBrowseCards: [],
    		ValueBrowseCards(inputData) {
    			$$invalidate(0, mod._ValueBrowseCards = inputData, mod);
    		},
    		_ValuePlayVisible: false,
    		_ValuePlaySpacings: [],
    		_ValuePlaySimplifiedResponseButtons: !main_12(),
    		_ValueHoldCards: [],
    		_ValueHoldSpacings: [],
    		_ValueStorageToolbarHidden: true,
    		_ValueFooterStorageStatus: "",
    		_ValueSpacingUpdateThrottleMap: {},
    		_ValueDeckFiguresThrottleMap: {},
    		_ValueDeckCachingEnabled: false,
    		_ValueSpeechAvailable: "speechSynthesis" in window,
    		_ValueCacheDeckFiguresMap: {},
    		ValueCacheDeckFiguresMap(inputData) {
    			return $$invalidate(
    				0,
    				mod._ValueCacheDeckFiguresMap = main_12() || !mod._ValueDeckCachingEnabled
    				? inputData
    				: main$5.OLKSLocalStorageSet(window.localStorage, "kKOMReviewCacheDeckFiguresMap", inputData),
    				mod
    			);
    		},
    		_IsRunningDemo: false,
    		// DATA
    		DataDeckSelectedObjects(inputData) {
    			return main$6.OLSKCacheResultFetchOnceSync(mod._ValueDeckSelectedObjectsMap, inputData.KOMDeckID, async function () {
    				return await mod$8.KOMDeckActionFetchObjects(mod._ValueStorageClient, inputData, (await mod$c.KOMSettingsActionProperty(mod._ValueStorageClient, "KOMSettingExcludeTripleQuestionMark") || {}).KOMSettingValue === "true");
    			});
    		},
    		DataNavigator() {
    			return navigator.serviceWorker
    			? navigator
    			: { serviceWorker: {} };
    		},
    		DataReviewRecipes() {
    			const items = mod._ValueDecksAll.filter(function (e) {
    				return e !== mod._ValueDeckSelected;
    			}).map(function (e) {
    				return {
    					LCHRecipeSignature: "KOMReviewLauncherItemSelectDeck",
    					LCHRecipeName: OLSKFormatted(OLSKLocalized("KOMReviewLauncherItemSelectDeckTextFormat"), e.KOMDeckName),
    					LCHRecipeCallback() {
    						return mod.ControlDeckSelect(e);
    					}
    				};
    			}).concat([
    				{
    					LCHRecipeSignature: "KOMReviewLauncherItemToggleSimplifiedResponseButtons",
    					LCHRecipeName: OLSKLocalized("KOMReviewLauncherItemToggleSimplifiedResponseButtonsText"),
    					LCHRecipeCallback: async function KOMReviewLauncherItemToggleSimplifiedResponseButtons() {
    						$$invalidate(0, mod._ValuePlaySimplifiedResponseButtons = !mod._ValuePlaySimplifiedResponseButtons, mod);
    					}
    				}
    			]);

    			if (mod._ValueStorageClient.connected) {
    				items.push(...[
    					{
    						LCHRecipeSignature: "KOMReviewLauncherItemDebugPlungeData",
    						LCHRecipeName: OLSKLocalized("KOMReviewLauncherItemDebugPlungeDataText"),
    						LCHRecipeCallback: async function KOMReviewLauncherItemDebugPlungeData() {
    							if (!window.confirm(OLSKLocalized("KOMReviewLauncherItemDebugPlungeDataConfirmText"))) {
    								return;
    							}

    							console.log(Object.keys(await mod._ValueStorageClient.kommit.__HOTFIX.__OLSKRemoteStorageHotfixPlungeData()));
    							mod.ControlDeckSelect(null);

    							if (main_12() && window.FakeOLSKConnected) {
    								window.FakeWindowLocationHref = "reload";
    								return;
    							}
    						}, // setTimeout(function () {
    						// 	window.location.reload();
    						// }, 1000);
    						
    					}
    				]);

    				items.push(...main$9.OLSKFundRecipes({
    					ParamWindow: window,
    					OLSKLocalized,
    					ParamAuthorized: !!mod._ValueFundConfirmation,
    					OLSKFundDispatchGrant: mod.OLSKFundDispatchGrant,
    					OLSKFundDispatchPersist: mod.OLSKFundDispatchPersist,
    					OLSK_TESTING_BEHAVIOUR: main_12()
    				}));
    			}

    			items.push(...main$3.OLSKRemoteStorageRecipes(window, mod._ValueStorageClient, OLSKLocalized, main_12()));
    			items.push(...main_1$1.OLSKServiceWorkerRecipes(window, mod.DataNavigator(), OLSKLocalized, main_12()));

    			if (mod._KOMReviewMaster) {
    				items.push(...mod._KOMReviewMaster.modPublic.KOMReviewMasterRecipes());
    			}

    			if (mod._KOMReviewDetail) {
    				items.push(...mod._KOMReviewDetail.modPublic.KOMReviewDetailRecipes());
    			}

    			if (mod._KOMBrowse) {
    				items.push(...mod._KOMBrowse.modPublic.KOMBrowseRecipes());
    			}

    			if (main_12()) {
    				items.push(...[
    					{
    						LCHRecipeName: "FakeOLSKConnected",
    						LCHRecipeCallback() {
    							$$invalidate(0, mod._ValueStorageClient = Object.assign({}, mod._ValueStorageClient), mod);
    							$$invalidate(0, mod._ValueStorageClient.connected = true, mod);
    							$$invalidate(0, mod._ValueStorageClient.remote = Object.assign(mod._ValueStorageClient.remote, { userAddress: "alfa", token: "bravo" }), mod);
    							window.FakeOLSKConnected = true;
    						}
    					},
    					{
    						LCHRecipeName: "FakeOLSKChangeDelegateCreateDeck",
    						LCHRecipeCallback: async function FakeOLSKChangeDelegateCreateDeck() {
    							return mod.OLSKChangeDelegateCreateDeck(await mod$8.KOMDeckActionCreate(mod._ValueStorageClient, mod.FakeDeckObjectValid("FakeOLSKChangeDelegateCreateDeck")));
    						}
    					},
    					{
    						LCHRecipeName: "FakeOLSKChangeDelegateUpdateDeck",
    						LCHRecipeCallback: async function FakeOLSKChangeDelegateUpdateDeck() {
    							return mod.OLSKChangeDelegateUpdateDeck(await mod$8.KOMDeckActionUpdate(mod._ValueStorageClient, mod.FakeDeckObjectValid("FakeOLSKChangeDelegateUpdateDeck")));
    						}
    					},
    					{
    						LCHRecipeName: "FakeOLSKChangeDelegateDeleteDeck",
    						LCHRecipeCallback: async function FakeOLSKChangeDelegateDeleteDeck() {
    							const deck = mod.FakeDeckObjectValid();
    							await mod$8.KOMDeckActionDelete(mod._ValueStorageClient, deck);
    							return mod.OLSKChangeDelegateDeleteDeck(deck);
    						}
    					},
    					{
    						LCHRecipeName: "FakeOLSKChangeDelegateCreateCard",
    						LCHRecipeCallback: async function FakeOLSKChangeDelegateCreateCard() {
    							return mod.OLSKChangeDelegateCreateCard(await mod$4.KOMCardActionCreate(mod._ValueStorageClient, mod.FakeCardObjectValid("FakeOLSKChangeDelegateCreateCard"), mod.FakeDeckObjectValid()));
    						}
    					},
    					{
    						LCHRecipeName: "FakeOLSKChangeDelegateUpdateCard",
    						LCHRecipeCallback: async function FakeOLSKChangeDelegateUpdateCard() {
    							return mod.OLSKChangeDelegateUpdateCard(await mod$4.KOMCardActionUpdate(mod._ValueStorageClient, Object.assign(mod.FakeCardObjectValid("FakeOLSKChangeDelegateUpdateCard"), { KOMCardIsRetired: true }), mod.FakeDeckObjectValid()));
    						}
    					},
    					{
    						LCHRecipeName: "FakeOLSKChangeDelegateDeleteCard",
    						LCHRecipeCallback: async function FakeOLSKChangeDelegateDeleteCard() {
    							const card = mod.FakeCardObjectValid();
    							await mod$4.KOMCardActionDelete(mod._ValueStorageClient, card, mod.FakeDeckObjectValid());
    							return mod.OLSKChangeDelegateDeleteCard(card);
    						}
    					},
    					{
    						LCHRecipeName: "FakeOLSKChangeDelegateConflictCard",
    						LCHRecipeCallback: async function FakeOLSKChangeDelegateConflictCard() {
    							const item = (await mod$4.KOMCardActionList(mod._ValueStorageClient, mod._ValueDeckSelected)).filter(function (e) {
    								return e.KOMCardFrontText.match("FakeOLSKChangeDelegateConflictCard");
    							}).pop();

    							return mod.OLSKChangeDelegateConflictCard({
    								origin: "conflict",
    								oldValue: await mod$4.KOMCardActionUpdate(mod._ValueStorageClient, Object.assign({}, item, {
    									KOMCardFrontText: item.KOMCardFrontText + "-local"
    								})),
    								newValue: Object.assign({}, item, {
    									KOMCardFrontText: item.KOMCardFrontText + "-remote"
    								})
    							});
    						}
    					},
    					{
    						LCHRecipeName: "FakeOLSKChangeDelegateCreateSpacing",
    						LCHRecipeCallback: async function FakeOLSKChangeDelegateCreateSpacing() {
    							[false, true].forEach(async function (backward) {
    								const spacing = await mod$7.KOMSpacingStorageWrite(
    									mod._ValueStorageClient,
    									Object.assign(mod.FakeSpacingObjectValid(backward), {
    										KOMSpacingIsLearning: true,
    										KOMSpacingDueDate: new Date()
    									}),
    									mod.FakeCardObjectValid(),
    									mod.FakeDeckObjectValid()
    								);

    								if (!backward) {
    									return;
    								}

    								mod.OLSKChangeDelegateCreateSpacing(spacing);
    							});
    						}
    					},
    					{
    						LCHRecipeName: "FakeOLSKChangeDelegateUpdateSpacing",
    						LCHRecipeCallback: function FakeOLSKChangeDelegateUpdateSpacing() {
    							[false, true].map(async function (backward) {
    								const spacing = await mod$7.KOMSpacingStorageWrite(
    									mod._ValueStorageClient,
    									Object.assign(mod.FakeSpacingObjectPopulated(new Date(), backward), {
    										KOMSpacingDueDate: new Date(Date.now() + 1000 * 60 * 60 * 24)
    									}),
    									mod.FakeCardObjectValid(),
    									mod.FakeDeckObjectValid()
    								);

    								if (!backward) {
    									return;
    								}

    								mod.OLSKChangeDelegateUpdateSpacing(spacing);
    							});
    						}
    					},
    					{
    						LCHRecipeName: "FakeOLSKChangeDelegateDeleteSpacing",
    						LCHRecipeCallback: function FakeOLSKChangeDelegateDeleteSpacing() {
    							return mod.OLSKChangeDelegateDeleteSpacing(mod.FakeSpacingObjectValid());
    						}
    					},
    					{
    						LCHRecipeName: "KOMReviewLauncherItemDebug_ImportFileData",
    						LCHRecipeCallback: function KOMReviewLauncherItemDebug_ImportFileData() {
    							mod.ControlImportData(window.prompt());
    						}
    					},
    					{
    						LCHRecipeName: "KOMReviewLauncherItemDebug_TestSpeedPopulate",
    						LCHRecipeCallback: async function KOMReviewLauncherItemDebug_TestSpeedPopulate() {
    							const deck = await mod$8.KOMDeckActionCreate(mod._ValueStorageClient, { KOMDeckName: "alfa" });

    							return Promise.all(Array.from(Array(100)).map(function (e, i) {
    								return mod$4.KOMCardActionCreate(
    									mod._ValueStorageClient,
    									Object.assign(mod.FakeCardObjectValid(), {
    										KOMCardID: i.toString(),
    										KOMCardDeckID: deck.KOMDeckID
    									}),
    									deck
    								).then(function (card) {
    									return Promise.all([true, false].map(function (e, i) {
    										return mod$7.KOMSpacingStorageWrite(
    											mod._ValueStorageClient,
    											Object.assign(mod.FakeSpacingObjectPopulated(new Date(Date.now() - 1000 * 60 * 60 * 24)), {
    												KOMSpacingID: card.KOMCardID + "-" + (i ? "backward" : "forward")
    											}),
    											card,
    											deck
    										);
    									}));
    								});
    							}));
    						}
    					},
    					{
    						LCHRecipeName: "KOMReviewLauncherItemDebug_TestSpeedStartup",
    						LCHRecipeCallback: function KOMReviewLauncherItemDebug_TestSpeedStartup() {
    							return mod.SetupValueDecksAll();
    						}
    					},
    					{
    						LCHRecipeName: "FakeRetireInterval",
    						LCHRecipeCallback: async function FakeRetireInterval() {
    							return (await mod.DataDeckSelectedObjects(mod._ValueDeckSelected)).$KOMDeckSpacings.slice(-2).forEach(function (e) {
    								Object.assign(e, {
    									KOMSpacingChronicles: [
    										{
    											KOMChronicleDrawDate: new Date(),
    											KOMChronicleFlipDate: new Date(),
    											KOMChronicleResponseDate: new Date(),
    											KOMChronicleResponseType: "RESPONSE_EASY",
    											KOMChronicleInterval: 29,
    											KOMChronicleMultiplier: 1.2,
    											KOMChronicleDueDate: new Date()
    										}
    									],
    									KOMSpacingDrawDate: new Date(),
    									KOMSpacingFlipDate: new Date(),
    									KOMSpacingResponseDate: new Date(),
    									KOMSpacingInterval: 29,
    									KOMSpacingMultiplier: 1.2,
    									KOMSpacingDueDate: new Date()
    								});
    							});
    						}
    					}
    				]);
    			}

    			return items;
    		},
    		FakeDeckObjectValid(inputData = "") {
    			return {
    				KOMDeckID: "FakeDeckID",
    				KOMDeckName: inputData,
    				KOMDeckCreationDate: new Date(),
    				KOMDeckModificationDate: new Date()
    			};
    		},
    		FakeCardObjectValid(inputData = "") {
    			return {
    				KOMCardID: "FakeCardID",
    				KOMCardDeckID: "FakeDeckID",
    				KOMCardFrontText: inputData,
    				KOMCardRearText: "",
    				KOMCardCreationDate: new Date(),
    				KOMCardModificationDate: new Date()
    			};
    		},
    		FakeSpacingObjectValid(inputData) {
    			return {
    				KOMSpacingID: "FakeCardID-" + (inputData ? "backward" : "forward"),
    				KOMSpacingChronicles: [],
    				$KOMSpacingDeckID: "FakeDeckID"
    			};
    		},
    		FakeSpacingObjectPopulated(inputData, backward) {
    			const drawDate = new Date(inputData - 1000);

    			return Object.assign(mod.FakeSpacingObjectValid(backward), {
    				KOMSpacingDrawDate: drawDate,
    				KOMSpacingFlipDate: inputData,
    				KOMSpacingInterval: 1,
    				KOMSpacingMultiplier: 2.5,
    				KOMSpacingDueDate: new Date(),
    				KOMSpacingChronicles: [
    					{
    						KOMChronicleDrawDate: drawDate,
    						KOMChronicleFlipDate: inputData,
    						KOMChronicleResponseType: "RESPONSE_EASY",
    						KOMChronicleResponseDate: inputData,
    						KOMChronicleInterval: 1,
    						KOMChronicleMultiplier: 2.5,
    						KOMChronicleDueDate: new Date()
    					}
    				]
    			});
    		},
    		// CONTROL
    		async ControlDeckCreate(inputData) {
    			const item = await mod$8.KOMDeckActionCreate(mod._ValueStorageClient, { KOMDeckName: inputData });
    			await mod.ReactDeckFigures(item);
    			mod.ValueDecksAll(mod._ValueDecksAll.concat(item));
    		},
    		async ControlDeckSave(inputData) {
    			await mod$8.KOMDeckActionUpdate(mod._ValueStorageClient, inputData);
    		},
    		async ControlDeckDiscard(inputData) {
    			mod.ValueDecksAll(mod._ValueDecksAll.filter(function (e) {
    				return e !== inputData;
    			}));

    			await mod$8.KOMDeckActionDelete(mod._ValueStorageClient, inputData);
    		},
    		ControlDeckSelect(inputData) {
    			mod.ValueDeckSelected(inputData);
    		},
    		ControlSpacingSave(inputData) {
    			const deck = mod._ValueDeckSelected;

    			main$4.OLSKThrottleMappedTimeout(mod._ValueSpacingUpdateThrottleMap, inputData.KOMSpacingID, {
    				OLSKThrottleDuration: main_12() ? 0 : 500,
    				OLSKThrottleCallback() {
    					return mod$7.KOMSpacingStorageWrite(mod._ValueStorageClient, inputData, inputData.$KOMSpacingCard, deck);
    				}
    			});
    		},
    		ControlReadStart(param1, param2) {
    			if (main_12()) {
    				mod.DebugAudioLog(`read:${param2}:${param1}`);
    			}

    			if (!mod._ValueSpeechAvailable) {
    				return;
    			}

    			if (speechSynthesis.speaking) {
    				speechSynthesis.cancel();
    			}

    			const item = new SpeechSynthesisUtterance(param1);
    			item.lang = param2;

    			item.voice = speechSynthesis.getVoices().filter(function (e) {
    				return e.lang == item.lang;
    			}).pop();

    			speechSynthesis.speak(item);
    		},
    		async ControlImportData(inputData) {
    			if (!inputData.trim()) {
    				return window.alert(OLSKLocalized("KOMReviewStorageImportErrorNotFilledAlertText"));
    			}

    			try {
    				await mod$9.KOM_DataImport(mod._ValueStorageClient, main$3.OLSKRemoteStoragePostJSONParse(JSON.parse(inputData)));
    				await mod.SetupValueDecksAll();
    			} catch(e) {
    				window.alert(OLSKLocalized("KOMReviewStorageImportErrorNotValidAlertText"));
    			}
    		},
    		ControlExportData(inputData) {
    			Launchlet.LCHTasksRun([
    				{
    					async LCHRecipeCallback() {
    						return this.api.LCHSaveFile(JSON.stringify(await mod$9.KOM_DataExport(mod._ValueStorageClient, inputData)), `${window.location.host}-${Date.now()}.json`);
    					},
    					LCHRecipeURLFilter: "*",
    					LCHRecipeIsAutomatic: true
    				}
    			]);
    		},
    		async ControlDemo() {
    			$$invalidate(0, mod._IsRunningDemo = true, mod);

    			// await mod.ControlDeckCreate('alfa');
    			return main$a.OLSKChainGather(Object.assign(
    				{
    					Wait: main$b.OLSKBeaconWait,
    					Point(inputData) {
    						return main$b._OLSKBeaconAnimate(main$b.OLSKBeaconPointFunction(".OLSKPointer", inputData));
    					},
    					Click(inputData) {
    						return main$b._OLSKBeaconAnimate(main$b.OLSKBeaconClickFunction(inputData, ".OLSKPointer", "OLSKPointerActive"));
    					},
    					Defer(inputData) {
    						return main$b.OLSKBeaconDeferFunction(inputData);
    					},
    					Focus(inputData) {
    						return new Promise(function (resolve) {
    								resolve(document.querySelector(inputData).focus());
    							});
    					},
    					Fill(param1, param2) {
    						return main$b._OLSKBeaconAnimate(main$b.OLSKBeaconFillFunction(param1, param2));
    					},
    					Set(param1, param2) {
    						return main$b._OLSKBeaconAnimate(main$b.OLSKBeaconSetFunction(param1, param2));
    					},
    					Nudge() {
    						return main$b._OLSKBeaconAnimate(main$b.OLSKBeaconNudgeFunction(".OLSKPointer", ...arguments));
    					}
    				},
    				mod
    			)).Point(".KOMReviewMasterCreateButton").Nudge(0, 50).Wait().Point(".KOMReviewMasterCreateButton").Click(".KOMReviewMasterCreateButton").Wait(300).Point(".KOMReviewMasterListItem").Click(".KOMReviewMasterListItem").Point(".KOMReviewDetailToolbarCardsButton").Click(".KOMReviewDetailToolbarCardsButton").Point(".KOMBrowseListToolbarCreateButton").Click(".KOMBrowseListToolbarCreateButton").Point(".KOMBrowseInfoFormFrontTextField").Focus(".KOMBrowseInfoFormFrontTextField").Fill(".KOMBrowseInfoFormFrontTextField", "bonjour").Point(".KOMBrowseInfoFormRearTextField").Focus(".KOMBrowseInfoFormRearTextField").Fill(".KOMBrowseInfoFormRearTextField", "hello").Point(".KOMBrowseInfoToolbarBackButton").Click(".KOMBrowseInfoToolbarBackButton").Click(".KOMBrowseListToolbarCloseButton").Point(".KOMReviewDetailFormFrontSpeechIsEnabledField").Click(".KOMReviewDetailFormFrontSpeechIsEnabledFieldLabel").Point(".KOMReviewDetailFormFrontLanguageCode .KOMReviewDetailLanguageCodeField").Focus(".KOMReviewDetailFormFrontLanguageCode .KOMReviewDetailLanguageCodeField").Set(".KOMReviewDetailFormFrontLanguageCode .KOMReviewDetailLanguageCodeField", "fr-FR").Point(".KOMReviewDetailFormRearSpeechIsEnabledField").Click(".KOMReviewDetailFormRearSpeechIsEnabledFieldLabel").Point(".KOMReviewDetailFormRearLanguageCode .KOMReviewDetailLanguageCodeField").Focus(".KOMReviewDetailFormRearLanguageCode .KOMReviewDetailLanguageCodeField").Set(".KOMReviewDetailFormRearLanguageCode .KOMReviewDetailLanguageCodeField", "en-US").Point(".KOMReviewDetailPlayButton").Defer(".KOMReviewDetailPlayButton").Wait(1200).Point(".KOMPlayFlipButton").Click(".KOMPlayFlipButton").Wait().Point(".KOMPlayResponseButtonNext").Click(".KOMPlayResponseButtonNext").Wait().Point(".KOMPlayFlipButton").Click(".KOMPlayFlipButton").Wait().Nudge(0, 100).OLSKChainExecute();
    		},
    		// MESSAGE
    		KOMReviewMasterDispatchCreate(inputData) {
    			mod.ControlDeckCreate(inputData);
    		},
    		KOMReviewMasterDispatchSelect(inputData) {
    			mod.ControlDeckSelect(inputData);
    		},
    		KOMReviewMasterDispatchImportData(inputData) {
    			Launchlet.LCHTasksRun([
    				{
    					async LCHRecipeCallback() {
    						return mod.ControlImportData(await this.api.LCHReadTextFile({ accept: ".json" }));
    					},
    					LCHRecipeURLFilter: "*",
    					LCHRecipeIsAutomatic: true
    				}
    			]);
    		},
    		KOMReviewMasterDispatchExportData() {
    			mod.ControlExportData(mod._ValueDecksAll);
    		},
    		async KOMReviewMasterDispatchToggleExcludeTripleQuestionMark() {
    			const value = await mod$c.KOMSettingsActionProperty(mod._ValueStorageClient, "KOMSettingExcludeTripleQuestionMark");

    			value
    			? await mod$c.KOMSettingsActionDelete(mod._ValueStorageClient, "KOMSettingExcludeTripleQuestionMark")
    			: await mod$c.KOMSettingsActionProperty(mod._ValueStorageClient, "KOMSettingExcludeTripleQuestionMark", "true");

    			$$invalidate(0, mod._ValueDeckSelectedObjectsMap = {}, mod);
    			mod._ValueDecksAll.forEach(mod.ReactDeckFigures);
    		},
    		async KOMReviewMasterDispatchToggleDeckFiguresCaching() {
    			const value = await mod$c.KOMSettingsActionProperty(mod._ValueStorageClient, "KOMSettingDeckCachingEnabled");

    			value
    			? await mod$c.KOMSettingsActionDelete(mod._ValueStorageClient, "KOMSettingDeckCachingEnabled")
    			: await mod$c.KOMSettingsActionProperty(mod._ValueStorageClient, "KOMSettingDeckCachingEnabled", "true");
    		},
    		KOMReviewDetailDispatchBack() {
    			mod.ControlDeckSelect(null);
    		},
    		KOMReviewDetailDispatchDiscard(inputData) {
    			mod.ControlDeckSelect(null);
    			mod.ControlDeckDiscard(inputData);
    		},
    		KOMReviewDetailDispatchUpdate(inputData) {
    			mod.ControlDeckSave(mod._ValueDeckSelected);
    			$$invalidate(0, mod._ValueDeckSelected = mod._ValueDeckSelected, mod); // #purge-svelte-force-update
    		},
    		KOMReviewDetailDispatchRecount() {
    			return mod.ReactDeckFigures(mod._ValueDeckSelected);
    		},
    		async KOMReviewDetailDispatchBrowse() {
    			mod.ValueBrowseCards((await mod.DataDeckSelectedObjects(mod._ValueDeckSelected)).$KOMDeckCards);
    			$$invalidate(0, mod._ValueBrowseVisible = true, mod);
    		},
    		async KOMReviewDetailDispatchPlay(inputData) {
    			$$invalidate(0, mod._ValuePlaySpacings = mod$d.KOMPlaySort(mod$f.KOMReviewFilter(mod$f.KOMReviewSpacingsToday((await mod.DataDeckSelectedObjects(mod._ValueDeckSelected)).$KOMDeckSpacings), inputData, mod._ValueDeckSelected)), mod);
    			$$invalidate(0, mod._ValuePlayVisible = true, mod);
    		},
    		KOMReviewDetailDispatchExport() {
    			mod.ControlExportData([mod._ValueDeckSelected]);
    		},
    		async KOMBrowseDispatchCreate(inputData) {
    			(await mod.DataDeckSelectedObjects(mod._ValueDeckSelected)).$KOMDeckCards.push(inputData);

    			(await mod.DataDeckSelectedObjects(mod._ValueDeckSelected)).$KOMDeckSpacings.push(...Object.values(await mod$7.KOMSpacingStorageList(mod._ValueStorageClient, inputData, mod._ValueDeckSelected)).map(function (e) {
    				return Object.assign(e, { $KOMSpacingCard: inputData });
    			}));
    		},
    		async KOMBrowseListDispatchClose() {
    			$$invalidate(0, mod._ValueDeckSelected = await mod.ReactDeckFigures(mod._ValueDeckSelected), mod); // #purge-svelte-force-update
    			$$invalidate(0, mod._ValueBrowseVisible = false, mod);
    			mod.ValueBrowseCards([]);
    		},
    		KOMBrowseInfoDispatchRead() {
    			mod.ControlReadStart(...arguments);
    		},
    		KOMPlayDispatchUpdate(inputData) {
    			mod.ControlSpacingSave(inputData);
    		},
    		async KOMPlayDispatchFetch(param1, param2) {
    			return await mod$4.KOMCardActionAudioFetch(mod._ValueStorageClient, param1, param2, mod._ValueDeckSelected);
    		},
    		async KOMPlayDispatchDone() {
    			await Promise.all(Object.keys(mod._ValueSpacingUpdateThrottleMap).map(function (e) {
    				return main$4.OLSKThrottleSkip(mod._ValueSpacingUpdateThrottleMap[e]);
    			}));

    			await Promise.all(mod$f.KOMReviewRetireCards(mod._ValueDeckSelected, (await mod.DataDeckSelectedObjects(mod._ValueDeckSelected)).$KOMDeckSpacings).map(function (e) {
    				return mod$4.KOMCardActionUpdate(mod._ValueStorageClient, Object.assign(e, { KOMCardIsRetired: true }), mod._ValueDeckSelected);
    			}));

    			$$invalidate(0, mod._ValueDeckSelected = await mod.ReactDeckFigures(mod._ValueDeckSelected), mod); // #purge-svelte-force-update
    			$$invalidate(0, mod._ValuePlayVisible = false, mod);
    		},
    		OLSKAppToolbarDispatchFund() {
    			if (!window.confirm(OLSKLocalized("OLSKRemoteStorageConnectConfirmText"))) {
    				return;
    			}

    			$$invalidate(0, mod._ValueStorageToolbarHidden = false, mod);
    		},
    		OLSKAppToolbarDispatchStorage() {
    			$$invalidate(0, mod._ValueStorageToolbarHidden = !mod._ValueStorageToolbarHidden, mod);
    		},
    		OLSKAppToolbarDispatchLauncher() {
    			if (window.Launchlet.LCHSingletonExists()) {
    				return window.Launchlet.LCHSingletonDestroy();
    			}

    			window.Launchlet.LCHSingletonCreate({
    				LCHOptionRecipes: mod.DataReviewRecipes()
    			});
    		},
    		OLSKFundDispatchPersist(inputData) {
    			$$invalidate(0, mod._ValueFundConfirmation = inputData, mod);

    			if (!inputData) {
    				return mod$c.KOMSettingsActionDelete(mod._ValueStorageClient, "KOMSettingFundConfirmation");
    			}

    			return mod$c.KOMSettingsActionProperty(mod._ValueStorageClient, "KOMSettingFundConfirmation", inputData).then(function () {
    				if (main_12()) {
    					return;
    				}

    				window.location.reload();
    			});
    		},
    		OLSKFundDispatchFail() {
    			mod.OLSKFundDispatchPersist(null);
    		},
    		OLSKFundDispatchGrant(inputData) {
    			$$invalidate(0, mod._ValueFundGrant = inputData, mod);
    		},
    		OLSKChangeDelegateCreateDeck(inputData) {
    			mod.SetupValueDecksAll();
    		},
    		async OLSKChangeDelegateUpdateDeck(inputData) {
    			await mod.SetupValueDecksAll();
    			mod.ReactDeckIfSelected(inputData);
    		},
    		async OLSKChangeDelegateDeleteDeck(inputData) {
    			await mod.SetupValueDecksAll();

    			if (!mod._ValueDeckSelected) {
    				return;
    			}

    			if (mod._ValueDeckSelected.KOMDeckID === inputData.KOMDeckID) {
    				$$invalidate(0, mod._ValueDeckSelected = null, mod);
    			}
    		},
    		OLSKChangeDelegateCreateCard(inputData) {
    			if (mod._KOMBrowse && mod._ValueDeckSelected && inputData.KOMCardDeckID === mod._ValueDeckSelected.KOMDeckID) {
    				return mod._KOMBrowse.modPublic.KOMBrowseChangeDelegateCreateCard(inputData);
    			}

    			mod.ReactDeckFiguresThrottled(inputData.KOMCardDeckID);
    		},
    		OLSKChangeDelegateUpdateCard(inputData) {
    			if (mod._KOMBrowse && mod._ValueDeckSelected && inputData.KOMCardDeckID === mod._ValueDeckSelected.KOMDeckID) {
    				return mod._KOMBrowse.modPublic.KOMBrowseChangeDelegateUpdateCard(inputData);
    			}

    			mod.ReactDeckFiguresThrottled(inputData.KOMCardDeckID);
    		},
    		OLSKChangeDelegateDeleteCard(inputData) {
    			if (mod._KOMBrowse && mod._ValueDeckSelected && inputData.KOMCardDeckID === mod._ValueDeckSelected.KOMDeckID) {
    				return mod._KOMBrowse.modPublic.KOMBrowseChangeDelegateDeleteCard(inputData);
    			}

    			mod.ReactDeckFiguresThrottled(inputData.KOMCardDeckID);
    		},
    		async OLSKChangeDelegateConflictCard(inputData) {
    			return mod.OLSKChangeDelegateUpdateCard(await mod$4.KOMCardActionUpdate(mod._ValueStorageClient, main$3.OLSKRemoteStorageChangeDelegateConflictSelectRecent(inputData)));
    		},
    		OLSKChangeDelegateCreateSpacing(inputData) {
    			mod.ReactDeckFiguresThrottled(inputData.$KOMSpacingDeckID);
    		},
    		OLSKChangeDelegateUpdateSpacing(inputData) {
    			mod.ReactDeckFiguresThrottled(inputData.$KOMSpacingDeckID);
    		},
    		OLSKChangeDelegateDeleteSpacing(inputData) {
    			
    		},
    		// REACT
    		ReactDeckIfSelected(inputData) {
    			if (!mod._ValueDeckSelected) {
    				return;
    			}

    			if (mod._ValueDeckSelected.KOMDeckID !== inputData.KOMDeckID) {
    				return;
    			}

    			$$invalidate(0, mod._ValueDeckSelected = Object.assign(mod._ValueDeckSelected, inputData), mod); // #purge-svelte-force-update
    		},
    		async ReactDeckFigures(deck) {
    			const activeSpacings = (await mod.DataDeckSelectedObjects(deck)).$KOMDeckSpacings;

    			const todaySpacingsNotStudied = mod$f.KOMReviewSpacingsToday(activeSpacings.filter(function (e) {
    				return !e.$KOMSpacingCard.KOMCardIsRetired;
    			}));

    			const todaySpacingsStudied = activeSpacings.filter(function (e) {
    				if (!e.KOMSpacingChronicles.length) {
    					return false;
    				}

    				return mod$5.KOMSharedGroupingDay(e.KOMSpacingChronicles.slice(-1).pop().KOMChronicleResponseDate) === mod$5.KOMSharedGroupingDay(new Date());
    			});

    			const upcomingGroupings = mod$f.KOMReviewGeneralUpcomingGroupByDate(mod$f.KOMReviewGeneralUpcomingFilter(activeSpacings));
    			const historicalGroupings = mod$f.KOMReviewGeneralHistoricalGroupByDate(mod$f.KOMReviewGeneralHistoricalFilter(activeSpacings));

    			return Object.assign(deck, mod.ValueCacheDeckFiguresMap(Object.assign(mod._ValueCacheDeckFiguresMap, {
    				[deck.KOMDeckID]: {
    					$KOMDeckTodayReviewCount: mod$6.KOMSpacingModelFilterUnique(todaySpacingsNotStudied.filter(function (e) {
    						return !mod$6.KOMSpacingModelIsUnseen(e);
    					})).length,
    					$KOMDeckTodayUnseenCount: mod$6.KOMSpacingModelFilterUnique(todaySpacingsNotStudied.filter(mod$6.KOMSpacingModelIsUnseen)).length,
    					$KOMDeckTodayStudiedCount: todaySpacingsStudied.length,
    					$KOMDeckGeneralNotUnseenCount: activeSpacings.filter(function (e) {
    						return e.KOMSpacingChronicles.length;
    					}).length,
    					$KOMReviewTodayTotalCards: mod$6.KOMSpacingModelFilterUnique(todaySpacingsStudied).length,
    					$KOMReviewTodayTimeMinutes: mod$f.KOMReviewTotalMinutes(mod$f.KOMReviewTodayTotalMilliseconds(todaySpacingsStudied)),
    					$KOMReviewTodayReviewAccuracy: mod$f.KOMReviewTodayPercentage(mod$f.KOMReviewTodayReviewAccuracy(todaySpacingsStudied)),
    					$KOMReviewGeneralUpcomingData: mod$f.KOMReviewGeneralUpcomingDates().map(function (e) {
    						return {
    							KOMReviewChartElementDateBarTableRowDataKey: mod$5.KOMSharedGroupingDay(new Date()) === e
    							? OLSKLocalized("KOMReviewGeneralTodayText")
    							: e,
    							KOMReviewChartElementDateBarTableRowDataValues: Object.entries(mod$6.KOMSpacingModelGroupByStatus(upcomingGroupings[e] || [])).reduce(
    								function (coll, item) {
    									if (["KOMSpacingGroupingDeveloping", "KOMSpacingGroupingMature"].includes(item[0])) {
    										coll.push(mod$6.KOMSpacingModelFilterUnique(item[1]).length);
    									}

    									return coll;
    								},
    								[]
    							).reverse()
    						};
    					}),
    					$KOMReviewGeneralHistoricalData: mod$f.KOMReviewGeneralHistoricalDates().map(function (e) {
    						return {
    							KOMReviewChartElementDateBarTableRowDataKey: mod$5.KOMSharedGroupingDay(new Date()) === e
    							? OLSKLocalized("KOMReviewGeneralTodayText")
    							: e,
    							KOMReviewChartElementDateBarTableRowDataValues: Object.entries(mod$6.KOMSpacingModelGroupChroniclesByStatus(historicalGroupings[e] || [], e)).reduce(
    								function (coll, item) {
    									return coll.concat(mod$f.KOMReviewTotalMinutes(mod$f.KOMReviewGeneralHistoricalTotalMilliseconds(item[1])));
    								},
    								[]
    							).reverse()
    						};
    					}),
    					$KOMReviewChartCompositionCollectionData: Object.entries(mod$6.KOMSpacingModelGroupByStatus(activeSpacings)).reduce(
    						function (coll, item) {
    							coll[item[0]] = mod$6.KOMSpacingModelFilterUnique(item[1]).length;
    							return coll;
    						},
    						{}
    					)
    				}
    			}))[deck.KOMDeckID]);
    		},
    		ReactDeckFiguresThrottled(inputData) {
    			const deck = mod._ValueDecksAll.filter(function (e) {
    				return e.KOMDeckID === inputData;
    			}).pop();

    			if (!deck) {
    				return;
    			}

    			main$4.OLSKThrottleMappedTimeout(mod._ValueDeckFiguresThrottleMap, inputData, {
    				OLSKThrottleDuration: main_12() ? 0 : 500,
    				async OLSKThrottleCallback() {
    					await mod.ReactDeckFigures(deck); // #purge-svelte-force-update
    				}
    			});
    		},
    		// SETUP
    		async SetupEverything() {
    			mod.SetupStorageClient(); // mod.ControlDemo();
    			mod.SetupStorageStatus();
    			await mod.SetupStorageNotifications();
    			await mod.SetupValueDeckCachingEnabled();
    			mod.SetupValueCacheDeckFiguresMap();
    			await mod.SetupValueDecksAll();
    			$$invalidate(0, mod._ValueIsLoading = false, mod);
    		}, // mod.ControlDemo();
    		SetupStorageClient() {
    			const storageModule = mod$9.KOM_DataModule(
    				[
    					Object.assign(mod$1.KOMDeckStorageBuild, {
    						OLSKChangeDelegate: {
    							OLSKChangeDelegateCreate: mod.OLSKChangeDelegateCreateDeck,
    							OLSKChangeDelegateUpdate: mod.OLSKChangeDelegateUpdateDeck,
    							OLSKChangeDelegateDelete: mod.OLSKChangeDelegateDeleteDeck
    						}
    					}),
    					Object.assign(mod$3.KOMCardStorageBuild, {
    						OLSKChangeDelegate: {
    							OLSKChangeDelegateCreate: mod.OLSKChangeDelegateCreateCard,
    							OLSKChangeDelegateUpdate: mod.OLSKChangeDelegateUpdateCard,
    							OLSKChangeDelegateDelete: mod.OLSKChangeDelegateDeleteCard,
    							OLSKChangeDelegateConflict: mod.OLSKChangeDelegateConflictCard
    						}
    					}),
    					Object.assign(mod$7.KOMSpacingStorageBuild, {
    						OLSKChangeDelegate: {
    							OLSKChangeDelegateCreate: mod.OLSKChangeDelegateCreateSpacing,
    							OLSKChangeDelegateUpdate: mod.OLSKChangeDelegateUpdateSpacing,
    							OLSKChangeDelegateDelete: mod.OLSKChangeDelegateDeleteSpacing
    						}
    					}),
    					mod$b.KOMSettingStorageBuild
    				],
    				{
    					OLSKOptionIncludeDebug: main_12() || window.OLSKPublicConstants("OLSKDebugRemoteStorage")
    				}
    			);

    			$$invalidate(0, mod._ValueStorageClient = new RemoteStorage({ modules: [storageModule] }), mod);
    			mod._ValueStorageClient.access.claim(storageModule.name, "rw");
    			mod._ValueStorageClient.caching.enable(`/${storageModule.name}/`);

    			if (window.OLSKPublicConstants("OLSKDebugRemoteStorage")) {
    				window.OLSKDebugRemoteStorage = mod._ValueStorageClient;
    			}
    		},
    		SetupStorageStatus() {
    			main$3.OLSKRemoteStorageStatus(
    				mod._ValueStorageClient,
    				function (inputData) {
    					$$invalidate(0, mod._ValueFooterStorageStatus = inputData, mod);
    				},
    				OLSKLocalized
    			);
    		},
    		async SetupStorageNotifications() {
    			mod._ValueStorageClient.on("sync-done", () => {
    				if (!main_12()) {
    					console.debug("sync-done", arguments);
    				}
    			});

    			let isOffline;

    			mod._ValueStorageClient.on("network-offline", () => {
    				if (!main_12()) {
    					console.debug("network-offline", arguments);
    				}

    				isOffline = true;
    			});

    			mod._ValueStorageClient.on("network-online", () => {
    				if (!main_12()) {
    					console.debug("network-online", arguments);
    				}

    				isOffline = false;
    			});

    			mod._ValueStorageClient.on("error", error => {
    				if (isOffline && inputData.message === "Sync failed: Network request failed.") {
    					return;
    				}

    				

    				if (!main_12()) {
    					console.debug("error", error);
    				}
    			});

    			return new Promise(function (res, rej) {
    					return mod._ValueStorageClient.on("ready", res);
    				});
    		},
    		async SetupValueDeckCachingEnabled() {
    			$$invalidate(0, mod._ValueDeckCachingEnabled = (await mod$c.KOMSettingsActionProperty(mod._ValueStorageClient, "KOMSettingDeckCachingEnabled") || {}).KOMSettingValue === "true", mod);
    		},
    		SetupValueCacheDeckFiguresMap() {
    			if (!mod._ValueDeckCachingEnabled) {
    				return main$5.OLKSLocalStorageSet(window.localStorage, "kKOMReviewCacheDeckFiguresMap", null);
    			}

    			$$invalidate(0, mod._ValueCacheDeckFiguresMap = main$5.OLKSLocalStorageGet(window.localStorage, "kKOMReviewCacheDeckFiguresMap") || {}, mod);
    		},
    		async SetupValueDecksAll() {
    			mod.ValueDecksAll(await Promise.all((await mod$8.KOMDeckActionList(mod._ValueStorageClient)).filter(function (e) {
    				return typeof e === "object"; // #patch-remotestorage-true
    			}).map(async function (deck) {
    				if (!mod._ValueCacheDeckFiguresMap[deck.KOMDeckID]) {
    					await mod.ReactDeckFigures(deck);
    				}

    				return Object.assign(deck, mod._ValueCacheDeckFiguresMap[deck.KOMDeckID] || {});
    			})));
    		},
    		async SetupFund() {
    			$$invalidate(0, mod._ValueFundConfirmation = (await mod$c.KOMSettingsActionProperty(mod._ValueStorageClient, "KOMSettingFundConfirmation") || {}).KOMSettingValue, mod);

    			await main$9._OLSKFundSetupPostPay({
    				ParamWindow: window,
    				ParamExistingCode: mod._ValueFundConfirmation || null,
    				OLSKFundDispatchPersist: mod.OLSKFundDispatchPersist
    			});

    			if (!mod._ValueStorageClient.connected) {
    				return;
    			}

    			if (!mod._ValueFundConfirmation) {
    				return;
    			}

    			const item = {
    				OLSK_CRYPTO_PAIR_RECEIVER_PRIVATE: "-----BEGIN PGP PRIVATE KEY BLOCK-----\nVersion: OpenPGP.js v4.10.8\nComment: https://openpgpjs.org\n\nxcLYBF+ivh4BCADbu8e4WQVO0c0WJ/s5AzYXWRKzuyDaj+wU11usOwGeo0if\nMbqhMIDfN891GK3wlaVHR1xnuxGDl7mFKD+3Q7aloS7rRv9QILAu3/y/rDKB\n9QlyuxXk3ReaOlvCAg3pl12Kq8Xo+rfF7Za2vOB3HHszcbEKIRELgpeRrHk5\nV0CL0ZLbPVOFL5ksFB/PMzNtmj4sjSQTw4hEq4D+1gWqobjOHkT7Matbf6T/\n2EvJYG/0YuqZd0sDwXHx7bRLmf2y4uKgzf1oqC9Xu2YRPGte63yTcIfyoH2w\n2KJj16DCE4P4LbAkd74iiXi9PGl5SRMiQEFt0sEWrTS+xJ13t0NEBExVABEB\nAAEAB/9g2XWAJYyXXxW8DEdIq8etps79dR9X9lOiJAH9+cwO9f1OXYbbARvs\nRxcjj4srHWpJ7oQmHGftznQw4rqiti/M9SxO+24RDTdakdM/UFC6wxw0+4z8\n4Q5EJjDHZExphxPtySRkOg3CKaRiSwHMvjr3Q8c6pbRzlE3mIVUVFwYWGaoY\nx5aoQZ1r1yu45MuxX0urTQw1BWgY3Evz+FiMlqYH4gc2DKG9GzxfV6N/Y5jl\nlx9xn7f2ADHJR4p36H+ukpxiqx/Z2VKXhoggHDTBJZciHAPhBt5XCEpLBYp0\ntWxHGM82fgBJ+0UhGkxE2qpBNroOj6Z0aAqxAqoWYEHNPkLJBADj5fZsNXC9\nAJupdtmO1eMH0cWmx8nWc7Yr+QOuQW6pAaI8ANNDKNqKMczvq5n/pwxX/iZl\n4ec6wQmrAxBl9BkjlXAb9leouhj/dgnDzE3vJsuJ4xFd8ys2NOobzupNVffR\nF16XUFZ3G6Qx9+sKWyHzEZtKvwBXtm/B5a8r5O6nnwQA9tQUw9PmTPm/QluJ\nOp1BOfugO7bXh2X3t79vAb0LjCtY7h/JjjzYh3P7/CUV97ETYucLQf7GB2RH\n9BbdJr1nJvQv3MIwpxSF0E/CCnutKmFupexwhM8T4NGktdUweMu/cuZ7lqpA\nV+UPeaTuzRBZSHtcn03Z7Y99OaUMHP6gF4sEAItBScT89df+CU3rF/9wa6bG\ndWx6fxbkvDJhQHfoiDJ07VChfrgYc8NZxx2Y6dYKqUhLPhORRKKQD6YXI48k\nVbUz0tJlVJEg+3xsKd0KJagzs6Cjxg3w0ZQvKNygcq4/2xevK2sn3+oTy7Zo\n7BmTnIZcbirnHe2BbnFYUIUp6mLwOhXNAMLAjQQQAQgAIAUCX6K+HgYLCQcI\nAwIEFQgKAgQWAgEAAhkBAhsDAh4BACEJEFPq8AMNAz/KFiEE62xLpZz24x43\n86oTU+rwAw0DP8piYQf/YHfKZDRq6vR+RyAg08czt8UCzaFj2/G7fiStygYk\ns5CTCkuVjAuxykGb+axP9J0RwfexZssCT1H7dLHH3Q4Ij+FqshM997IQITQ3\nDg0dv/mXaBzDwRd26j4uPdQ0j/R5YJYPjLD1LnOdfG/IUayoZJT6DZruaHH/\nvtOUqaaWf6t0JiCpyHl/OBl25R4Bpv5DkQmHIz6HUpjgLBkzJ+aMQAveyn6k\nqdl82SUQJCZ6VW8wiMF6UEu+St8HgiKSp0jvKoZmIRMQGOXlE+rUZQE5Vvqd\nZHBrnkP/OQ+LFYnrglvKJ9w+TMTNmkO4aQx5h+NF5S0W+ifHkU5V/7HzxzcT\nYsfC2ARfor4eAQgAsdEma8gSrtoEMm7+1VcGH4VOq94kbpn/7ROsJoH3ALkZ\nWbkJj/Nc1QXPX9l85eFFGkKTZcA9/JSDRlOVjCDuni+HlVqAEo1mZiBe4HPK\ns9CcT0/bkHLxVsfybPyJdtC4JMUrVzThHCaOUMtbGn4AMv3AaKVroEVQkBMS\n9h0u6T6/rCkCwIE2+xAjh/6YIV6Xfh6jFzenuXOPP+eFIzCZsfRkWOGf+z4k\no90ajNoVZzQufv4hVoV+A1MNMjpvSr/RcrhlI+0XzmSM+jojrWt8qn3hmZMb\no+Lw2hKYgf8ty2mqh3uk2YMDts1i+bPnPczH6SfLK+cCN5xIQ5fg6M2OIwAR\nAQABAAgAkJBKnTvWvKLw4JPOyGFsz/mQITiEBAtdvz/MKK5mwwa5bnF6Lbcc\nFPAZTYLDAR2pEZVowkON4ahYJbfUkE1B0gcwQqOGFg8xXfwZRn+9H32NZwm0\npvZb8UKzfBnAJIHCA9rsxoRuM3XBJDx//8TKoqocYLeEDZPs0IVBWCgXuHX5\nC1TLAgFzOEyXbCVANiV3vGU3rB2C0bdc8DDFsyMkdTFfY3bf/nCbF+yfWp8s\nqoRGSbylEChdbLa9UgcCIht1Gsmxb0LmLXRcGFKqFkFrMJnISKMjmMqIfRSu\n4dXb+HhXLP10nYRqoPYchSROTfQ1mZHlqlME/QVXn2tFesSliQQAy2G/gi8g\nxVQ4kaMhva38wPBQuivioHvnbc/GO15qhv/8WjxiCi3hKPMkJJ9JCh2OUsoM\n6Fv+l+HUSPcMnWIIA29LDWQ+sS7TbjiPRLfm7UWLbiwzkGqOVCsOeskhuTBO\nIZbpdJ2Yp7DXvRPuNvV5IH6quafrqhFCqmycNsri5X0EAN/SNWN+2jQ10lk4\nBjckMAc3e6mTvcaz0IcDBqWD3hp1P2ub//SQZyW6oZWaFkDgS5GoD6gWrjaP\ntuyCnSiplMl2Tw69yCM7DfGpNm53drS8iYL82X2+BFLsbJ+mEzdkafuy4VpQ\nWYo0Uk39QPJU6aPcjg1M/k1zEzDWG+733hQfBADKWTTRphgjjZwZzufrZn59\n2fgylrhQUWcsBar8FssowY1BiZdQ6hWf3BhYlm22n6IcM/d/XQH7XxLsqMj2\nvbOwVcR5uMt78qCe3pah+ElRA4iAdriHY6g/gDBvtegvVzBRr/N6NJuuX4f0\nTSLsJhVXeTMDMhD9DqYfPyuoTTe+qjazwsB2BBgBCAAJBQJfor4eAhsMACEJ\nEFPq8AMNAz/KFiEE62xLpZz24x4386oTU+rwAw0DP8qXowgArOn3RxP6To0+\navisoWGAoHADPzOczr2PYnEGIZj7WNpJtBX+CfvkugqKq4M7/h6utnLRszpz\nyhQ5CUfBQTgzHSej4x526eYfZXdeWb4ipNeC7XxBNviuV2m36sor1wz+RoTs\nXMwQ/v3avnIx8NXCD3bsawvwXy4Bi0XGFKh/HzRnyoDO5ybzyu3J/hAAjT6c\n7MYk++oF2Z/LJ9kloxKDzWhmykAyPvwjQAdWHgHFRv4VcKoLC5PlTU8O3FeJ\nW/rZJ1dfAW9+j6BzkiD3wLcR/nYfmKH3ibtRNQyGSOClcNKYKdQGNm8pUaXr\nRMYDC4JhjA657SiUoMN6b84UZNhmog==\n=U9Bd\n-----END PGP PRIVATE KEY BLOCK-----",
    				OLSK_CRYPTO_PAIR_SENDER_PUBLIC: "-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: OpenPGP.js v4.10.8\nComment: https://openpgpjs.org\n\nxsBNBF+ivh4BCADIbC3SrsiEs8Fi/jdQmbSM9Ys1F6LSgeRwU6aF1Qj7i9jA\n3Ytcw3KmjB5jg9CYUOUhkvu+XdGBE1eP/F0vZOU6noJSxFMyLWws23AAgeCb\nQTTp7HAPT+er4s7o1BoYJtHUMzzAedj1ox4ODM7eZgsvOzn01Ezr6bqm0gNq\nlRbijFN8DHdQDdebFPwVTSSeOQUIXhGJjaxGk+b78iwVxQ9D39bsg4ZtVikc\nwEtjj+DJRbCCtQQdj/K3M3mUUBeFWl12xa85RsYExHYavbq5PmiT2uMtHHvu\nIU2++vHF1YdUK5LF4XwjCjpa3IMjeKYBgByfqpBolSZlyuWOmHhAjYdtABEB\nAAHNAMLAjQQQAQgAIAUCX6K+HgYLCQcIAwIEFQgKAgQWAgEAAhkBAhsDAh4B\nACEJEJLwqGZYlcVhFiEEYVfnqAkm1mHkdSFOkvCoZliVxWETmQf/di7rJhx3\nrR5KsAnDL+MFZTj/xnLPOcAKZlVe+g9enbB22EuSb44AJfyIX117a8zKNJl3\nSuhngEQ6pCMYKmc5YNf3EunPxeGp4qjf4ud0m6pPmO6zxDW2p1ALNJ9vfwsq\nCs4OF4GVua2Sg6uNVWb0GrJn24j/1BuLeImkgrjQTG4JxX32LeAP4uakDMY8\n53OtnmQ6+xr00AZ3DHO2RE/AiThYbkoI4iBJrt0c3sEqGj+24wlWO058tZlG\nUAOU/ooh1xFqmoA0tkE1dR9mhlwgo4cu1O3/GVoZHMPmk1cDoK9W8Y68/43o\nhP74+PYsptUCZAOBg4It+8opszw67HrpZs7ATQRfor4eAQgAl0R79lh96h+q\ncfevkaXhuo2eu49q68pNAwPgvalqzUNNnBNA1dGTbobSR/9ayXSiLkGQq9t9\nv9Vi6LSNxjoGat8VJB8PckHU3A3mt5BaY7vGgU3Z4+nxoPNymqws5uVBTA+q\nTMy3JdMeMdkizvfFRGPmVN89GFGtnsykTD6tXXDtOKR/SCyR0130mLkhh02z\nb5TYouVfB6HbA3SqQJHIHUtqCX4zoAvQTdOwvxnL9ZjT7TAfN+GPF/Dz6e78\nnne6Dr8o58s5ImXvRpD2QICXekLda95G4r1opJ95GCS3fSTh088pV6TPwXBz\nFVb/aErdHizzcG2uWST//qafI2dbhQARAQABwsB2BBgBCAAJBQJfor4eAhsM\nACEJEJLwqGZYlcVhFiEEYVfnqAkm1mHkdSFOkvCoZliVxWGYnwf+LnyMb+zf\n6lLgsYMbuYnuO1B9/1VZQy0kCdpmYqlUgGcHr5kWN4Ctrv4+EJ1lSPuFAK7i\nKNS/x3+AI4HC6lF7NwGlUga2K0EhYT8WJaCdbuQLUYN+alwaxzh/fn3y7mzf\nmkMX7N98BedcE3Rt2x/K6Z97uFxQSadOqe3DHjfBL8591nWTiGthMnYtqaS7\n+AZx0t/b1jfQ1Lo9fYWKEohM0V2u/EDrRZTQe6+6Qde3FZHBBbi9KCasJ87H\ntX+bXuTRaCBGPVevJnOsKVhF9cRLIf9qPt4KxY2dOyp4EF0AgOKzlZAyhA0J\nsJw03ku1N2hb0ZZdQbR8WXxI9YTcN2h3OA==\n=Umv2\n-----END PGP PUBLIC KEY BLOCK-----",
    				ParamWindow: window,
    				OLSK_FUND_API_URL: "http://loc.roco:3001/api/grant",
    				ParamBody: {
    					OLSKPactAuthType: main$7.OLSKPactAuthTypeStorage(),
    					OLSKPactAuthIdentity: mod._ValueStorageClient.remote.userAddress,
    					OLSKPactAuthProof: mod._ValueStorageClient.remote.token,
    					OLSKPactAuthMetadata: {
    						OLSKPactAuthMetadataModuleName: mod$9.KOM_DataModuleName(),
    						OLSKPactAuthMetadataFolderPath: mod$1.KOMDeckStorageCollectionPath()
    					},
    					OLSKPactPayIdentity: mod._ValueStorageClient.remote.userAddress,
    					OLSKPactPayTransaction: mod._ValueFundConfirmation
    				},
    				OLSKLocalized,
    				OLSKFundDispatchFail: mod.OLSKFundDispatchFail,
    				OLSKFundDispatchGrant: mod.OLSKFundDispatchGrant
    			};

    			console.log(item);
    			await main$9._OLSKFundSetupGrant(item);
    		},
    		// LIFECYCLE
    		async LifecycleModuleWillMount() {
    			try {
    				await mod.SetupEverything();
    			} catch(e) {
    				console.error(e);
    			}
    		}
    	};

    	onMount(mod.LifecycleModuleWillMount);
    	const writable_props = [];

    	Object_1$7.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$2.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function komreviewmaster_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			mod._KOMReviewMaster = $$value;
    			$$invalidate(0, mod);
    		});
    	}

    	function komreviewdetail_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			mod._KOMReviewDetail = $$value;
    			$$invalidate(0, mod);
    		});
    	}

    	function kombrowse_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			mod._KOMBrowse = $$value;
    			$$invalidate(0, mod);
    		});
    	}

    	$$self.$capture_state = () => ({
    		OLSKInternational,
    		OLSKLocalized,
    		OLSKString,
    		OLSKFormatted,
    		OLSK_TESTING_BEHAVIOUR: main_12,
    		OLSKRemoteStorage: main$3,
    		OLSKServiceWorker: main_1$1,
    		KOM_Data: mod$9,
    		KOMDeckStorage: mod$1,
    		KOMCardStorage: mod$3,
    		KOMSpacingStorage: mod$7,
    		KOMSettingStorage: mod$b,
    		RemoteStorage,
    		KOMDeckAction: mod$8,
    		KOMCardAction: mod$4,
    		KOMSettingAction: mod$c,
    		KOMReviewLogic: mod$f,
    		KOMSharedLogic: mod$5,
    		KOMPlayLogic: mod$d,
    		OLSKThrottle: main$4,
    		KOMSpacingModel: mod$6,
    		OLSKLocalStorage: main$5,
    		OLSKCache: main$6,
    		OLSKFund: main$9,
    		OLSKPact: main$7,
    		OLSKChain: main$a,
    		OLSKBeacon: main$b,
    		mod,
    		onMount,
    		KOMReviewMaster: Main$8,
    		KOMReviewDetail: Main$a,
    		KOMBrowse: Main$k,
    		KOMPlay: Main$l,
    		OLSKAppToolbar: Main$o,
    		OLSKServiceWorkerView: Main$p,
    		OLSKStorageWidget: Main$q,
    		OLSKPointer: Main$r
    	});

    	return [mod, komreviewmaster_binding, komreviewdetail_binding, kombrowse_binding];
    }

    class Main$s extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$s, create_fragment$s, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$s.name
    		});
    	}
    }

    const KOMReview = new Main$s({
    	target: document.body,
    });

    return KOMReview;

}());
//# sourceMappingURL=ui-behaviour.js.map
