var Main = (function () {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function compute_slots(slots) {
        const result = {};
        for (const key in slots) {
            result[key] = true;
        }
        return result;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value == null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function select_option(select, value, mounting) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
        if (!mounting || value !== undefined) {
            select.selectedIndex = -1; // no option should be selected
        }
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked');
        return selected_option && selected_option.__value;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    /**
     * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
     * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
     * it can be called from an external module).
     *
     * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).
     *
     * https://svelte.dev/docs#run-time-svelte-onmount
     */
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    /**
     * Schedules a callback to run immediately after the component has been updated.
     *
     * The first time the callback runs will be after the initial `onMount`
     */
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    let render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = /* @__PURE__ */ Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        // Do not reenter flush while dirty components are updated, as this can
        // result in an infinite loop. Instead, let the inner flush handle it.
        // Reentrancy is ok afterwards for bindings etc.
        if (flushidx !== 0) {
            return;
        }
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            try {
                while (flushidx < dirty_components.length) {
                    const component = dirty_components[flushidx];
                    flushidx++;
                    set_current_component(component);
                    update(component.$$);
                }
            }
            catch (e) {
                // reset dirty state to not end up in a deadlocked state and then rethrow
                dirty_components.length = 0;
                flushidx = 0;
                throw e;
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    /**
     * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
     */
    function flush_render_callbacks(fns) {
        const filtered = [];
        const targets = [];
        render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
        targets.forEach((c) => c());
        render_callbacks = filtered;
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
                // if the component was destroyed immediately
                // it will update the `$$.on_destroy` reference to `null`.
                // the destructured on_destroy may still reference to the old array
                if (component.$$.on_destroy) {
                    component.$$.on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            flush_render_callbacks($$.after_update);
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: [],
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            if (!is_function(callback)) {
                return noop;
            }
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        if (has_stop_immediate_propagation)
            modifiers.push('stopImmediatePropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.data === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
    }

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var main = createCommonjsModule(function (module, exports) {
    (function(global, factory) {
    	 factory(exports) ;
    }(commonjsGlobal, (function(exports) {
    	const mod = {

    		OLSKInternationalDefaultIdentifier () {
    			return 'i18n';
    		},

    		OLSKInternationalIsTranslationFileBasename (inputData) {
    			if (typeof inputData !== 'string') {
    				return false;
    			}

    			if (inputData.split('.').length < 2) {
    				return false;
    			}

    			if (!inputData.split('.').pop().match(/ya?ml/i)) {
    				return false;
    			}

    			if (inputData.split('-').shift() !== mod.OLSKInternationalDefaultIdentifier()) {
    				return false;
    			}

    			if (!mod._OLSKInternationalLanguageID(inputData)) {
    				return false;
    			}

    			return true;
    		},

    		OLSKInternationalLanguageID (inputData) {
    			if (!mod.OLSKInternationalIsTranslationFileBasename(inputData)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return mod._OLSKInternationalLanguageID(inputData);
    		},

    		OLSKInternationalSimplifiedLanguageCode (inputData) {
    			if (typeof inputData !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return inputData.split('-').shift();
    		},

    		_OLSKInternationalLanguageID (inputData) {
    			return inputData.replace(mod.OLSKInternationalDefaultIdentifier() + '-', '').split('.').shift();
    		},

    		OLSKInternationalLocalizedString (translationKey, translationDictionary) {
    			if (typeof translationDictionary !== 'object' || translationDictionary === null) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			var localizedString = translationDictionary[translationKey];

    			if (!localizedString) {
    				localizedString = 'TRANSLATION_MISSING';
    				console.log([
    					localizedString,
    					translationKey,
    					]);
    			}

    			return localizedString;
    		},

    		OLSKInternationalLocalizedStringCallback (dictionary, fallbackLocales) {
    			if (typeof dictionary !== 'object' || dictionary === null) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (!Array.isArray(fallbackLocales)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			const _locales = Object.keys(dictionary).reverse().concat(...fallbackLocales.map(function (e) {
    					return [mod.OLSKInternationalSimplifiedLanguageCode(e), e]
    				}).reverse());

    			return function (signature, requestLocales) {
    				if (!Array.isArray(requestLocales)) {
    					throw new Error('OLSKErrorInputNotValid');
    				}

    				let locales = _locales.concat(...requestLocales.map(function (e) {
    					return [mod.OLSKInternationalSimplifiedLanguageCode(e), e]
    				}).reverse(), []);

    				let outputData;

    				while (!outputData && locales.length) {
    					outputData = (dictionary[locales.pop()] || {})[signature];
    				}

    				if (!outputData) {
    					console.log([outputData = 'TRANSLATION_MISSING', signature].join(' '));
    				}

    				return outputData;				
    			};
    		},

    		_OLSKInternationalPaths (cwd, filter) {
    			if (typeof cwd !== 'string' || !cwd.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			const _require = commonjsRequire;

    			return _require().globSync(`**/*${ mod.OLSKInternationalDefaultIdentifier() }*.y*(a)ml`, {
    				cwd,
    				realpath: true,
    			}).filter(function (e) {
    				if (!filter) {
    					return true;
    				}

    				return !e.match(filter);
    			}).filter(function (e) {
    				return mod.OLSKInternationalIsTranslationFileBasename(_require().basename(e));
    			});
    		},

    		_OLSKInternationalConstructedDictionary (inputData) {
    			if (!Array.isArray(inputData)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			const _require = commonjsRequire;

    			return inputData.reduce(function (coll, item) {
    				const key = mod.OLSKInternationalLanguageID(_require().basename(item));

    				coll[key] = Object.assign(coll[key] || {}, _require().load(_require().readFileSync(item, 'utf8')));

    				return coll;
    			}, {});
    		},

    		OLSKInternationalDictionary (cwd) {
    			return this._OLSKInternationalConstructedDictionary(this._OLSKInternationalPaths(cwd));
    		},

    		_OLSKInternationalCompilationObject (cwd, languageID) {
    			const _require = commonjsRequire;

    			return this._OLSKInternationalPaths(cwd, /node_modules|__external/).filter(function (e) {
    				if (!languageID) {
    					return true;
    				}

    				return mod.OLSKInternationalLanguageID(_require().basename(e)) === languageID;
    			}).reduce(function (coll, item) {
    				return Object.assign(coll, {
    					[item]: _require().load(_require().readFileSync(item, 'utf8')),
    				});
    			}, {});
    		},

    		_OLSKInternationalCompilationFilePath (cwd) {
    			if (typeof cwd !== 'string' || !cwd.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}
    			const _require = commonjsRequire;

    			return _require().join(cwd, '__compiled', mod.OLSKInternationalDefaultIdentifier() + '-compilation.yml')
    		},

    		_SafeDump (inputData) {
    			const _require = commonjsRequire;

    			return _require().dump(inputData, {
    				lineWidth: Infinity,
    			});
    		},

    		OLSKInternationalWriteCompilationFile (cwd, languageID) {
    			const _require = commonjsRequire;

    			const data = mod._SafeDump(this._OLSKInternationalCompilationObject(cwd, languageID));

    			const outputDirectory = _require().dirname(mod._OLSKInternationalCompilationFilePath(cwd));

    			if (!_require().existsSync(outputDirectory)){
    				_require().mkdirSync(outputDirectory);
    			}

    			_require().writeFileSync(mod._OLSKInternationalCompilationFilePath(cwd), data);
    		},

    		OLSKInternationalSpreadCompilationFile (cwd, languageID) {
    			if (typeof cwd !== 'string' || !cwd.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			const _require = commonjsRequire;

    			const compilation = _require().load(_require().readFileSync(mod._OLSKInternationalCompilationFilePath(cwd), 'utf8'));

    			Object.keys(compilation).map(function (e) {
    				return _require().writeFileSync(e, mod._SafeDump(compilation[e]));
    			});
    		},

    		OLSKInternationalAddControllerLanguageCode (cwd, languageID) {
    			if (typeof cwd !== 'string' || !cwd.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof languageID !== 'string' || !languageID.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			const _require = commonjsRequire;

    			_require().globSync('controller.js', {
    				cwd,
    				matchBase: true,
    				realpath: true,
    			}).forEach(function (file) {
    				if (file.match(/.*(\.git|DS_Store|node_modules|vendor|__\w+)\/.*/i)) {
    					return
    				}

    				const item = _require();

    				if (typeof item.OLSKControllerRoutes !== 'function') {
    					return;
    				}

    				if (!(function(inputData) {
    					if (Array.isArray(inputData)) {
    						return inputData;
    					}
    					return Object.entries(inputData).reduce(function (coll, item) {
    						return coll.concat(Object.assign(item[1], {
    							OLSKRouteSignature: item[0],
    						}));
    					}, []);
    				})(item.OLSKControllerRoutes()).filter(function (e) {
    					return e.OLSKRouteLanguageCodes;
    				}).filter(function (e) {
    					return !e.OLSKRouteLanguageCodes.includes(languageID);
    				}).length) {
    					return
    				}
    				const match = _require().readFileSync(file, 'utf8').match(/OLSKRouteLanguageCodes: \[.*\]/g);

    				if (!match) {
    					throw new Error(`invalid OLSKRouteLanguageCodes syntax in ${ e }`);
    				}

    				match.map(function (e) {
    					const match = e.match(/\[.*\]/);
    					return _require().writeFileSync(file, _require().readFileSync(file, 'utf8').replace(/OLSKRouteLanguageCodes: \[.*\]/, `OLSKRouteLanguageCodes: ['${JSON.parse(match[0].replace(/\'/g, '"')).concat(languageID).join('\', \'')}']`));
    				});
    			});

    			if (process.argv[2].endsWith('olsk-i18n-add')) {
    				process.exit();
    			}
    		},

    	};
    	
    	Object.assign(exports, mod);

    	Object.defineProperty(exports, '__esModule', {
    		value: true
    	});

    })));

    {
    	exports.OLSKLocalized = function (inputData) {
    		return exports.OLSKInternationalLocalizedString(inputData, {"pt":{"KOMPlayToolbarUndoButtonText":"Desfazer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Ouvir pergunta","KOMPlayHearAnswerButtonText":"Ouvir resposta","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Mais perto","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Mais longe","KOMPlayResponseButtonResetText":"Praticar","KOMPlayResponseButtonNextText":"Próximo","KOMBrowseCreateButtonText":"Criar","KOMBrowseCloseButtonText":"Fechar","KOMBrowseListItemUntitledText":"Sem título","KOMBrowseLauncherItemImportCardsFromSSVText":"Importar cardões através do texto","KOMBrowseLauncherItemDiscardRetiredCardsText":"Descartar cartões aposentados","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Você tem certeza? Por favor, digite o número total de cartões aposentados.","KOMBrowseListItemRetiredText":"[aposentado]","KOMBrowseInfoTagsInputFieldText":"Nome da etiqueta nova","KOMBrowseInfoTagsCreateButtonText":"Criar etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'.","KOMBrowseInfoTagsSuggestButtonTextFormat":"Adicionar '%@'.","KOMBrowseInfoAudioRecordButtonText":"Gravar","KOMBrowseInfoAudioRecordingAlertText":"Gravando","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Zerar","KOMBrowseInfoAudioNotAvailableAlertText":"Gravação de áudio não suportada nesse navegador","KOMBrowseInfoToolbarBackButtonText":"Voltar","KOMBrowseInfoToolbarDiscardButtonText":"Descartar","KOMBrowseInfoToolbarTemplateButtonText":"Copiar tags para o novo cartão","KOMBrowseInfoFormFrontTextFieldText":"Texto do frente","KOMBrowseInfoFormFrontReadButtonText":"Ler","KOMBrowseInfoFormRearTextFieldText":"Texto do verso","KOMBrowseInfoFormRearReadButtonText":"Ler","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar aposentadoria do cartão","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMVitrineTitle":"Kommit","KOMVitrineDescription":"Aumentar sua memória.","OLSKLandingBlurbText":"Criar flashcards e aprender-os com repetição espaçada.","KOMVitrineVideo1HeadingText":"Como fazer um baralho de idioma","KOMVitrineGlossaryHeadingText":"Minha jornada lingüística","KOMVitrineGlossaryThaiLinkText":"Ensinando a mim mesmo o tailandês","KOMVitrineGlossaryThaiBlurbText":"Combinando texto-para-fala em Kommit com truques de memória para lembrar de forma confiável uma língua muito diferente.","KOMVitrineGlossaryFamilyLinkText":"Intercâmbio de línguas familiares","KOMVitrineGlossaryFamilyBlurbText":"Meu pai e eu compartilhamos uma nova linguagem através de flashcards.","KOMVitrineGlossaryFriendsLinkText":"Ensinando idiomas aos amigos","KOMVitrineGlossaryFriendsBlurbText":"Como usei Kommit colaborativamente para trocar idiomas com os amigos.","KOMVitrineGlossaryPortugueseLinkText":"Aprendendo português","KOMVitrineGlossaryPortugueseBlurbText":"Erros e outros momentos ao longo do caminho.","KOMVitrineGlossaryInfiniteHeadingText":"Jogo infinito de linguagem","KOMFeatureListArray":[["Praticare oralmente.","O síntese de fala transforma seu texto em áudio."],["Ouvir a si mesmo ou a um amigo.","Gravar pequenos trechos de áudio."],["Mantener-se organizado.","Etiquetar cartões."],["Trabalhar juntos.","Você escreve a frente, alguem o verso."]],"KOMReviewCreatePromptText":"Nome","KOMReviewLauncherItemExportSelectedJSONText":"Exportar baralho selecionado JSON (beta)","KOMReviewLauncherItemExportSelectedTXTText":"Exportar baralho selecionado como texto","KOMReviewLauncherItemSelectDeckTextFormat":"Selecione o baralho '%@'.","KOMReviewLauncherItemToggleExtraResponseButtonsText":"Botões de resposta extra","KOMReviewLauncherItemDebugPlungeDataText":"Jugar dados","KOMReviewTitle":"Kommit","KOMReviewTodayHeadingText":"Hoje","KOMReviewTodayTotalCardsLabelText":"Total de cartões","KOMReviewTodayTimeMinutesLabelText":"Tempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exatidão da revisão %","KOMReviewStatsHeadingText":"Estatísticas","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"novo","KOMReviewMasterToolbarTitleText":"Baralhos","KOMReviewMasterCreateButtonText":"Criar baralho","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar a exclusão das três pontos de interrogação","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar caching de figuras do baralho","KOMReviewGeneralTodayText":"Hoje","KOMReviewGeneralUpcomingHeadingText":"Próximos cartões","KOMReviewGeneralHistoricalHeadingText":"Tempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Coleção","KOMReviewDetailLanguageCodeFieldLabelText":"Código do idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Não especificado","KOMReviewDetailToolbarBackButtonText":"Voltar","KOMReviewDetailToolbarCardsButtonText":"Cartões","KOMReviewDetailGameOptionsHeadingText":"Opções de jogo","KOMReviewDetailNoCardsText":"Não tem cartões nesse baralho.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Reproduzir áudio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Ler a frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Ler o verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Pular cartões invertidos","KOMReviewDetailFormPairingIsEnabledFieldLabelText":"Tirar múltiplos cartões","KOMReviewDetailFormRetireCardsFieldLabelText":"Aposentar cartões","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"Nunca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"após um mês","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"após três meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"após seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"após doze meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudar cartões de revisão","KOMReviewDetailLauncherItemPlayUnseenText":"Estudar novos cartões","KOMReviewDetailPlayButtonText":"Jogar","KOMReviewDetailNoSpacingsText":"Todos os cartões de hoje foram revisados.","KOMReviewDetailDeckHeadingText":"Baralho","KOMReviewDetailRenameButtonText":"Renomear","KOMReviewDetailRenameButtonPromptText":"Nome","KOMReviewDetailDiscardButtonText":"Apagar o baralho e todas as cartas dentro","KOMReviewDetailDiscardPromptText":"Você tem certeza? Por favor, digite o número total de cartões para apagar o baralho.","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de cartões","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Novo","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desenvolvendo","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Aposentado","KOMGuideTitle":"Guia de Kommit","KOMGuideDescription":"Documentação do projeto","ROCORootLinkText":"Visitar rosano.ca","OLSKServiceWorkerUpdateAlertLabelText":"Atualização disponível","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recarregar","OLSKServiceWorkerLauncherItemReloadText":"Recarregar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forçar atualização","OLSKRootLinkTextHome":"Voltar para a página inicial","OLSKLanguageSwitcherVersionFormat":"Versão no %@ / %@","OLSKLanguageSwitcherVersionName":{"en":"inglês","fr":"francês","es":"espanhol","pt":"português","de":"alemão"},"SWARLinkText":"Parte do Pequeno Anel de Aplicação Web","ROCOGlossaryHeadingText":"Uma nova geração de aplicações","ROCOGlossaryDoorlessLinkText":"Filosofia 'doorless' (sem porta)","ROCOGlossaryDoorlessBlurbText":"Aplicativo como espaços públicos não-exclusivos.","ROCOGlossaryZeroDataLinkText":"Aprender mais sobre applicativos Zero Data","ROCOGlossaryZeroDataBlurbText":"Ser dono dos seus dados, todos eles.","ROCOGlossaryGoingWebLinkText":"Indo totalmente para a web","ROCOGlossaryGoingWebBlurbText":"Por que deixei de fazer aplicações iOS após doze anos.","ROCOGlossaryAppsLinkText":"Minhas outras aplicações","ROCOGlossaryAppsBlurbText":"Ferramentas para agência","ROCOGazetteHeadingText":"Acompanhe minha jornada","OLSKWordingConfirmText":"Você tem certeza?","OLSKWordingOpenApp":"Abrir app","OLSKWordingFeatures":"Características","OLSKWordingOpenGuide":"Ler o guia","OLSKWordingDeeperHeading":"Ir mais fundo","OLSKWordingVideo":"Vídeo","OLSKWordingTestimonials":"Testemunhos","OLSKWordingFeedbackHeading":"Feedback","OLSKWordingFeedbackBlurb":"De dentro do aplicativo, toque no botão ℹ︎, depois selecione \"Enviar feedback\".","OLSKWordingTypeToSearch":"Digitar para pesquisar","OLSKWordingTypeToFilter":"Digitar para filtrar","OLSKWordingCancelText":"Cancelar","OLSKWordingSubmitText":"Enviar","OLSKWordingDownloadText":"Baixar","OLSKWordingEditText":"Editar","OLSKWordingDebugObjectText":"Depurar este objeto","OLSKWebViewWindowButtonText":"Abrir em nova janela","OLSKTransportLauncherItemImportJSONText":"Importar JSON (beta)","OLSKTransportLauncherItemImportJSONErrorNotFilledAlertText":"Entrada não preenchida","OLSKTransportLauncherItemImportJSONErrorNotValidAlertText":"Entrada não válida","OLSKTransportLauncherItemExportJSONText":"Exportar JSON (beta)","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir link de acesso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Link de acesso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar link de acesso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Fazer sair os dados","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Você tem certeza?","OLSKRemoteStorageConnectConfirmText":"Conecte sua nuvem para continuar. Você gostaria de fazer isso agora?","OLSKReloadButtonText":"Reload","OLSKPlaceholderText":"Nenhum artículo selecionado","OLSKNarrowFilterFieldText":"Filtrar","OLSKModalViewCloseButtonText":"OK","OLSKInstallAlertHeadingText":"Instalar em seu dispositivo","OLSKInstallAlertBlurbHTMLFormat":"Tap <em>Compartir</em> %$1@, depois <em>Adicionar à tela inicial</em> %$2@","OLSKInstallAlertDismissButtonText":"Fechar","OLSKInputWrapperClearButtonText":"Limpar texto","OLSKFollowTextFormat":"Me encontre no %$1@ ou no %$2@.","OLSKEditText":"Editar isso","OLSKCloudRenewButtonText":"Renovar","OLSKCloudStatusSyncStartButtonText":"Sincronizar","OLSKCloudStatusSyncStopButtonText":"Parar","OLSKCloudStatusDisconnectButtonText":"Desconectar","OLSKCloudStatusDisconnectConfirmText":"Você tem certeza?","OLSKCloudFormConnectButtonText":"Conectar","OLSKCloudFormRegisterLinkText":"Obter uma nuvem","OLSKCatalogMasterPlaceholderText":"Toque + para criar um artículo.","OLSKCatalogStashPlaceholderTextFormat":"Artículos selecionados: %@","OLSKAproposHeadingText":"Sobre","OLSKAproposFeedbackButtonText":"Enviar feedback","OLSKAproposShareButtonText":"Dizer a um amigo","OLSKAppToolbarCloudStatusOnline":"Online","OLSKAppToolbarCloudStatusOffline":"Offline","OLSKAppToolbarCloudStatusError":"Erro","OLSKAppToolbarAproposButtonText":"Mais informação","OLSKAppToolbarLanguageButtonText":"Idioma","OLSKAppToolbarGuideLinkText":"Guia","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarClubButtonText":"Adesão","OLSKAppToolbarLauncherButtonText":"Lançador","OLSKAppToolbarCloudButtonText":"Nuvem","OLSKAppFeatureListArray":[["Acessível em qualquer lugar.","Funciona em dispositivos móveis, tablet e desktop'."],["Sem Wi-Fi, sem problemas.","Funciona offline sem acesso à Internet."],["Seus dados em todos os seus dispositivos.","Sincronização automática na nuven com o remoteStorage ou Fission."],["Fluxo de trabalho eficiente.","Atalhos do teclado para a maioria das coisas."],["Mova os dados livremente.","Importar e exportar dados JSON (beta)."],["Amigo dos cegos.","Etiquetas de texto em todos os elementos."],["Privado, não assustador.","Nenhuma análise de comportamento ou rastreadores inter-sitios."],["Ser dono dos seus dados.","100% seus em um aplicativo <a href=\"https://0data.app\">Zero Data</a>."]],"OLSKAppFeatureOpenSourceNameText":"Código aberto.","OLSKAppFeatureOpenSourceBlurbFormat":"O código é <a href=\"%@\">público</a> para ler e modificar."},"fr":{"KOMPlayToolbarUndoButtonText":"Annuler","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Écouter la question","KOMPlayHearAnswerButtonText":"Écouter la réponse","KOMPlayFlipButtonText":"Retourner","KOMPlayResponseButtonAgainText":"Réapprendre","KOMPlayResponseButtonHardText":"Plus proche","KOMPlayResponseButtonGoodText":"Normale","KOMPlayResponseButtonEasyText":"Plus loin","KOMPlayResponseButtonResetText":"Pratiquer","KOMPlayResponseButtonNextText":"Prochaine","KOMBrowseCreateButtonText":"Créer","KOMBrowseCloseButtonText":"Fermer","KOMBrowseListItemUntitledText":"Sans titre","KOMBrowseLauncherItemImportCardsFromSSVText":"Importer des cartes à travers du texte","KOMBrowseLauncherItemDiscardRetiredCardsText":"Jeter des cartes retraitées","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Êtes-vous sûr.e ? Veuillez entrer le nombre total des cartes retraitées.","KOMBrowseListItemRetiredText":"[retraitée]","KOMBrowseInfoTagsInputFieldText":"Nom du tag nouveau","KOMBrowseInfoTagsCreateButtonText":"Créer le tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Enlever '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Ajouter '%@'","KOMBrowseInfoAudioRecordButtonText":"Enregistrer","KOMBrowseInfoAudioRecordingAlertText":"Enregistrement en cours","KOMBrowseInfoAudioPlaybackButtonText":"Lecture","KOMBrowseInfoAudioClearButtonText":"Effacer","KOMBrowseInfoAudioNotAvailableAlertText":"Enregistrement audio non pris en charge dans ce navigateur","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Jeter","KOMBrowseInfoToolbarTemplateButtonText":"Copier des tags à une nouvelle carte","KOMBrowseInfoFormFrontTextFieldText":"Texte du recto","KOMBrowseInfoFormFrontReadButtonText":"Lire","KOMBrowseInfoFormRearTextFieldText":"Texte du verso","KOMBrowseInfoFormRearReadButtonText":"Lire","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Commuter la retraite de carte","KOMBrowseInfoLauncherItemDebugText":"Déboguer carte","KOMVitrineTitle":"Kommit","KOMVitrineDescription":"Augmenter votre mémoire","OLSKLandingBlurbText":"Créez des flashcards et apprenez-les avec la répétition espacée.","KOMVitrineVideo1HeadingText":"Comment faire un lot de langage","KOMVitrineGlossaryHeadingText":"Mon parcours linguistique","KOMVitrineGlossaryThaiLinkText":"M'enseignant le thaï","KOMVitrineGlossaryThaiBlurbText":"Combiner la synthèse vocale de Kommit avec des astuces de mémoire pour se souvenir de manière fiable d'une langue très différente.","KOMVitrineGlossaryFamilyLinkText":"Échange linguistique en famille","KOMVitrineGlossaryFamilyBlurbText":"Mon père et moi partageons une nouvelle langue à l'aide de flashcards.","KOMVitrineGlossaryFriendsLinkText":"En enseignant les langues à des amis","KOMVitrineGlossaryFriendsBlurbText":"Comment j'ai utilisé Kommit de manière collaborative pour échanger des langages avec des amis.","KOMVitrineGlossaryPortugueseLinkText":"Apprendre le portugais.","KOMVitrineGlossaryPortugueseBlurbText":"Des erreurs et d'autres moments sur la route.","KOMVitrineGlossaryInfiniteHeadingText":"Jeux infini de langage","KOMFeatureListArray":[["Pratiquer oralement.","La synthèse vocale transforme votre texte en audio."],["Entendez-vous ou un ami.","Enregistrer des courts extraits d'audio."],["Rester organisé.","Marquer des cartes avec des étiquettes."],["Travailler ensemble.","Vous écrivez le recto, quelqu'un.e d'autre le verso."]],"KOMReviewCreatePromptText":"Nom","KOMReviewLauncherItemExportSelectedJSONText":"Exporter le lot sélectionné JSON (béta)","KOMReviewLauncherItemExportSelectedTXTText":"Exporter le lot sélectionné comme texte","KOMReviewLauncherItemSelectDeckTextFormat":"Choisir lot de cartes '%@'","KOMReviewLauncherItemToggleExtraResponseButtonsText":"Commuter les boutons de réponse supplémentaires","KOMReviewLauncherItemDebugPlungeDataText":"Ventouser les données","KOMReviewTitle":"Kommit","KOMReviewTodayHeadingText":"Aujourd'hui","KOMReviewTodayTotalCardsLabelText":"Totale des cartes","KOMReviewTodayTimeMinutesLabelText":"Temps (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Exactitude de la révision %","KOMReviewStatsHeadingText":"Statistiques","KOMReviewMasterListItemReviewLabelText":"à réviser","KOMReviewMasterListItemUnseenLabelText":"nouvelles","KOMReviewMasterToolbarTitleText":"Lots de cartes","KOMReviewMasterCreateButtonText":"Créer lot de cartes","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Commuter l'exclusion des point d'interrogation triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Commuter la cache des lot de cartes","KOMReviewGeneralTodayText":"Aujourd'hui","KOMReviewGeneralUpcomingHeadingText":"Cartes à venir","KOMReviewGeneralHistoricalHeadingText":"Temps (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewDetailLanguageCodeFieldLabelText":"Code de la langue","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Non specifié","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cartes","KOMReviewDetailGameOptionsHeadingText":"Options du jeu","KOMReviewDetailNoCardsText":"Il n'y a pas de cartes dans ce lot de cartes.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Faire entendre la version audio enregistrée","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Lire le recto","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Lire le verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Ne pas activer la lecture des cartes inversées","KOMReviewDetailFormPairingIsEnabledFieldLabelText":"Tirer plusieurs cartes","KOMReviewDetailFormRetireCardsFieldLabelText":"Retraiter des cartes","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"jamais","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"après un mois","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"après trois mois","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"après six mois","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"après douze mois","KOMReviewDetailLauncherItemPlayReviewingText":"Étudier des cartes à réviser","KOMReviewDetailLauncherItemPlayUnseenText":"Étudier des nouvelles cartes","KOMReviewDetailPlayButtonText":"Jouer","KOMReviewDetailNoSpacingsText":"Toutes les cartes pour aujourd'hui ont été révisées.","KOMReviewDetailDeckHeadingText":"Lot de cartes","KOMReviewDetailRenameButtonText":"Renommer","KOMReviewDetailRenameButtonPromptText":"Nom","KOMReviewDetailDiscardButtonText":"Supprimer le lot de cartes et toutes les cartes dedans","KOMReviewDetailDiscardPromptText":"Êtes-vous sûr.e ? Veuillez entrer le nombre total des cartes pour supprimer le paquet.","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Totale des cartes","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Nouveau","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"En apprentisage","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retraitée","ROCORootLinkText":"Visiter rosano.ca","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemReloadText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","OLSKRootLinkTextHome":"Retour à l'accueil","OLSKLanguageSwitcherVersionFormat":"Version en %@ / %@","OLSKLanguageSwitcherVersionName":{"en":"anglais","fr":"français","es":"espagnol","pt":"portugais","de":"allemand"},"SWARLinkText":"Ça fait partie du Doorless App Ring","ROCOGlossaryHeadingText":"Une nouvelle génération d'applications","ROCOGlossaryDoorlessLinkText":"La philosophie 'doorless' (sans porte)","ROCOGlossaryDoorlessBlurbText":"Des applications comme espaces publics non exclusifs.","ROCOGlossaryZeroDataLinkText":"Apprendre plus à propos des applis Zero Data","ROCOGlossaryZeroDataBlurbText":"Être propriétaire de vos données, tout.","ROCOGlossaryGoingWebLinkText":"Entièrement sur le web","ROCOGlossaryGoingWebBlurbText":"Pourquoi j'ai arrêté de faire des applications iOS après douze ans.","ROCOGlossaryAppsLinkText":"Mes autres applications","ROCOGlossaryAppsBlurbText":"Outils pour la capacité d'agir","ROCOGazetteHeadingText":"Suivez mon parcours","OLSKWordingConfirmText":"Êtes-vous sûr.e ?","OLSKWordingOpenApp":"Ouvrir l'app","OLSKWordingFeatures":"Fonctionnalités","OLSKWordingOpenGuide":"Voir le guide","OLSKWordingDeeperHeading":"Aller plus profond","OLSKWordingVideo":"Vidéo","OLSKWordingTestimonials":"Des témoignages","OLSKWordingFeedbackHeading":"Feedback","OLSKWordingFeedbackBlurb":"Dans l'application, touchez le bouton ℹ︎, puis sélectionnez « Envoyer des commentaires ».","OLSKWordingTypeToSearch":"Taper pour chercher","OLSKWordingTypeToFilter":"Taper pour filtrer","OLSKWordingCancelText":"Annuler","OLSKWordingSubmitText":"Soumettre","OLSKWordingDownloadText":"Télécharger","OLSKWordingEditText":"Modifier","OLSKWordingDebugObjectText":"Déboguer cet objet","OLSKWebViewWindowButtonText":"Ouvrir dans une nouvelle fenêtre","OLSKTransportLauncherItemImportJSONText":"Importer JSON (béta)","OLSKTransportLauncherItemImportJSONErrorNotFilledAlertText":"Entrée non remplie","OLSKTransportLauncherItemImportJSONErrorNotValidAlertText":"Entrée non valide","OLSKTransportLauncherItemExportJSONText":"Exporter JSON (béta)","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e ?","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Souhaitez-vous faire ça maintenant ?","OLSKReloadButtonText":"Recharger","OLSKPlaceholderText":"Aucun article sélectionné","OLSKNarrowFilterFieldText":"Filtrer","OLSKModalViewCloseButtonText":"OK","OLSKInstallAlertHeadingText":"Installer dans votre appareil","OLSKInstallAlertBlurbHTMLFormat":"Touchez <em>Partager</em> %$1@, puis <em>Ajouter à l'Écran d'accueil</em> %$2@","OLSKInstallAlertDismissButtonText":"Écarter","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKFollowTextFormat":"Trouvez-moi sur %$1@ ou %$2@.","OLSKEditText":"Editer ceci","OLSKCloudRenewButtonText":"Renouveler","OLSKCloudStatusSyncStartButtonText":"Synchroniser","OLSKCloudStatusSyncStopButtonText":"Stop","OLSKCloudStatusDisconnectButtonText":"Débrancher","OLSKCloudStatusDisconnectConfirmText":"Êtes-vous sûr.e ?","OLSKCloudFormConnectButtonText":"Brancher","OLSKCloudFormRegisterLinkText":"Obtenir stockage","OLSKCatalogMasterPlaceholderText":"Appuyez sur + pour créer un article.","OLSKCatalogStashPlaceholderTextFormat":"Articles sélectionnés : %@","OLSKAproposHeadingText":"À propos","OLSKAproposFeedbackButtonText":"Envoyer des commentaires","OLSKAproposShareButtonText":"Dire à un ami.e","OLSKAppToolbarCloudStatusOnline":"En ligne","OLSKAppToolbarCloudStatusOffline":"Hors connexion","OLSKAppToolbarCloudStatusError":"Erreur","OLSKAppToolbarAproposButtonText":"Plus d'info","OLSKAppToolbarLanguageButtonText":"Langage","OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarClubButtonText":"Adhésion","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarCloudButtonText":"Stockage","OLSKAppFeatureListArray":[["Accessible partout.","Fonctionne sur les appareils mobiles, les tablettes et les ordinateurs de bureau."],["Pas de Wi-Fi, pas de problème.","Fonctionne hors ligne sans accès à Internet."],["Vos données en tous vos appareils.","Synchronisation automatique sur le cloud avec remoteStorage ou Fission."],["Flux de travail efficace.","Raccourcis clavier pour la plupart des choses."],["Déplacer les données librement.","Importer et exporter des données JSON (béta)."],["Blind-friendly.","Étiquettes de texte sur tous les éléments."],["Privé, pas effrayant.","Pas d'analyse comportementale ni de traceurs intersites."],["Vos données vous appartiennent.","100% à vous dans une application <a href=\"https://0data.app\">Zero Data</a>."]],"OLSKAppFeatureOpenSourceNameText":"Source ouvert.","OLSKAppFeatureOpenSourceBlurbFormat":"Le code is <a href=\"%@\">public</a> pour lire et modifier."},"es":{"KOMPlayToolbarUndoButtonText":"Deshacer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Escuchar pregunta","KOMPlayHearAnswerButtonText":"Escuchar respuesta","KOMPlayFlipButtonText":"Voltear","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Cerca","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Lejos","KOMPlayResponseButtonResetText":"Practicar","KOMPlayResponseButtonNextText":"Próxima","KOMBrowseCreateButtonText":"Crear","KOMBrowseCloseButtonText":"Cerrar","KOMBrowseListItemUntitledText":"Sin título","KOMBrowseLauncherItemImportCardsFromSSVText":"Importar tarjetas a través de texto","KOMBrowseLauncherItemDiscardRetiredCardsText":"Eliminar tarjetas jubiladas","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"¿Est@as segur@? Por favor entra el número total de tarjetas jubiladas.","KOMBrowseListItemRetiredText":"[jubilada]","KOMBrowseInfoTagsInputFieldText":"Nuevo nombre de etiqueta","KOMBrowseInfoTagsCreateButtonText":"Crear etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Poner '%@'","KOMBrowseInfoAudioRecordButtonText":"Grabar","KOMBrowseInfoAudioRecordingAlertText":"Grabando","KOMBrowseInfoAudioPlaybackButtonText":"Lectura","KOMBrowseInfoAudioClearButtonText":"Despejar","KOMBrowseInfoAudioNotAvailableAlertText":"Grabación de audio no disponible en ese navegador","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Eliminar","KOMBrowseInfoToolbarTemplateButtonText":"Copiar etiquetas a nueva tarjeta","KOMBrowseInfoFormFrontTextFieldText":"Texto de frente","KOMBrowseInfoFormFrontReadButtonText":"Leer","KOMBrowseInfoFormRearTextFieldText":"Texto de atrás","KOMBrowseInfoFormRearReadButtonText":"Leer","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar jubilar tarjeta","KOMBrowseInfoLauncherItemDebugText":"Debug tarjeta","KOMVitrineTitle":"Kommit","KOMVitrineDescription":"Aumentar tu memoria","OLSKLandingBlurbText":"Crear tarjetas y aprenderlas con repaso espaciado.","KOMVitrineVideo1HeadingText":"Cómo hacer un mazo de idiomas","KOMVitrineGlossaryHeadingText":"Mi viaje lingüístico","KOMVitrineGlossaryThaiLinkText":"Enseñandome tailandés a mí mismo","KOMVitrineGlossaryThaiBlurbText":"Combinar el texto a voz en Kommit con trucos de memoria para recordar con fiabilidad un idioma muy diferente.","KOMVitrineGlossaryFamilyLinkText":"Intercambio lingüístico familiar","KOMVitrineGlossaryFamilyBlurbText":"Mi padre y yo compartimos un nuevo idioma a través de flashcards.","KOMVitrineGlossaryFriendsLinkText":"Enseñando idiomas a los amigos","KOMVitrineGlossaryFriendsBlurbText":"Cómo utilicé Kommit colaborativamente para intercambiar idiomas con amigos.","KOMVitrineGlossaryPortugueseLinkText":"Aprendiendo portugués","KOMVitrineGlossaryPortugueseBlurbText":"Errores y otros momentos en el camino.","KOMVitrineGlossaryInfiniteHeadingText":"Juego infinito de lenguaje","KOMFeatureListArray":[["Practicar oralmente.","El texto a voz convierte el texto en audio."],["Escúcha a ti mismo o un amigo.","Grabar cortos fragmentos de audio."],["Manténgate organizado.","Etiqueten los tarjetas."],["Trabajar juntos.","Tú escribes el anverso, alguien el reverso."]],"KOMReviewCreatePromptText":"Nombre","KOMReviewLauncherItemExportSelectedJSONText":"Exportar mazo seleccionado JSON (beta)","KOMReviewLauncherItemExportSelectedTXTText":"Exportar mazo seleccionado como texto","KOMReviewLauncherItemSelectDeckTextFormat":"Escoger mazo '%@'","KOMReviewLauncherItemToggleExtraResponseButtonsText":"Alternar botones de respuesta adicionales","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewTitle":"Kommit","KOMReviewTodayHeadingText":"Hoy","KOMReviewTodayTotalCardsLabelText":"Total de tarjetas","KOMReviewTodayTimeMinutesLabelText":"Tiempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exactitud de revisión %","KOMReviewStatsHeadingText":"Estadísticas","KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"nuevas","KOMReviewMasterToolbarTitleText":"Mazos","KOMReviewMasterCreateButtonText":"Crear mazo","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar excluir punto de interrogación triple","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar cache de figuras de mazo","KOMReviewGeneralTodayText":"Hoy","KOMReviewGeneralUpcomingHeadingText":"Tarjetas a venir","KOMReviewGeneralHistoricalHeadingText":"Tiempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Colección","KOMReviewDetailLanguageCodeFieldLabelText":"Código de idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"En blanco","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Tarjetas","KOMReviewDetailGameOptionsHeadingText":"Opciones de juego","KOMReviewDetailNoCardsText":"No hay tarjetas en ese mazo","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Tocar audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Leer frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Leer atrás","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Saltar tarjetas inversas","KOMReviewDetailFormPairingIsEnabledFieldLabelText":"Sacar múltiples tarjetas","KOMReviewDetailFormRetireCardsFieldLabelText":"Jubilar tarjetas","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"núnca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"después de un mes","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"después de tres meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"después de seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"después de doce meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudiar tarjetas de revisión","KOMReviewDetailLauncherItemPlayUnseenText":"Estudiar tarjetas nuevas","KOMReviewDetailPlayButtonText":"Jugar","KOMReviewDetailNoSpacingsText":"Todas las tarjetas para hoy han sido revisados.","KOMReviewDetailDeckHeadingText":"Mazo","KOMReviewDetailRenameButtonText":"Renombrar","KOMReviewDetailRenameButtonPromptText":"Nombre","KOMReviewDetailDiscardButtonText":"Eliminar mazo y todas las tarjetas en dentro","KOMReviewDetailDiscardPromptText":"¿Est@as segur@? Por favor entra el total número de tarjetas para eliminar el mazo.","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de tarjetas","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Nuevo","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desarrollando","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Jubilada","ROCORootLinkText":"Visitar rosano.ca","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemReloadText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","OLSKRootLinkTextHome":"Regresar a la pagina de inicio","OLSKLanguageSwitcherVersionFormat":"Versión en %@ / %@","OLSKLanguageSwitcherVersionName":{"en":"Inglés","fr":"Francés","es":"Español","pt":"Portugués","de":"Alemán"},"SWARLinkText":"Hace parte del Doorless App Ring","ROCOGlossaryHeadingText":"Una nueva clase de aplicaciones","ROCOGlossaryDoorlessLinkText":"Filosofía 'doorless' (sin puerta)","ROCOGlossaryDoorlessBlurbText":"Las aplicaciones como espacios públicos no excluyentes.","ROCOGlossaryZeroDataLinkText":"Aprender más sobre applicaciónes Zero Data","ROCOGlossaryZeroDataBlurbText":"Ser dueno de tus datos, todos ellos.","ROCOGlossaryGoingWebLinkText":"Totalmente web","ROCOGlossaryGoingWebBlurbText":"Por qué dejé de hacer aplicaciones iOS después de doce años.","ROCOGlossaryAppsLinkText":"Mis otras aplicaciones","ROCOGlossaryAppsBlurbText":"Herramientas para la agencia","ROCOGazetteHeadingText":"Sigue mi viaje","OLSKWordingConfirmText":"¿Est@as segur@?","OLSKWordingOpenApp":"Abrir app","OLSKWordingFeatures":"Características","OLSKWordingOpenGuide":"Ver la guía","OLSKWordingDeeperHeading":"Profundizar más","OLSKWordingVideo":"Video","OLSKWordingTestimonials":"Recomendaciones","OLSKWordingFeedbackHeading":"Feedback","OLSKWordingFeedbackBlurb":"Desde dentro de la aplicación, toca el botón ℹ︎, y después elegir \"Enviar feedback\".","OLSKWordingTypeToSearch":"Escribir para buscar","OLSKWordingTypeToFilter":"Escribir para filtrar","OLSKWordingCancelText":"Cancelar","OLSKWordingSubmitText":"Enviar","OLSKWordingDownloadText":"Descargar","OLSKWordingEditText":"Editar","OLSKWordingDebugObjectText":"Depurar este objeto","OLSKWebViewWindowButtonText":"Abrir en una nueva ventana","OLSKTransportLauncherItemImportJSONText":"Importar JSON (beta)","OLSKTransportLauncherItemImportJSONErrorNotFilledAlertText":"Entrada no cargada","OLSKTransportLauncherItemImportJSONErrorNotValidAlertText":"Entrada no valida","OLSKTransportLauncherItemExportJSONText":"Exportar JSON (beta)","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. ¿Te gustaría hacer esto ahora?","OLSKReloadButtonText":"Recargar","OLSKPlaceholderText":"Ningún artículo seleccionado","OLSKNarrowFilterFieldText":"Filtrar","OLSKModalViewCloseButtonText":"OK","OLSKInstallAlertHeadingText":"Instalar en tu dispositivo","OLSKInstallAlertBlurbHTMLFormat":"Toca <em>Compartir</em> %$1@, y después <em>Adicionar a la Tela de Inicio</em> %$2@","OLSKInstallAlertDismissButtonText":"Descartar","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKFollowTextFormat":"Encuentre-me en %$1@ o %$2@.","OLSKEditText":"Editar eso","OLSKCloudRenewButtonText":"Renovar","OLSKCloudStatusSyncStartButtonText":"Sincronizar","OLSKCloudStatusSyncStopButtonText":"Parar","OLSKCloudStatusDisconnectButtonText":"Desconectar","OLSKCloudStatusDisconnectConfirmText":"¿Estás segur@?","OLSKCloudFormConnectButtonText":"Conectar","OLSKCloudFormRegisterLinkText":"Conseguir almacenamiento","OLSKCatalogMasterPlaceholderText":"Pulse + para crear un artículo.","OLSKCatalogStashPlaceholderTextFormat":"Artículo seleccionados: %@","OLSKAproposHeadingText":"Sobre","OLSKAproposFeedbackButtonText":"Enviar feedback","OLSKAproposShareButtonText":"Decirlo a un amig@","OLSKAppToolbarCloudStatusOnline":"En líneo","OLSKAppToolbarCloudStatusOffline":"Sin conexión","OLSKAppToolbarCloudStatusError":"Error","OLSKAppToolbarAproposButtonText":"Más información","OLSKAppToolbarLanguageButtonText":"Lenguaje","OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarClubButtonText":"Membresía","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarCloudButtonText":"Almacenamiento","OLSKAppFeatureListArray":[["Accesible en cualquier lugar.","Foncione en dispositivos mobiles, tabletas y computadoras."],["Sin Wi-Fi, sin problema.","Foncione offline sin acesso al internet."],["Tus dados en todos tus dispositivos.","Sincronizar al nube automáticamente con remoteStorage o Fission."],["Flujo de trabajo eficiente.","Atajos de teclado para la mayoría de las cosas."],["Mueve los datos libremente.","Importar y exportar datos JSON (beta)"],["Blind-friendly.","Etiquetas de texto en todos los elementos."],["Privado, no creepy.","No hay análisis de comportamiento ni rastreadores inter-sitios."],["Ser dueno de tus datos.","100% tuyo en una aplicación <a href=\"https://0data.app\">Zero Data</a>."]],"OLSKAppFeatureOpenSourceNameText":"Código aberto.","OLSKAppFeatureOpenSourceBlurbFormat":"El código es <a href=\"%@\">público</a> para leer e modificar."},"en":{"KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Practice","KOMPlayResponseButtonNextText":"Next","KOMBrowseCreateButtonText":"Create","KOMBrowseCloseButtonText":"Close","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseLauncherItemImportCardsFromSSVText":"Import cards from text","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the total number of retired cards.","KOMBrowseListItemRetiredText":"[retired]","KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'","KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser","KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card","KOMVitrineTitle":"Kommit","KOMVitrineDescription":"Augment your memory.","OLSKLandingBlurbText":"Create flashcards and learn them with spaced-repetition.","KOMVitrineVideo1HeadingText":"How to make a language deck","KOMVitrineGlossaryHeadingText":"My linguistic journey","KOMVitrineGlossaryThaiLinkText":"Teaching myself Thai","KOMVitrineGlossaryThaiBlurbText":"Combining text-to-speech in Kommit with memory tricks to reliably remember a very different language.","KOMVitrineGlossaryFamilyLinkText":"Family language exchange","KOMVitrineGlossaryFamilyBlurbText":"My father and I sharing a new language with each other through flashcards.","KOMVitrineGlossaryFriendsLinkText":"Teaching languages to friends","KOMVitrineGlossaryFriendsBlurbText":"How I used Kommit collaboratively to exchange languages with friends.","KOMVitrineGlossaryPortugueseLinkText":"Learning Portuguese","KOMVitrineGlossaryPortugueseBlurbText":"Mistakes and other moments along the way.","KOMVitrineGlossaryInfiniteHeadingText":"Language infinite game","KOMFeatureListArray":[["Practice orally.","Text-to-speech turns your text into audio."],["Hear yourself or a friend.","Record short audio snippets."],["Stay organized.","Tag cards."],["Work together.","You write the front, they write the back."]],"KOMReviewCreatePromptText":"Name","KOMReviewLauncherItemExportSelectedJSONText":"Export selected deck JSON (beta)","KOMReviewLauncherItemExportSelectedTXTText":"Export deck as text","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleExtraResponseButtonsText":"Toggle extra response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewTitle":"Kommit","KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %","KOMReviewStatsHeadingText":"Statistics","KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new","KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching","KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection","KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified","KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormPairingIsEnabledFieldLabelText":"Draw multiple cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the total number of cards to delete the deck.","KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"New","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired","KOMGuideTitle":"Kommit Guide","KOMGuideDescription":"Documentation for project","ROCORootLinkText":"Visit rosano.ca","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemReloadText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","OLSKRootLinkTextHome":"Return to the homepage","OLSKLanguageSwitcherVersionFormat":"Version in %@ / %@","OLSKLanguageSwitcherVersionName":{"en":"English","fr":"French","es":"Spanish","pt":"Portuguese","de":"German"},"SWARLinkText":"Part of the Doorless App Ring","ROCOGlossaryHeadingText":"A new breed of apps","ROCOGlossaryDoorlessLinkText":"Doorless philosophy","ROCOGlossaryDoorlessBlurbText":"Apps as non-exclusionary public spaces.","ROCOGlossaryZeroDataLinkText":"Learn more about Zero Data apps","ROCOGlossaryZeroDataBlurbText":"Own your data, 100%","ROCOGlossaryGoingWebLinkText":"Going fully web","ROCOGlossaryGoingWebBlurbText":"Why I stopped making iOS apps after twelve years.","ROCOGlossaryAppsLinkText":"My other apps","ROCOGlossaryAppsBlurbText":"Tools for agency","ROCOGazetteHeadingText":"Follow my journey","OLSKWordingConfirmText":"Are you sure?","OLSKWordingOpenApp":"Open app","OLSKWordingFeatures":"Features","OLSKWordingOpenGuide":"See the guide","OLSKWordingDeeperHeading":"Go deeper","OLSKWordingVideo":"Video","OLSKWordingTestimonials":"Testimonials","OLSKWordingFeedbackHeading":"Feedback","OLSKWordingFeedbackBlurb":"From within the app, tap the ℹ︎ button, then select \"Send feedback\".","OLSKWordingTypeToSearch":"Type to search","OLSKWordingTypeToFilter":"Type to filter","OLSKWordingCancelText":"Cancel","OLSKWordingSubmitText":"Submit","OLSKWordingDownloadText":"Download","OLSKWordingEditText":"Edit","OLSKWordingDebugObjectText":"Debug this object","OLSKWebViewWindowButtonText":"Open in new window","OLSKTransportLauncherItemImportJSONText":"Import JSON (beta)","OLSKTransportLauncherItemImportJSONErrorNotFilledAlertText":"Input not filled","OLSKTransportLauncherItemImportJSONErrorNotValidAlertText":"Input not valid","OLSKTransportLauncherItemExportJSONText":"Export JSON (beta)","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKRemoteStorageConnectConfirmText":"Connect your cloud to continue. Would you like to do this now?","OLSKReloadButtonText":"Reload","OLSKPlaceholderText":"No item selected","OLSKNarrowFilterFieldText":"Filter","OLSKModalViewCloseButtonText":"Done","OLSKInstallAlertHeadingText":"Install on your device","OLSKInstallAlertBlurbHTMLFormat":"Tap <em>Share</em> %$1@, then <em>Add to Home Screen</em> %$2@","OLSKInstallAlertDismissButtonText":"Dismiss","OLSKInputWrapperClearButtonText":"Clear text","OLSKFollowTextFormat":"Find me on %$1@ or %$2@.","OLSKEditText":"Edit this","OLSKCloudRenewButtonText":"Renew","OLSKCloudStatusSyncStartButtonText":"Sync","OLSKCloudStatusSyncStopButtonText":"Stop","OLSKCloudStatusDisconnectButtonText":"Disconnect","OLSKCloudStatusDisconnectConfirmText":"Are you sure?","OLSKCloudFormConnectButtonText":"Connect","OLSKCloudFormRegisterLinkText":"Get a cloud","OLSKCatalogMasterPlaceholderText":"Tap + to create an item.","OLSKCatalogStashPlaceholderTextFormat":"Items selected: %@","OLSKAproposHeadingText":"About","OLSKAproposFeedbackButtonText":"Send feedback","OLSKAproposShareButtonText":"Tell a friend","OLSKAppToolbarCloudStatusOnline":"Online","OLSKAppToolbarCloudStatusOffline":"Offline","OLSKAppToolbarCloudStatusError":"Error","OLSKAppToolbarAproposButtonText":"More info","OLSKAppToolbarLanguageButtonText":"Language","OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarClubButtonText":"Membership","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarCloudButtonText":"Cloud","OLSKAppFeatureListArray":[["Accessible anywhere.","Works on mobile, tablet, and desktop devices."],["No Wi-Fi, no problem.","Works offline without internet access."],["Your data on all your devices.","Automatic cloud sync with remoteStorage or Fission."],["Efficient workflow.","Keyboard shortcuts for most things."],["Move data freely.","Import and export JSON data (beta)."],["Blind-friendly.","Text labels on all elements."],["Private, not creepy.","No behavioural analytics or cross-site trackers."],["Own your data.","100% yours in a <a href=\"https://0data.app\">Zero Data</a> app."]],"OLSKAppFeatureOpenSourceNameText":"Open-source.","OLSKAppFeatureOpenSourceBlurbFormat":"The code is <a href=\"%@\">public</a> to read and modify."},"de":{"ROCORootLinkText":"Besuchen rosano.ca","OLSKRootLinkTextHome":"Zurück zur Homepage","OLSKLanguageSwitcherVersionFormat":"Versão no %@ / %@","OLSKLanguageSwitcherVersionName":{"en":"Englisch","fr":"Französisch","es":"Spanisch","pt":"Portugiesisch","de":"Deutsch"},"ROCOGazetteHeadingText":"Folge meine Reise"},"compilation":{"/Users/rozano/Mega/lingo/kom-web/os-app/open-guide/i18n.en.yml":{"KOMGuideTitle":"Kommit Guide","KOMGuideDescription":"Documentation for project"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/i18n.en.yml":{"KOMReviewTitle":"Kommit","KOMReviewCreatePromptText":"Name","KOMReviewLauncherItemImportJSONText":"Import JSON (beta)","KOMReviewLauncherItemImportJSONErrorNotFilledAlertText":"Input not filled","KOMReviewLauncherItemImportJSONErrorNotValidAlertText":"Input not valid","KOMReviewLauncherItemExportJSONText":"Export JSON (beta)","KOMReviewLauncherItemExportSelectedJSONText":"Export selected deck JSON (beta)","KOMReviewLauncherItemSelectDeckTextFormat":"Select deck '%@'","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Toggle simplified response buttons","KOMReviewLauncherItemDebugPlungeDataText":"Plunge data","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Are you sure?"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/submodules/KOMReviewChartCompositionCollection/i18n.en.yml":{"KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total cards","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Unseen","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Developing","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Mature","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Retired"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/submodules/KOMReviewDetail/i18n.en.yml":{"KOMReviewDetailToolbarBackButtonText":"Back","KOMReviewDetailToolbarCardsButtonText":"Cards","KOMReviewDetailGameOptionsHeadingText":"Game options","KOMReviewDetailNoCardsText":"There are no cards in this deck.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Play audio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Read front","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Read back","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Skip reversed cards","KOMReviewDetailFormRetireCardsFieldLabelText":"Retire cards","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"never","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"after one month","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"after three months","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"after six months","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"after twelve months","KOMReviewDetailLauncherItemPlayReviewingText":"Study review cards","KOMReviewDetailLauncherItemPlayUnseenText":"Study new cards","KOMReviewDetailPlayButtonText":"Play","KOMReviewDetailNoSpacingsText":"All cards for today have been reviewed.","KOMReviewDetailDeckHeadingText":"Deck","KOMReviewDetailRenameButtonText":"Rename","KOMReviewDetailRenameButtonPromptText":"Name","KOMReviewDetailDiscardButtonText":"Delete deck and all cards inside","KOMReviewDetailDiscardPromptText":"Are you sure? Please type the number of cards to delete the deck."},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/submodules/KOMReviewDetailLanguageCode/i18n.en.yml":{"KOMReviewDetailLanguageCodeFieldLabelText":"Language code","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Unspecified"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/submodules/KOMReviewGeneral/i18n.en.yml":{"KOMReviewGeneralTodayText":"Today","KOMReviewGeneralUpcomingHeadingText":"Upcoming cards","KOMReviewGeneralHistoricalHeadingText":"Time (minutes)","KOMReviewGeneralCollectionHeadingText":"Collection"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/submodules/KOMReviewMaster/i18n.en.yml":{"KOMReviewMasterToolbarTitleText":"Decks","KOMReviewMasterCreateButtonText":"Create deck","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Toggle exclude triple question marks","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Toggle deck figures caching"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/submodules/KOMReviewMasterListItem/i18n.en.yml":{"KOMReviewMasterListItemReviewLabelText":"to review","KOMReviewMasterListItemUnseenLabelText":"new"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/submodules/KOMReviewStats/i18n.en.yml":{"KOMReviewStatsHeadingText":"Statistics"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/submodules/KOMReviewToday/i18n.en.yml":{"KOMReviewTodayHeadingText":"Today","KOMReviewTodayTotalCardsLabelText":"Total cards","KOMReviewTodayTimeMinutesLabelText":"Time (minutes)","KOMReviewTodayReviewAccuracyLabelText":"Review accuracy %"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-vitrine/i18n.en.yml":{"KOMVitrineTitle":"Kommit","KOMVitrineDescription":"Augment your memory.","OLSKLandingBlurbText":"Create flashcards and learn them with spaced-repetition."},"/Users/rozano/Mega/lingo/kom-web/os-app/open-vitrine/submodules/KOMFeatureList/i18n.en.yml":{"KOMFeatureListArray":[["Practice orally.","Text-to-speech turns your text into audio."],["Hear yourself or a friend.","Record short audio snippets."],["Stay organized.","Tag cards."],["Work together.","You write the front, they write the back."]]},"/Users/rozano/Mega/lingo/kom-web/os-app/sub-browse/i18n.en.yml":{"KOMBrowseCreateButtonText":"Create","KOMBrowseCloseButtonText":"Close","KOMBrowseListItemUntitledText":"Untitled","KOMBrowseLauncherItemDiscardRetiredCardsText":"Discard retired cards","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Are you sure? Please type the number of retired cards."},"/Users/rozano/Mega/lingo/kom-web/os-app/sub-browse/submodules/KOMBrowseInfo/i18n.en.yml":{"KOMBrowseInfoToolbarBackButtonText":"Back","KOMBrowseInfoToolbarDiscardButtonText":"Discard","KOMBrowseInfoDiscardConfirmText":"Are you sure?","KOMBrowseInfoToolbarTemplateButtonText":"Copy tags to new card","KOMBrowseInfoFormFrontTextFieldText":"Front text","KOMBrowseInfoFormFrontReadButtonText":"Read","KOMBrowseInfoFormRearTextFieldText":"Back text","KOMBrowseInfoFormRearReadButtonText":"Read","KOMBrowseInfoFormNotesFieldText":"Notes","KOMBrowseInfoLauncherItemToggleRetireText":"Toggle retire card","KOMBrowseInfoLauncherItemDebugText":"Debug card"},"/Users/rozano/Mega/lingo/kom-web/os-app/sub-browse/submodules/KOMBrowseInfoAudio/i18n.en.yml":{"KOMBrowseInfoAudioRecordButtonText":"Record","KOMBrowseInfoAudioRecordingAlertText":"Recording","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Clear","KOMBrowseInfoAudioNotAvailableAlertText":"Audio recording unsupported in this browser"},"/Users/rozano/Mega/lingo/kom-web/os-app/sub-browse/submodules/KOMBrowseInfoTags/i18n.en.yml":{"KOMBrowseInfoTagsInputFieldText":"New tag name","KOMBrowseInfoTagsCreateButtonText":"Create tag","KOMBrowseInfoTagsRemoveButtonTextFormat":"Remove '%@'","KOMBrowseInfoTagsSuggestButtonTextFormat":"Add '%@'"},"/Users/rozano/Mega/lingo/kom-web/os-app/sub-browse/submodules/KOMBrowseListItem/i18n.en.yml":{"KOMBrowseListItemRetiredText":"[retired]"},"/Users/rozano/Mega/lingo/kom-web/os-app/sub-play/i18n.en.yml":{"KOMPlayToolbarUndoButtonText":"Undo","KOMPlayToolbarDoneButtonText":"Done","KOMPlayHearQuestionButtonText":"Hear question","KOMPlayHearAnswerButtonText":"Hear answer","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reset","KOMPlayResponseButtonHardText":"Closer","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Farther","KOMPlayResponseButtonResetText":"Reset","KOMPlayResponseButtonNextText":"Next"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-guide/i18n.pt.yml":{"KOMGuideTitle":"Guia de Kommit","KOMGuideDescription":"Documentação do projeto"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/i18n.pt.yml":{"KOMReviewTitle":"Kommit","KOMReviewCreatePromptText":"Nome","KOMReviewLauncherItemImportJSONText":"Importar JSON (beta)","KOMReviewLauncherItemImportJSONErrorNotFilledAlertText":"Entrada não preenchida","KOMReviewLauncherItemImportJSONErrorNotValidAlertText":"Entrada não válida","KOMReviewLauncherItemExportJSONText":"Exportar JSON (beta)","KOMReviewLauncherItemExportSelectedJSONText":"Exportar baralho selecionado JSON (beta)","KOMReviewLauncherItemSelectDeckTextFormat":"Selecione o baralho '%@'.","KOMReviewLauncherItemToggleSimplifiedResponseButtonsText":"Botões de resposta simplificados","KOMReviewLauncherItemDebugPlungeDataText":"Jugar dados","KOMReviewLauncherItemDebugPlungeDataConfirmText":"Você tem certeza?"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/submodules/KOMReviewChartCompositionCollection/i18n.pt.yml":{"KOMReviewChartCompositionCollectionTotalCardsLabelText":"Total de cartões","KOMReviewChartCompositionCollectionUnseenCardsLabelText":"Não visto","KOMReviewChartCompositionCollectionDevelopingCardsLabelText":"Desenvolvendo","KOMReviewChartCompositionCollectionMatureCardsLabelText":"Maduro","KOMReviewChartCompositionCollectionRetiredCardsLabelText":"Aposentado"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/submodules/KOMReviewDetail/i18n.pt.yml":{"KOMReviewDetailToolbarBackButtonText":"Voltar","KOMReviewDetailToolbarCardsButtonText":"Cartões","KOMReviewDetailGameOptionsHeadingText":"Opções de jogo","KOMReviewDetailNoCardsText":"Não tem cartões nesse baralho.","KOMReviewDetailFormAudioIsEnabledFieldLabelText":"Reproduzir áudio","KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText":"Ler a frente","KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText":"Ler o verso","KOMReviewDetailFormIsForwardOnlyFieldLabelText":"Pular cartões invertidos","KOMReviewDetailFormRetireCardsFieldLabelText":"Aposentar cartões","KOMReviewDetailFormRetireCardsFieldOptionNeverText":"Nunca","KOMReviewDetailFormRetireCardsFieldOptionOneMonthText":"após um mês","KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText":"após três meses","KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText":"após seis meses","KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText":"após doze meses","KOMReviewDetailLauncherItemPlayReviewingText":"Estudar cartões de revisão","KOMReviewDetailLauncherItemPlayUnseenText":"Estudar novos cartões","KOMReviewDetailPlayButtonText":"Jogar","KOMReviewDetailNoSpacingsText":"Todos os cartões de hoje foram revisados.","KOMReviewDetailDeckHeadingText":"Baralho","KOMReviewDetailRenameButtonText":"Renomear","KOMReviewDetailRenameButtonPromptText":"Nome","KOMReviewDetailDiscardButtonText":"Apagar o baralho e todas as cartas dentro","KOMReviewDetailDiscardPromptText":"Você tem certeza? Por favor, digite o número de cartões para apagar o baralho."},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/submodules/KOMReviewDetailLanguageCode/i18n.pt.yml":{"KOMReviewDetailLanguageCodeFieldLabelText":"Código do idioma","KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText":"Não especificado"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/submodules/KOMReviewGeneral/i18n.pt.yml":{"KOMReviewGeneralTodayText":"Hoje","KOMReviewGeneralUpcomingHeadingText":"Próximos cartões","KOMReviewGeneralHistoricalHeadingText":"Tempo (minutos)","KOMReviewGeneralCollectionHeadingText":"Coleção"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/submodules/KOMReviewMaster/i18n.pt.yml":{"KOMReviewMasterToolbarTitleText":"Baralhos","KOMReviewMasterCreateButtonText":"Criar baralho","KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText":"Alternar a exclusão das três pontos de interrogação","KOMReviewMasterLauncherItemToggleDeckFiguresCachingText":"Alternar caching de figuras do baralho"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/submodules/KOMReviewMasterListItem/i18n.pt.yml":{"KOMReviewMasterListItemReviewLabelText":"para revisar","KOMReviewMasterListItemUnseenLabelText":"novo"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/submodules/KOMReviewStats/i18n.pt.yml":{"KOMReviewStatsHeadingText":"Estatísticas"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-review/submodules/KOMReviewToday/i18n.pt.yml":{"KOMReviewTodayHeadingText":"Hoje","KOMReviewTodayTotalCardsLabelText":"Total de cartões","KOMReviewTodayTimeMinutesLabelText":"Tempo (minutos)","KOMReviewTodayReviewAccuracyLabelText":"Exatidão da revisão %"},"/Users/rozano/Mega/lingo/kom-web/os-app/open-vitrine/i18n.pt.yml":{"KOMVitrineTitle":"Kommit","KOMVitrineDescription":"Aumentar sua memória.","OLSKLandingBlurbText":"Criar flashcards e aprender-os com repetição espaçada."},"/Users/rozano/Mega/lingo/kom-web/os-app/open-vitrine/submodules/KOMFeatureList/i18n.pt.yml":{"KOMFeatureListArray":[["Praticare oralmente.","O síntese de fala transforma seu texto em áudio."],["Ouvir a si mesmo ou a um amigo.","Gravar pequenos trechos de áudio."],["Mantener-se organizado.","Etiquetar cartões."],["Trabalhar juntos.","Você escreve a frente, alguem o verso."]]},"/Users/rozano/Mega/lingo/kom-web/os-app/sub-browse/i18n.pt.yml":{"KOMBrowseCreateButtonText":"Criar","KOMBrowseCloseButtonText":"Fechar","KOMBrowseListItemUntitledText":"Sem título","KOMBrowseLauncherItemDiscardRetiredCardsText":"Descartar cartões aposentados","KOMBrowseLauncherItemDiscardRetiredCardsPromptText":"Você tem certeza? Por favor, digite o número de cartões aposentados."},"/Users/rozano/Mega/lingo/kom-web/os-app/sub-browse/submodules/KOMBrowseInfo/i18n.pt.yml":{"KOMBrowseInfoToolbarBackButtonText":"Voltar","KOMBrowseInfoToolbarDiscardButtonText":"Descartar","KOMBrowseInfoDiscardConfirmText":"Você tem certeza?","KOMBrowseInfoToolbarTemplateButtonText":"Copiar tags para o novo cartão","KOMBrowseInfoFormFrontTextFieldText":"Texto do frente","KOMBrowseInfoFormFrontReadButtonText":"Ler","KOMBrowseInfoFormRearTextFieldText":"Texto do verso","KOMBrowseInfoFormRearReadButtonText":"Ler","KOMBrowseInfoFormNotesFieldText":"Notas","KOMBrowseInfoLauncherItemToggleRetireText":"Alternar aposentadoria do cartão","KOMBrowseInfoLauncherItemDebugText":"Debug card"},"/Users/rozano/Mega/lingo/kom-web/os-app/sub-browse/submodules/KOMBrowseInfoAudio/i18n.pt.yml":{"KOMBrowseInfoAudioRecordButtonText":"Gravar","KOMBrowseInfoAudioRecordingAlertText":"Gravando","KOMBrowseInfoAudioPlaybackButtonText":"Playback","KOMBrowseInfoAudioClearButtonText":"Zerar","KOMBrowseInfoAudioNotAvailableAlertText":"Gravação de áudio não suportada nesse navegador"},"/Users/rozano/Mega/lingo/kom-web/os-app/sub-browse/submodules/KOMBrowseInfoTags/i18n.pt.yml":{"KOMBrowseInfoTagsInputFieldText":"Nome da etiqueta nova","KOMBrowseInfoTagsCreateButtonText":"Criar etiqueta","KOMBrowseInfoTagsRemoveButtonTextFormat":"Sacar '%@'.","KOMBrowseInfoTagsSuggestButtonTextFormat":"Adicionar '%@'."},"/Users/rozano/Mega/lingo/kom-web/os-app/sub-browse/submodules/KOMBrowseListItem/i18n.pt.yml":{"KOMBrowseListItemRetiredText":"[aposentado]"},"/Users/rozano/Mega/lingo/kom-web/os-app/sub-play/i18n.pt.yml":{"KOMPlayToolbarUndoButtonText":"Desfazer","KOMPlayToolbarDoneButtonText":"OK","KOMPlayHearQuestionButtonText":"Ouvir pergunta","KOMPlayHearAnswerButtonText":"Ouvir resposta","KOMPlayFlipButtonText":"Flip","KOMPlayResponseButtonAgainText":"Reiniciar","KOMPlayResponseButtonHardText":"Mais perto","KOMPlayResponseButtonGoodText":"Normal","KOMPlayResponseButtonEasyText":"Mais longe","KOMPlayResponseButtonResetText":"Reiniciar","KOMPlayResponseButtonNextText":"Próximo"}}}[window.OLSKPublicConstants('OLSKSharedPageCurrentLanguage')]);
    	};
    }
    });

    unwrapExports(main);
    var main_1 = main.OLSKLocalized;

    var main$1 = createCommonjsModule(function (module, exports) {
    (function(global, factory) {
    	 factory(exports) ;
    }(commonjsGlobal, (function(exports) {
    	const mod = {

    		OLSKStringFormatted (inputData) {
    			if (typeof inputData !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			var substitutions = Object.values(arguments).slice(1);

    			if (!substitutions.length) {
    				return inputData;
    			}

    			var formattedString = inputData;

    			(inputData.match(/%@/g) || []).forEach(function(e, i) {
    				formattedString = formattedString.replace(e, substitutions[i]);
    			});

    			mod._OLSKStringAllMatches(/%\$(\d*)@/g, inputData).forEach(function(e) {
    				formattedString = formattedString.replace(e[0], substitutions[e[1] - 1]);
    			});

    			return formattedString;
    		},

    		_OLSKStringAllMatches (regex, string) {
    			var matches = [];

    			var match = regex.exec(string);

    			while (match != null) {
    				matches.push(match);

    				match = regex.exec(string);
    			}

    			return matches;
    		},

    		OLSKStringReplaceTokens (param1, param2) {
    			if (typeof param1 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param2 !== 'object' || param2 === null) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return Object.entries(param2).reduce(function (coll, item) {
    				return coll.replace(new RegExp(item.shift(), 'g'), item.pop());
    			}, param1);
    		},

    		OLSKStringPatch (param1, param2, param3) {
    			if (typeof param1 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param2 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param3 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (!param1.includes(param2) && !param1.includes(param3)) {
    				console.error(`source includes neither of "${ param2 }" or "${ param3 }"`);
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (param3.includes(param2)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return param1.split(param2).join(param3);
    		},

    		OLSKStringMatch (param1, param2, param3 = 'includes') {
    			if (typeof param1 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param2 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param3 !== 'undefined') {
    				if (typeof param3 !== 'string') {
    					throw new Error('OLSKErrorInputNotValid');
    				}
    			}

    			// Searching and sorting text with diacritical marks in JavaScript | Thread Engineering https://thread.engineering/2018-08-29-searching-and-sorting-text-with-diacritical-marks-in-javascript/
    			return param2.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '')[param3](param1.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, ''));
    		},

    		OLSKStringSnippet (inputData) {
    			if (typeof inputData !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return inputData.length <= 100 ? inputData : inputData.slice(0, 100).split(' ').slice(0, -1).join(' ').concat('…');
    		},

    		OLSKStringEncode (inputData) {
    			if (typeof inputData !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return mod.OLSKStringReplaceTokens(encodeURIComponent(inputData), {
    				'\\(': '%28',
    				'\\)': '%29',
    			});
    		},

    	};

    	Object.assign(exports, mod);

    	Object.defineProperty(exports, '__esModule', {
    		value: true
    	});

    })));

    {
    	exports.OLSKFormatted = exports.OLSKStringFormatted;
    }
    });

    var OLSKString = unwrapExports(main$1);
    var main_1$1 = main$1.OLSKFormatted;

    var main$2 = createCommonjsModule(function (module, exports) {
    const _require = commonjsRequire;

    const mod = {

    	OLSKSpecUIArguments (inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return inputData.map(function (e) {
    			if (e.match(/^match=/)) {
    				return e.replace(/^match=/, '-os-match=');
    			}

    			if (e.match(/^skip=/)) {
    				return e.replace(/^skip=/, '-os-skip=');
    			}

    			return e;
    		});
    	},

    	OLSKSpecUITestPaths (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!_require().OLSKDiskIsRealFolderPath(inputData)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return _require().globSync('**/ui-test-*.js', {
    			cwd: inputData,
    			absolute: true,
    		}).filter(function (e) {
    			return !e.match(_require().OLSKDiskStandardIgnorePattern());
    		});
    	},

    	OLSKSpecUITestPathsFilterFunction (inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const args = inputData.slice();

    		let include = args.filter(function (e) {
    			return e.match(/^-?-?os-match=(.+)/i)
    		}).shift();

    		if (include) {
    			args.splice(args.indexOf(include), 1);

    			include = include.match(/^-?-?os-match=(.+)/i)[1];

    			const regex = include.match(/^\/(.+)\/(.+)?$/);

    			if (regex) {
    				include = new RegExp(regex[1], regex[2]);
    			}
    		}
    		
    		let exclude = args.filter(function (e) {
    			return e.match(/^-?-?os-skip=(.+)/i)
    		}).shift();

    		if (exclude) {
    			args.splice(args.indexOf(exclude), 1);

    			exclude = exclude.match(/^-?-?os-skip=(.+)/i)[1];

    			const regex = exclude.match(/^\/(.+)\/(.+)?$/);

    			if (regex) {
    				exclude = new RegExp(regex[1], regex[2]);
    			}
    		}

    		return function (e) {
    			if (include && e.match(include)) {
    				return true;
    			}
    			
    			if (exclude && e.match(exclude)) {
    				return false;
    			}

    			if (include && !e.match(include)) {
    				return false;
    			}
    			
    			if (exclude && !e.match(exclude)) {
    				return true;
    			}
    			
    			return true;
    		};
    	},

    	OLSKSpecUISourcePaths (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!_require().OLSKDiskIsRealFolderPath(inputData)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return _require().globSync('**/+(ui-behaviour.js|*.ejs|*.md|*.html|*.hbs)', {
    			cwd: inputData,
    			absolute: true,
    		}).filter(function (e) {
    			if (e.match('__compiled')) {
    				return true;
    			}
    			
    			return !e.match(_require().OLSKDiskStandardIgnorePattern());
    		});
    	},

    	OLSKSpecMochaPaths (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof inputData.ParamPackageDirectory !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof inputData.ParamWorkingDirectory !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [
    			_require().join(inputData.ParamPackageDirectory, './node_modules/.bin/mocha'),
    			_require().join(inputData.ParamPackageDirectory, '../.bin/mocha'),
    			_require().join(inputData.ParamWorkingDirectory, './node_modules/.bin/mocha'),
    			];
    	},

    	_OLSKSpecMochaReplaceES6Import (inputData) {
    		const exportable = [];
    		
    		inputData = inputData
    			.replace(/^import \* as (\w+) from ['"]([^'"]+)['"];?/gm, 'var $1 = require("$2");')
    			// .replace(/^import (\w+) from ['"]([^'"]+)['"];?/gm, 'var {default: $1} = require("$2");')
    			.replace(/^import (\w+) from ['"]([^'"]+)['"];?/gm, 'var _$1 = require("$2"); const $1 = _$1.default || _$1')
    			.replace(/^import {([^}]+)} from ['"](.+)['"];?/gm, 'var {$1} = require("$2");')
    			.replace(/^export default /gm, 'exports.default = ')
    			.replace(/^export (const|let|var|class|function) (\w+)/gm, (match, type, name) => {
    				exportable.push(name);
    				return `${type} ${name}`;
    			})
    			.replace(/^export \{([^}]+)\}(?: from ['"]([^'"]+)['"];?)?/gm, (match, names, source) => {
    				names.split(',').filter(Boolean).forEach(name => {
    					exportable.push(name);
    				});

    				return source ? `const { ${names} } = require("${source}");` : '';
    			})
    			.replace(/^export function (\w+)/gm, 'exports.$1 = function $1');

    		exportable.forEach(name => {
    			inputData += `\nexports.${name} = ${name};`;
    		});

    		return inputData;
    	},

    	OLSKSpecMochaStandardConfiguration (inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [].concat.apply([], [
    			'--file', _require().join(__dirname, 'mocha-start.js'),
    			_require().existsSync(_require().join(process.cwd(), 'mocha-start.js')) ? ['--file', _require().join(process.cwd(), 'mocha-start.js')] : [],
    			inputData.includes('--reporter') ? [] : ['--reporter', 'min'],
    			inputData.length
    			? inputData
    			: [],
    		]);
    	},
    	
    };

    Object.assign(exports, mod);

    {
    	exports.OLSK_SPEC_UI = function () {
    		if (typeof navigator === 'undefined') {
    			return false;
    		}

    		if (typeof window !== 'undefined' && window.location.hostname === 'loc.tests') {
    			return true;
    		}

    		if (navigator.userAgent.includes('HeadlessChrome')) {
    			return true;
    		}

    		return navigator.appName === 'Zombie';
    	};
    }
    });
    var main_1$2 = main$2.OLSK_SPEC_UI;

    var main$3 = createCommonjsModule(function (module, exports) {

    const mod = {

    	OLSKRemoteStorageChangeDelegateConflictSelectRecent (inputData) {
    		if (inputData.origin !== 'conflict') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (Object.entries(inputData.oldValue).filter(function (e) {
    			if (!e[0].match('ModificationDate')) {
    				return false;
    			}

    			return e[1] > inputData.newValue[e[0]];
    		}).length) {
    			return inputData.oldValue;
    		}

    		return inputData.newValue;
    	},

    	OLSKRemoteStorageIsCollection (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof inputData.OLSKRemoteStorageCollectionName !== 'string') {
    			return false;
    		}

    		if (!inputData.OLSKRemoteStorageCollectionName.trim()) {
    			return false;
    		}

    		if (typeof inputData.OLSKRemoteStorageCollectionExports !== 'object' || inputData.OLSKRemoteStorageCollectionExports === null) {
    			return false;
    		}

    		return true;
    	},

    	_OLSKRemoteStorageIsPath (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return !!inputData.trim();
    	},

    	OLSKRemoteStorageSafeCopy (inputData) {
    		return Object.keys(inputData).reduce(function (coll, item) {
    			if (item[0] !== '$') {
    				coll[item] = inputData[item];
    			}

    			return coll
    		}, {});
    	},

    	OLSKRemoteStoragePostJSONParse (inputData) {
    		if (!inputData) {
    			return inputData;
    		}

    		if (Array.isArray(inputData)) {
    			return inputData.map(mod.OLSKRemoteStoragePostJSONParse);
    		}

    		for (const key in inputData) {
    			if (key.slice(-4) === 'Date') {
    				inputData[key] = new Date(inputData[key]);
    			} else if (Array.isArray(inputData[key])) {
    				inputData[key].map(mod.OLSKRemoteStoragePostJSONParse);
    			} else if (typeof inputData[key] === 'object') {
    				mod.OLSKRemoteStoragePostJSONParse(inputData[key]);
    			}
    		}

    		return inputData;
    	},

    	OLSKRemoteStorageQueryFunction (param1, param2, param3, param4) {
    		if (typeof param1 !== 'function' || !param1.prototype) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'object' || param2 === null || !param2.name) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param4 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return function (inputData) {
    			if (typeof inputData !== 'function') {
    				throw new Error('OLSKErrorInputNotValid');
    			}
    			const storageClient = new (param1)({
    				cache: false,
    				modules: [param2],
    			});

    			storageClient.access.claim(param2.name, 'rw');

    			storageClient.stopSync();

    			return new Promise(function (res, rej) {
    				let didReject, outputData;

    				storageClient.on('error', function (err) {
    					if (didReject) {
    						return;
    					}

    					didReject = true;
    					return rej(err);
    				});

    				storageClient.on('connected', async function () {
    					try {
    						outputData = await inputData(storageClient);
    					} catch (e) {
    						didReject = true;
    						return rej(e);
    					}

    					res(outputData);
    					
    					return storageClient.disconnect();
    				});

    				storageClient.connect(param3, param4);
    			});
    		};
    	},

    	OLSKRemoteStorageLauncherFakeItemProxy () {
    		return {
    			LCHRecipeName: 'OLSKRemoteStorageLauncherFakeItemProxy',
    			LCHRecipeCallback () {},
    		};
    	},

    	OLSKRemoteStorageLauncherItemFakeFlipConnected (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'OLSKRemoteStorageLauncherItemFakeFlipConnected',
    			LCHRecipeCallback () {
    				if (inputData.__ValueOLSKRemoteStorage) {
    					inputData._ValueOLSKRemoteStorage = inputData.__ValueOLSKRemoteStorage;
    					
    					delete inputData.__ValueOLSKRemoteStorage;

    					return inputData.OLSKRemoteStorageLauncherItemFakeFlipConnectedDidFinish();
    				}
    				inputData.__ValueOLSKRemoteStorage = inputData._ValueOLSKRemoteStorage;

    				inputData._ValueOLSKRemoteStorage = (inputData.__ValueOLSKRemoteStorage.access.scopes || []).reduce(function (coll, item) {
    					return Object.assign(coll, {
    						[item.name]: inputData.__ValueOLSKRemoteStorage[item.name],
    					});
    				}, Object.assign({}, inputData.__ValueOLSKRemoteStorage));
    				inputData._ValueOLSKRemoteStorage.connected = true;
    				inputData._ValueOLSKRemoteStorage.remote = Object.assign(inputData._ValueOLSKRemoteStorage.remote, {
    					userAddress: 'OLSK_REMOTE_STORAGE_FAKE_REMOTE_ADDRESS',
    					token: 'OLSK_REMOTE_STORAGE_FAKE_REMOTE_TOKEN',
    				});

    				inputData.OLSKRemoteStorageLauncherItemFakeFlipConnectedDidFinish();

    				if (typeof window !== 'undefined') {
    					window.FakeOLSKConnected = true;
    				}
    			},
    		};
    	},

    	OLSKRemoteStorageLauncherItemOpenLoginLink (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!params.ParamStorage.remote) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKRemoteStorageLauncherItemOpenLoginLink',
    			LCHRecipeName: params.OLSKLocalized('OLSKRemoteStorageLauncherItemOpenLoginLinkText'),
    			LCHRecipeCallback () {
    				const item = (debug.DebugWindow || window).prompt(params.OLSKLocalized('OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText'));

    				if (!item) {
    					return;
    				}

    				(debug.DebugWindow || window).location.href = item;
    				(debug.DebugWindow || window).location.reload();
    			},
    			LCHRecipeIsExcluded () {
    				return !!params.ParamStorage.connected;
    			},
    		};
    	},

    	OLSKRemoteStorageLauncherItemCopyLoginLink (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!params.ParamStorage.remote) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKRemoteStorageLauncherItemCopyLoginLink',
    			LCHRecipeName: params.OLSKLocalized('OLSKRemoteStorageLauncherItemCopyLoginLinkText'),
    			LCHRecipeCallback () {
    				return this.api.LCHCopyToClipboard(`${ (debug.DebugWindow || window).location.href }#remotestorage=${ params.ParamStorage.remote.userAddress }&access_token=${ params.ParamStorage.remote.token }`.replace(/#+/g, '#'));
    			},
    			LCHRecipeIsExcluded () {
    				return !params.ParamStorage.connected;
    			},
    		};
    	},

    	OLSKRemoteStorageLauncherItemDebugFlushData (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!params.ParamStorage.remote) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKRemoteStorageLauncherItemDebugFlushData',
    			LCHRecipeName: params.OLSKLocalized('OLSKRemoteStorageLauncherItemDebugFlushDataText'),
    			async LCHRecipeCallback () {
    				if (!(debug.DebugWindow || window).confirm(params.OLSKLocalized('OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText'))) {
    					return;
    				}

    				await Promise.all(Object.getOwnPropertyNames(params.ParamStorage).filter(function (e) {
    					return params.ParamStorage[e].__HOTFIX;
    				}).map(function (e) {
    					return params.ParamStorage[e].__HOTFIX.__OLSKRemoteStorageHotfixFlushData();
    				}));

    				return new Promise(function (res, rej) {
    					setTimeout(function() {
    						res((debug.DebugWindow || window).location.reload());
    					}, 1000);
    				});
    			},
    			LCHRecipeIsExcluded () {
    				return !params.ParamStorage.connected;
    			},
    		};
    	},

    	OLSKRemoteStorageRecipes (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamMod !== 'object' || params.ParamMod === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamSpecUI !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [
    			mod.OLSKRemoteStorageLauncherFakeItemProxy(),
    			mod.OLSKRemoteStorageLauncherItemFakeFlipConnected(params.ParamMod),
    			mod.OLSKRemoteStorageLauncherItemOpenLoginLink(params),
    			mod.OLSKRemoteStorageLauncherItemCopyLoginLink(params),
    			mod.OLSKRemoteStorageLauncherItemDebugFlushData(params),
    		].filter(function (e) {
    			if (params.ParamSpecUI) {
    				return true;
    			}

    			return !(e.LCHRecipeSignature || e.LCHRecipeName).match(/Fake/);
    		});
    	},

    };

    Object.assign(exports, mod);
    });

    var main$4 = createCommonjsModule(function (module, exports) {
    (function(global, factory) {
    	 factory(exports) ;
    }(commonjsGlobal, (function(exports) {
    	const mod = {

    		OLSKObjectSafeCopy (inputData) {
    			return Object.keys(inputData).reduce(function (coll, item) {
    				if (item[0] !== '$') {
    					coll[item] = inputData[item];
    				}

    				return coll
    			}, {});
    		},

    		OLSKObjectTrim (inputData) {
    			if (typeof inputData === 'string') {
    				return inputData.trim();
    			}

    			if (typeof inputData !== 'object' || inputData === null) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return Object.fromEntries(Object.entries(inputData).map(function (e) {
    				return e.map(function (e) {
    					if (Array.isArray(e)) {
    						return e.map(mod.OLSKObjectTrim);
    					}

    					if (e instanceof Date) {
    						return e
    					}

    					if (typeof e === 'object') {
    						return mod.OLSKObjectTrim(e);
    					}

    					if (typeof e !== 'string') {
    						return e;
    					}
    					
    					return e.trim();
    				});
    			}));
    		},

    		_OLSKObjectInferredType (inputData) {
    			if (typeof inputData !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return inputData.replace(/\w+ErrorNot/, '').toLowerCase();
    		},

    		OLSKObjectJSONSchema (inputData) {
    			if (typeof inputData !== 'object' || inputData === null) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return {
    				type: 'object',
    				properties: Object.entries(inputData).reduce(function (coll, [key, val]) {
    					coll[key] = {};

    					coll[key].type = mod._OLSKObjectInferredType([...val].shift()).replace('filled', 'string');

    					if (coll[key].type === 'date') {
    						coll[key].type = 'string';
    						coll[key].format = 'date-time';
    					}

    					return coll;
    				}, {}),
    				required: Object.entries(inputData).filter(function ([key, val]) {
    					return !val.includes('__RSOptional');
    				}).map(function ([key, val]) {
    					return key;
    				}),
    			};
    		},

    		OLSKObjectRemap (param1, param2, param3 = false) {
    			if (typeof param1 !== 'object' || param1 === null) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param2 !== 'object' || param2 === null) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param3 !== 'boolean') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return Object.entries(param2).reduce(function (coll, item) {
    				if (param3) {
    					item = item.reverse();
    				}
    				
    				return !param1[item[0]] ? coll : Object.assign(coll, {
    					[item[1]]: param1[item[0]],
    				});
    			}, {});
    		},

    		OLSKObjectPostJSONParse (inputData) {
    			if (!inputData) {
    				return inputData;
    			}

    			if (Array.isArray(inputData)) {
    				return inputData.map(mod.OLSKObjectPostJSONParse);
    			}

    			for (const key in inputData) {
    				if (key.slice(-4) === 'Date') {
    					inputData[key] = new Date(inputData[key]);
    				} else if (Array.isArray(inputData[key])) {
    					inputData[key].map(mod.OLSKObjectPostJSONParse);
    				} else if (typeof inputData[key] === 'object') {
    					mod.OLSKObjectPostJSONParse(inputData[key]);
    				}
    			}

    			return inputData;
    		},
    		
    	};

    	Object.assign(exports, mod);

    	Object.defineProperty(exports, '__esModule', {
    		value: true
    	});

    })));
    });

    var OLSKObject = unwrapExports(main$4);

    var main_1$3 = createCommonjsModule(function (module, exports) {
    const main = {

    	OLSKServiceWorkerModule (param1, param2, param3, param4) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param1.addEventListener !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'object' || param2 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2.keys !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const mod = {

    			// VALUE

    			_ValueSelf: param1,
    			_ValueCaches: param2,
    			_ValueFetch: param3,
    			_ValuePersistenceCacheURLs: [],

    			// DATA

    			_DataVersionCacheName: 'OLSKServiceWorkerVersionCache-VERSION_ID_TOKEN',
    			_DataPersistenceCacheName: 'OLSKServiceWorkerPersistenceCache',
    			_DataOriginPage: 'ORIGIN_PAGE_PATH_TOKEN',

    			// CONTROL

    			async ControlClearCache () {
    				return Promise.all(
    					(await mod._ValueCaches.keys()).filter(function (e) {
    						return e !== mod._DataPersistenceCacheName;
    					}).map(function (e) {
    						return mod._ValueCaches.delete(e);
    					})
    				);
    			},

    			ControlAddPersistenceCacheURL (inputData) {
    				if (typeof inputData !== 'string') {
    					throw new Error('OLSKErrorInputNotValid');
    				}

    				if (mod._ValuePersistenceCacheURLs.includes(inputData)) {
    					return;
    				}

    				mod._ValuePersistenceCacheURLs.push(inputData);
    			},

    			// MESSAGE

    			OLSKServiceWorkerDidActivate (event) {
    				event.waitUntil(mod.ControlClearCache());
    			},

    			async OLSKServiceWorkerDidFetch (event) {
    				if (event.request.method !== 'GET') {
    					return;
    				}

    				if (event.request.url.match('sw.js')) {
    					return;
    				}

    				if (event.request.mode === 'cors' && !mod._ValuePersistenceCacheURLs.includes(event.request.url)) {
    					return;
    				}

    				if (event.request.mode === 'navigate' && !event.request.url.includes(mod._DataOriginPage)) {
    					return;
    				}

    				if (event.request.mode !== 'navigate' && !event.request.referrer.includes(mod._DataOriginPage)) {
    					return;
    				}

    				// if (!(event.request.referrer.match(/ORIGIN_PAGE_PATH_TOKEN/) && event.request.mode === 'no-cors') && !event.request.url.match(/ORIGIN_PAGE_PATH_TOKEN/)) {
    				// 	return console.log('ignoring referrer', event.request);
    				// };

    				return event.respondWith(async function() {
    					const cacheResponse = await mod._ValueCaches.match(event.request);

    					if (cacheResponse) {
    						return cacheResponse;
    					}

    					const networkResponse = param4 ? await fetch(event.request) : await mod._ValueFetch(event.request);

    					if (networkResponse.status === 200) {
    						(await mod._ValueCaches.open(mod._ValuePersistenceCacheURLs.includes(event.request.url) ? mod._DataPersistenceCacheName : mod._DataVersionCacheName)).put(event.request, networkResponse.clone());
    					}

    					return networkResponse;
    				}());
    			},

    			async OLSKServiceWorkerDidReceiveMessage (event) {
    				const OLSKMessageSignature = event.data.OLSKMessageSignature || event.data;

    				if (typeof OLSKMessageSignature !== 'string') {
    					return;
    				}

    				if (!OLSKMessageSignature.startsWith('OLSKServiceWorker_')) {
    					return;
    				}

    				return event.source.postMessage({
    					OLSKMessageSignature,
    					OLSKMessageArguments: event.data.OLSKMessageArguments,
    					OLSKMessageResponse: await mod[OLSKMessageSignature](...[].concat(event.data.OLSKMessageArguments || [])),
    				});
    			},

    			OLSKServiceWorker_ClearVersionCache () {
    				return mod.ControlClearCache();
    			},

    			OLSKServiceWorker_SkipWaiting () {
    				return mod._ValueSelf.skipWaiting();
    			},

    			OLSKServiceWorker_AddPersistenceCacheURL (inputData) {
    				return mod.ControlAddPersistenceCacheURL(inputData);
    			},
    		
    		};
    		
    		return mod;
    	},

    	OLSKServiceWorkerInitialization (param1, param2) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param1.addEventListener !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'object' || param2 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2.OLSKServiceWorkerDidReceiveMessage !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		param1.addEventListener('activate', param2.OLSKServiceWorkerDidActivate);
    		param1.addEventListener('fetch', param2.OLSKServiceWorkerDidFetch);
    		param1.addEventListener('message', param2.OLSKServiceWorkerDidReceiveMessage);
    	},

    	OLSKServiceWorkerViewTemplate () {
    		return `(function() {
			const mod = (function ${ main.OLSKServiceWorkerModule.toString() })(self, caches, fetch, true);

			(function ${ main.OLSKServiceWorkerInitialization.toString() })(self, mod);
		})();`;
    	},

    	OLSKServiceWorkerView (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof inputData.VERSION_ID_TOKEN !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!inputData.VERSION_ID_TOKEN) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (inputData.VERSION_ID_TOKEN.match(/\s/)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof inputData.ORIGIN_PAGE_PATH_TOKEN !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!inputData.ORIGIN_PAGE_PATH_TOKEN) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return main.OLSKServiceWorkerViewTemplate()
    			.split('VERSION_ID_TOKEN').join(inputData.VERSION_ID_TOKEN)
    			.split('ORIGIN_PAGE_PATH_TOKEN').join(inputData.ORIGIN_PAGE_PATH_TOKEN);
    	},

    	OLSKServiceWorkerLauncherFakeItemProxy () {
    		return {
    			LCHRecipeName: 'OLSKServiceWorkerLauncherFakeItemProxy',
    			LCHRecipeCallback () {},
    		};
    	},

    	OLSKServiceWorkerLauncherItemReload (param1, OLSKLocalized) {
    		if (!param1.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKServiceWorkerLauncherItemReload',
    			LCHRecipeName: OLSKLocalized('OLSKServiceWorkerLauncherItemReloadText'),
    			LCHRecipeCallback () {
    				return param1.location.reload();
    			},
    		};
    	},

    	OLSKServiceWorkerLauncherItemDebugForceUpdate (param1, param2, OLSKLocalized) {
    		if (!param1.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!param2.serviceWorker) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKServiceWorkerLauncherItemDebugForceUpdate',
    			LCHRecipeName: OLSKLocalized('OLSKServiceWorkerLauncherItemDebugForceUpdateText'),
    			async LCHRecipeCallback () {
    				const item = await param2.serviceWorker.getRegistration();

    				if (item.waiting) {
    					return item.waiting.postMessage('OLSKServiceWorker_SkipWaiting');
    				}

    				param2.serviceWorker.controller.postMessage('OLSKServiceWorker_ClearVersionCache');

    				param1.location.reload();
    			},
    		};
    	},

    	OLSKServiceWorkerRecipes (param1, param2, param3, param4) {
    		if (!param1.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (!param2.serviceWorker) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param4 !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [
    			main.OLSKServiceWorkerLauncherFakeItemProxy(),
    			main.OLSKServiceWorkerLauncherItemReload(param1, param3),
    			main.OLSKServiceWorkerLauncherItemDebugForceUpdate(param1, param2, param3),
    		].filter(function (e) {
    			if (param4) {
    				return true;
    			}

    			return !(e.LCHRecipeSignature || e.LCHRecipeName).match(/Fake/);
    		});
    	},
    	
    };

    Object.assign(exports, main);
    });

    var remotestorage = createCommonjsModule(function (module, exports) {
    if (typeof fetch === 'undefined') { commonjsGlobal.fetch = function () {}; }/*!  remotestorage.js 2.0.0-beta.6, https://remotestorage.io, MIT licensed */
    !function(e,t){module.exports=t();}(commonjsGlobal,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n});},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=18)}([function(e,t,r){(function(e,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e));}catch(e){i(e);}}function a(e){try{u(n.throw(e));}catch(e){i(e);}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t);}))).then(s,a);}u((n=n.apply(e,t||[])).next());}))};Object.defineProperty(t,"__esModule",{value:!0}),t.applyMixins=t.generateCodeVerifier=t.toBase64=t.getTextFromArrayBuffer=t.shouldBeTreatedAsBinary=t.getJSONFromLocalStorage=t.localStorageAvailable=t.pathsFromRoot=t.deepClone=t.equal=t.bindAll=t.cleanPath=t.baseName=t.isDocument=t.isFolder=t.containingFolder=t.extend=t.getGlobalContext=t.globalContext=t.logError=void 0;t.logError=e=>{"string"==typeof e?console.error(e):console.error(e.message,e.stack);},t.globalContext="undefined"!=typeof window?window:"object"==typeof self?self:e;t.getGlobalContext=()=>"undefined"!=typeof window?window:"object"==typeof self?self:e;t.extend=(...e)=>{const t=e[0];return Array.prototype.slice.call(e,1).forEach((function(e){for(const r in e)t[r]=e[r];})),t};t.containingFolder=e=>{if(""===e)return "/";if(!e)throw"Path not given!";return e.replace(/\/+/g,"/").replace(/[^\/]+\/?$/,"")};t.isFolder=e=>"/"===e.slice(-1);t.isDocument=e=>!(0, t.isFolder)(e);t.baseName=e=>{const r=e.split("/");return (0, t.isFolder)(e)?r[r.length-2]+"/":r[r.length-1]};t.cleanPath=e=>e.replace(/\/+/g,"/").split("/").map(encodeURIComponent).join("/").replace(/'/g,"%27");t.bindAll=e=>{for(const t in this)"function"==typeof e[t]&&(e[t]=e[t].bind(e));};t.equal=(e,r,n=[])=>{let o;if(typeof e!=typeof r)return !1;if("number"==typeof e||"boolean"==typeof e||"string"==typeof e)return e===r;if("function"==typeof e)return e.toString()===r.toString();if(e instanceof ArrayBuffer&&r instanceof ArrayBuffer&&(e=new Uint8Array(e),r=new Uint8Array(r)),e instanceof Array){if(e.length!==r.length)return !1;for(let o=0,i=e.length;o<i;o++)if(!(0, t.equal)(e[o],r[o],n))return !1}else{for(o in e)if(e.hasOwnProperty(o)&&!(o in r))return !1;for(o in r){if(!r.hasOwnProperty(o))continue;if(!(o in e))return !1;let i;if("object"==typeof r[o]){if(n.indexOf(r[o])>=0)continue;i=n.slice(),i.push(r[o]);}if(!(0, t.equal)(e[o],r[o],i))return !1}}return !0};t.deepClone=e=>{if(void 0!==e){const t=JSON.parse(JSON.stringify(e));return function e(t,r){if("object"==typeof t&&!Array.isArray(t)&&null!==t)for(const n in t)if("object"==typeof t[n]&&null!==t[n])if("[object ArrayBuffer]"===t[n].toString()){r[n]=new ArrayBuffer(t[n].byteLength);const e=new Int8Array(t[n]);new Int8Array(r[n]).set(e);}else e(t[n],r[n]);}(e,t),t}};t.pathsFromRoot=e=>{const t=[e],r=e.replace(/\/$/,"").split("/");for(;r.length>1;)r.pop(),t.push(r.join("/")+"/");return t};t.localStorageAvailable=()=>{const e=(0, t.getGlobalContext)();if(!("localStorage"in e))return !1;try{return e.localStorage.setItem("rs-check","1"),e.localStorage.removeItem("rs-check"),!0}catch(e){return !1}};t.getJSONFromLocalStorage=e=>{const r=(0, t.getGlobalContext)();try{return JSON.parse(r.localStorage.getItem(e))}catch(e){}};t.shouldBeTreatedAsBinary=(e,t)=>!!(t&&t.match(/charset=binary/)||/[\x00-\x08\x0E-\x1F\uFFFD]/.test(e));t.getTextFromArrayBuffer=(e,n)=>new Promise(o=>{if("undefined"==typeof Blob){const t=r.from(e);o(t.toString(n));}else{let r;const i=t.globalContext;if(i.BlobBuilder=i.BlobBuilder||i.WebKitBlobBuilder,void 0!==i.BlobBuilder){const t=new i.BlobBuilder;t.append(e),r=t.getBlob();}else r=new Blob([e]);const s=new FileReader;"function"==typeof s.addEventListener?s.addEventListener("loadend",(function(e){o(e.target.result);})):s.onloadend=function(e){o(e.target.result);},s.readAsText(r,n);}});t.toBase64=e=>{const n=(0, t.getGlobalContext)();return "btoa"in n?n.btoa(e):r.from(e).toString("base64")},t.generateCodeVerifier=function(e=128){return n(this,void 0,void 0,(function*(){const t=new Uint8Array(e);crypto.getRandomValues(t);const r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~",n=Array.from(t).map(e=>r[e%r.length]),o=n.join(""),i=Uint8Array.from(n.map(e=>e.charCodeAt(0))),s=yield crypto.subtle.digest("SHA-256",i),a=(u=s,btoa(String.fromCharCode.apply(null,new Uint8Array(u))).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,""));var u;crypto.getRandomValues(t);return {codeVerifier:o,codeChallenge:a,state:Array.from(t).map(e=>r[e%r.length]).join("")}}))},t.applyMixins=function(e,t){t.forEach(t=>{Object.getOwnPropertyNames(t.prototype).forEach(r=>{Object.defineProperty(e.prototype,r,Object.getOwnPropertyDescriptor(t.prototype,r));});});};}).call(this,r(6),r(20).Buffer);},function(e,t,r){const n=(this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}})(r(3));e.exports=function(...e){n.default.logging&&console.log(...e);};},function(e,t,r){const n=(this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}})(r(1));e.exports=class{addEvents(e){e.forEach(e=>this._addEvent(e));}addEventListener(e,t){if("string"!=typeof e)throw new Error("Argument eventName should be a string");if("function"!=typeof t)throw new Error("Argument handler should be a function");(0, n.default)("[EventHandling] Adding event listener",e),this._validateEvent(e),this._handlers[e].push(t);}on(e,t){return this.addEventListener(e,t)}removeEventListener(e,t){this._validateEvent(e);const r=this._handlers[e].length;for(let n=0;n<r;n++)if(this._handlers[e][n]===t)return void this._handlers[e].splice(n,1)}_emit(e,...t){this._validateEvent(e),this._handlers[e].slice().forEach(e=>{e.apply(this,t);});}_validateEvent(e){if(!(e in this._handlers))throw new Error("Unknown event: "+e)}_delegateEvent(e,t){t.on(e,t=>{this._emit(e,t);});}_addEvent(e){void 0===this._handlers&&(this._handlers={}),this._handlers[e]=[];}};},function(e,t,r){const n={cache:!0,changeEvents:{local:!0,window:!1,remote:!0,conflict:!0},cordovaRedirectUri:void 0,logging:!1,modules:[],backgroundSyncInterval:6e4,disableFeatures:[],discoveryTimeout:1e4,isBackground:!1,requestTimeout:3e4,syncInterval:1e4};e.exports=n;},function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e));}catch(e){i(e);}}function a(e){try{u(n.throw(e));}catch(e){i(e);}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t);}))).then(s,a);}u((n=n.apply(e,t||[])).next());}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const i=o(r(1)),s=r(0),a=o(r(5)),u=r(7);let c;function h(e){const t=e||l.getLocation().href,r={};for(const[e,n]of new URL(t).searchParams)r[e]=n;const n=t.indexOf("#");if(-1===n)return r;const o=t.substring(n+1);return o.includes("=")?o.split("&").reduce((function(e,t){const r=t.split("=");if("state"===r[0]&&r[1].match(/rsDiscovery/)){let t=decodeURIComponent(r[1]);const n=t.substr(t.indexOf("rsDiscovery=")).split("&")[0].split("=")[1];e.rsDiscovery=JSON.parse(atob(n)),t=t.replace(new RegExp("&?rsDiscovery="+n),""),t.length>0&&(e.state=t);}else e[decodeURIComponent(r[0])]=decodeURIComponent(r[1]);return e}),r):r}class l{static authorize(e,t){if((0, i.default)("[Authorize] authURL = ",t.authURL,"scope = ",t.scope,"redirectUri = ",t.redirectUri,"clientId = ",t.clientId,"response_type =",t.response_type),!t.scope)throw new Error("Cannot authorize due to undefined or empty scope; did you forget to access.claim()?");if(!(0, s.localStorageAvailable)()&&"remotestorage"===e.backend){t.redirectUri+=t.redirectUri.indexOf("#")>0?"&":"#";const r={userAddress:e.remote.userAddress,href:e.remote.href,storageApi:e.remote.storageApi,properties:e.remote.properties};t.redirectUri+="rsDiscovery="+(0, s.toBase64)(JSON.stringify(r));}const r=function(e){const t=new URL(e.redirectUri);e.state||(e.state=t.hash?t.hash.substring(1):""),e.response_type||(e.response_type="token");const r=new URL(e.authURL);r.searchParams.set("redirect_uri",e.redirectUri.replace(/#.*$/,"")),r.searchParams.set("scope",e.scope),r.searchParams.set("client_id",e.clientId);for(const t of["state","response_type","code_challenge","code_challenge_method","token_access_type"]){const n=e[t];n&&r.searchParams.set(t,n);}return r.href}(t);s.globalContext.cordova?l.openWindow(r,t.redirectUri,"location=yes,clearsessioncache=yes,clearcache=yes").then(t=>{e.remote.configure({token:t.access_token});}):l.setLocation(r);}static refreshAccessToken(e,t,r){var o,s,c;return n(this,void 0,void 0,(function*(){yield t.configure({token:null,tokenType:null});const e=new URLSearchParams({grant_type:"refresh_token",client_id:t.clientId,refresh_token:r}),n=yield (0, u.requestWithTimeout)("POST",t.TOKEN_URL,{headers:{"Content-Type":"application/x-www-form-urlencoded"},body:e.toString(),responseType:"json"});if(200!==(null==n?void 0:n.status))throw yield t.configure({refreshToken:null}),new a.default("refresh token rejected:"+JSON.stringify(n.response));{(0, i.default)(`[Authorize] access token good for ${null===(o=null==n?void 0:n.response)||void 0===o?void 0:o.expires_in} seconds`);const e={token:null===(s=null==n?void 0:n.response)||void 0===s?void 0:s.access_token,tokenType:null===(c=null==n?void 0:n.response)||void 0===c?void 0:c.token_type};if(!e.token)throw new Error('no access_token in "successful" refresh: '+n.response);yield t.configure(e);}}))}static setLocation(e){if("string"==typeof e)document.location.href=e;else{if("object"!=typeof e)throw"Invalid location "+e;document.location=e;}}static _rs_supported(){return "undefined"!=typeof document}static _rs_cleanup(e){e.removeEventListener("features-loaded",c);}}l.IMPLIED_FAKE_TOKEN=!1,l.getLocation=function(){return document.location},l.openWindow=function(e,t,r){return new Promise((n,o)=>{const i=open(e,"_blank",r);function s(){o("Authorization was canceled");}i&&!i.closed?(i.addEventListener("loadstart",(function(e){if(0!==e.url.indexOf(t))return;i.removeEventListener("exit",s),i.close();const r=h(e.url);r?n(r):o("Authorization error");})),i.addEventListener("exit",s)):o("Authorization popup was blocked");})},l._rs_init=function(e){const t=h();let r;t.access_token&&(r=l.getLocation(),r.hash=""),c=function(){let o=!1;if(t){if(t.error)throw"access_denied"===t.error?new a.default("Authorization failed: access denied",{code:"access_denied"}):new a.default("Authorization failed: "+t.error);t.rsDiscovery&&e.remote.configure(t.rsDiscovery),t.access_token&&(e.remote.configure({token:t.access_token}),o=!0),t.remotestorage&&(e.connect(t.remotestorage),o=!0),t.state&&(r=l.getLocation(),l.setLocation(r.href.split("#")[0]+"#"+t.state)),t.code&&(!function(t){var o,s,a,c;n(this,void 0,void 0,(function*(){const n=sessionStorage.getItem("remotestorage:codeVerifier");if(!n)return void(0, i.default)("[Authorize] Ignoring OAuth code parameter, because no PKCE code verifier found in sessionStorage");r=l.getLocation();let h=r.origin;"/"!==r.pathname&&(h+=r.pathname);const d=new URLSearchParams({code:t,grant_type:"authorization_code",client_id:e.remote.clientId,redirect_uri:h,code_verifier:n}),f=yield (0, u.requestWithTimeout)("POST",e.remote.TOKEN_URL,{headers:{"Content-Type":"application/x-www-form-urlencoded"},body:d.toString(),responseType:"json"});switch(f.status){case 200:(0, i.default)(`[Authorize] access token good for ${null===(o=null==f?void 0:f.response)||void 0===o?void 0:o.expires_in} seconds`);const t={token:null===(s=null==f?void 0:f.response)||void 0===s?void 0:s.access_token,refreshToken:null===(a=null==f?void 0:f.response)||void 0===a?void 0:a.refresh_token,tokenType:null===(c=null==f?void 0:f.response)||void 0===c?void 0:c.token_type};t.token?e.remote.configure(t):e._emit("error",new Error('no access_token in "successful" response: '+f.response)),sessionStorage.removeItem("remotestorage:codeVerifier");break;default:e._emit("error",new Error(`${f.statusText}: ${f.response}`));}}));}(t.code),o=!0),o||e.remote.stopWaitingForToken();}else e.remote.stopWaitingForToken();},e.on("features-loaded",c);},e.exports=l;},function(e,t,r){class n extends Error{constructor(e,t={}){super(),this.name="Unauthorized",this.message=void 0===e?"App authorization expired or revoked.":e,void 0!==t.code&&(this.code=t.code),this.stack=(new Error).stack;}}e.exports=n;},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")();}catch(e){"object"==typeof window&&(r=window);}e.exports=r;},function(e,t,r){(function(e){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e));}catch(e){i(e);}}function a(e){try{u(n.throw(e));}catch(e){i(e);}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t);}))).then(s,a);}u((n=n.apply(e,t||[])).next());}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.requestWithTimeout=t.isArrayBufferView=t.retryAfterMs=void 0;const i=o(r(1)),s=o(r(3));if(t.retryAfterMs=function(e){const t=1e3*parseInt(e.getResponseHeader("Retry-After"));return t>=1e3?t:Math.max(1500,Math.min(6e4,Math.round(s.default.syncInterval/(2.9+.2*Math.random()))))},"function"==typeof(e||window).ArrayBufferView)t.isArrayBufferView=function(t){return t&&t instanceof(e||window).ArrayBufferView};else{const e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];t.isArrayBufferView=function(t){for(let r=0;r<8;r++)if(t instanceof e[r])return !0;return !1};}t.requestWithTimeout=function(e,r,o){return n(this,void 0,void 0,(function*(){return "function"==typeof fetch?function(e,t,r){return n(this,void 0,void 0,(function*(){const n="function"==typeof AbortController?new AbortController:null;let o;const a=new Promise((e,t)=>{o=setTimeout(()=>{n&&n.abort(),t("timeout");},s.default.requestTimeout);});let u;const c={},h=fetch(t,{method:e,headers:r.headers,body:r.body,signal:n?n.signal:void 0}).then(e=>{switch((0, i.default)("[requests fetch]",e),e.headers.forEach((e,t)=>{c[t.toUpperCase()]=e;}),u={readyState:4,status:e.status,statusText:e.statusText,response:void 0,getResponseHeader:e=>c[e.toUpperCase()]||null,responseType:r.responseType,responseURL:t},r.responseType){case"arraybuffer":return e.arrayBuffer();case"blob":return e.blob();case"json":return e.json();case void 0:case"":case"text":return e.text();default:throw new Error("responseType 'document' is not currently supported using fetch")}}).then(e=>(u.response=e,r.responseType&&"text"!==r.responseType||(u.responseText=e),u)).finally(()=>{clearTimeout(o);});return Promise.race([h,a])}))}(e,r,o):"function"==typeof XMLHttpRequest?function(e,r,o){return n(this,void 0,void 0,(function*(){return new Promise((n,a)=>{(0, i.default)("[requests XHR]",e,r);let u=!1;const c=setTimeout(()=>{u=!0,a("timeout");},s.default.requestTimeout),h=new XMLHttpRequest;if(h.open(e,r,!0),o.responseType&&(h.responseType=o.responseType),o.headers)for(const e in o.headers)h.setRequestHeader(e,o.headers[e]);h.onload=()=>{u||(clearTimeout(c),n(h));},h.onerror=e=>{u||(clearTimeout(c),a(e));};let l=o.body;"object"==typeof l&&!(0, t.isArrayBufferView)(l)&&l instanceof ArrayBuffer&&(l=new Uint8Array(l)),h.send(l);})}))}(e,r,o):Promise.reject("[Requests] You need to add a polyfill for fetch or XMLHttpRequest")}))};}).call(this,r(6));},function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e));}catch(e){i(e);}}function a(e){try{u(n.throw(e));}catch(e){i(e);}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t);}))).then(s,a);}u((n=n.apply(e,t||[])).next());}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const i=o(r(24)),s=o(r(25)),a=o(r(26)),u=o(r(2)),c=o(r(3)),h=r(0);class l{constructor(e,t){if(this.schemas={configurable:!0,get(){return l.Types.inScope(this.moduleName)}},"/"!==t[t.length-1])throw"Not a folder: "+t;"/"===t&&(this.makePath=e=>("/"===e[0]?"":"/")+e),this.storage=e,this.base=t,this.moduleName=function(e){const t=e.split("/");return e.length>2?t[1]:"root"}(this.base),this.addEvents(["change"]),this.on=this.on.bind(this),e.onChange(this.base,this._fireChange.bind(this));}scope(e){return new l(this.storage,this.makePath(e))}getListing(e,t){return n(this,void 0,void 0,(function*(){if("string"!=typeof e)e="";else if(e.length>0&&!(0, h.isFolder)(e))return Promise.reject("Not a folder: "+e);return this.storage.get(this.makePath(e),t).then(e=>404===e.statusCode?{}:e.body)}))}getAll(e,t){return n(this,void 0,void 0,(function*(){if("string"!=typeof e)e="";else if(e.length>0&&!(0, h.isFolder)(e))return Promise.reject("Not a folder: "+e);return this.storage.get(this.makePath(e),t).then(r=>{if(404===r.statusCode)return {};if("object"==typeof r.body){const n=Object.keys(r.body);if(0===n.length)return {};const o=n.map(n=>this.storage.get(this.makePath(e+n),t).then(e=>{if("string"==typeof e.body)try{e.body=JSON.parse(e.body);}catch(e){}"object"==typeof e.body&&(r.body[n]=e.body);}));return Promise.all(o).then(()=>r.body)}})}))}getFile(e,t){return n(this,void 0,void 0,(function*(){return "string"!=typeof e?Promise.reject("Argument 'path' of baseClient.getFile must be a string"):this.storage.get(this.makePath(e),t).then(e=>({data:e.body,contentType:e.contentType,revision:e.revision}))}))}storeFile(e,t,r){return n(this,void 0,void 0,(function*(){return "string"!=typeof e?Promise.reject("Argument 'mimeType' of baseClient.storeFile must be a string"):"string"!=typeof t?Promise.reject("Argument 'path' of baseClient.storeFile must be a string"):"string"!=typeof r&&"object"!=typeof r?Promise.reject("Argument 'body' of baseClient.storeFile must be a string, ArrayBuffer, or ArrayBufferView"):(this.storage.access.checkPathPermission(this.makePath(t),"rw")||console.warn("WARNING: Editing a document to which only read access ('r') was claimed"),this.storage.put(this.makePath(t),r,e).then(e=>200===e.statusCode||201===e.statusCode?e.revision:Promise.reject("Request (PUT "+this.makePath(t)+") failed with status: "+e.statusCode)))}))}getObject(e,t){return n(this,void 0,void 0,(function*(){return "string"!=typeof e?Promise.reject("Argument 'path' of baseClient.getObject must be a string"):this.storage.get(this.makePath(e),t).then(t=>{if("object"==typeof t.body)return t.body;if("string"==typeof t.body)try{return JSON.parse(t.body)}catch(t){throw new Error("Not valid JSON: "+this.makePath(e))}else if(void 0!==t.body&&200===t.statusCode)return Promise.reject("Not an object: "+this.makePath(e))})}))}storeObject(e,t,r){return n(this,void 0,void 0,(function*(){if("string"!=typeof e)return Promise.reject("Argument 'typeAlias' of baseClient.storeObject must be a string");if("string"!=typeof t)return Promise.reject("Argument 'path' of baseClient.storeObject must be a string");if("object"!=typeof r)return Promise.reject("Argument 'object' of baseClient.storeObject must be an object");this._attachType(r,e);try{const e=this.validate(r);if(!e.valid)return Promise.reject(e)}catch(e){return Promise.reject(e)}return this.storage.put(this.makePath(t),JSON.stringify(r),"application/json; charset=UTF-8").then(e=>200===e.statusCode||201===e.statusCode?e.revision:Promise.reject("Request (PUT "+this.makePath(t)+") failed with status: "+e.statusCode))}))}remove(e){return "string"!=typeof e?Promise.reject("Argument 'path' of baseClient.remove must be a string"):(this.storage.access.checkPathPermission(this.makePath(e),"rw")||console.warn("WARNING: Removing a document to which only read access ('r') was claimed"),this.storage.delete(this.makePath(e)))}getItemURL(e){if("string"!=typeof e)throw"Argument 'path' of baseClient.getItemURL must be a string";return this.storage.connected?(e=(0, h.cleanPath)(this.makePath(e)),this.storage.remote.href+e):void 0}cache(e,t="ALL"){if("string"!=typeof e)throw"Argument 'path' of baseClient.cache must be a string";if("string"!=typeof t)throw"Argument 'strategy' of baseClient.cache must be a string or undefined";if("FLUSH"!==t&&"SEEN"!==t&&"ALL"!==t)throw'Argument \'strategy\' of baseclient.cache must be one of ["FLUSH", "SEEN", "ALL"]';return this.storage.caching.set(this.makePath(e),t),this}flush(e){return this.storage.local.flush(e)}declareType(e,t,r){let n;if(r&&"string"==typeof t)n=t;else if(r||"string"==typeof t){if(!r&&"string"==typeof t)throw new Error("declareType() requires a JSON Schema object to be passed, in order to validate object types/formats")}else r=t,n=this._defaultTypeURI(e);l.Types.declare(this.moduleName,e,n,r);}validate(e){const t=l.Types.getSchema(e["@context"]);if(t)return i.default.validateResult(e,t);throw new a.default(e["@context"])}_defaultTypeURI(e){return "http://remotestorage.io/spec/modules/"+encodeURIComponent(this.moduleName)+"/"+encodeURIComponent(e)}_attachType(e,t){e["@context"]=l.Types.resolveAlias(this.moduleName+"/"+t)||this._defaultTypeURI(t);}makePath(e){return this.base+(e||"")}_fireChange(e){c.default.changeEvents[e.origin]&&(["new","old","lastCommon"].forEach((function(t){if((!e[t+"ContentType"]||/^application\/(.*)json(.*)/.exec(e[t+"ContentType"]))&&"string"==typeof e[t+"Value"])try{e[t+"Value"]=JSON.parse(e[t+"Value"]);}catch(e){}})),this._emit("change",e));}static _rs_init(){}}l.Types=s.default,(0, h.applyMixins)(l,[u.default]),e.exports=l;},function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.RemoteBase=void 0;const o=n(r(2)),i=r(0);class s extends o.default{constructor(e){super(),this.rs=e,this.connected=!1;}stopWaitingForToken(){this.connected||this._emit("not-connected");}addQuotes(e){return "string"!=typeof e?e:"*"===e?"*":'"'+e+'"'}stripQuotes(e){return "string"!=typeof e?e:e.replace(/^["']|["']$/g,"")}isForbiddenRequestMethod(e,t){return ("PUT"===e||"DELETE"===e)&&(0, i.isFolder)(t)}}t.RemoteBase=s;},function(e,t,r){class n extends Error{constructor(e){super(),this.name="SyncError",this.message="Sync failed: ","string"==typeof e?this.message+=e:(this.message+=e.message,this.stack=e.stack,this.originalError=e);}}e.exports=n;},function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e));}catch(e){i(e);}}function a(e){try{u(n.throw(e));}catch(e){i(e);}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t);}))).then(s,a);}u((n=n.apply(e,t||[])).next());}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const i=o(r(2)),s=o(r(3)),a=o(r(1)),u=r(0);function c(e){if("object"==typeof e&&"string"==typeof e.path)if((0, u.isFolder)(e.path)){if(e.local&&e.local.itemsMap)return e.local;if(e.common&&e.common.itemsMap)return e.common}else{if(e.local){if(e.local.body&&e.local.contentType)return e.local;if(!1===e.local.body)return}if(e.common&&e.common.body&&e.common.contentType)return e.common;if(e.body&&e.contentType)return {body:e.body,contentType:e.contentType}}}function h(e,t){for(const r in e){if(e[r]&&e[r].remote)return !0;const n=c(e[r]);if(n&&n.timestamp&&(new Date).getTime()-n.timestamp<=t)return !1;if(!n)return !0}return !0}function l(e){const t={path:e,common:{}};return (0, u.isFolder)(e)&&(t.common.itemsMap={}),t}function d(e,t){return e.common||(e.common={itemsMap:{}}),e.common.itemsMap||(e.common.itemsMap={}),e.local||(e.local=(0, u.deepClone)(e.common)),e.local.itemsMap||(e.local.itemsMap=e.common.itemsMap),e.local.itemsMap[t]=!0,e}class f{constructor(){this._updateNodesRunning=!1,this._updateNodesQueued=[];}get(e,t,r){return n(this,void 0,void 0,(function*(){return "number"==typeof t?this.getNodes((0, u.pathsFromRoot)(e)).then(n=>{const o=c(n[e]);return h(n,t)?r(e):o?{statusCode:200,body:o.body||o.itemsMap,contentType:o.contentType}:{statusCode:404}}):this.getNodes([e]).then(t=>{const r=c(t[e]);if(r){if((0, u.isFolder)(e))for(const e in r.itemsMap)r.itemsMap.hasOwnProperty(e)&&!1===r.itemsMap[e]&&delete r.itemsMap[e];return {statusCode:200,body:r.body||r.itemsMap,contentType:r.contentType}}return {statusCode:404}})}))}put(e,t,r){return n(this,void 0,void 0,(function*(){const n=(0, u.pathsFromRoot)(e);return this._updateNodes(n,(function(e,n){try{for(let o=0,i=e.length;o<i;o++){const i=e[o];let s,a=n[i];if(a||(n[i]=a=l(i)),0===o)s=c(a),a.local={body:t,contentType:r,previousBody:s?s.body:void 0,previousContentType:s?s.contentType:void 0};else{a=d(a,e[o-1].substring(i.length));}}return n}catch(e){throw(0, a.default)("[Cachinglayer] Error during PUT",n,e),e}}))}))}delete(e){const t=(0, u.pathsFromRoot)(e);return this._updateNodes(t,(function(e,t){for(let r=0,n=e.length;r<n;r++){const n=e[r],o=t[n];let i;if(o)if(0===r)i=c(o),o.local={body:!1,previousBody:i?i.body:void 0,previousContentType:i?i.contentType:void 0};else{o.local||(o.local=(0, u.deepClone)(o.common));const t=e[r-1].substring(n.length);if(delete o.local.itemsMap[t],Object.getOwnPropertyNames(o.local.itemsMap).length>0)break}else console.error("Cannot delete non-existing node "+n);}return t}))}flush(e){return this._getAllDescendentPaths(e).then(e=>this.getNodes(e)).then(e=>{for(const t in e){const r=e[t];r&&r.common&&r.local&&this._emitChange({path:r.path,origin:"local",oldValue:!1===r.local.body?void 0:r.local.body,newValue:!1===r.common.body?void 0:r.common.body}),e[t]=void 0;}return this.setNodes(e)})}_emitChange(e){s.default.changeEvents[e.origin]&&this._emit("change",e);}fireInitial(){s.default.changeEvents.local&&this.forAllNodes(e=>{if((0, u.isDocument)(e.path)){const t=c(e);t&&this._emitChange({path:e.path,origin:"local",oldValue:void 0,oldContentType:void 0,newValue:t.body,newContentType:t.contentType});}}).then(()=>{this._emit("local-events-done");});}onDiff(e){this.diffHandler=e;}migrate(e){return "object"!=typeof e||e.common||(e.common={},"string"==typeof e.path?"/"===e.path.substr(-1)&&"object"==typeof e.body&&(e.common.itemsMap=e.body):(e.local||(e.local={}),e.local.body=e.body,e.local.contentType=e.contentType)),e}_updateNodes(e,t){return new Promise((r,n)=>{this._doUpdateNodes(e,t,{resolve:r,reject:n});})}_doUpdateNodes(e,t,r){this._updateNodesRunning?this._updateNodesQueued.push({paths:e,cb:t,promise:r}):(this._updateNodesRunning=!0,this.getNodes(e).then(n=>{const o=(0, u.deepClone)(n),i=[];n=t(e,n);for(const e in n){const t=n[e];(0, u.equal)(t,o[e])?delete n[e]:(0, u.isDocument)(e)&&((0, u.equal)(t.local.body,t.local.previousBody)&&t.local.contentType===t.local.previousContentType||i.push({path:e,origin:"window",oldValue:t.local.previousBody,newValue:!1===t.local.body?void 0:t.local.body,oldContentType:t.local.previousContentType,newContentType:t.local.contentType}),delete t.local.previousBody,delete t.local.previousContentType);}this.setNodes(n).then(()=>{this._emitChangeEvents(i),r.resolve({statusCode:200});});}).then(()=>Promise.resolve(),e=>{r.reject(e);}).then(()=>{this._updateNodesRunning=!1;const e=this._updateNodesQueued.shift();e&&this._doUpdateNodes(e.paths,e.cb,e.promise);}));}_emitChangeEvents(e){for(let t=0,r=e.length;t<r;t++)this._emitChange(e[t]),this.diffHandler&&this.diffHandler(e[t].path);}_getAllDescendentPaths(e){return (0, u.isFolder)(e)?this.getNodes([e]).then(t=>{const r=[e],n=c(t[e]),o=Object.keys(n.itemsMap).map(t=>this._getAllDescendentPaths(e+t).then(e=>{for(let t=0,n=e.length;t<n;t++)r.push(e[t]);}));return Promise.all(o).then(()=>r)}):Promise.resolve([e])}_getInternals(){return {getLatest:c,makeNode:l,isOutdated:h}}}(0, u.applyMixins)(f,[i.default]),e.exports=f;},function(e,t,r){e.exports=class{constructor(){this.reset();}static _rs_init(){}get scopes(){return Object.keys(this.scopeModeMap).map(e=>({name:e,mode:this.scopeModeMap[e]}))}get scopeParameter(){return this.scopes.map(e=>`${this._scopeNameForParameter(e)}:${e.mode}`).join(" ")}claim(e,t){if("string"!=typeof e||-1!==e.indexOf("/")||0===e.length)throw new Error("Scope should be a non-empty string without forward slashes");if(!t.match(/^rw?$/))throw new Error("Mode should be either 'r' or 'rw'");this._adjustRootPaths(e),this.scopeModeMap[e]=t;}get(e){return this.scopeModeMap[e]}remove(e){const t={};for(const e in this.scopeModeMap)t[e]=this.scopeModeMap[e];this.reset(),delete t[e];for(const e in t)this.claim(e,t[e]);}checkPermission(e,t){const r=this.get(e);return r&&("r"===t||"rw"===r)}checkPathPermission(e,t){if(this.checkPermission("*",t))return !0;const r=this._getModuleName(e);return !!this.checkPermission(r,t)}reset(){this.rootPaths=[],this.scopeModeMap={};}_getModuleName(e){if("/"!==e[0])throw new Error("Path should start with a slash");const t=e.replace(/^\/public/,"").match(/^\/([^/]*)\//);return t?t[1]:"*"}_adjustRootPaths(e){"*"in this.scopeModeMap||"*"===e?this.rootPaths=["/"]:e in this.scopeModeMap||(this.rootPaths.push("/"+e+"/"),this.rootPaths.push("/public/"+e+"/"));}_scopeNameForParameter(e){if("*"===e.name&&this.storageType){if("2012.04"===this.storageType)return "";if(this.storageType.match(/remotestorage-0[01]/))return "root"}return e.name}setStorageType(e){this.storageType=e;}};},function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const o=r(0),i=n(r(1));e.exports=class{constructor(){this.pendingActivations=[],this.reset();}set(e,t){if("string"!=typeof e)throw new Error("path should be a string");if(!(0, o.isFolder)(e))throw new Error("path should be a folder");if(!t.match(/^(FLUSH|SEEN|ALL)$/))throw new Error("strategy should be 'FLUSH', 'SEEN', or 'ALL'");this._rootPaths[e]=t,"ALL"===t&&(this.activateHandler?this.activateHandler(e):this.pendingActivations.push(e));}enable(e){this.set(e,"ALL");}disable(e){this.set(e,"FLUSH");}onActivate(e){(0, i.default)("[Caching] Setting activate handler",e,this.pendingActivations),this.activateHandler=e;for(let t=0;t<this.pendingActivations.length;t++)e(this.pendingActivations[t]);this.pendingActivations=[];}checkPath(e){return void 0!==this._rootPaths[e]?this._rootPaths[e]:"/"===e?"SEEN":this.checkPath((0, o.containingFolder)(e))}reset(){this._rootPaths={};}static _rs_init(){}};},function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const o=n(r(8)),i=n(r(2)),s=r(0),a=r(7),u=r(9),c="https://www.googleapis.com",h="remotestorage:googledrive";let l;function d(e){return "/"===e.substr(-1)&&(e=e.substr(0,e.length-1)),decodeURIComponent(e)}function f(e){return e.replace(/[^\/]+\/?$/,"")}function p(e){const t=e.split("/");return "/"===e.substr(-1)?t[t.length-2]+"/":t[t.length-1]}function m(e){return (0, s.cleanPath)("/remotestorage/"+e)}class g{constructor(e){this._items={},this.maxAge=e,this._items={};}get(e){const t=this._items[e],r=(new Date).getTime();return t&&t.t>=r-this.maxAge?t.v:void 0}set(e,t){this._items[e]={v:t,t:(new Date).getTime()};}}class y extends u.RemoteBase{constructor(e,t){if(super(e),this.online=!0,this.storageApi="draft-dejong-remotestorage-19",this.addEvents(["connected","not-connected"]),this.clientId=t,this._fileIdCache=new g(300),l=(0, s.localStorageAvailable)(),l){const e=(0, s.getJSONFromLocalStorage)(h);e&&this.configure(e);}}configure(e){void 0!==e.userAddress&&(this.userAddress=e.userAddress),void 0!==e.token&&(this.token=e.token);const t=function(){l&&localStorage.setItem(h,JSON.stringify({userAddress:this.userAddress,token:this.token}));},r=function(){this.connected=!1,delete this.token,l&&localStorage.removeItem(h);};this.token?(this.connected=!0,this.userAddress?(this._emit("connected"),t.apply(this)):this.info().then(e=>{this.userAddress=e.user.emailAddress,this._emit("connected"),t.apply(this);}).catch(()=>{r.apply(this),this.rs._emit("error",new Error("Could not fetch user info."));})):r.apply(this);}connect(){this.rs.setBackend("googledrive"),this.rs.authorize({authURL:"https://accounts.google.com/o/oauth2/auth",scope:"https://www.googleapis.com/auth/drive",clientId:this.clientId});}get(e,t={}){return (0, s.isFolder)(e)?this._getFolder(m(e)):this._getFile(m(e),t)}put(e,t,r,n={}){const o=m(e);function i(e){if(e.status>=200&&e.status<300){const t=JSON.parse(e.responseText),r=this.stripQuotes(t.etag);return Promise.resolve({statusCode:200,contentType:t.mimeType,revision:r})}return 412===e.status?Promise.resolve({statusCode:412,revision:"conflict"}):Promise.reject("PUT failed with status "+e.status+" ("+e.responseText+")")}return this._getFileId(o).then(e=>e?n&&"*"===n.ifNoneMatch?i({status:412}):this._updateFile(e,o,t,r,n).then(i):this._createFile(o,t,r).then(i))}delete(e,t={}){const r=m(e);return this._getFileId(r).then(e=>e?this._getMeta(e).then(r=>{let n;return "object"==typeof r&&"string"==typeof r.etag&&(n=this.stripQuotes(r.etag)),t&&t.ifMatch&&t.ifMatch!==n?{statusCode:412,revision:n}:this._request("DELETE",c+"/drive/v2/files/"+e,{}).then(e=>200===e.status||204===e.status?{statusCode:200}:Promise.reject("Delete failed: "+e.status+" ("+e.responseText+")"))}):Promise.resolve({statusCode:200}))}info(){return this._request("GET","https://www.googleapis.com/drive/v2/about?fields=user",{}).then((function(e){try{const t=JSON.parse(e.responseText);return Promise.resolve(t)}catch(e){return Promise.reject(e)}}))}_updateFile(e,t,r,n,o){const i={mimeType:n},s={"Content-Type":"application/json; charset=UTF-8"};return o&&o.ifMatch&&(s["If-Match"]=this.addQuotes(o.ifMatch)),this._request("PUT",c+"/upload/drive/v2/files/"+e+"?uploadType=resumable",{body:JSON.stringify(i),headers:s}).then(e=>412===e.status?e:this._request("PUT",e.getResponseHeader("Location"),{body:n.match(/^application\/json/)?JSON.stringify(r):r}))}_createFile(e,t,r){return this._getParentId(e).then(n=>{const o={title:d(p(e)),mimeType:r,parents:[{kind:"drive#fileLink",id:n}]};return this._request("POST",c+"/upload/drive/v2/files?uploadType=resumable",{body:JSON.stringify(o),headers:{"Content-Type":"application/json; charset=UTF-8"}}).then(e=>this._request("POST",e.getResponseHeader("Location"),{body:r.match(/^application\/json/)?JSON.stringify(t):t}))})}_getFile(e,t){return this._getFileId(e).then(e=>this._getMeta(e).then(e=>{let r;if("object"==typeof e&&"string"==typeof e.etag&&(r=this.stripQuotes(e.etag)),t&&t.ifNoneMatch&&r===t.ifNoneMatch)return Promise.resolve({statusCode:304});if(!e.downloadUrl){if(!e.exportLinks||!e.exportLinks["text/html"])return Promise.resolve({statusCode:200,body:"",contentType:e.mimeType,revision:r});e.mimeType+=";export=text/html",e.downloadUrl=e.exportLinks["text/html"];}return this._request("GET",e.downloadUrl,{responseType:"arraybuffer"}).then(t=>(0, s.getTextFromArrayBuffer)(t.response,"UTF-8").then((function(n){let o=n;if(e.mimeType.match(/^application\/json/))try{o=JSON.parse(o);}catch(e){}else(0, s.shouldBeTreatedAsBinary)(n,e.mimeType)&&(o=t.response);return {statusCode:200,body:o,contentType:e.mimeType,revision:r}})))}))}_getFolder(e){return this._getFileId(e).then(t=>{let r,n,o;if(!t)return Promise.resolve({statusCode:404});const i="'"+t+"' in parents";return this._request("GET",c+"/drive/v2/files?q="+encodeURIComponent(i)+"&fields="+encodeURIComponent("items(downloadUrl,etag,fileSize,id,mimeType,title,labels)")+"&maxResults=1000&trashed=false",{}).then(t=>{var i;if(200!==t.status)return Promise.reject("request failed or something: "+t.status);try{r=JSON.parse(t.responseText);}catch(e){return Promise.reject("non-JSON response from GoogleDrive")}o={};for(const t of r.items)(null===(i=t.labels)||void 0===i?void 0:i.trashed)||(n=this.stripQuotes(t.etag),"application/vnd.google-apps.folder"===t.mimeType?(this._fileIdCache.set(e+(0, s.cleanPath)(t.title)+"/",t.id),o[t.title+"/"]={ETag:n}):(this._fileIdCache.set(e+(0, s.cleanPath)(t.title),t.id),o[t.title]={ETag:n,"Content-Type":t.mimeType,"Content-Length":t.fileSize}));return Promise.resolve({statusCode:200,body:o,contentType:"application/json; charset=UTF-8",revision:void 0})})})}_getParentId(e){const t=f(e);return this._getFileId(t).then(e=>e?Promise.resolve(e):this._createFolder(t))}_createFolder(e){return this._getParentId(e).then(t=>this._request("POST",c+"/drive/v2/files",{body:JSON.stringify({title:d(p(e)),mimeType:"application/vnd.google-apps.folder",parents:[{id:t}]}),headers:{"Content-Type":"application/json; charset=UTF-8"}}).then(e=>{const t=JSON.parse(e.responseText);return Promise.resolve(t.id)}))}_getFileId(e){let t;return "/"===e?Promise.resolve("root"):(t=this._fileIdCache.get(e))?Promise.resolve(t):this._getFolder(f(e)).then(()=>(t=this._fileIdCache.get(e),t?Promise.resolve(t):"/"===e.substr(-1)?this._createFolder(e).then(()=>this._getFileId(e)):Promise.resolve()))}_getMeta(e){return this._request("GET",c+"/drive/v2/files/"+e,{}).then((function(t){return 200===t.status?Promise.resolve(JSON.parse(t.responseText)):Promise.reject("request (getting metadata for "+e+") failed with status: "+t.status)}))}_request(e,t,r){return this.isForbiddenRequestMethod(e,t)?Promise.reject(`Don't use ${e} on directories!`):(r.headers||(r.headers={}),r.headers.Authorization="Bearer "+this.token,this.rs._emit("wire-busy",{method:e,isFolder:(0, s.isFolder)(t)}),(0, a.requestWithTimeout)(e,t,r).then(r=>r&&401===r.status?void this.connect():(this.online||(this.online=!0,this.rs._emit("network-online")),this.rs._emit("wire-done",{method:e,isFolder:(0, s.isFolder)(t),success:!0}),Promise.resolve(r)),r=>(this.online&&(this.online=!1,this.rs._emit("network-offline")),this.rs._emit("wire-done",{method:e,isFolder:(0, s.isFolder)(t),success:!1}),Promise.reject(r))))}static _rs_init(e){const t=e.apiKeys.googledrive;var r;t&&(e.googledrive=new y(e,t.clientId),"googledrive"===e.backend&&(e._origRemote=e.remote,e.remote=e.googledrive,(r=e)._origBaseClientGetItemURL||(r._origBaseClientGetItemURL=o.default.prototype.getItemURL,o.default.prototype.getItemURL=function(){throw new Error("getItemURL is not implemented for Google Drive yet")})));}static _rs_supported(){return !0}static _rs_cleanup(e){var t;e.setBackend(void 0),e._origRemote&&(e.remote=e._origRemote,delete e._origRemote),(t=e)._origBaseClientGetItemURL&&(o.default.prototype.getItemURL=t._origBaseClientGetItemURL,delete t._origBaseClientGetItemURL);}}(0, s.applyMixins)(y,[i.default]),e.exports=y;},function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e));}catch(e){i(e);}}function a(e){try{u(n.throw(e));}catch(e){i(e);}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t);}))).then(s,a);}u((n=n.apply(e,t||[])).next());}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const i=o(r(2)),s=o(r(8)),a=o(r(27)),u=o(r(10)),c=o(r(5)),h=r(0),l=r(7),d=r(9),f=o(r(4));let p;const m="remotestorage:dropbox",g="https://api.dropboxapi.com/2/files/list_folder",y="https://api.dropboxapi.com/2/files/list_folder/continue";function v(e){return ("/remotestorage/"+e).replace(/\/+$/,"").replace(/\/+/g,"/")}const _=/[\u007f-\uffff]/g;function b(e){return JSON.stringify(e).replace(_,(function(e){return "\\u"+("000"+e.charCodeAt(0).toString(16)).slice(-4)}))}function w(e,t){return new RegExp("^"+t.join("\\/")+"(\\/|$)").test(e.error_summary)}function P(e){return e instanceof ArrayBuffer||(0, l.isArrayBufferView)(e)}class E extends d.RemoteBase{constructor(e){if(super(e),this.online=!0,this.storageApi="draft-dejong-remotestorage-19",this._initialFetchDone=!1,this.addEvents(["connected","not-connected"]),this.clientId=e.apiKeys.dropbox.appKey,this.TOKEN_URL="https://api.dropboxapi.com/oauth2/token",this._revCache=new a.default("rev"),this._fetchDeltaCursor=null,this._fetchDeltaPromise=null,this._itemRefs={},p=(0, h.localStorageAvailable)(),p){const e=(0, h.getJSONFromLocalStorage)(m);e&&this.configure(e),this._itemRefs=(0, h.getJSONFromLocalStorage)(m+":shares")||{};}this.connected&&setTimeout(this._emit.bind(this),0,"connected");}connect(){return n(this,void 0,void 0,(function*(){try{if(this.rs.setBackend("dropbox"),this.token)R(this.rs);else{const{codeVerifier:e,codeChallenge:t,state:r}=yield (0,h.generateCodeVerifier)();sessionStorage.setItem("remotestorage:codeVerifier",e),sessionStorage.setItem("remotestorage:state",r),this.rs.authorize({authURL:"https://www.dropbox.com/oauth2/authorize",scope:"account_info.read files.content.read files.content.write files.metadata.read files.metadata.write",clientId:this.clientId,response_type:"code",state:r,code_challenge:t,code_challenge_method:"S256",token_access_type:"offline"});}}catch(e){throw this.rs._emit("error",e),this.rs.setBackend(void 0),e}}))}configure(e){return n(this,void 0,void 0,(function*(){void 0!==e.userAddress&&(this.userAddress=e.userAddress),void 0!==e.token&&(this.token=e.token),void 0!==e.refreshToken&&(this.refreshToken=e.refreshToken),void 0!==e.tokenType&&(this.tokenType=e.tokenType);const t=()=>{p&&localStorage.setItem(m,JSON.stringify({userAddress:this.userAddress,token:this.token,refreshToken:this.refreshToken,tokenType:this.tokenType}));},r=()=>{this.connected=!1,p&&localStorage.removeItem(m),this.rs.setBackend(void 0);};if(this.refreshToken||this.token)if(this.connected=!0,this.userAddress)this._emit("connected"),t();else try{const e=yield this.info();this.userAddress=e.email,this._emit("connected"),t();}catch(e){this.connected=!1,this.rs._emit("error",new Error("Could not fetch user info.")),t.apply(this);}else r();}))}_getFolder(e){const t=this._revCache,r=r=>{let o;if(200!==r.status&&409!==r.status)return Promise.reject("Unexpected response status: "+r.status);try{o=JSON.parse(r.responseText);}catch(e){return Promise.reject(e)}if(409===r.status)return w(o,["path","not_found"])?Promise.resolve({}):Promise.reject(new Error("API returned an error: "+o.error_summary));const i=o.entries.reduce((r,n)=>{try{const o="folder"===n[".tag"],i=n.path_display.split("/").slice(-1)[0]+(o?"/":"");if(o)r[i]={ETag:t.get(e+i)};else{const t=new Date(n.server_modified);r[i]={ETag:n.rev,"Content-Length":n.size,"Last-Modified":t.toUTCString()},this._revCache.set(e+i,n.rev);}}catch(t){console.error(`[Dropbox] folder “${e}” has entry ${JSON.stringify(n)}:`,t);}return r},{});return o.has_more?n(o.cursor).then((function(e){return Object.assign(i,e)})):Promise.resolve(i)},n=e=>{const t={body:{cursor:e}};return this._request("POST",y,t).then(r)};return this._request("POST",g,{body:{path:v(e)}}).then(r).then((function(r){return Promise.resolve({statusCode:200,body:r,contentType:"application/json; charset=UTF-8",revision:t.get(e)})}))}get(e,t={}){if(!this.connected)return Promise.reject("not connected (path: "+e+")");const r=this._revCache.get(e);if(null===r)return Promise.resolve({statusCode:404});if(t&&t.ifNoneMatch){if(!this._initialFetchDone)return this.fetchDelta().then(()=>this.get(e,t));if(r&&r===t.ifNoneMatch)return Promise.resolve({statusCode:304})}if("/"===e.slice(-1))return this._getFolder(e);const n={headers:{"Dropbox-API-Arg":b({path:v(e)})},responseType:"arraybuffer"};return t&&t.ifNoneMatch&&(n.headers["If-None-Match"]=t.ifNoneMatch),this._request("GET","https://content.dropboxapi.com/2/files/download",n).then(t=>{const r=t.status;let n,o,i,s;return 200!==r&&409!==r?Promise.resolve({statusCode:r}):(n=t.getResponseHeader("Dropbox-API-Result"),(0, h.getTextFromArrayBuffer)(t.response,"UTF-8").then(a=>{o=a,409===r&&(n=o);try{n=JSON.parse(n);}catch(e){return Promise.reject(e)}if(409===r)return w(n,["path","not_found"])?{statusCode:404}:Promise.reject(new Error('API error while downloading file ("'+e+'"): '+n.error_summary));if(i=t.getResponseHeader("Content-Type"),s=n.rev,this._revCache.set(e,s),this._shareIfNeeded(e),(0, h.shouldBeTreatedAsBinary)(a,i))o=t.response;else try{o=JSON.parse(o),i="application/json; charset=UTF-8";}catch(e){}return {statusCode:r,body:o,contentType:i,revision:s}}))})}put(e,t,r,o={}){return n(this,void 0,void 0,(function*(){if(!this.connected)throw new Error("not connected (path: "+e+")");const n=this._revCache.get(e);if(o&&o.ifMatch&&n&&n!==o.ifMatch)return {statusCode:412,revision:n};if(o&&"*"===o.ifNoneMatch&&n&&"rev"!==n)return {statusCode:412,revision:n};if(!r.match(/charset=/)&&P(t)&&(r+="; charset=binary"),t.length>157286400)throw new Error("Cannot upload file larger than 150MB");const i=o&&(o.ifMatch||"*"===o.ifNoneMatch),s={body:t,contentType:r,path:e};if(i){const t=yield this._getMetadata(e);if(o&&"*"===o.ifNoneMatch&&t)return {statusCode:412,revision:t.rev};if(o&&o.ifMatch&&t&&t.rev!==o.ifMatch)return {statusCode:412,revision:t.rev}}const a=yield this._uploadSimple(s);return this._shareIfNeeded(e),a}))}delete(e,t={}){return n(this,void 0,void 0,(function*(){if(!this.connected)throw new Error("not connected (path: "+e+")");const r=this._revCache.get(e);if((null==t?void 0:t.ifMatch)&&r&&t.ifMatch!==r)return {statusCode:412,revision:r};if(null==t?void 0:t.ifMatch){const r=yield this._getMetadata(e);if((null==t?void 0:t.ifMatch)&&r&&r.rev!==t.ifMatch)return {statusCode:412,revision:r.rev}}return this._deleteSimple(e)}))}_shareIfNeeded(e){if(e.match(/^\/public\/.*[^/]$/)&&void 0===this._itemRefs[e])return this.share(e)}share(e){const t={body:{path:v(e)}};return this._request("POST","https://api.dropboxapi.com/2/sharing/create_shared_link_with_settings",t).then(t=>{if(200!==t.status&&409!==t.status)return Promise.reject(new Error("Invalid response status:"+t.status));let r;try{r=JSON.parse(t.responseText);}catch(e){return Promise.reject(new Error("Invalid response body: "+t.responseText))}return 409===t.status?w(r,["shared_link_already_exists"])?this._getSharedLink(e):Promise.reject(new Error("API error: "+r.error_summary)):Promise.resolve(r.url)}).then(t=>(this._itemRefs[e]=t,p&&localStorage.setItem(m+":shares",JSON.stringify(this._itemRefs)),Promise.resolve(t)),t=>(t.message='Sharing Dropbox file or folder ("'+e+'") failed: '+t.message,Promise.reject(t)))}info(){return this._request("POST","https://api.dropboxapi.com/2/users/get_current_account",{}).then((function(e){let t;try{const r=JSON.parse(e.responseText);t=null==r?void 0:r.email;}catch(t){return Promise.reject(new Error("Could not query current account info: Invalid API response: "+e.responseText))}return Promise.resolve({email:t})}))}_request(e,t,r,o=1){return n(this,void 0,void 0,(function*(){if(this.isForbiddenRequestMethod(e,t))throw`Don't use ${e} on directories!`;if(!this.token)throw new c.default("No access token");r.headers||(r.headers={}),r.headers.Authorization="Bearer "+this.token,"object"!=typeof r.body||P(r.body)||(r.body=JSON.stringify(r.body),r.headers["Content-Type"]="application/json; charset=UTF-8"),this.rs._emit("wire-busy",{method:e,isFolder:(0, h.isFolder)(t)});try{const n=yield (0,l.requestWithTimeout)(e,t,r);return this.online||(this.online=!0,this.rs._emit("network-online")),this.rs._emit("wire-done",{method:e,isFolder:(0,h.isFolder)(t),success:!0}),401===(null==n?void 0:n.status)&&this.refreshToken?o>=3?(console.error(`Abandoned after ${o} attempts: ${e} ${t}`),n):(this.rs._emit("wire-busy",{method:e,isFolder:(0,h.isFolder)(t)}),yield f.default.refreshAccessToken(this.rs,this,this.refreshToken),this.rs._emit("wire-done",{method:e,isFolder:(0,h.isFolder)(t),success:!0}),this._request(e,t,r,o+1)):[503,429].includes(null==n?void 0:n.status)?(this.online&&(this.online=!1,this.rs._emit("network-offline")),o>=3?(console.warn(`Abandoned after ${o} attempts: ${e} ${t}`),n):(yield new Promise(e=>setTimeout(e,(0,l.retryAfterMs)(n))),this._request(e,t,r,o+1))):n}catch(r){throw this.online&&(this.online=!1,this.rs._emit("network-offline")),this.rs._emit("wire-done",{method:e,isFolder:(0, h.isFolder)(t),success:!1}),r}}))}fetchDelta(...e){if(this._fetchDeltaPromise)return this._fetchDeltaPromise;const t=e=>n(this,void 0,void 0,(function*(){let r,n;"string"==typeof e?(r=y,n={cursor:e}):(r=g,n={path:"/remotestorage",recursive:!0,include_deleted:!0});try{const o=yield this._request("POST",r,{body:n});if(401===o.status)throw new c.default;if(200!==o.status&&409!==o.status)throw new Error("Invalid response status: "+o.status);let i;try{i=JSON.parse(o.responseText);}catch(e){throw new Error("Invalid response body: "+o.responseText)}if(409===o.status){if(!w(i,["path","not_found"]))throw new Error("API returned an error: "+i.error_summary);i={cursor:null,entries:[],has_more:!1};}if(e||this._revCache.deactivatePropagation(),i.entries.forEach(e=>{const t=e.path_display.slice("/remotestorage".length);"deleted"===e[".tag"]?(this._revCache.delete(t),this._revCache.delete(t+"/")):"file"===e[".tag"]&&this._revCache.set(t,e.rev);}),this._fetchDeltaCursor=i.cursor,i.has_more)return t(i.cursor);this._revCache.activatePropagation(),this._initialFetchDone=!0;}catch(e){if("timeout"===e)return;throw e}}));return this._fetchDeltaPromise=t(this._fetchDeltaCursor).catch(e=>("object"==typeof e&&"message"in e?e.message="Dropbox: fetchDelta: "+e.message:e="Dropbox: fetchDelta: "+e,this.rs._emit("error",e),this._fetchDeltaPromise=null,Promise.reject(e))).then(()=>(this._fetchDeltaPromise=null,Promise.resolve(e))),this._fetchDeltaPromise}_getMetadata(e){const t={path:v(e)};return this._request("POST","https://api.dropboxapi.com/2/files/get_metadata",{body:t}).then(e=>{if(200!==e.status&&409!==e.status)return Promise.reject(new Error("Invalid response status:"+e.status));let t;try{t=JSON.parse(e.responseText);}catch(t){return Promise.reject(new Error("Invalid response body: "+e.responseText))}return 409===e.status?w(t,["path","not_found"])?Promise.resolve():Promise.reject(new Error("API error: "+t.error_summary)):Promise.resolve(t)}).then(void 0,t=>(t.message='Could not load metadata for file or folder ("'+e+'"): '+t.message,Promise.reject(t)))}_uploadSimple(e){const t={path:v(e.path),mode:{".tag":"overwrite",update:void 0},mute:!0};return e.ifMatch&&(t.mode={".tag":"update",update:e.ifMatch}),this._request("POST","https://content.dropboxapi.com/2/files/upload",{body:e.body,headers:{"Content-Type":"application/octet-stream","Dropbox-API-Arg":b(t)}}).then(t=>{if(200!==t.status&&409!==t.status)return Promise.resolve({statusCode:t.status});let r;try{r=JSON.parse(t.responseText);}catch(e){return Promise.reject(new Error("Invalid API result: "+t.responseText))}return 409===t.status?w(r,["path","conflict"])?this._getMetadata(e.path).then((function(e){return Promise.resolve({statusCode:412,revision:e.rev})})):(this.rs._emit("error",new Error(r.error_summary)),Promise.resolve({statusCode:t.status})):(this._revCache.set(e.path,r.rev),Promise.resolve({statusCode:t.status,revision:r.rev}))})}_deleteSimple(e){const t={path:v(e)};return this._request("POST","https://api.dropboxapi.com/2/files/delete",{body:t}).then(e=>{if(200!==e.status&&409!==e.status)return Promise.resolve({statusCode:e.status});let t;try{t=JSON.parse(e.responseText);}catch(t){return Promise.reject(new Error("Invalid response body: "+e.responseText))}if(409===e.status){if(w(t,["path_lookup","not_found"]))return Promise.resolve({statusCode:404});this.rs._emit("error",new Error(t.error_summary));}return Promise.resolve({statusCode:e.status})}).then(t=>(200!==t.statusCode&&404!==t.statusCode||(this._revCache.delete(e),delete this._itemRefs[e]),Promise.resolve(t)),t=>(t.message='Could not delete Dropbox file or folder ("'+e+'"): '+t.message,Promise.reject(t)))}_getSharedLink(e){return n(this,void 0,void 0,(function*(){const t={body:{path:v(e),direct_only:!0}};return this._request("POST","https://api.dropbox.com/2/sharing/list_shared_links",t).then(e=>{if(200!==e.status&&409!==e.status)return Promise.reject(new Error("Invalid response status: "+e.status));let t;try{t=JSON.parse(e.responseText);}catch(t){return Promise.reject(new Error("Invalid response body: "+e.responseText))}return 409===e.status?Promise.reject(new Error("API error: "+(null==t?void 0:t.error_summary)||!1)):t.links.length?Promise.resolve(t.links[0].url):Promise.reject(new Error("No links returned"))},t=>(t.message='Could not get link to a shared file or folder ("'+e+'"): '+t.message,Promise.reject(t)))}))}static _rs_init(e){p=(0, h.localStorageAvailable)(),e.apiKeys.dropbox&&(e.dropbox=new E(e)),"dropbox"===e.backend&&R(e);}static _rs_supported(){return !0}static _rs_cleanup(e){!function(e){(function(e){e._origRemote&&(e.remote=e._origRemote,delete e._origRemote);})(e),function(e){if(!e._dropboxOrigSync)return;e.sync.sync=e._dropboxOrigSync,delete e._dropboxOrigSync;}(e),function(e){if(!e._origBaseClientGetItemURL)return;s.default.prototype.getItemURL=e._origBaseClientGetItemURL,delete e._origBaseClientGetItemURL;}(e),A(e);}(e),p&&localStorage.removeItem(m),e.setBackend(void 0);}}function T(e,...t){e._dropboxOrigSync||(e._dropboxOrigSync=e.sync.sync.bind(e.sync),e.sync.sync=function(){return this.dropbox.fetchDelta(e,...t).then(e._dropboxOrigSync,(function(t){e._emit("error",new u.default(t)),e._emit("sync-done");}))}.bind(e));}function A(e){e._dropboxOrigSyncCycle&&(e.syncCycle=e._dropboxOrigSyncCycle,delete e._dropboxOrigSyncCycle);}function R(e){!function(e){e._origRemote||(e._origRemote=e.remote,e.remote=e.dropbox);}(e),e.sync?T(e):function(e,...t){e._dropboxOrigSyncCycle||(e._dropboxOrigSyncCycle=e.syncCycle,e.syncCycle=()=>{if(!e.sync)throw new Error("expected sync to be initialized by now");T(e),e._dropboxOrigSyncCycle(e,...t),A(e);});}(e),function(e){e._origBaseClientGetItemURL||(e._origBaseClientGetItemURL=s.default.prototype.getItemURL,s.default.prototype.getItemURL=function(){throw new Error("getItemURL is not implemented for Dropbox yet")});}(e);}(0, h.applyMixins)(E,[i.default]),e.exports=E;},function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const o=n(r(28)),i=n(r(1)),s=r(0);let a,u;let c={};const h=function(e){return new Promise((t,r)=>{if(e in c)return t(c[e]);return new o.default({tls_only:!1,uri_fallback:!0,request_timeout:5e3}).lookup(e,(function(n,o){if(n)return r(n);if("object"!=typeof o.idx.links.remotestorage||"number"!=typeof o.idx.links.remotestorage.length||o.idx.links.remotestorage.length<=0)return (0, i.default)("[Discover] WebFinger record for "+e+" does not have remotestorage defined in the links section ",JSON.stringify(o.json)),r("WebFinger record for "+e+" does not have remotestorage defined in the links section.");const s=o.idx.links.remotestorage[0],a=s.properties["http://tools.ietf.org/html/rfc6749#section-4.2"]||s.properties["auth-endpoint"],h=s.properties["http://remotestorage.io/spec/version"]||s.type;return c[e]={href:s.href,storageApi:h,authURL:a,properties:s.properties},u&&(localStorage["remotestorage:discover"]=JSON.stringify({cache:c})),t(c[e])}))})};(h.DiscoveryError=function(e){this.name="DiscoveryError",this.message=e,this.stack=(new Error).stack;}).prototype=Object.create(Error.prototype),h.DiscoveryError.prototype.constructor=h.DiscoveryError,h._rs_init=function(){if(u=(0, s.localStorageAvailable)(),u)try{const e=JSON.parse(localStorage["remotestorage:discover"]);c=e.cache;}catch(e){}},h._rs_supported=function(){return a=Object.prototype.hasOwnProperty.call(s.globalContext,"XMLHttpRequest"),a},h._rs_cleanup=function(){u&&delete localStorage["remotestorage:discover"];},e.exports=h;},function(e,t,r){const n=(this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}})(r(2)),o=r(0);class i{constructor(){this.addEvents(["background","foreground"]),this.mode="undefined"!=typeof window?"browser":"node","browser"===this.mode&&(this.setBrowserPrefixedNames(),document.addEventListener(this.visibilityChangeEvent,this.setVisibility.bind(this),!1),this.setVisibility());}setBrowserPrefixedNames(){"browser"===this.mode&&(void 0!==document.hidden?(this.hiddenProperty="hidden",this.visibilityChangeEvent="visibilitychange"):void 0!==document.mozHidden?(this.hiddenProperty="mozHidden",this.visibilityChangeEvent="mozvisibilitychange"):void 0!==document.msHidden?(this.hiddenProperty="msHidden",this.visibilityChangeEvent="msvisibilitychange"):void 0!==document.webkitHidden&&(this.hiddenProperty="webkitHidden",this.visibilityChangeEvent="webkitvisibilitychange"));}setVisibility(){document[this.hiddenProperty]?this.goBackground():this.goForeground();}isBrowser(){return "browser"===this.mode}isNode(){return "node"===this.mode}goBackground(){this._emit("background");}goForeground(){this._emit("foreground");}static _rs_init(){}static _rs_cleanup(){}}(0, o.applyMixins)(i,[n.default]),e.exports=i;},function(e,t,r){e.exports=r(19);},function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o);}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r];}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t});}:function(e,t){e.default=t;}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const a=s(r(3)),u=s(r(1)),c=r(0),h=s(r(12)),l=s(r(4)),d=s(r(8)),f=s(r(13)),p=s(r(2)),m=s(r(14)),g=s(r(15)),y=s(r(16)),v=s(r(10)),_=s(r(5)),b=s(r(30)),w=i(r(0)),P=(0, c.getGlobalContext)();let E;function T(e){return 403!==e.statusCode&&401!==e.statusCode||this._emit("error",new _.default),Promise.resolve(e)}function A(e){return "number"==typeof e&&e>=2e3&&e<=36e5}class R{constructor(e){this._pending=[],this._cleanups=[],this._pathHandlers={change:{}},this.apiKeys={},this._init=b.default.loadFeatures,this.features=b.default.features,this.loadFeature=b.default.loadFeature,this.featureSupported=b.default.featureSupported,this.featureDone=b.default.featureDone,this.featuresDone=b.default.featuresDone,this.featuresLoaded=b.default.featuresLoaded,this.featureInitialized=b.default.featureInitialized,this.featureFailed=b.default.featureFailed,this.hasFeature=b.default.hasFeature,this._setCachingModule=b.default._setCachingModule,this._collectCleanupFunctions=b.default._collectCleanupFunctions,this._fireReady=b.default._fireReady,this.initFeature=b.default.initFeature,"object"==typeof e&&(0, c.extend)(a.default,e),this.addEvents(["ready","authing","connecting","connected","disconnected","not-connected","conflict","error","features-loaded","sync-interval-change","sync-req-done","sync-done","wire-busy","wire-done","network-offline","network-online"]),this._setGPD({get:this._pendingGPD("get"),put:this._pendingGPD("put"),delete:this._pendingGPD("delete")}),E=(0, c.localStorageAvailable)(),E&&(this.apiKeys=(0, c.getJSONFromLocalStorage)("remotestorage:api-keys")||{},this.setBackend(localStorage.getItem("remotestorage:backend")||"remotestorage"));const t=this.on;this.on=function(e,r){if(this._allLoaded)switch(e){case"features-loaded":setTimeout(r,0);break;case"ready":this.remote&&setTimeout(r,0);break;case"connected":this.remote&&this.remote.connected&&setTimeout(r,0);break;case"not-connected":this.remote&&!this.remote.connected&&setTimeout(r,0);}return t.call(this,e,r)},this._init(),this.fireInitial=function(){this.local&&setTimeout(this.local.fireInitial.bind(this.local),0);}.bind(this),this.on("ready",this.fireInitial.bind(this)),this.loadModules();}get connected(){return this.remote.connected}loadModules(){a.default.modules.forEach(this.addModule.bind(this));}authorize(e){if(this.access.setStorageType(this.remote.storageApi),void 0===e.scope&&(e.scope=this.access.scopeParameter),P.cordova)e.redirectUri=a.default.cordovaRedirectUri;else{const t=l.default.getLocation();let r=t.origin;"/"!==t.pathname&&(r+=t.pathname),e.redirectUri=r;}void 0===e.clientId&&(e.clientId=e.redirectUri.match(/^(https?:\/\/[^/]+)/)[0]),l.default.authorize(this,e);}impliedauth(e,t){e=e||this.remote.storageApi,t=t||String(document.location),(0, u.default)("ImpliedAuth proceeding due to absent authURL; storageApi = "+e+" redirectUri = "+t),this.remote.configure({token:l.default.IMPLIED_FAKE_TOKEN}),document.location.href=t;}connect(e,t){if(this.setBackend("remotestorage"),e.indexOf("@")<0&&!e.match(/^(https?:\/\/)?[^\s\/$\.?#]+\.[^\s]*$/))return void this._emit("error",new R.DiscoveryError("Not a valid user address or URL."));if(e.indexOf("@")<0&&!e.match(/^https?:\/\//)&&(e="https://"+e),P.cordova){if("string"!=typeof a.default.cordovaRedirectUri)return void this._emit("error",new R.DiscoveryError("Please supply a custom HTTPS redirect URI for your Cordova app"));if(!P.cordova.InAppBrowser)return void this._emit("error",new R.DiscoveryError("Please include the InAppBrowser Cordova plugin to enable OAuth"))}this.remote.configure({userAddress:e}),this._emit("connecting");const r=setTimeout(()=>{this._emit("error",new R.DiscoveryError("No storage information found for this user address."));},a.default.discoveryTimeout);(0, y.default)(e).then(n=>{if(clearTimeout(r),this._emit("authing"),n.userAddress=e,this.remote.configure(n),!this.remote.connected)if(n.authURL)if(void 0===t)this.authorize({authURL:n.authURL});else{if("string"!=typeof t)throw new Error("Supplied bearer token must be a string");(0, u.default)("Skipping authorization sequence and connecting with known token"),this.remote.configure({token:t});}else this.impliedauth();},()=>{clearTimeout(r),this._emit("error",new R.DiscoveryError("No storage information found for this user address."));});}reconnect(){this.remote.configure({token:null}),"remotestorage"===this.backend?this.connect(this.remote.userAddress):this.remote.connect();}disconnect(){this.remote&&this.remote.configure({userAddress:null,href:null,storageApi:null,token:null,properties:null}),this._setGPD({get:this._pendingGPD("get"),put:this._pendingGPD("put"),delete:this._pendingGPD("delete")});const e=this._cleanups.length;let t=0;const r=()=>{t++,t>=e&&(this._init(),this._emit("disconnected"));};e>0?this._cleanups.forEach(e=>{const t=e(this);"object"==typeof t&&"function"==typeof t.then?t.then(r):r();}):r();}setBackend(e){this.backend=e,E&&(e?localStorage.setItem("remotestorage:backend",e):localStorage.removeItem("remotestorage:backend"));}onChange(e,t){this._pathHandlers.change[e]||(this._pathHandlers.change[e]=[]),this._pathHandlers.change[e].push(t);}enableLog(){a.default.logging=!0;}disableLog(){a.default.logging=!1;}log(...e){u.default.apply(R,e);}setApiKeys(e){const t=[S.GOOGLE,S.DROPBOX];if("object"!=typeof e||!Object.keys(e).every(e=>t.includes(e)))return console.error("setApiKeys() was called with invalid arguments"),!1;Object.keys(e).forEach(t=>{const r=e[t];if(r){switch(t){case S.DROPBOX:this.apiKeys[S.DROPBOX]={appKey:r},void 0!==this.dropbox&&this.dropbox.clientId===r||g.default._rs_init(this);break;case S.GOOGLE:this.apiKeys[S.GOOGLE]={clientId:r},void 0!==this.googledrive&&this.googledrive.clientId===r||m.default._rs_init(this);}return !0}delete this.apiKeys[t];}),E&&localStorage.setItem("remotestorage:api-keys",JSON.stringify(this.apiKeys));}setCordovaRedirectUri(e){if("string"!=typeof e||!e.match(/http(s)?:\/\//))throw new Error("Cordova redirect URI must be a URI string");a.default.cordovaRedirectUri=e;}_setGPD(e,t){function r(e){return function(...r){return e.apply(t,r).then(T.bind(this))}}this.get=r(e.get),this.put=r(e.put),this.delete=r(e.delete);}_pendingGPD(e){return (...t)=>{const r=Array.prototype.slice.call(t);return new Promise((t,n)=>{this._pending.push({method:e,args:r,promise:{resolve:t,reject:n}});})}}_processPending(){this._pending.forEach(e=>{try{this[e.method](...e.args).then(e.promise.resolve,e.promise.reject);}catch(t){e.promise.reject(t);}}),this._pending=[];}_bindChange(e){e.on("change",this._dispatchEvent.bind(this,"change"));}_dispatchEvent(e,t){Object.keys(this._pathHandlers[e]).forEach(r=>{const n=r.length;t.path.substr(0,n)===r&&this._pathHandlers[e][r].forEach(e=>{const n={};for(const e in t)n[e]=t[e];n.relativePath=t.path.replace(new RegExp("^"+r),"");try{e(n);}catch(e){console.error("'change' handler failed: ",e,e.stack),this._emit("error",e);}});});}scope(e){if("string"!=typeof e)throw"Argument 'path' of baseClient.scope must be a string";return this.access.checkPathPermission(e,"r")||console.warn("WARNING: Please use remoteStorage.access.claim() to ask for access permissions first: https://remotestoragejs.readthedocs.io/en/latest/js-api/access.html#claim"),new d.default(this,e)}getSyncInterval(){return a.default.syncInterval}setSyncInterval(e){if(!A(e))throw e+" is not a valid sync interval";const t=a.default.syncInterval;a.default.syncInterval=e,this._emit("sync-interval-change",{oldValue:t,newValue:e});}getBackgroundSyncInterval(){return a.default.backgroundSyncInterval}setBackgroundSyncInterval(e){if(!A(e))throw e+" is not a valid sync interval";const t=a.default.backgroundSyncInterval;a.default.backgroundSyncInterval=e,this._emit("sync-interval-change",{oldValue:t,newValue:e});}getCurrentSyncInterval(){return a.default.isBackground?a.default.backgroundSyncInterval:a.default.syncInterval}getRequestTimeout(){return a.default.requestTimeout}setRequestTimeout(e){if("number"!=typeof e)throw e+" is not a valid request timeout";a.default.requestTimeout=e;}syncCycle(){this.sync&&!this.sync.stopped&&(this.on("sync-done",()=>{this.sync&&!this.sync.stopped&&(this._syncTimer&&(clearTimeout(this._syncTimer),this._syncTimer=void 0),this._syncTimer=setTimeout(this.sync.sync.bind(this.sync),this.getCurrentSyncInterval()));}),this.sync.sync());}startSync(){return a.default.cache?(this.sync.stopped=!1,this.syncStopped=!1,this.sync.sync()):(console.warn("Nothing to sync, because caching is disabled."),Promise.resolve())}stopSync(){clearTimeout(this._syncTimer),this._syncTimer=void 0,this.sync?this.sync.stopped=!0:this.syncStopped=!0;}addModule(e){const t=e.name,r=e.builder;if(Object.defineProperty(this,t,{configurable:!0,get:function(){const e=this._loadModule(t,r);return Object.defineProperty(this,t,{value:e}),e}}),-1!==t.indexOf("-")){const e=t.replace(/\-[a-z]/g,(function(e){return e[1].toUpperCase()}));Object.defineProperty(this,e,{get:function(){return this[t]}});}}_loadModule(e,t){if(t){return t(new d.default(this,"/"+e+"/"),new d.default(this,"/public/"+e+"/")).exports}throw"Unknown module: "+e}}var S;R.Authorize=l.default,R.SyncError=v.default,R.Unauthorized=_.default,R.DiscoveryError=y.default.DiscoveryError,R.util=w,Object.defineProperty(R.prototype,"access",{get:function(){const e=new h.default;return Object.defineProperty(this,"access",{value:e}),e},configurable:!0}),Object.defineProperty(R.prototype,"caching",{configurable:!0,get:function(){const e=new f.default;return Object.defineProperty(this,"caching",{value:e}),e}}),(0, c.applyMixins)(R,[p.default]),function(e){e.GOOGLE="googledrive",e.DROPBOX="dropbox";}(S||(S={})),e.exports=R;},function(e,t,r){(function(e){
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <http://feross.org>
     * @license  MIT
     */
    var n=r(21),o=r(22),i=r(23);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(s()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return l(this,e)}return c(this,e,t,r)}function c(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return "undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=d(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|p(t,r),o=(e=a(e,n)).write(t,r);o!==n&&(e=e.slice(0,o));return e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|f(t.length);return 0===(e=a(e,r)).length||t.copy(e,0,0,r),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return "number"!=typeof t.length||(n=t.length)!=n?a(e,0):d(e,t);if("Buffer"===t.type&&i(t.data))return d(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function h(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function l(e,t){if(h(t),e=a(e,t<0?0:0|f(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function d(e,t){var r=t.length<0?0:0|f(t.length);e=a(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function f(e){if(e>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|e}function p(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return B(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return q(e).length;default:if(n)return B(e).length;t=(""+t).toLowerCase(),n=!0;}}function m(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return "";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return "";if((r>>>=0)<=(t>>>=0))return "";for(e||(e="utf8");;)switch(e){case"hex":return M(this,t,r);case"utf8":case"utf-8":return R(this,t,r);case"ascii":return S(this,t,r);case"latin1":case"binary":return k(this,t,r);case"base64":return A(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0;}}function g(e,t,r){var n=e[t];e[t]=e[r],e[r]=n;}function y(e,t,r,n,o){if(0===e.length)return -1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return -1;r=e.length-1;}else if(r<0){if(!o)return -1;r=0;}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:v(e,t,r,n,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):v(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function v(e,t,r,n,o){var i,s=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return -1;s=2,a/=2,u/=2,r/=2;}function c(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(o){var h=-1;for(i=r;i<a;i++)if(c(e,i)===c(t,-1===h?0:i-h)){if(-1===h&&(h=i),i-h+1===u)return h*s}else-1!==h&&(i-=i-h),h=-1;}else for(r+u>a&&(r=a-u),i=r;i>=0;i--){for(var l=!0,d=0;d<u;d++)if(c(e,i+d)!==c(t,d)){l=!1;break}if(l)return i}return -1}function _(e,t,r,n){r=Number(r)||0;var o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var s=0;s<n;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[r+s]=a;}return s}function b(e,t,r,n){return J(B(t,e.length-r),e,r,n)}function w(e,t,r,n){return J(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function P(e,t,r,n){return w(e,t,r,n)}function E(e,t,r,n){return J(q(t),e,r,n)}function T(e,t,r,n){return J(function(e,t){for(var r,n,o,i=[],s=0;s<e.length&&!((t-=2)<0);++s)r=e.charCodeAt(s),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(t,e.length-r),e,r,n)}function A(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function R(e,t,r){r=Math.min(e.length,r);for(var n=[],o=t;o<r;){var i,s,a,u,c=e[o],h=null,l=c>239?4:c>223?3:c>191?2:1;if(o+l<=r)switch(l){case 1:c<128&&(h=c);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&c)<<6|63&i)>127&&(h=u);break;case 3:i=e[o+1],s=e[o+2],128==(192&i)&&128==(192&s)&&(u=(15&c)<<12|(63&i)<<6|63&s)>2047&&(u<55296||u>57343)&&(h=u);break;case 4:i=e[o+1],s=e[o+2],a=e[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(h=u);}null===h?(h=65533,l=1):h>65535&&(h-=65536,n.push(h>>>10&1023|55296),h=56320|1023&h),n.push(h),o+=l;}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=4096));return r}(n)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return !1}}(),t.kMaxLength=s(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return c(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,n){return h(t),t<=0?a(e,t):void 0!==r?"string"==typeof n?a(e,t).fill(r,n):a(e,t).fill(r):a(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return l(null,e)},u.allocUnsafeSlow=function(e){return l(null,e)},u.isBuffer=function(e){return !(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,o=0,i=Math.min(r,n);o<i;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return !0;default:return !1}},u.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=u.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){var s=e[r];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(n,o),o+=s.length;}return n},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)g(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?R(this,0,e):m.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,r,n,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return -1;if(t>=r)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(n>>>=0),s=(r>>>=0)-(t>>>=0),a=Math.min(i,s),c=this.slice(n,o),h=e.slice(t,r),l=0;l<a;++l)if(c[l]!==h[l]){i=c[l],s=h[l];break}return i<s?-1:s<i?1:0},u.prototype.includes=function(e,t,r){return -1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return y(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return y(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0);}var o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return _(this,e,t,r);case"utf8":case"utf-8":return b(this,e,t,r);case"ascii":return w(this,e,t,r);case"latin1":case"binary":return P(this,e,t,r);case"base64":return E(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0;}},u.prototype.toJSON=function(){return {type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function S(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function k(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function M(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=t;i<r;++i)o+=L(e[i]);return o}function O(e,t,r){for(var n=e.slice(t,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function C(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function x(e,t,r,n,o,i){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function I(e,t,r,n){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-r,2);o<i;++o)e[r+o]=(t&255<<8*(n?o:1-o))>>>8*(n?o:1-o);}function N(e,t,r,n){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-r,4);o<i;++o)e[r+o]=t>>>8*(n?o:3-o)&255;}function U(e,t,r,n,o,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function j(e,t,r,n,i){return i||U(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function F(e,t,r,n,i){return i||U(e,0,r,8),o.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;r=new u(o,void 0);for(var i=0;i<o;++i)r[i]=this[i+e];}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||C(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||C(e,t,this.length);for(var n=this[e+--t],o=1;t>0&&(o*=256);)n+=this[e+--t]*o;return n},u.prototype.readUInt8=function(e,t){return t||C(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||C(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||C(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||C(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||C(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||C(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||C(e,t,this.length);for(var n=t,o=1,i=this[e+--n];n>0&&(o*=256);)i+=this[e+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},u.prototype.readInt8=function(e,t){return t||C(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||C(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||C(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||C(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||C(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||C(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||C(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||C(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||C(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||x(this,e,t,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[t]=255&e;++i<r&&(o*=256);)this[t+i]=e/o&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||x(this,e,t,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||x(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||x(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):I(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||x(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):I(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||x(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):N(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||x(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):N(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);x(this,e,t,r,o-1,-o);}var i=0,s=1,a=0;for(this[t]=255&e;++i<r&&(s*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);x(this,e,t,r,o-1,-o);}var i=r-1,s=1,a=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||x(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||x(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):I(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||x(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):I(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||x(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):N(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||x(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):N(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return j(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return j(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return F(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return F(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var o,i=n-r;if(this===e&&r<t&&t<n)for(o=i-1;o>=0;--o)e[o+t]=this[o+r];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+i),t);return i},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o);}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{var s=u.isBuffer(e)?e:B(new u(e,n).toString()),a=s.length;for(i=0;i<r-t;++i)this[i+t]=s[i%a];}return this};var D=/[^+\/0-9A-Za-z-_]/g;function L(e){return e<16?"0"+e.toString(16):e.toString(16)}function B(e,t){var r;t=t||1/0;for(var n=e.length,o=null,i=[],s=0;s<n;++s){if((r=e.charCodeAt(s))>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320);}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;i.push(r);}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128);}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128);}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128);}}return i}function q(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(D,"")).length<2)return "";for(;e.length%4!=0;)e+="=";return e}(e))}function J(e,t,r,n){for(var o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}}).call(this,r(6));},function(e,t,r){t.byteLength=function(e){var t=c(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=c(e),s=n[0],a=n[1],u=new i(function(e,t,r){return 3*(t+r)/4-r}(0,s,a)),h=0,l=a>0?s-4:s;for(r=0;r<l;r+=4)t=o[e.charCodeAt(r)]<<18|o[e.charCodeAt(r+1)]<<12|o[e.charCodeAt(r+2)]<<6|o[e.charCodeAt(r+3)],u[h++]=t>>16&255,u[h++]=t>>8&255,u[h++]=255&t;2===a&&(t=o[e.charCodeAt(r)]<<2|o[e.charCodeAt(r+1)]>>4,u[h++]=255&t);1===a&&(t=o[e.charCodeAt(r)]<<10|o[e.charCodeAt(r+1)]<<4|o[e.charCodeAt(r+2)]>>2,u[h++]=t>>8&255,u[h++]=255&t);return u},t.fromByteArray=function(e){for(var t,r=e.length,o=r%3,i=[],s=0,a=r-o;s<a;s+=16383)i.push(h(e,s,s+16383>a?a:s+16383));1===o?(t=e[r-1],i.push(n[t>>2]+n[t<<4&63]+"==")):2===o&&(t=(e[r-2]<<8)+e[r-1],i.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return i.join("")};for(var n=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)n[a]=s[a],o[s.charCodeAt(a)]=a;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return -1===r&&(r=t),[r,r===t?0:4-r%4]}function h(e,t,r){for(var o,i,s=[],a=t;a<r;a+=3)o=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return s.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63;},function(e,t){
    /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
    t.read=function(e,t,r,n,o){var i,s,a=8*o-n-1,u=(1<<a)-1,c=u>>1,h=-7,l=r?o-1:0,d=r?-1:1,f=e[t+l];for(l+=d,i=f&(1<<-h)-1,f>>=-h,h+=a;h>0;i=256*i+e[t+l],l+=d,h-=8);for(s=i&(1<<-h)-1,i>>=-h,h+=n;h>0;s=256*s+e[t+l],l+=d,h-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(f?-1:1);s+=Math.pow(2,n),i-=c;}return (f?-1:1)*s*Math.pow(2,i-n)},t.write=function(e,t,r,n,o,i){var s,a,u,c=8*i-o-1,h=(1<<c)-1,l=h>>1,d=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:i-1,p=n?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=h):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+l>=1?d/u:d*Math.pow(2,1-l))*u>=2&&(s++,u/=2),s+l>=h?(a=0,s=h):s+l>=1?(a=(t*u-1)*Math.pow(2,o),s+=l):(a=t*Math.pow(2,l-1)*Math.pow(2,o),s=0));o>=8;e[r+f]=255&a,f+=p,a/=256,o-=8);for(s=s<<o|a,c+=o;c>0;e[r+f]=255&s,f+=p,s/=256,c-=8);e[r+f-p]|=128*m;};},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return "[object Array]"==r.call(e)};},function(e,t,r){var n,o,i;o=[],void 0===(i="function"==typeof(n=function(){var e,t,r,n;Object.keys||(Object.keys=(e=Object.prototype.hasOwnProperty,t=!{toString:null}.propertyIsEnumerable("toString"),n=(r=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"]).length,function(o){if("object"!=typeof o&&"function"!=typeof o||null===o)throw new TypeError("Object.keys called on non-object");var i=[];for(var s in o)e.call(o,s)&&i.push(s);if(t)for(var a=0;a<n;a++)e.call(o,r[a])&&i.push(r[a]);return i})),Object.create||(Object.create=function(){function e(){}return function(t){if(1!==arguments.length)throw new Error("Object.create implementation only accepts one parameter.");return e.prototype=t,new e}}()),Array.isArray||(Array.isArray=function(e){return "[object Array]"===Object.prototype.toString.call(e)}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e){if(null===this)throw new TypeError;var t=Object(this),r=t.length>>>0;if(0===r)return -1;var n=0;if(arguments.length>1&&((n=Number(arguments[1]))!=n?n=0:0!==n&&n!==1/0&&n!==-1/0&&(n=(n>0||-1)*Math.floor(Math.abs(n)))),n>=r)return -1;for(var o=n>=0?n:Math.max(r-Math.abs(n),0);o<r;o++)if(o in t&&t[o]===e)return o;return -1}),Object.isFrozen||(Object.isFrozen=function(e){for(var t="tv4_test_frozen_key";e.hasOwnProperty(t);)t+=Math.random();try{return e[t]=!0,delete e[t],!1}catch(e){return !0}});var o={"+":!0,"#":!0,".":!0,"/":!0,";":!0,"?":!0,"&":!0},i={"*":!0};function s(e){return encodeURI(e).replace(/%25[0-9][0-9]/g,(function(e){return "%"+e.substring(3)}))}function a(e){var t="";o[e.charAt(0)]&&(t=e.charAt(0),e=e.substring(1));var r="",n="",a=!0,u=!1,c=!1;"+"===t?a=!1:"."===t?(n=".",r="."):"/"===t?(n="/",r="/"):"#"===t?(n="#",a=!1):";"===t?(n=";",r=";",u=!0,c=!0):"?"===t?(n="?",r="&",u=!0):"&"===t&&(n="&",r="&",u=!0);for(var h=[],l=e.split(","),d=[],f={},p=0;p<l.length;p++){var m=l[p],g=null;if(-1!==m.indexOf(":")){var y=m.split(":");m=y[0],g=parseInt(y[1],10);}for(var v={};i[m.charAt(m.length-1)];)v[m.charAt(m.length-1)]=!0,m=m.substring(0,m.length-1);var _={truncate:g,name:m,suffices:v};d.push(_),f[m]=_,h.push(m);}var b=function(e){for(var t="",o=0,i=0;i<d.length;i++){var h=d[i],l=e(h.name);if(null==l||Array.isArray(l)&&0===l.length||"object"==typeof l&&0===Object.keys(l).length)o++;else if(t+=i===o?n:r||",",Array.isArray(l)){u&&(t+=h.name+"=");for(var f=0;f<l.length;f++)f>0&&(t+=h.suffices["*"]&&r||",",h.suffices["*"]&&u&&(t+=h.name+"=")),t+=a?encodeURIComponent(l[f]).replace(/!/g,"%21"):s(l[f]);}else if("object"==typeof l){u&&!h.suffices["*"]&&(t+=h.name+"=");var p=!0;for(var m in l)p||(t+=h.suffices["*"]&&r||","),p=!1,t+=a?encodeURIComponent(m).replace(/!/g,"%21"):s(m),t+=h.suffices["*"]?"=":",",t+=a?encodeURIComponent(l[m]).replace(/!/g,"%21"):s(l[m]);}else u&&(t+=h.name,c&&""===l||(t+="=")),null!=h.truncate&&(l=l.substring(0,h.truncate)),t+=a?encodeURIComponent(l).replace(/!/g,"%21"):s(l);}return t};return b.varNames=h,{prefix:n,substitution:b}}function u(e){if(!(this instanceof u))return new u(e);for(var t=e.split("{"),r=[t.shift()],n=[],o=[],i=[];t.length>0;){var s=t.shift(),c=s.split("}")[0],h=s.substring(c.length+1),l=a(c);o.push(l.substitution),n.push(l.prefix),r.push(h),i=i.concat(l.substitution.varNames);}this.fill=function(e){for(var t=r[0],n=0;n<o.length;n++)t+=(0, o[n])(e),t+=r[n+1];return t},this.varNames=i,this.template=e;}u.prototype={toString:function(){return this.template},fillFromObject:function(e){return this.fill((function(t){return e[t]}))}};var c=function(e,t,r,n,o){if(this.missing=[],this.missingMap={},this.formatValidators=e?Object.create(e.formatValidators):{},this.schemas=e?Object.create(e.schemas):{},this.collectMultiple=t,this.errors=[],this.handleError=t?this.collectError:this.returnError,n&&(this.checkRecursive=!0,this.scanned=[],this.scannedFrozen=[],this.scannedFrozenSchemas=[],this.scannedFrozenValidationErrors=[],this.validatedSchemasKey="tv4_validation_id",this.validationErrorsKey="tv4_validation_errors_id"),o&&(this.trackUnknownProperties=!0,this.knownPropertyPaths={},this.unknownPropertyPaths={}),this.errorReporter=r||y("en"),"string"==typeof this.errorReporter)throw new Error("debug");if(this.definedKeywords={},e)for(var i in e.definedKeywords)this.definedKeywords[i]=e.definedKeywords[i].slice(0);};function h(e,t){if(e===t)return !0;if(e&&t&&"object"==typeof e&&"object"==typeof t){if(Array.isArray(e)!==Array.isArray(t))return !1;if(Array.isArray(e)){if(e.length!==t.length)return !1;for(var r=0;r<e.length;r++)if(!h(e[r],t[r]))return !1}else{var n;for(n in e)if(void 0===t[n]&&void 0!==e[n])return !1;for(n in t)if(void 0===e[n]&&void 0!==t[n])return !1;for(n in e)if(!h(e[n],t[n]))return !1}return !0}return !1}c.prototype.defineKeyword=function(e,t){this.definedKeywords[e]=this.definedKeywords[e]||[],this.definedKeywords[e].push(t);},c.prototype.createError=function(e,t,r,n,o,i,s){var a=new P(e,t,r,n,o);return a.message=this.errorReporter(a,i,s),a},c.prototype.returnError=function(e){return e},c.prototype.collectError=function(e){return e&&this.errors.push(e),null},c.prototype.prefixErrors=function(e,t,r){for(var n=e;n<this.errors.length;n++)this.errors[n]=this.errors[n].prefixWith(t,r);return this},c.prototype.banUnknownProperties=function(e,t){for(var r in this.unknownPropertyPaths){var n=this.createError(v.UNKNOWN_PROPERTY,{path:r},r,"",null,e,t),o=this.handleError(n);if(o)return o}return null},c.prototype.addFormat=function(e,t){if("object"==typeof e){for(var r in e)this.addFormat(r,e[r]);return this}this.formatValidators[e]=t;},c.prototype.resolveRefs=function(e,t){if(void 0!==e.$ref){if((t=t||{})[e.$ref])return this.createError(v.CIRCULAR_REFERENCE,{urls:Object.keys(t).join(", ")},"","",null,void 0,e);t[e.$ref]=!0,e=this.getSchema(e.$ref,t);}return e},c.prototype.getSchema=function(e,t){var r;if(void 0!==this.schemas[e])return r=this.schemas[e],this.resolveRefs(r,t);var n=e,o="";if(-1!==e.indexOf("#")&&(o=e.substring(e.indexOf("#")+1),n=e.substring(0,e.indexOf("#"))),"object"==typeof this.schemas[n]){r=this.schemas[n];var i=decodeURIComponent(o);if(""===i)return this.resolveRefs(r,t);if("/"!==i.charAt(0))return;for(var s=i.split("/").slice(1),a=0;a<s.length;a++){var u=s[a].replace(/~1/g,"/").replace(/~0/g,"~");if(void 0===r[u]){r=void 0;break}r=r[u];}if(void 0!==r)return this.resolveRefs(r,t)}void 0===this.missing[n]&&(this.missing.push(n),this.missing[n]=n,this.missingMap[n]=n);},c.prototype.searchSchemas=function(e,t){if(Array.isArray(e))for(var r=0;r<e.length;r++)this.searchSchemas(e[r],t);else if(e&&"object"==typeof e)for(var n in"string"==typeof e.id&&function(e,t){if(t.substring(0,e.length)===e){var r=t.substring(e.length);if(t.length>0&&"/"===t.charAt(e.length-1)||"#"===r.charAt(0)||"?"===r.charAt(0))return !0}return !1}(t,e.id)&&void 0===this.schemas[e.id]&&(this.schemas[e.id]=e),e)if("enum"!==n)if("object"==typeof e[n])this.searchSchemas(e[n],t);else if("$ref"===n){var o=m(e[n]);o&&void 0===this.schemas[o]&&void 0===this.missingMap[o]&&(this.missingMap[o]=o);}},c.prototype.addSchema=function(e,t){if("string"!=typeof e||void 0===t){if("object"!=typeof e||"string"!=typeof e.id)return;e=(t=e).id;}e===m(e)+"#"&&(e=m(e)),this.schemas[e]=t,delete this.missingMap[e],g(t,e),this.searchSchemas(t,e);},c.prototype.getSchemaMap=function(){var e={};for(var t in this.schemas)e[t]=this.schemas[t];return e},c.prototype.getSchemaUris=function(e){var t=[];for(var r in this.schemas)e&&!e.test(r)||t.push(r);return t},c.prototype.getMissingUris=function(e){var t=[];for(var r in this.missingMap)e&&!e.test(r)||t.push(r);return t},c.prototype.dropSchemas=function(){this.schemas={},this.reset();},c.prototype.reset=function(){this.missing=[],this.missingMap={},this.errors=[];},c.prototype.validateAll=function(e,t,r,n,o){var i;if(!(t=this.resolveRefs(t)))return null;if(t instanceof P)return this.errors.push(t),t;var s,a=this.errors.length,u=null,c=null;if(this.checkRecursive&&e&&"object"==typeof e){if(i=!this.scanned.length,e[this.validatedSchemasKey]){var h=e[this.validatedSchemasKey].indexOf(t);if(-1!==h)return this.errors=this.errors.concat(e[this.validationErrorsKey][h]),null}if(Object.isFrozen(e)&&-1!==(s=this.scannedFrozen.indexOf(e))){var l=this.scannedFrozenSchemas[s].indexOf(t);if(-1!==l)return this.errors=this.errors.concat(this.scannedFrozenValidationErrors[s][l]),null}if(this.scanned.push(e),Object.isFrozen(e))-1===s&&(s=this.scannedFrozen.length,this.scannedFrozen.push(e),this.scannedFrozenSchemas.push([])),u=this.scannedFrozenSchemas[s].length,this.scannedFrozenSchemas[s][u]=t,this.scannedFrozenValidationErrors[s][u]=[];else{if(!e[this.validatedSchemasKey])try{Object.defineProperty(e,this.validatedSchemasKey,{value:[],configurable:!0}),Object.defineProperty(e,this.validationErrorsKey,{value:[],configurable:!0});}catch(t){e[this.validatedSchemasKey]=[],e[this.validationErrorsKey]=[];}c=e[this.validatedSchemasKey].length,e[this.validatedSchemasKey][c]=t,e[this.validationErrorsKey][c]=[];}}var d=this.errors.length,f=this.validateBasic(e,t,o)||this.validateNumeric(e,t,o)||this.validateString(e,t,o)||this.validateArray(e,t,o)||this.validateObject(e,t,o)||this.validateCombinations(e,t,o)||this.validateHypermedia(e,t,o)||this.validateFormat(e,t,o)||this.validateDefinedKeywords(e,t,o)||null;if(i){for(;this.scanned.length;)delete this.scanned.pop()[this.validatedSchemasKey];this.scannedFrozen=[],this.scannedFrozenSchemas=[];}if(f||d!==this.errors.length)for(;r&&r.length||n&&n.length;){var p=r&&r.length?""+r.pop():null,m=n&&n.length?""+n.pop():null;f&&(f=f.prefixWith(p,m)),this.prefixErrors(d,p,m);}return null!==u?this.scannedFrozenValidationErrors[s][u]=this.errors.slice(a):null!==c&&(e[this.validationErrorsKey][c]=this.errors.slice(a)),this.handleError(f)},c.prototype.validateFormat=function(e,t){if("string"!=typeof t.format||!this.formatValidators[t.format])return null;var r=this.formatValidators[t.format].call(null,e,t);return "string"==typeof r||"number"==typeof r?this.createError(v.FORMAT_CUSTOM,{message:r},"","/format",null,e,t):r&&"object"==typeof r?this.createError(v.FORMAT_CUSTOM,{message:r.message||"?"},r.dataPath||"",r.schemaPath||"/format",null,e,t):null},c.prototype.validateDefinedKeywords=function(e,t,r){for(var n in this.definedKeywords)if(void 0!==t[n])for(var o=this.definedKeywords[n],i=0;i<o.length;i++){var s=(0, o[i])(e,t[n],t,r);if("string"==typeof s||"number"==typeof s)return this.createError(v.KEYWORD_CUSTOM,{key:n,message:s},"","",null,e,t).prefixWith(null,n);if(s&&"object"==typeof s){var a=s.code;if("string"==typeof a){if(!v[a])throw new Error("Undefined error code (use defineError): "+a);a=v[a];}else"number"!=typeof a&&(a=v.KEYWORD_CUSTOM);var u="object"==typeof s.message?s.message:{key:n,message:s.message||"?"},c=s.schemaPath||"/"+n.replace(/~/g,"~0").replace(/\//g,"~1");return this.createError(a,u,s.dataPath||null,c,null,e,t)}}return null},c.prototype.validateBasic=function(e,t,r){var n;return (n=this.validateType(e,t,r))||(n=this.validateEnum(e,t,r))?n.prefixWith(null,"type"):null},c.prototype.validateType=function(e,t){if(void 0===t.type)return null;var r=typeof e;null===e?r="null":Array.isArray(e)&&(r="array");var n=t.type;Array.isArray(n)||(n=[n]);for(var o=0;o<n.length;o++){var i=n[o];if(i===r||"integer"===i&&"number"===r&&e%1==0)return null}return this.createError(v.INVALID_TYPE,{type:r,expected:n.join("/")},"","",null,e,t)},c.prototype.validateEnum=function(e,t){if(void 0===t.enum)return null;for(var r=0;r<t.enum.length;r++)if(h(e,t.enum[r]))return null;return this.createError(v.ENUM_MISMATCH,{value:"undefined"!=typeof JSON?JSON.stringify(e):e},"","",null,e,t)},c.prototype.validateNumeric=function(e,t,r){return this.validateMultipleOf(e,t,r)||this.validateMinMax(e,t,r)||this.validateNaN(e,t,r)||null};var l=Math.pow(2,-51),d=1-l;function f(e){var t=String(e).replace(/^\s+|\s+$/g,"").match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);return t?{href:t[0]||"",protocol:t[1]||"",authority:t[2]||"",host:t[3]||"",hostname:t[4]||"",port:t[5]||"",pathname:t[6]||"",search:t[7]||"",hash:t[8]||""}:null}function p(e,t){return t=f(t||""),e=f(e||""),t&&e?(t.protocol||e.protocol)+(t.protocol||t.authority?t.authority:e.authority)+(r=t.protocol||t.authority||"/"===t.pathname.charAt(0)?t.pathname:t.pathname?(e.authority&&!e.pathname?"/":"")+e.pathname.slice(0,e.pathname.lastIndexOf("/")+1)+t.pathname:e.pathname,n=[],r.replace(/^(\.\.?(\/|$))+/,"").replace(/\/(\.(\/|$))+/g,"/").replace(/\/\.\.$/,"/../").replace(/\/?[^\/]*/g,(function(e){"/.."===e?n.pop():n.push(e);})),n.join("").replace(/^\//,"/"===r.charAt(0)?"/":""))+(t.protocol||t.authority||t.pathname?t.search:t.search||e.search)+t.hash:null;var r,n;}function m(e){return e.split("#")[0]}function g(e,t){if(e&&"object"==typeof e)if(void 0===t?t=e.id:"string"==typeof e.id&&(t=p(t,e.id),e.id=t),Array.isArray(e))for(var r=0;r<e.length;r++)g(e[r],t);else for(var n in"string"==typeof e.$ref&&(e.$ref=p(t,e.$ref)),e)"enum"!==n&&g(e[n],t);}function y(e){var t=E[e=e||"en"];return function(e){var r=t[e.code]||w[e.code];if("string"!=typeof r)return "Unknown error code "+e.code+": "+JSON.stringify(e.messageParams);var n=e.params;return r.replace(/\{([^{}]*)\}/g,(function(e,t){var r=n[t];return "string"==typeof r||"number"==typeof r?r:e}))}}c.prototype.validateMultipleOf=function(e,t){var r=t.multipleOf||t.divisibleBy;if(void 0===r)return null;if("number"==typeof e){var n=e/r%1;if(n>=l&&n<d)return this.createError(v.NUMBER_MULTIPLE_OF,{value:e,multipleOf:r},"","",null,e,t)}return null},c.prototype.validateMinMax=function(e,t){if("number"!=typeof e)return null;if(void 0!==t.minimum){if(e<t.minimum)return this.createError(v.NUMBER_MINIMUM,{value:e,minimum:t.minimum},"","/minimum",null,e,t);if(t.exclusiveMinimum&&e===t.minimum)return this.createError(v.NUMBER_MINIMUM_EXCLUSIVE,{value:e,minimum:t.minimum},"","/exclusiveMinimum",null,e,t)}if(void 0!==t.maximum){if(e>t.maximum)return this.createError(v.NUMBER_MAXIMUM,{value:e,maximum:t.maximum},"","/maximum",null,e,t);if(t.exclusiveMaximum&&e===t.maximum)return this.createError(v.NUMBER_MAXIMUM_EXCLUSIVE,{value:e,maximum:t.maximum},"","/exclusiveMaximum",null,e,t)}return null},c.prototype.validateNaN=function(e,t){return "number"!=typeof e?null:!0===isNaN(e)||e===1/0||e===-1/0?this.createError(v.NUMBER_NOT_A_NUMBER,{value:e},"","/type",null,e,t):null},c.prototype.validateString=function(e,t,r){return this.validateStringLength(e,t,r)||this.validateStringPattern(e,t,r)||null},c.prototype.validateStringLength=function(e,t){return "string"!=typeof e?null:void 0!==t.minLength&&e.length<t.minLength?this.createError(v.STRING_LENGTH_SHORT,{length:e.length,minimum:t.minLength},"","/minLength",null,e,t):void 0!==t.maxLength&&e.length>t.maxLength?this.createError(v.STRING_LENGTH_LONG,{length:e.length,maximum:t.maxLength},"","/maxLength",null,e,t):null},c.prototype.validateStringPattern=function(e,t){if("string"!=typeof e||"string"!=typeof t.pattern&&!(t.pattern instanceof RegExp))return null;var r;if(t.pattern instanceof RegExp)r=t.pattern;else{var n,o="",i=t.pattern.match(/^\/(.+)\/([img]*)$/);i?(n=i[1],o=i[2]):n=t.pattern,r=new RegExp(n,o);}return r.test(e)?null:this.createError(v.STRING_PATTERN,{pattern:t.pattern},"","/pattern",null,e,t)},c.prototype.validateArray=function(e,t,r){return Array.isArray(e)&&(this.validateArrayLength(e,t,r)||this.validateArrayUniqueItems(e,t,r)||this.validateArrayItems(e,t,r))||null},c.prototype.validateArrayLength=function(e,t){var r;return void 0!==t.minItems&&e.length<t.minItems&&(r=this.createError(v.ARRAY_LENGTH_SHORT,{length:e.length,minimum:t.minItems},"","/minItems",null,e,t),this.handleError(r))||void 0!==t.maxItems&&e.length>t.maxItems&&(r=this.createError(v.ARRAY_LENGTH_LONG,{length:e.length,maximum:t.maxItems},"","/maxItems",null,e,t),this.handleError(r))?r:null},c.prototype.validateArrayUniqueItems=function(e,t){if(t.uniqueItems)for(var r=0;r<e.length;r++)for(var n=r+1;n<e.length;n++)if(h(e[r],e[n])){var o=this.createError(v.ARRAY_UNIQUE,{match1:r,match2:n},"","/uniqueItems",null,e,t);if(this.handleError(o))return o}return null},c.prototype.validateArrayItems=function(e,t,r){if(void 0===t.items)return null;var n,o;if(Array.isArray(t.items)){for(o=0;o<e.length;o++)if(o<t.items.length){if(n=this.validateAll(e[o],t.items[o],[o],["items",o],r+"/"+o))return n}else if(void 0!==t.additionalItems)if("boolean"==typeof t.additionalItems){if(!t.additionalItems&&(n=this.createError(v.ARRAY_ADDITIONAL_ITEMS,{},"/"+o,"/additionalItems",null,e,t),this.handleError(n)))return n}else if(n=this.validateAll(e[o],t.additionalItems,[o],["additionalItems"],r+"/"+o))return n}else for(o=0;o<e.length;o++)if(n=this.validateAll(e[o],t.items,[o],["items"],r+"/"+o))return n;return null},c.prototype.validateObject=function(e,t,r){return "object"!=typeof e||null===e||Array.isArray(e)?null:this.validateObjectMinMaxProperties(e,t,r)||this.validateObjectRequiredProperties(e,t,r)||this.validateObjectProperties(e,t,r)||this.validateObjectDependencies(e,t,r)||null},c.prototype.validateObjectMinMaxProperties=function(e,t){var r,n=Object.keys(e);return void 0!==t.minProperties&&n.length<t.minProperties&&(r=this.createError(v.OBJECT_PROPERTIES_MINIMUM,{propertyCount:n.length,minimum:t.minProperties},"","/minProperties",null,e,t),this.handleError(r))||void 0!==t.maxProperties&&n.length>t.maxProperties&&(r=this.createError(v.OBJECT_PROPERTIES_MAXIMUM,{propertyCount:n.length,maximum:t.maxProperties},"","/maxProperties",null,e,t),this.handleError(r))?r:null},c.prototype.validateObjectRequiredProperties=function(e,t){if(void 0!==t.required)for(var r=0;r<t.required.length;r++){var n=t.required[r];if(void 0===e[n]){var o=this.createError(v.OBJECT_REQUIRED,{key:n},"","/required/"+r,null,e,t);if(this.handleError(o))return o}}return null},c.prototype.validateObjectProperties=function(e,t,r){var n;for(var o in e){var i=r+"/"+o.replace(/~/g,"~0").replace(/\//g,"~1"),s=!1;if(void 0!==t.properties&&void 0!==t.properties[o]&&(s=!0,n=this.validateAll(e[o],t.properties[o],[o],["properties",o],i)))return n;if(void 0!==t.patternProperties)for(var a in t.patternProperties)if(new RegExp(a).test(o)&&(s=!0,n=this.validateAll(e[o],t.patternProperties[a],[o],["patternProperties",a],i)))return n;if(s)this.trackUnknownProperties&&(this.knownPropertyPaths[i]=!0,delete this.unknownPropertyPaths[i]);else if(void 0!==t.additionalProperties){if(this.trackUnknownProperties&&(this.knownPropertyPaths[i]=!0,delete this.unknownPropertyPaths[i]),"boolean"==typeof t.additionalProperties){if(!t.additionalProperties&&(n=this.createError(v.OBJECT_ADDITIONAL_PROPERTIES,{key:o},"","/additionalProperties",null,e,t).prefixWith(o,null),this.handleError(n)))return n}else if(n=this.validateAll(e[o],t.additionalProperties,[o],["additionalProperties"],i))return n}else this.trackUnknownProperties&&!this.knownPropertyPaths[i]&&(this.unknownPropertyPaths[i]=!0);}return null},c.prototype.validateObjectDependencies=function(e,t,r){var n;if(void 0!==t.dependencies)for(var o in t.dependencies)if(void 0!==e[o]){var i=t.dependencies[o];if("string"==typeof i){if(void 0===e[i]&&(n=this.createError(v.OBJECT_DEPENDENCY_KEY,{key:o,missing:i},"","",null,e,t).prefixWith(null,o).prefixWith(null,"dependencies"),this.handleError(n)))return n}else if(Array.isArray(i))for(var s=0;s<i.length;s++){var a=i[s];if(void 0===e[a]&&(n=this.createError(v.OBJECT_DEPENDENCY_KEY,{key:o,missing:a},"","/"+s,null,e,t).prefixWith(null,o).prefixWith(null,"dependencies"),this.handleError(n)))return n}else if(n=this.validateAll(e,i,[],["dependencies",o],r))return n}return null},c.prototype.validateCombinations=function(e,t,r){return this.validateAllOf(e,t,r)||this.validateAnyOf(e,t,r)||this.validateOneOf(e,t,r)||this.validateNot(e,t,r)||null},c.prototype.validateAllOf=function(e,t,r){if(void 0===t.allOf)return null;for(var n,o=0;o<t.allOf.length;o++){var i=t.allOf[o];if(n=this.validateAll(e,i,[],["allOf",o],r))return n}return null},c.prototype.validateAnyOf=function(e,t,r){if(void 0===t.anyOf)return null;var n,o,i=[],s=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths);for(var a=!0,u=0;u<t.anyOf.length;u++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=t.anyOf[u],h=this.errors.length,l=this.validateAll(e,c,[],["anyOf",u],r);if(null===l&&h===this.errors.length){if(this.errors=this.errors.slice(0,s),this.trackUnknownProperties){for(var d in this.knownPropertyPaths)o[d]=!0,delete n[d];for(var f in this.unknownPropertyPaths)o[f]||(n[f]=!0);a=!1;continue}return null}l&&i.push(l.prefixWith(null,""+u).prefixWith(null,"anyOf"));}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),a?(i=i.concat(this.errors.slice(s)),this.errors=this.errors.slice(0,s),this.createError(v.ANY_OF_MISSING,{},"","/anyOf",i,e,t)):void 0},c.prototype.validateOneOf=function(e,t,r){if(void 0===t.oneOf)return null;var n,o,i=null,s=[],a=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths);for(var u=0;u<t.oneOf.length;u++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=t.oneOf[u],h=this.errors.length,l=this.validateAll(e,c,[],["oneOf",u],r);if(null===l&&h===this.errors.length){if(null!==i)return this.errors=this.errors.slice(0,a),this.createError(v.ONE_OF_MULTIPLE,{index1:i,index2:u},"","/oneOf",null,e,t);if(i=u,this.trackUnknownProperties){for(var d in this.knownPropertyPaths)o[d]=!0,delete n[d];for(var f in this.unknownPropertyPaths)o[f]||(n[f]=!0);}}else l&&s.push(l);}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),null===i?(s=s.concat(this.errors.slice(a)),this.errors=this.errors.slice(0,a),this.createError(v.ONE_OF_MISSING,{},"","/oneOf",s,e,t)):(this.errors=this.errors.slice(0,a),null)},c.prototype.validateNot=function(e,t,r){if(void 0===t.not)return null;var n,o,i=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths,this.unknownPropertyPaths={},this.knownPropertyPaths={});var s=this.validateAll(e,t.not,null,null,r),a=this.errors.slice(i);return this.errors=this.errors.slice(0,i),this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),null===s&&0===a.length?this.createError(v.NOT_PASSED,{},"","/not",null,e,t):null},c.prototype.validateHypermedia=function(e,t,r){if(!t.links)return null;for(var n,o=0;o<t.links.length;o++){var i=t.links[o];if("describedby"===i.rel){for(var s=new u(i.href),a=!0,c=0;c<s.varNames.length;c++)if(!(s.varNames[c]in e)){a=!1;break}if(a){var h={$ref:s.fillFromObject(e)};if(n=this.validateAll(e,h,[],["links",o],r))return n}}}};var v={INVALID_TYPE:0,ENUM_MISMATCH:1,ANY_OF_MISSING:10,ONE_OF_MISSING:11,ONE_OF_MULTIPLE:12,NOT_PASSED:13,NUMBER_MULTIPLE_OF:100,NUMBER_MINIMUM:101,NUMBER_MINIMUM_EXCLUSIVE:102,NUMBER_MAXIMUM:103,NUMBER_MAXIMUM_EXCLUSIVE:104,NUMBER_NOT_A_NUMBER:105,STRING_LENGTH_SHORT:200,STRING_LENGTH_LONG:201,STRING_PATTERN:202,OBJECT_PROPERTIES_MINIMUM:300,OBJECT_PROPERTIES_MAXIMUM:301,OBJECT_REQUIRED:302,OBJECT_ADDITIONAL_PROPERTIES:303,OBJECT_DEPENDENCY_KEY:304,ARRAY_LENGTH_SHORT:400,ARRAY_LENGTH_LONG:401,ARRAY_UNIQUE:402,ARRAY_ADDITIONAL_ITEMS:403,FORMAT_CUSTOM:500,KEYWORD_CUSTOM:501,CIRCULAR_REFERENCE:600,UNKNOWN_PROPERTY:1e3},_={};for(var b in v)_[v[b]]=b;var w={INVALID_TYPE:"Invalid type: {type} (expected {expected})",ENUM_MISMATCH:"No enum match for: {value}",ANY_OF_MISSING:'Data does not match any schemas from "anyOf"',ONE_OF_MISSING:'Data does not match any schemas from "oneOf"',ONE_OF_MULTIPLE:'Data is valid against more than one schema from "oneOf": indices {index1} and {index2}',NOT_PASSED:'Data matches schema from "not"',NUMBER_MULTIPLE_OF:"Value {value} is not a multiple of {multipleOf}",NUMBER_MINIMUM:"Value {value} is less than minimum {minimum}",NUMBER_MINIMUM_EXCLUSIVE:"Value {value} is equal to exclusive minimum {minimum}",NUMBER_MAXIMUM:"Value {value} is greater than maximum {maximum}",NUMBER_MAXIMUM_EXCLUSIVE:"Value {value} is equal to exclusive maximum {maximum}",NUMBER_NOT_A_NUMBER:"Value {value} is not a valid number",STRING_LENGTH_SHORT:"String is too short ({length} chars), minimum {minimum}",STRING_LENGTH_LONG:"String is too long ({length} chars), maximum {maximum}",STRING_PATTERN:"String does not match pattern: {pattern}",OBJECT_PROPERTIES_MINIMUM:"Too few properties defined ({propertyCount}), minimum {minimum}",OBJECT_PROPERTIES_MAXIMUM:"Too many properties defined ({propertyCount}), maximum {maximum}",OBJECT_REQUIRED:"Missing required property: {key}",OBJECT_ADDITIONAL_PROPERTIES:"Additional properties not allowed",OBJECT_DEPENDENCY_KEY:"Dependency failed - key must exist: {missing} (due to key: {key})",ARRAY_LENGTH_SHORT:"Array is too short ({length}), minimum {minimum}",ARRAY_LENGTH_LONG:"Array is too long ({length}), maximum {maximum}",ARRAY_UNIQUE:"Array items are not unique (indices {match1} and {match2})",ARRAY_ADDITIONAL_ITEMS:"Additional items not allowed",FORMAT_CUSTOM:"Format validation failed ({message})",KEYWORD_CUSTOM:"Keyword failed: {key} ({message})",CIRCULAR_REFERENCE:"Circular $refs: {urls}",UNKNOWN_PROPERTY:"Unknown property (not in schema)"};function P(e,t,r,n,o){if(Error.call(this),void 0===e)throw new Error("No error code supplied: "+n);this.message="",this.params=t,this.code=e,this.dataPath=r||"",this.schemaPath=n||"",this.subErrors=o||null;var i=new Error(this.message);if(this.stack=i.stack||i.stacktrace,!this.stack)try{throw i}catch(i){this.stack=i.stack||i.stacktrace;}}P.prototype=Object.create(Error.prototype),P.prototype.constructor=P,P.prototype.name="ValidationError",P.prototype.prefixWith=function(e,t){if(null!==e&&(e=e.replace(/~/g,"~0").replace(/\//g,"~1"),this.dataPath="/"+e+this.dataPath),null!==t&&(t=t.replace(/~/g,"~0").replace(/\//g,"~1"),this.schemaPath="/"+t+this.schemaPath),null!==this.subErrors)for(var r=0;r<this.subErrors.length;r++)this.subErrors[r].prefixWith(e,t);return this};var E={},T=function e(t){var r,n,o=new c,i={setErrorReporter:function(e){return "string"==typeof e?this.language(e):(n=e,!0)},addFormat:function(){o.addFormat.apply(o,arguments);},language:function(e){return e?(E[e]||(e=e.split("-")[0]),!!E[e]&&(r=e,e)):r},addLanguage:function(e,t){var r;for(r in v)t[r]&&!t[v[r]]&&(t[v[r]]=t[r]);var n=e.split("-")[0];if(E[n])for(r in E[e]=Object.create(E[n]),t)void 0===E[n][r]&&(E[n][r]=t[r]),E[e][r]=t[r];else E[e]=t,E[n]=t;return this},freshApi:function(t){var r=e();return t&&r.language(t),r},validate:function(e,t,i,s){var a=y(r),u=new c(o,!1,n?function(e,t,r){return n(e,t,r)||a(e,t,r)}:a,i,s);"string"==typeof t&&(t={$ref:t}),u.addSchema("",t);var h=u.validateAll(e,t,null,null,"");return !h&&s&&(h=u.banUnknownProperties(e,t)),this.error=h,this.missing=u.missing,this.valid=null===h,this.valid},validateResult:function(){var e={toString:function(){return this.valid?"valid":this.error.message}};return this.validate.apply(e,arguments),e},validateMultiple:function(e,t,i,s){var a=y(r),u=new c(o,!0,n?function(e,t,r){return n(e,t,r)||a(e,t,r)}:a,i,s);"string"==typeof t&&(t={$ref:t}),u.addSchema("",t),u.validateAll(e,t,null,null,""),s&&u.banUnknownProperties(e,t);var h={toString:function(){return this.valid?"valid":this.error.message}};return h.errors=u.errors,h.missing=u.missing,h.valid=0===h.errors.length,h},addSchema:function(){return o.addSchema.apply(o,arguments)},getSchema:function(){return o.getSchema.apply(o,arguments)},getSchemaMap:function(){return o.getSchemaMap.apply(o,arguments)},getSchemaUris:function(){return o.getSchemaUris.apply(o,arguments)},getMissingUris:function(){return o.getMissingUris.apply(o,arguments)},dropSchemas:function(){o.dropSchemas.apply(o,arguments);},defineKeyword:function(){o.defineKeyword.apply(o,arguments);},defineError:function(e,t,r){if("string"!=typeof e||!/^[A-Z]+(_[A-Z]+)*$/.test(e))throw new Error("Code name must be a string in UPPER_CASE_WITH_UNDERSCORES");if("number"!=typeof t||t%1!=0||t<1e4)throw new Error("Code number must be an integer > 10000");if(void 0!==v[e])throw new Error("Error already defined: "+e+" as "+v[e]);if(void 0!==_[t])throw new Error("Error code already used: "+_[t]+" as "+t);for(var n in v[e]=t,_[t]=e,w[e]=w[t]=r,E){var o=E[n];o[e]&&(o[t]=o[t]||o[e]);}},reset:function(){o.reset(),this.error=null,this.missing=[],this.valid=!0;},missing:[],error:null,valid:!0,normSchema:g,resolveUrl:p,getDocumentUri:m,errorCodes:v};return i.language(t||"en"),i}();return T.addLanguage("en-gb",w),T.tv4=T,T})?n.apply(t,o):n)||(e.exports=i);},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.BaseClientTypes=void 0;class n{constructor(){this.uris={},this.schemas={},this.aliases={};}declare(e,t,r,n){const o=e+"/"+t;if(n.extends){const t=n.extends.split("/"),r=1===t.length?e+"/"+t.shift():t.join("/"),i=this.uris[r];if(!i)throw"Type '"+o+"' tries to extend unknown schema '"+r+"'";n.extends=this.schemas[i];}this.uris[o]=r,this.aliases[r]=o,this.schemas[r]=n;}resolveAlias(e){return this.uris[e]}getSchema(e){return this.schemas[e]}inScope(e){const t=e.length,r={};for(const n in this.uris)if(n.substr(0,t+1)===e+"/"){const e=this.uris[n];r[e]=this.schemas[e];}return r}}t.BaseClientTypes=n;const o=new n;t.default=o;},function(e,t,r){class n extends Error{constructor(e){super();const t=new Error("Schema not found: "+e);return t.name="SchemaNotFound",t}}e.exports=n;},function(e,t,r){e.exports=class{constructor(e){this._itemsRev={},this._storage={},this._canPropagate=!1,this.defaultValue=e,this.activatePropagation();}get(e){e=e.toLowerCase();let t=this._storage[e];return void 0===t&&(t=this.defaultValue,this._storage[e]=t),t}set(e,t){return e=e.toLowerCase(),this._storage[e]===t||(this._storage[e]=t,t||delete this._itemsRev[e],this._updateParentFolderItemRev(e,t),this._canPropagate&&this._propagate(e)),t}delete(e){return this.set(e,null)}deactivatePropagation(){return this._canPropagate=!1,!0}activatePropagation(){return this._canPropagate||(this._generateFolderRev("/"),this._canPropagate=!0),!0}_hashCode(e){let t=0;if(0===e.length)return t;for(let r=0;r<e.length;r++){t=(t<<5)-t+e.charCodeAt(r),t|=0;}return t}_generateHash(e){const t=e.sort().join("|");return ""+this._hashCode(t)}_updateParentFolderItemRev(e,t){if("/"!==e){const r=this._getParentFolder(e);this._itemsRev[r]||(this._itemsRev[r]={});const n=this._itemsRev[r];t?n[e]=t:delete n[e],this._updateParentFolderItemRev(r,this.defaultValue);}}_getParentFolder(e){return e.substr(0,e.lastIndexOf("/",e.length-2)+1)}_propagate(e){if("/"!==e){const t=this._getParentFolder(e),r=this._itemsRev[t],n=[];for(const e in r)n.push(r[e]);const o=this._generateHash(n);this.set(t,o);}}_generateFolderRev(e){const t=this._itemsRev[e];let r=this.defaultValue;if(t){const e=[];for(const r in t){let n;n="/"===r.substr(-1)?this._generateFolderRev(r):t[r],e.push(n);}e.length>0&&(r=this._generateHash(e));}return this.set(e,r),r}};},function(e,t,r){var n;
    /*!
     * webfinger.js
     *   http://github.com/silverbucket/webfinger.js
     *
     * Developed and Maintained by:
     *   Nick Jennings <nick@silverbucket.net>
     *
     * webfinger.js is released under the AGPL (see LICENSE).
     *
     * You don't have to do anything special to choose one license or the other and you don't
     * have to notify anyone which license you are using.
     * Please see the corresponding license file for details of these licenses.
     * You are free to use, modify and distribute this software, but all copyright
     * information must remain.
     *
     */"function"!=typeof fetch&&"function"!=typeof XMLHttpRequest&&(XMLHttpRequest=r(29)),function(r){var o={"http://webfist.org/spec/rel":"webfist","http://webfinger.net/rel/avatar":"avatar",remotestorage:"remotestorage","http://tools.ietf.org/id/draft-dejong-remotestorage":"remotestorage",remoteStorage:"remotestorage","http://www.packetizer.com/rel/share":"share","http://webfinger.net/rel/profile-page":"profile",me:"profile",vcard:"vcard",blog:"blog","http://packetizer.com/rel/blog":"blog","http://schemas.google.com/g/2010#updates-from":"updates","https://camlistore.org/rel/server":"camilstore"},i={avatar:[],remotestorage:[],blog:[],vcard:[],updates:[],share:[],profile:[],webfist:[],camlistore:[]},s=["webfinger","host-meta","host-meta.json"];function a(e){return e.toString=function(){return this.message},e}function u(e){"object"!=typeof e&&(e={}),this.config={tls_only:void 0===e.tls_only||e.tls_only,webfist_fallback:void 0!==e.webfist_fallback&&e.webfist_fallback,uri_fallback:void 0!==e.uri_fallback&&e.uri_fallback,request_timeout:void 0!==e.request_timeout?e.request_timeout:1e4};}u.prototype.__fetchJRD=function(e,t,r){if("function"==typeof fetch)return this.__fetchJRD_fetch(e,t,r);if("function"==typeof XMLHttpRequest)return this.__fetchJRD_XHR(e,t,r);throw new Error("add a polyfill for fetch or XMLHttpRequest")},u.prototype.__fetchJRD_fetch=function(e,t,r){var n,o=this;"function"==typeof AbortController&&(n=new AbortController);var i=fetch(e,{headers:{Accept:"application/jrd+json, application/json"},signal:n?n.signal:void 0}).then((function(t){if(t.ok)return t.text();throw 404===t.status?a({message:"resource not found",url:e,status:t.status}):a({message:"error during request",url:e,status:t.status})}),(function(t){throw a({message:"error during request",url:e,status:void 0,err:t})})).then((function(t){if(o.__isValidJSON(t))return t;throw a({message:"invalid json",url:e,status:void 0})})),s=new Promise((function(t,r){setTimeout((function(){r(a({message:"request timed out",url:e,status:void 0})),n&&n.abort();}),o.config.request_timeout);}));Promise.race([i,s]).then((function(e){r(e);})).catch((function(e){t(e);}));},u.prototype.__fetchJRD_XHR=function(e,t,r){var n=this,o=!1,i=new XMLHttpRequest;function s(){if(!o){if(o=!0,200===i.status)return n.__isValidJSON(i.responseText)?r(i.responseText):t(a({message:"invalid json",url:e,status:i.status}));if(404===i.status)return t(a({message:"resource not found",url:e,status:i.status}));if(i.status>=301&&i.status<=302){var s=i.getResponseHeader("Location");return function(e){return "string"==typeof e&&"https"===e.split("://")[0]}(s)?u():t(a({message:"no redirect URL found",url:e,status:i.status}))}return t(a({message:"error during request",url:e,status:i.status}))}}function u(){i.onreadystatechange=function(){4===i.readyState&&s();},i.onload=function(){s();},i.ontimeout=function(){return t(a({message:"request timed out",url:e,status:i.status}))},i.open("GET",e,!0),i.timeout=n.config.request_timeout,i.setRequestHeader("Accept","application/jrd+json, application/json"),i.send();}return u()},u.prototype.__isValidJSON=function(e){try{JSON.parse(e);}catch(e){return !1}return !0},u.prototype.__isLocalhost=function(e){return /^localhost(\.localdomain)?(\:[0-9]+)?$/.test(e)},u.prototype.__processJRD=function(e,t,r,n){var s=JSON.parse(t);if("object"!=typeof s||"object"!=typeof s.links)return void 0!==s.error?r(a({message:s.error,request:e})):r(a({message:"unknown response from server",request:e}));var u=s.links;Array.isArray(u)||(u=[]);var c={object:s,json:t,idx:{}};c.idx.properties={name:void 0},c.idx.links=JSON.parse(JSON.stringify(i)),u.map((function(e,t){if(o.hasOwnProperty(e.rel)&&c.idx.links[o[e.rel]]){var r={};Object.keys(e).map((function(t,n){r[t]=e[t];})),c.idx.links[o[e.rel]].push(r);}}));var h=JSON.parse(t).properties;for(var l in h)h.hasOwnProperty(l)&&"http://packetizer.com/ns/name"===l&&(c.idx.properties.name=h[l]);return n(c)},u.prototype.lookup=function(e,t){if("string"!=typeof e)throw new Error("first parameter must be a user address");if("function"!=typeof t)throw new Error("second parameter must be a callback");var r=this,n="";n=e.indexOf("://")>-1?e.replace(/ /g,"").split("/")[2]:e.replace(/ /g,"").split("@")[1];var o=0,i="https";function a(){var t="";return e.split("://")[1]||(t="acct:"),i+"://"+n+"/.well-known/"+s[o]+"?resource="+t+e}function u(e){if(r.config.uri_fallback&&"webfist.org"!==n&&o!==s.length-1)return o+=1,c();if(!r.config.tls_only&&"https"===i)return o=0,i="http",c();if(!r.config.webfist_fallback||"webfist.org"===n)return t(e);o=0,i="http",n="webfist.org";var u=a();r.__fetchJRD(u,t,(function(e){r.__processJRD(u,e,t,(function(e){"object"==typeof e.idx.links.webfist&&"string"==typeof e.idx.links.webfist[0].href&&r.__fetchJRD(e.idx.links.webfist[0].href,t,(function(e){r.__processJRD(u,e,t,(function(e){return t(null,t)}));}));}));}));}function c(){var e=a();r.__fetchJRD(e,u,(function(n){r.__processJRD(e,n,t,(function(e){t(null,e);}));}));}return r.__isLocalhost(n)&&(i="http"),setTimeout(c,0)},u.prototype.lookupLink=function(e,t,r){if(!i.hasOwnProperty(t))return r("unsupported rel "+t);this.lookup(e,(function(e,n){var o=n.idx.links[t];return e?r(e):0===o.length?r('no links found with rel="'+t+'"'):r(null,o[0])}));},void 0===(n=function(){return u}.apply(t,[]))||(e.exports=n);}();},function(e,t){e.exports=XMLHttpRequest;},function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const o=n(r(3)),i=n(r(17)),s=n(r(1)),a=r(0),u=n(r(31)),c=n(r(12)),h=n(r(4)),l=n(r(16)),d=n(r(8)),f=n(r(14)),p=n(r(15)),m=n(r(32)),g=n(r(33)),y=n(r(13)),v=n(r(34)),_=n(r(35)),b=n(r(36)),w={features:[],featuresDone:0,readyFired:!1,loadFeatures(){this.features=[],this.featuresDone=0,this.readyFired=!1,this.featureModules={WireClient:m.default,Dropbox:p.default,GoogleDrive:f.default,Access:c.default,Discover:l.default,Authorize:h.default,BaseClient:d.default,Env:i.default},o.default.cache&&(0, a.extend)(this.featureModules,{Caching:y.default,IndexedDB:v.default,LocalStorage:_.default,InMemoryStorage:b.default,Sync:g.default}),o.default.disableFeatures.forEach(e=>{this.featureModules[e]&&delete this.featureModules[e];}),this._allLoaded=!1;for(const e in this.featureModules)this.loadFeature(e);},hasFeature(e){for(let t=this.features.length-1;t>=0;t--)if(this.features[t].name===e)return this.features[t].supported;return !1},loadFeature(e){const t=this.featureModules[e],r=!t._rs_supported||t._rs_supported();(0, s.default)(`[RemoteStorage] [FEATURE ${e}] initializing ...`),"object"==typeof r?r.then(()=>{this.featureSupported(e,!0),this.initFeature(e);},()=>{this.featureSupported(e,!1);}):"boolean"==typeof r?(this.featureSupported(e,r),r&&this.initFeature(e)):this.featureSupported(e,!1);},initFeature(e){const t=this.featureModules[e];let r;try{r=t._rs_init(this);}catch(t){return void this.featureFailed(e,t)}"object"==typeof r&&"function"==typeof r.then?r.then(()=>{this.featureInitialized(e);},t=>{this.featureFailed(e,t);}):this.featureInitialized(e);},featureFailed(e,t){(0, s.default)(`[RemoteStorage] [FEATURE ${e}] initialization failed (${t})`),this.featureDone();},featureSupported(e,t){(0, s.default)(`[RemoteStorage] [FEATURE ${e}]${t?"":"not "} supported`),t||this.featureDone();},featureInitialized(e){(0, s.default)(`[RemoteStorage] [FEATURE ${e}] initialized`),this.features.push({name:e,init:this.featureModules[e]._rs_init,supported:!0,cleanup:this.featureModules[e]._rs_cleanup}),this.featureDone();},featureDone(){this.featuresDone++,this.featuresDone===Object.keys(this.featureModules).length&&setTimeout(this.featuresLoaded.bind(this),0);},_setCachingModule(){["IndexedDB","LocalStorage","InMemoryStorage"].some(e=>{if(this.features.some(t=>t.name===e))return this.features.local=this.featureModules[e],!0});},_fireReady(){try{this.readyFired||(this._emit("ready"),this.readyFired=!0);}catch(e){console.error("'ready' failed: ",e,e.stack),this._emit("error",e);}},featuresLoaded(){(0, s.default)("[RemoteStorage] All features loaded"),this._setCachingModule(),this.local=o.default.cache&&this.features.local&&new this.features.local,this.local&&this.remote?(this._setGPD(u.default,this),this._bindChange(this.local)):this.remote&&this._setGPD(this.remote,this.remote),this.remote&&(this.remote.on("connected",()=>{this._fireReady(),this._emit("connected");}),this.remote.on("not-connected",()=>{this._fireReady(),this._emit("not-connected");}),this.remote.connected&&(this._fireReady(),this._emit("connected")),this.hasFeature("Authorize")||this.remote.stopWaitingForToken()),this._collectCleanupFunctions();try{this._allLoaded=!0,this._emit("features-loaded");}catch(e){(0, a.logError)(e),this._emit("error",e);}this._processPending();},_collectCleanupFunctions(){this._cleanups=[];for(let e=0;e<this.features.length;e++){const t=this.features[e].cleanup;"function"==typeof t&&this._cleanups.push(t);}}};e.exports=w;},function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e));}catch(e){i(e);}}function a(e){try{u(n.throw(e));}catch(e){i(e);}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t);}))).then(s,a);}u((n=n.apply(e,t||[])).next());}))};const o=(this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}})(r(1));function i(e){return "dropbox"===this.backend&&!!e.match(/^\/public\/.*[^\/]$/)}const s={get:function(e,t){if(this.local){if(void 0===t)t="object"==typeof(r=this).remote&&r.remote.connected&&r.remote.online?2*r.getSyncInterval():((0, o.default)("Not setting default maxAge, because remote is offline or not connected"),!1);else if("number"!=typeof t&&!1!==t)return Promise.reject("Argument 'maxAge' must be 'false' or a number");return this.local.get(e,t,this.sync.queueGetRequest.bind(this.sync))}return this.remote.get(e);var r;},put:function(e,t,r){return i.bind(this)(e)?s._wrapBusyDone.call(this,this.remote.put(e,t,r)):this.local?this.local.put(e,t,r):s._wrapBusyDone.call(this,this.remote.put(e,t,r))},delete:function(e){return this.local?this.local.delete(e):s._wrapBusyDone.call(this,this.remote.delete(e))},_wrapBusyDone:function(e){return n(this,void 0,void 0,(function*(){return this._emit("wire-busy"),e.then(e=>(this._emit("wire-done",{success:!0}),Promise.resolve(e)),e=>(this._emit("wire-done",{success:!1}),Promise.reject(e)))}))}};e.exports=s;},function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e));}catch(e){i(e);}}function a(e){try{u(n.throw(e));}catch(e){i(e);}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t);}))).then(s,a);}u((n=n.apply(e,t||[])).next());}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const i=o(r(4)),s=o(r(2)),a=o(r(5)),u=o(r(1)),c=r(0),h=r(7),l=r(9);let d;const f="remotestorage:wireclient",p={"draft-dejong-remotestorage-00":2,"draft-dejong-remotestorage-01":3,"draft-dejong-remotestorage-02":4,"https://www.w3.org/community/rww/wiki/read-write-web-00#simple":1};class m extends l.RemoteBase{constructor(e){if(super(e),this._revisionCache={},d=(0, c.localStorageAvailable)(),this.addEvents(["connected","not-connected"]),d){const e=function(){const e=(0, c.getJSONFromLocalStorage)(f)||{},{userAddress:t,href:r,storageApi:n,token:o,properties:i}=e;return {userAddress:t,href:r,storageApi:n,token:o,properties:i}}();e&&setTimeout(()=>{this.configure(e);},0);}this.connected&&setTimeout(this._emit.bind(this),0,"connected");}get storageType(){if(this.storageApi){const e=this.storageApi.match(/draft-dejong-(remotestorage-\d\d)/);return e?e[1]:"2012.04"}}_request(e,t,r,o,s,l,d){return n(this,void 0,void 0,(function*(){if(this.isForbiddenRequestMethod(e,t))return Promise.reject(`Don't use ${e} on directories!`);let n;return r!==i.default.IMPLIED_FAKE_TOKEN&&(o.Authorization="Bearer "+r),this.rs._emit("wire-busy",{method:e,isFolder:(0, c.isFolder)(t)}),(0, h.requestWithTimeout)(e,t,{body:s,headers:o,responseType:"arraybuffer"}).then(r=>{if(this.online||(this.online=!0,this.rs._emit("network-online")),this.rs._emit("wire-done",{method:e,isFolder:(0, c.isFolder)(t),success:!0}),o=r.status,[401,403,404,412].indexOf(o)>=0)return (0, u.default)("[WireClient] Error response status",r.status),n=l?this.stripQuotes(r.getResponseHeader("ETag")):void 0,401===r.status&&this.rs._emit("error",new a.default),Promise.resolve({statusCode:r.status,revision:n});if(function(e){return [201,204,304].indexOf(e)>=0}(r.status)||200===r.status&&"GET"!==e)return n=this.stripQuotes(r.getResponseHeader("ETag")),(0, u.default)("[WireClient] Successful request",n),Promise.resolve({statusCode:r.status,revision:n});{const e=r.getResponseHeader("Content-Type");n=l?this.stripQuotes(r.getResponseHeader("ETag")):200===r.status?d:void 0;const t=function(e){let t,r="utf-8";return e&&(t=e.match(/charset=(.+)$/),t&&(r=t[1])),r}(e);return (0, c.shouldBeTreatedAsBinary)(r.response,e)?((0, u.default)("[WireClient] Successful request with unknown or binary mime-type",n),Promise.resolve({statusCode:r.status,body:r.response,contentType:e,revision:n})):(0, c.getTextFromArrayBuffer)(r.response,t).then(t=>((0, u.default)("[WireClient] Successful request",n),Promise.resolve({statusCode:r.status,body:t,contentType:e,revision:n})))}var o;},r=>(this.online&&(this.online=!1,this.rs._emit("network-offline")),this.rs._emit("wire-done",{method:e,isFolder:(0, c.isFolder)(t),success:!1}),Promise.reject(r)))}))}configure(e){if("object"!=typeof e)throw new Error("WireClient configure settings parameter should be an object");if(void 0!==e.userAddress&&(this.userAddress=e.userAddress),void 0!==e.href&&(this.href=e.href),void 0!==e.storageApi&&(this.storageApi=e.storageApi),void 0!==e.token&&(this.token=e.token),void 0!==e.properties&&(this.properties=e.properties),"string"==typeof this.storageApi){const e=p[this.storageApi]||5;this.supportsRevs=e>=2;}this.href&&this.token?(this.connected=!0,this.online=!0,this._emit("connected")):this.connected=!1,d&&(localStorage[f]=JSON.stringify({userAddress:this.userAddress,href:this.href,storageApi:this.storageApi,token:this.token,properties:this.properties}));}get(e,t={}){if(!this.connected)return Promise.reject("not connected (path: "+e+")");const r={};return this.supportsRevs&&t.ifNoneMatch&&(r["If-None-Match"]=this.addQuotes(t.ifNoneMatch)),this._request("GET",this.href+(0, c.cleanPath)(e),this.token,r,void 0,this.supportsRevs,this._revisionCache[e]).then(t=>{if(!(0, c.isFolder)(e))return Promise.resolve(t);let r={};if(void 0!==t.body)try{t.body=JSON.parse(t.body);}catch(t){return Promise.reject("Folder description at "+this.href+(0, c.cleanPath)(e)+" is not JSON")}if(200===t.statusCode&&"object"==typeof t.body){if(0===Object.keys(t.body).length)t.statusCode=404;else if("http://remotestorage.io/spec/folder-description"===(n=t.body)["@context"]&&"object"==typeof n.items){for(const r in t.body.items)this._revisionCache[e+r]=t.body.items[r].ETag;r=t.body.items;}else Object.keys(t.body).forEach(n=>{this._revisionCache[e+n]=t.body[n],r[n]={ETag:t.body[n]};});return t.body=r,Promise.resolve(t)}return Promise.resolve(t);var n;})}put(e,t,r,n={}){if(!this.connected)return Promise.reject("not connected (path: "+e+")");!r.match(/charset=/)&&(t instanceof ArrayBuffer||(0, h.isArrayBufferView)(t))&&(r+="; charset=binary");const o={"Content-Type":r};return this.supportsRevs&&(n.ifMatch&&(o["If-Match"]=this.addQuotes(n.ifMatch)),n.ifNoneMatch&&(o["If-None-Match"]=this.addQuotes(n.ifNoneMatch))),this._request("PUT",this.href+(0, c.cleanPath)(e),this.token,o,t,this.supportsRevs)}delete(e,t={}){if(!this.connected)throw new Error("not connected (path: "+e+")");t||(t={});const r={};return this.supportsRevs&&t.ifMatch&&(r["If-Match"]=this.addQuotes(t.ifMatch)),this._request("DELETE",this.href+(0, c.cleanPath)(e),this.token,r,void 0,this.supportsRevs)}static _rs_init(e){e.remote=new m(e),e.remote.online=!0;}static _rs_supported(){return "function"==typeof fetch||"function"==typeof XMLHttpRequest}static _rs_cleanup(){d&&delete localStorage[f];}}(0, c.applyMixins)(m,[s.default]),e.exports=m;},function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e));}catch(e){i(e);}}function a(e){try{u(n.throw(e));}catch(e){i(e);}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t);}))).then(s,a);}u((n=n.apply(e,t||[])).next());}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const i=o(r(3)),s=o(r(17)),a=o(r(2)),u=o(r(1)),c=o(r(4)),h=o(r(10)),l=o(r(5)),d=r(0);let f,p;function m(e,t,r){return {action:e,path:t,promise:r}}function g(e,t){return e.common.revision!==t&&(!e.remote||e.remote.revision!==t)}function y(e){return e.common&&e.common.revision}class v{constructor(e){this._finishedTasks=[],this.rs=e,this._tasks={},this._running={},this._timeStarted={},this.numThreads=10,this.rs.local.onDiff(e=>{this.addTask(e),this.doTasks();}),this.rs.caching.onActivate(e=>{this.addTask(e),this.doTasks();}),this.addEvents(["done","req-done"]);}now(){return (new Date).getTime()}queueGetRequest(e){return new Promise((t,r)=>{this.rs.remote.connected?this.rs.remote.online?(this.addTask(e,function(){this.rs.local.get(e).then(e=>t(e));}.bind(this)),this.doTasks()):r("cannot fulfill maxAge requirement - remote is not online"):r("cannot fulfill maxAge requirement - remote is not connected");})}corruptServerItemsMap(e,t){if("object"!=typeof e||Array.isArray(e))return !0;for(const r in e){const n=e[r];if("object"!=typeof n)return !0;if("string"!=typeof n.ETag)return !0;if((0, d.isFolder)(r)){if(-1!==r.substring(0,r.length-1).indexOf("/"))return !0}else{if(-1!==r.indexOf("/"))return !0;if(t){if("string"!=typeof n["Content-Type"])return !0;if("number"!=typeof n["Content-Length"])return !0}}}return !1}corruptItemsMap(e){if("object"!=typeof e||Array.isArray(e))return !0;for(const t in e)if("boolean"!=typeof e[t])return !0;return !1}corruptRevision(e){return "object"!=typeof e||Array.isArray(e)||e.revision&&"string"!=typeof e.revision||e.body&&"string"!=typeof e.body&&"object"!=typeof e.body||e.contentType&&"string"!=typeof e.contentType||e.contentLength&&"number"!=typeof e.contentLength||e.timestamp&&"number"!=typeof e.timestamp||e.itemsMap&&this.corruptItemsMap(e.itemsMap)}isCorrupt(e){return "object"!=typeof e||Array.isArray(e)||"string"!=typeof e.path||this.corruptRevision(e.common)||e.local&&this.corruptRevision(e.local)||e.remote&&this.corruptRevision(e.remote)||e.push&&this.corruptRevision(e.push)}hasTasks(){return Object.getOwnPropertyNames(this._tasks).length>0}collectDiffTasks(){return n(this,void 0,void 0,(function*(){let e=0;return this.rs.local.forAllNodes(t=>{e>100||(this.isCorrupt(t)?((0, u.default)("[Sync] WARNING: corrupt node in local cache",t),"object"==typeof t&&t.path&&(this.addTask(t.path),e++)):(this.needsFetch(t)&&this.rs.access.checkPathPermission(t.path,"r")||(0, d.isDocument)(t.path)&&this.needsPush(t)&&this.rs.access.checkPathPermission(t.path,"rw"))&&(this.addTask(t.path),e++));}).then(()=>e).catch(e=>{throw e})}))}inConflict(e){return e.local&&e.remote&&(void 0!==e.remote.body||e.remote.itemsMap)}needsRefresh(e){return !!e.common&&(!e.common.timestamp||this.now()-e.common.timestamp>i.default.syncInterval)}needsFetch(e){return !!this.inConflict(e)||(!(!e.common||void 0!==e.common.itemsMap||void 0!==e.common.body)||!(!e.remote||void 0!==e.remote.itemsMap||void 0!==e.remote.body))}needsPush(e){return !this.inConflict(e)&&(!(!e.local||e.push)||void 0)}needsRemotePut(e){return e.local&&e.local.body}needsRemoteDelete(e){return e.local&&!1===e.local.body}getParentPath(e){const t=e.match(/^(.*\/)([^\/]+\/?)$/);if(t)return t[1];throw new Error('Not a valid path: "'+e+'"')}deleteChildPathsFromTasks(){for(const e in this._tasks){const t=(0, d.pathsFromRoot)(e);for(let r=1;r<t.length;r++)this._tasks[t[r]]&&(Array.isArray(this._tasks[e])&&this._tasks[e].length&&Array.prototype.push.apply(this._tasks[t[r]],this._tasks[e]),delete this._tasks[e]);}}collectRefreshTasks(){return n(this,void 0,void 0,(function*(){return this.rs.local.forAllNodes(e=>{let t;if(this.needsRefresh(e)){try{t=this.getParentPath(e.path);}catch(e){}t&&this.rs.access.checkPathPermission(t,"r")?this.addTask(t):this.rs.access.checkPathPermission(e.path,"r")&&this.addTask(e.path);}}).then(()=>this.deleteChildPathsFromTasks()).catch(e=>{throw e})}))}flush(e){for(const t in e)"FLUSH"===this.rs.caching.checkPath(t)&&e[t]&&!e[t].local&&((0, u.default)("[Sync] Flushing",t),e[t]=void 0);return e}doTask(e){return this.rs.local.getNodes([e]).then(t=>{const r=t[e];return void 0===r||function(e){return e.remote&&e.remote.revision&&!e.remote.itemsMap&&!e.remote.body}(r)?m("get",e,this.rs.remote.get(e)):this.needsRemotePut(r)?(r.push=(0, d.deepClone)(r.local),r.push.timestamp=this.now(),this.rs.local.setNodes(this.flush(t)).then(()=>{let t;return t=y(r)?{ifMatch:r.common.revision}:{ifNoneMatch:"*"},m("put",e,this.rs.remote.put(e,r.push.body,r.push.contentType,t))})):this.needsRemoteDelete(r)?(r.push={body:!1,timestamp:this.now()},this.rs.local.setNodes(this.flush(t)).then(()=>y(r)?m("delete",e,this.rs.remote.delete(e,{ifMatch:r.common.revision})):m("get",e,this.rs.remote.get(e)))):y(r)?m("get",e,this.rs.remote.get(e,{ifNoneMatch:r.common.revision})):m("get",e,this.rs.remote.get(e))})}autoMergeFolder(e){if(e.remote.itemsMap&&(e.common=e.remote,delete e.remote,e.common.itemsMap)){for(const t in e.common.itemsMap)e.local.itemsMap[t]||(e.local.itemsMap[t]=!1);(0, d.equal)(e.local.itemsMap,e.common.itemsMap)&&delete e.local;}return e}autoMergeDocument(e){return !function(e){return (!e.remote||!e.remote.revision||e.remote.revision===e.common.revision)&&(void 0===e.common.body&&!1===e.remote.body||e.remote.body===e.common.body&&e.remote.contentType===e.common.contentType)}(e)?void 0!==e.remote.body&&((0, u.default)("[Sync] Emitting keep/revert"),this.rs.local._emitChange({origin:"conflict",path:e.path,oldValue:e.local.body,newValue:e.remote.body,lastCommonValue:e.common.body,oldContentType:e.local.contentType,newContentType:e.remote.contentType,lastCommonContentType:e.common.contentType}),e.remote.body?e.common=e.remote:e.common={},delete e.remote,delete e.local):delete(e=function(e){return e.remote&&!1===e.remote.body&&e.local&&!1===e.local.body&&delete e.local,e}(e)).remote,e}autoMerge(e){if(e.remote){if(e.local)return (0, d.isFolder)(e.path)?this.autoMergeFolder(e):this.autoMergeDocument(e);if((0, d.isFolder)(e.path))void 0!==e.remote.itemsMap&&(e.common=e.remote,delete e.remote);else if(void 0!==e.remote.body){const t={origin:"remote",path:e.path,oldValue:!1===e.common.body?void 0:e.common.body,newValue:!1===e.remote.body?void 0:e.remote.body,oldContentType:e.common.contentType,newContentType:e.remote.contentType};if((t.oldValue||t.newValue)&&this.rs.local._emitChange(t),!e.remote.body)return;e.common=e.remote,delete e.remote;}return e}e.common.body&&this.rs.local._emitChange({origin:"remote",path:e.path,oldValue:e.common.body,newValue:void 0,oldContentType:e.common.contentType,newContentType:void 0});}updateCommonTimestamp(e,t){return n(this,void 0,void 0,(function*(){return this.rs.local.getNodes([e]).then(r=>(r[e]&&r[e].common&&r[e].common.revision===t&&(r[e].common.timestamp=this.now()),this.rs.local.setNodes(this.flush(r))))}))}markChildren(e,t,r,o){return n(this,void 0,void 0,(function*(){const n=[],i={},s={};for(const r in t)n.push(e+r),i[e+r]=t[r];for(const t in o)n.push(e+t);return this.rs.local.getNodes(n).then(t=>{let n,a;for(const u in t)if(a=t[u],i[u])a&&a.common?g(a,i[u].ETag)&&(r[u]=(0, d.deepClone)(a),r[u].remote={revision:i[u].ETag,timestamp:this.now()},r[u]=this.autoMerge(r[u])):(n=this.rs.caching.checkPath(u),"ALL"===n&&(r[u]={path:u,common:{timestamp:this.now()},remote:{revision:i[u].ETag,timestamp:this.now()}})),r[u]&&i[u]["Content-Type"]&&(r[u].remote.contentType=i[u]["Content-Type"]),r[u]&&i[u]["Content-Length"]&&(r[u].remote.contentLength=i[u]["Content-Length"]);else if(o[u.substring(e.length)]&&a&&a.common){if(a.common.itemsMap)for(const e in a.common.itemsMap)s[u+e]=!0;if(a.local&&a.local.itemsMap)for(const e in a.local.itemsMap)s[u+e]=!0;if(a.remote||(0, d.isFolder)(u))r[u]=void 0;else if(r[u]=this.autoMerge(a),void 0===r[u]){const t=this.getParentPath(u),n=r[t],o=u.substring(e.length);n&&n.local&&(delete n.local.itemsMap[o],(0, d.equal)(n.local.itemsMap,n.common.itemsMap)&&delete n.local);}}return this.deleteRemoteTrees(Object.keys(s),r).then(e=>this.rs.local.setNodes(this.flush(e)))})}))}deleteRemoteTrees(e,t){return n(this,void 0,void 0,(function*(){return 0===e.length?Promise.resolve(t):this.rs.local.getNodes(e).then(e=>n(this,void 0,void 0,(function*(){const r={};function n(e,t){if(e&&e.itemsMap)for(const n in e.itemsMap)r[t+n]=!0;}for(const r in e){const o=e[r];o&&((0, d.isFolder)(r)?(n(o.common,r),n(o.local,r)):o.common&&void 0!==typeof o.common.body&&(t[r]=(0, d.deepClone)(o),t[r].remote={body:!1,timestamp:this.now()},t[r]=this.autoMerge(t[r])));}return this.deleteRemoteTrees(Object.keys(r),t).then(e=>this.rs.local.setNodes(this.flush(e)))})))}))}completeFetch(e,t,r,o){return n(this,void 0,void 0,(function*(){let n,i;const s=(0, d.pathsFromRoot)(e);return (0, d.isFolder)(e)?n=[e]:(i=s[1],n=[e,i]),this.rs.local.getNodes(n).then(n=>{let s,a,u=n[e];const c={};function h(e){if(e&&e.itemsMap)for(s in e.itemsMap)t[s]||(c[s]=!0);}if("object"==typeof u&&u.path===e&&"object"==typeof u.common||(u={path:e,common:{}},n[e]=u),u.remote={revision:o,timestamp:this.now()},(0, d.isFolder)(e))for(s in h(u.common),h(u.remote),u.remote.itemsMap={},t)u.remote.itemsMap[s]=!0;else u.remote.body=t,u.remote.contentType=r,a=n[i],a&&a.local&&a.local.itemsMap&&(s=e.substring(i.length),a.local.itemsMap[s]=!0,(0, d.equal)(a.local.itemsMap,a.common.itemsMap)&&delete a.local);return n[e]=this.autoMerge(u),{toBeSaved:n,missingChildren:c}})}))}completePush(e,t,r,o){return n(this,void 0,void 0,(function*(){return this.rs.local.getNodes([e]).then(n=>{const i=n[e];if(!i.push)throw this.stopped=!0,new Error("completePush called but no push version!");return r?((0, u.default)("[Sync] We have a conflict"),i.remote&&i.remote.revision===o||(i.remote={revision:o||"conflict",timestamp:this.now()},delete i.push),n[e]=this.autoMerge(i)):(i.common={revision:o,timestamp:this.now()},"put"===t?(i.common.body=i.push.body,i.common.contentType=i.push.contentType,(0, d.equal)(i.local.body,i.push.body)&&i.local.contentType===i.push.contentType&&delete i.local,delete i.push):"delete"===t&&(!1===i.local.body?n[e]=void 0:delete i.push)),this.rs.local.setNodes(this.flush(n))})}))}dealWithFailure(e){return n(this,void 0,void 0,(function*(){return this.rs.local.getNodes([e]).then(t=>{if(t[e])return delete t[e].push,this.rs.local.setNodes(this.flush(t))})}))}interpretStatus(e){const t={statusCode:e,successful:void 0,conflict:void 0,unAuth:void 0,notFound:void 0,changed:void 0,networkProblems:void 0};if("string"==typeof e&&("offline"===e||"timeout"===e))return t.successful=!1,t.networkProblems=!0,t;if("number"==typeof e){const r=Math.floor(e/100);return t.successful=2===r||304===e||412===e||404===e,t.conflict=412===e,t.unAuth=401===e&&this.rs.remote.token!==c.default.IMPLIED_FAKE_TOKEN||402===e||403===e,t.notFound=404===e,t.changed=304!==e,t}}handleGetResponse(e,t,r,o,i){return n(this,void 0,void 0,(function*(){return t.notFound&&(r=!!(0, d.isFolder)(e)&&{}),t.changed?this.completeFetch(e,r,o,i).then(t=>(0, d.isFolder)(e)?this.corruptServerItemsMap(r)?((0, u.default)("[Sync] WARNING: Discarding corrupt folder description from server for "+e),!1):this.markChildren(e,r,t.toBeSaved,t.missingChildren).then(()=>!0):this.rs.local.setNodes(this.flush(t.toBeSaved)).then(()=>!0)):this.updateCommonTimestamp(e,i).then(()=>!0)}))}handleResponse(e,t,r){const n=this.interpretStatus(r.statusCode);if(n.successful){if("get"===t)return this.handleGetResponse(e,n,r.body,r.contentType,r.revision);if("put"===t||"delete"===t)return this.completePush(e,t,n.conflict,r.revision).then((function(){return !0}));throw new Error("cannot handle response for unknown action "+t)}{let t;return t=n.unAuth?new l.default:n.networkProblems?new h.default("Network request failed."):new Error("HTTP response code "+n.statusCode+" received."),this.dealWithFailure(e).then(()=>{throw this.rs._emit("error",t),t})}}finishTask(e,t=!0){if(void 0!==e.action){if(!(t&&((0, u.default)("[Sync] queue finished task:",e.path),this._finishedTasks.push(e),this._finishedTasks.length>1)))return (0, u.default)("[Sync] run task:",e.path),e.promise.then(t=>this.handleResponse(e.path,e.action,t),t=>((0, u.default)("[Sync] wireclient rejects its promise!",e.path,e.action,t),this.handleResponse(e.path,e.action,{statusCode:"offline"}))).then(t=>{if(this._finishedTasks.shift(),delete this._timeStarted[e.path],delete this._running[e.path],t&&this._tasks[e.path]){for(let t=0;t<this._tasks[e.path].length;t++)this._tasks[e.path][t]();delete this._tasks[e.path];}this.rs._emit("sync-req-done"),this._finishedTasks.length>0?this.finishTask(this._finishedTasks[0],!1):this.collectTasks(!1).then(()=>{!this.hasTasks()||this.stopped?((0, u.default)("[Sync] Sync is done! Reschedule?",Object.getOwnPropertyNames(this._tasks).length,this.stopped),this.done||(this.done=!0,this.rs._emit("sync-done"))):setTimeout(()=>{this.doTasks();},10);});},t=>{(0, u.default)("[Sync] Error",t),this._finishedTasks.shift(),delete this._timeStarted[e.path],delete this._running[e.path],this.rs._emit("sync-req-done"),this._finishedTasks.length>0?this.finishTask(this._finishedTasks[0],!1):this.done||(this.done=!0,this.rs._emit("sync-done"));});(0, u.default)("[Sync] delaying finished task:",e.path);}else delete this._running[e.path];}doTasks(){let e,t,r=0;e=this.rs.remote.connected?this.rs.remote.online?this.numThreads:1:0;const n=e-Object.getOwnPropertyNames(this._running).length;if(n<=0)return !0;for(t in this._tasks)if(!this._running[t]&&(this._timeStarted[t]=this.now(),this._running[t]=this.doTask(t),this._running[t].then(this.finishTask.bind(this)),r++,r>=n))return !0;return r>=n}collectTasks(e){return n(this,void 0,void 0,(function*(){return this.hasTasks()||this.stopped?Promise.resolve():this.collectDiffTasks().then(t=>t||!1===e?Promise.resolve():this.collectRefreshTasks(),(function(e){throw e}))}))}addTask(e,t){this._tasks[e]||(this._tasks[e]=[]),"function"==typeof t&&this._tasks[e].push(t);}sync(){return this.done=!1,this.doTasks()?Promise.resolve():this.collectTasks().then(()=>{try{this.doTasks();}catch(e){(0, u.default)("[Sync] doTasks error",e);}},(function(e){throw(0, u.default)("[Sync] Sync error",e),new Error("Local cache unavailable")}))}static _rs_init(e){f=function(){(0, u.default)("[Sync] syncCycleCb calling syncCycle");const t=new s.default;t.isBrowser()&&function(e,t){function r(e){const r=t.getCurrentSyncInterval();i.default.isBackground=!e;const n=t.getCurrentSyncInterval();t._emit("sync-interval-change",{oldValue:r,newValue:n});}e.on("background",()=>r(!1)),e.on("foreground",()=>r(!0));}(t,e),e.sync||(e.sync=new v(e),e.syncStopped&&((0, u.default)("[Sync] Instantiating sync stopped"),e.sync.stopped=!0,delete e.syncStopped)),(0, u.default)("[Sync] syncCycleCb calling syncCycle"),e.syncCycle();},p=function(){e.removeEventListener("connected",p),e.startSync();},e.on("ready",f),e.on("connected",p);}static _rs_cleanup(e){e.stopSync(),e.removeEventListener("ready",f),e.removeEventListener("connected",p),e.sync=void 0,delete e.sync;}}(0, d.applyMixins)(v,[a.default]),e.exports=v;},function(e,t,r){(function(t){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e));}catch(e){i(e);}}function a(e){try{u(n.throw(e));}catch(e){i(e);}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t);}))).then(s,a);}u((n=n.apply(e,t||[])).next());}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const i=o(r(2)),s=o(r(11)),a=o(r(1)),u=r(0);let c;class h extends s.default{constructor(e){super(),this.addEvents(["change","local-events-done"]),this.db=e||c,this.db?(this.getsRunning=0,this.putsRunning=0,this.changesQueued={},this.changesRunning={},this.commitSlownessWarning=null):(0, a.default)("[IndexedDB] Failed to open DB");}getNodes(e){return n(this,void 0,void 0,(function*(){const t=[],r={};for(let n=0,o=e.length;n<o;n++)void 0!==this.changesQueued[e[n]]?r[e[n]]=(0, u.deepClone)(this.changesQueued[e[n]]||void 0):void 0!==this.changesRunning[e[n]]?r[e[n]]=(0, u.deepClone)(this.changesRunning[e[n]]||void 0):t.push(e[n]);return t.length>0?this.getNodesFromDb(t).then((function(e){for(const t in r)e[t]=r[t];return e})):Promise.resolve(r)}))}setNodes(e){return n(this,void 0,void 0,(function*(){for(const t in e)this.changesQueued[t]=e[t]||!1;return this.maybeFlush(),Promise.resolve()}))}maybeFlush(){0===this.putsRunning?this.flushChangesQueued():this.commitSlownessWarning||(this.commitSlownessWarning=t.setInterval((function(){console.warn("WARNING: waited more than 10 seconds for previous commit to finish");}),1e4));}flushChangesQueued(){this.commitSlownessWarning&&(clearInterval(this.commitSlownessWarning),this.commitSlownessWarning=null),Object.keys(this.changesQueued).length>0&&(this.changesRunning=this.changesQueued,this.changesQueued={},this.setNodesInDb(this.changesRunning).then(this.flushChangesQueued.bind(this)));}getNodesFromDb(e){return new Promise((t,r)=>{const n=this.db.transaction(["nodes"],"readonly"),o=n.objectStore("nodes"),i={};this.getsRunning++,e.map(e=>{o.get(e).onsuccess=t=>{i[e]=t.target.result;};}),n.oncomplete=()=>{t(i),this.getsRunning--;},n.onerror=n.onabort=()=>{r("get transaction error/abort"),this.getsRunning--;};})}setNodesInDb(e){return n(this,void 0,void 0,(function*(){return new Promise((t,r)=>{const n=this.db.transaction(["nodes"],"readwrite"),o=n.objectStore("nodes"),i=(new Date).getTime();this.putsRunning++,(0, a.default)("[IndexedDB] Starting put",e,this.putsRunning);for(const t in e){const r=e[t];if("object"==typeof r)try{o.put(r);}catch(e){throw(0, a.default)("[IndexedDB] Error while putting",r,e),e}else try{o.delete(t);}catch(e){throw(0, a.default)("[IndexedDB] Error while removing",o,r,e),e}}n.oncomplete=()=>{this.putsRunning--,(0, a.default)("[IndexedDB] Finished put",e,this.putsRunning,(new Date).getTime()-i+"ms"),t();},n.onerror=()=>{this.putsRunning--,r("transaction error");},n.onabort=()=>{r("transaction abort"),this.putsRunning--;};})}))}reset(e){const t=this.db.name;this.db.close(),h.clean(this.db.name,()=>{h.open(t,(t,r)=>{t?(0, a.default)("[IndexedDB] Error while resetting local storage",t):this.db=r,"function"==typeof e&&e(self);});});}forAllNodes(e){return n(this,void 0,void 0,(function*(){return new Promise(t=>{this.db.transaction(["nodes"],"readonly").objectStore("nodes").openCursor().onsuccess=r=>{const n=r.target.result;n?(e(this.migrate(n.value)),n.continue()):t();};})}))}closeDB(){0===this.putsRunning?this.db.close():setTimeout(this.closeDB.bind(this),100);}static open(e,t){const r=setTimeout((function(){t("timeout trying to open db");}),1e4);try{const n=indexedDB.open(e,2);n.onerror=function(){(0,a.default)("[IndexedDB] Opening DB failed",n),clearTimeout(r),t(n.error);},n.onupgradeneeded=function(e){const t=n.result;(0,a.default)("[IndexedDB] Upgrade: from ",e.oldVersion," to ",e.newVersion),1!==e.oldVersion&&((0,a.default)("[IndexedDB] Creating object store: nodes"),t.createObjectStore("nodes",{keyPath:"path"})),(0,a.default)("[IndexedDB] Creating object store: changes"),t.createObjectStore("changes",{keyPath:"path"});},n.onsuccess=function(){clearTimeout(r);const o=n.result;if(!o.objectStoreNames.contains("nodes")||!o.objectStoreNames.contains("changes"))return (0,a.default)("[IndexedDB] Missing object store. Resetting the database."),void h.clean(e,(function(){h.open(e,t);}));t(null,n.result);};}catch(n){(0, a.default)("[IndexedDB] Failed to open database: "+n),(0, a.default)("[IndexedDB] Resetting database and trying again."),clearTimeout(r),h.clean(e,(function(){h.open(e,t);}));}}static clean(e,t){const r=indexedDB.deleteDatabase(e);r.onsuccess=function(){(0, a.default)("[IndexedDB] Done removing DB"),t();},r.onerror=r.onabort=function(t){console.error('Failed to remove database "'+e+'"',t);};}static _rs_init(e){return new Promise((t,r)=>{h.open("remotestorage",(function(n,o){n?r(n):(c=o,o.onerror=()=>{e._emit("error",n);},t());}));})}static _rs_supported(){return new Promise((e,t)=>{const r=(0, u.getGlobalContext)();let n=!1;if("undefined"!=typeof navigator&&navigator.userAgent.match(/Android (2|3|4\.[0-3])/)&&(navigator.userAgent.match(/Chrome|Firefox/)||(n=!0)),"indexedDB"in r&&!n)try{const r=indexedDB.open("rs-check");r.onerror=function(){t();},r.onsuccess=function(){r.result.close(),indexedDB.deleteDatabase("rs-check"),e();};}catch(e){t();}else t();})}static _rs_cleanup(e){return new Promise(t=>{e.local&&e.local.closeDB(),h.clean("remotestorage",t);})}diffHandler(){}}(0, u.applyMixins)(h,[i.default]),e.exports=h;}).call(this,r(6));},function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const o=n(r(11)),i=n(r(2)),s=n(r(1)),a=r(0),u="remotestorage:cache:nodes:";function c(e){return e.substr(0,u.length)===u||"remotestorage:cache:changes:"===e.substr(0,"remotestorage:cache:changes:".length)}class h extends o.default{constructor(){super(),this.addEvents(["change","local-events-done"]);}diffHandler(...e){}getNodes(e){const t={};for(let r=0,n=e.length;r<n;r++)try{t[e[r]]=JSON.parse(localStorage[u+e[r]]);}catch(n){t[e[r]]=void 0;}return Promise.resolve(t)}setNodes(e){for(const t in e)localStorage[u+t]=JSON.stringify(e[t]);return Promise.resolve()}forAllNodes(e){let t;for(let r=0,n=localStorage.length;r<n;r++)if(localStorage.key(r).substr(0,u.length)===u){try{t=this.migrate(JSON.parse(localStorage[localStorage.key(r)]));}catch(e){t=void 0;}t&&e(t);}return Promise.resolve()}static _rs_init(){}static _rs_supported(){return (0, a.localStorageAvailable)()}static _rs_cleanup(){const e=[];for(let t=0,r=localStorage.length;t<r;t++){const r=localStorage.key(t);c(r)&&e.push(r);}e.forEach(e=>{(0, s.default)("[LocalStorage] Removing",e),delete localStorage[e];});}}(0, a.applyMixins)(h,[i.default]),e.exports=h;},function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const o=n(r(2)),i=n(r(11)),s=r(0);class a extends i.default{constructor(){super(),this._storage={},this.addEvents(["change","local-events-done"]);}getNodes(e){const t={};for(let r=0,n=e.length;r<n;r++)t[e[r]]=(0, s.deepClone)(this._storage[e[r]]);return Promise.resolve(t)}setNodes(e){for(const t in e)void 0===e[t]?delete this._storage[t]:this._storage[t]=e[t];return Promise.resolve()}forAllNodes(e){for(const t in this._storage)e(this.migrate(this._storage[t]));return Promise.resolve()}diffHandler(){}static _rs_init(){}static _rs_supported(){return !0}static _rs_cleanup(){}}(0, s.applyMixins)(a,[o.default]),e.exports=a;}])}));

    });

    var RemoteStorage = unwrapExports(remotestorage);
    var remotestorage_1 = remotestorage.RemoteStorage;

    function createError(message) {
        var err = new Error(message);
        err.source = "ulid";
        return err;
    }
    // These values should NEVER change. If
    // they do, we're no longer making ulids!
    var ENCODING = "0123456789ABCDEFGHJKMNPQRSTVWXYZ"; // Crockford's Base32
    var ENCODING_LEN = ENCODING.length;
    var TIME_MAX = Math.pow(2, 48) - 1;
    var TIME_LEN = 10;
    var RANDOM_LEN = 16;
    function randomChar(prng) {
        var rand = Math.floor(prng() * ENCODING_LEN);
        if (rand === ENCODING_LEN) {
            rand = ENCODING_LEN - 1;
        }
        return ENCODING.charAt(rand);
    }
    function encodeTime(now, len) {
        if (isNaN(now)) {
            throw new Error(now + " must be a number");
        }
        if (now > TIME_MAX) {
            throw createError("cannot encode time greater than " + TIME_MAX);
        }
        if (now < 0) {
            throw createError("time must be positive");
        }
        if (Number.isInteger(now) === false) {
            throw createError("time must be an integer");
        }
        var mod = void 0;
        var str = "";
        for (; len > 0; len--) {
            mod = now % ENCODING_LEN;
            str = ENCODING.charAt(mod) + str;
            now = (now - mod) / ENCODING_LEN;
        }
        return str;
    }
    function encodeRandom(len, prng) {
        var str = "";
        for (; len > 0; len--) {
            str = randomChar(prng) + str;
        }
        return str;
    }
    function detectPrng() {
        var allowInsecure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (typeof require === 'undefined' && typeof navigator !== 'undefined' && navigator.appName === 'Zombie');
        var root = arguments[1];

        if (!root) {
            root = typeof window !== "undefined" ? window : null;
        }
        var browserCrypto = root && (root.crypto || root.msCrypto);
        if (browserCrypto) {
            return function () {
                var buffer = new Uint8Array(1);
                browserCrypto.getRandomValues(buffer);
                return buffer[0] / 0xff;
            };
        } else {
            try {
                var nodeCrypto = require("crypto");
                return function () {
                    return nodeCrypto.randomBytes(1).readUInt8() / 0xff;
                };
            } catch (e) {}
        }
        if (allowInsecure) {
            return function () {
                return Math.random();
            };
        }
        throw createError("secure crypto unusable, insecure Math.random not allowed");
    }
    function factory(currPrng) {
        if (!currPrng) {
            currPrng = detectPrng();
        }
        return function ulid(seedTime) {
            if (isNaN(seedTime)) {
                seedTime = Date.now();
            }
            return encodeTime(seedTime, TIME_LEN) + encodeRandom(RANDOM_LEN, currPrng);
        };
    }
    var ulid = factory();

    const uniqueID = ulid;

    const mod = {

    	KOMDeckErrors (inputData, options = {}) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const errors = {};

    		if (typeof inputData.KOMDeckID !== 'string') {
    			errors.KOMDeckID = [
    				'KOMErrorNotString',
    			];
    		} else if (!inputData.KOMDeckID.trim()) {
    			errors.KOMDeckID = [
    				'KOMErrorNotFilled',
    			];
    		}

    		if (typeof inputData.KOMDeckName !== 'string') {
    			errors.KOMDeckName = [
    				'KOMErrorNotString',
    			];
    		}

    		if (!(inputData.KOMDeckCreationDate instanceof Date) || Number.isNaN(inputData.KOMDeckCreationDate.getTime())) {
    			errors.KOMDeckCreationDate = [
    				'KOMErrorNotDate',
    			];
    		}

    		if (!(inputData.KOMDeckModificationDate instanceof Date) || Number.isNaN(inputData.KOMDeckModificationDate.getTime())) {
    			errors.KOMDeckModificationDate = [
    				'KOMErrorNotDate',
    			];
    		}

    		if (inputData.KOMDeckAudioIsEnabled !== undefined) {
    			if (typeof inputData.KOMDeckAudioIsEnabled !== 'boolean') {
    				errors.KOMDeckAudioIsEnabled = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		if (inputData.KOMDeckFrontSpeechIsEnabled !== undefined) {
    			if (typeof inputData.KOMDeckFrontSpeechIsEnabled !== 'boolean') {
    				errors.KOMDeckFrontSpeechIsEnabled = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		if (inputData.KOMDeckRearSpeechIsEnabled !== undefined) {
    			if (typeof inputData.KOMDeckRearSpeechIsEnabled !== 'boolean') {
    				errors.KOMDeckRearSpeechIsEnabled = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		if (inputData.KOMDeckFrontLanguageCode !== undefined) {
    			if (typeof inputData.KOMDeckFrontLanguageCode !== 'string') {
    				errors.KOMDeckFrontLanguageCode = [
    					'KOMErrorNotString',
    				];
    			}
    		}

    		if (inputData.KOMDeckRearLanguageCode !== undefined) {
    			if (typeof inputData.KOMDeckRearLanguageCode !== 'string') {
    				errors.KOMDeckRearLanguageCode = [
    					'KOMErrorNotString',
    				];
    			}
    		}

    		if (inputData.KOMDeckRetireCardsMonths !== undefined) {
    			const error = (function() {
    				if (typeof inputData.KOMDeckRetireCardsMonths !== 'number') {
    					return [
    						'KOMErrorNotNumber',
    					];
    				}

    				if (parseInt(inputData.KOMDeckRetireCardsMonths) !== inputData.KOMDeckRetireCardsMonths) {
    					return [
    						'KOMErrorNotInteger',
    					];
    				}

    				if (inputData.KOMDeckRetireCardsMonths < 0) {
    					return [
    						'KOMErrorNotValid',
    					];
    				}
    			})();

    			if (error) {
    				errors.KOMDeckRetireCardsMonths = error;
    			}		}

    		if (inputData.KOMDeckIsForwardOnly !== undefined) {
    			if (typeof inputData.KOMDeckIsForwardOnly !== 'boolean') {
    				errors.KOMDeckIsForwardOnly = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		if (inputData.KOMDeckPairingIsEnabled !== undefined) {
    			if (typeof inputData.KOMDeckPairingIsEnabled !== 'boolean') {
    				errors.KOMDeckPairingIsEnabled = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		return Object.entries(errors).length ? errors : null;
    	},
    	
    	KOMDeckDirectory () {
    		return 'kom_decks';
    	},

    	KOMDeckFolderPath (inputData) {
    		return `${ mod.KOMDeckDirectory() }/${ inputData.KOMDeckID }/`;
    	},

    	KOMDeckObjectPath (inputData) {
    		return mod.KOMDeckFolderPath(inputData) + 'main';
    	},

    	KOMDeckStub (inputData) {
    		return {
    			KOMDeckID: inputData.split('/main').shift().split('/').pop(),
    		};
    	},

    };

    var KOMDeck = Object.assign(mod, {
    	ZDRSchemaKey: 'KOMDeck',
    	ZDRSchemaDispatchValidate: mod.KOMDeckErrors,
    	ZDRSchemaPath: mod.KOMDeckObjectPath,
    	ZDRSchemaStub: mod.KOMDeckStub,
    	ZDRSchemaMethods: {
    		
    		KOMDeckCreate (inputData) {
    			if (typeof inputData !== 'object' || inputData === null) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			const KOMDeckCreationDate = new Date();

    			return this.App.KOMDeck.ZDRModelWriteObject(Object.assign(inputData, Object.assign({
    				KOMDeckID: uniqueID(),
    				KOMDeckCreationDate,
    				KOMDeckModificationDate: KOMDeckCreationDate,
    			}, inputData)));
    		},

    		KOMDeckUpdate (inputData) {
    			if (typeof inputData !== 'object' || inputData === null) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			return this.App.KOMDeck.ZDRModelWriteObject(Object.assign(inputData, {
    				KOMDeckModificationDate: new Date(),
    			}));
    		},

    		async KOMDeckList () {
    			const _this = this;
    			return (await Promise.all((await _this.App.ZDRStoragePaths(mod.KOMDeckDirectory())).map(function (e) {
    				return _this.App.ZDRStorageReadObject(mod.KOMDeckDirectory() + '/' + e + 'main');
    			}))).filter(function (e) {
    				return !!e;
    			}).map(main$3.OLSKRemoteStoragePostJSONParse);
    		},

    		async KOMDeckDelete (inputData) {
    			if (typeof inputData !== 'object' || inputData === null) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			if (mod.KOMDeckErrors(inputData)) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			await this.App.ZDRStorageDeleteFolderRecursive(mod.KOMDeckFolderPath(inputData));

    			return inputData;
    		},

    		async KOMDeckObjectsMap (param1, param2 = false) {
    			if (mod.KOMDeckErrors(param1)) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			if (typeof param2 !== 'boolean') {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			const _this = this;

    			const $KOMDeckCards = await _this.App.KOMCard.KOMCardList(param1);
    			const spacingEntries = Object.fromEntries((await Promise.all($KOMDeckCards.map(async function (e) {
    				return [e.KOMCardID, Object.values(await _this.App.KOMSpacing.KOMSpacingList(e))];
    			}))));

    			return {
    				$KOMDeckCards,
    				$KOMDeckSpacings: [].concat(...(param2 ? $KOMDeckCards.filter(function (e) {
    					return ![e.KOMCardFrontText, e.KOMCardRearText].join(',').includes('???');
    				}) : $KOMDeckCards).map(function ($KOMSpacingCard) {
    					return (spacingEntries[$KOMSpacingCard.KOMCardID] || []).map(function (e) {
    						return Object.assign(e, {
    							$KOMSpacingCard,
    						});
    					});
    				})).filter(function (e) {
    					return param1.KOMDeckIsForwardOnly && _this.App.KOMSpacing.KOMSpacingIsBackward(e) ? false : true;
    				}),
    			};
    		},

    	},
    });

    const uniqueID$1 = ulid;

    const mod$1 = {

    	KOMCardErrors (inputData, options = {}) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const errors = {};

    		if (typeof inputData.KOMCardID !== 'string') {
    			errors.KOMCardID = [
    				'KOMErrorNotString',
    			];
    		} else if (!inputData.KOMCardID.trim()) {
    			errors.KOMCardID = [
    				'KOMErrorNotFilled',
    			];
    		}

    		if (typeof inputData.KOMCardDeckID !== 'string') {
    			errors.KOMCardDeckID = [
    				'KOMErrorNotString',
    			];
    		} else if (!inputData.KOMCardDeckID.trim()) {
    			errors.KOMCardDeckID = [
    				'KOMErrorNotFilled',
    			];
    		}

    		if (typeof inputData.KOMCardFrontText !== 'string') {
    			errors.KOMCardFrontText = [
    				'KOMErrorNotString',
    			];
    		}

    		if (typeof inputData.KOMCardRearText !== 'string') {
    			errors.KOMCardRearText = [
    				'KOMErrorNotString',
    			];
    		}

    		if (!(inputData.KOMCardCreationDate instanceof Date) || Number.isNaN(inputData.KOMCardCreationDate.getTime())) {
    			errors.KOMCardCreationDate = [
    				'KOMErrorNotDate',
    			];
    		}

    		if (!(inputData.KOMCardModificationDate instanceof Date) || Number.isNaN(inputData.KOMCardModificationDate.getTime())) {
    			errors.KOMCardModificationDate = [
    				'KOMErrorNotDate',
    			];
    		}

    		if (inputData.KOMCardNotes !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (typeof inputData.KOMCardNotes !== 'string') {
    				errors.KOMCardNotes = [
    					'KOMErrorNotString',
    				];
    			}
    		}

    		if (inputData.KOMCardFrontAudio !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (typeof inputData.KOMCardFrontAudio !== 'boolean') {
    				errors.KOMCardFrontAudio = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		if (inputData.KOMCardRearAudio !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (typeof inputData.KOMCardRearAudio !== 'boolean') {
    				errors.KOMCardRearAudio = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		if (inputData.KOMCardTags !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (!Array.isArray(inputData.KOMCardTags)) {
    				errors.KOMCardTags = [
    					'KOMErrorNotArray',
    				];
    			}
    		}

    		if (inputData.KOMCardIsRetired !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (typeof inputData.KOMCardIsRetired !== 'boolean') {
    				errors.KOMCardIsRetired = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		return Object.entries(errors).length ? errors : null;
    	},

    	KOMCardAudioFields() {
    		return [
    			'KOMCardFrontAudio',
    			'KOMCardRearAudio',
    		];
    	},

    	KOMCardDirectory () {
    		return 'kom_cards';
    	},

    	KOMCardFolderPath (inputData) {
    		return [
    			KOMDeck.KOMDeckFolderPath({
    				KOMDeckID: inputData.KOMCardDeckID,
    			}) + mod$1.KOMCardDirectory(),
    			inputData.KOMCardCreationDate.toJSON().split('T').shift(),
    			inputData.KOMCardID,
    		].join('/') + '/';
    	},

    	KOMCardObjectPath (inputData) {
    		return mod$1.KOMCardFolderPath(inputData) + 'main';
    	},

    	KOMCardStub (inputData) {
    		const groups = (inputData.match(new RegExp(`\/(?<deck>[\\w\.]+)\/${ mod$1.KOMCardDirectory() }\/(?<date>[0-9]{4}-[0-9]{2}-[0-9]{2})\/(?<card>[\\w\.]+)\/main`)) || {}).groups || {};

    		return {
    			KOMCardID: groups.card,
    			KOMCardDeckID: groups.deck,
    			KOMCardCreationDate: new Date(groups.date || Date.now()),
    		};
    	},

    	KOMCardSideFront() {
    		return 'front';
    	},

    	KOMCardSideRear() {
    		return 'rear';
    	},

    	KOMCardSides() {
    		return [
    			mod$1.KOMCardSideFront(),
    			mod$1.KOMCardSideRear(),
    		];
    	},

    	KOMCardSide(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!inputData.includes('-')) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.split('-').pop();
    	},

    	KOMCardSideFolderPath(param1, param2) {
    		if (mod$1.KOMCardErrors(param1)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!mod$1.KOMCardSides().includes(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return mod$1.KOMCardFolderPath(param1) + 'side-' + param2 + '/';
    	},

    	KOMCardSideAudioPath(param1, param2) {
    		if (mod$1.KOMCardErrors(param1)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!mod$1.KOMCardSides().includes(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return mod$1.KOMCardSideFolderPath(param1, param2) + 'audio';
    	},

    };

    var KOMCard = Object.assign(mod$1, {
    	ZDRSchemaKey: 'KOMCard',
    	ZDRSchemaDispatchValidate: mod$1.KOMCardErrors,
    	ZDRSchemaPath: mod$1.KOMCardObjectPath,
    	ZDRSchemaStub: mod$1.KOMCardStub,
    	ZDRSchemaMethods: {
    		
    		KOMCardCreate (param1, param2) {
    			if (typeof param1 !== 'object' || param1 === null) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			if (KOMDeck.KOMDeckErrors(param2)) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			const KOMCardCreationDate = new Date();

    			return this.App.KOMCard.ZDRModelWriteObject(Object.assign(param1, Object.assign({
    				KOMCardID: uniqueID$1(),
    				KOMCardDeckID: param2.KOMDeckID,
    				KOMCardCreationDate,
    				KOMCardModificationDate: KOMCardCreationDate,
    			}, param1)));
    		},

    		KOMCardUpdate (inputData) {
    			if (typeof inputData !== 'object' || inputData === null) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			return this.App.KOMCard.ZDRModelWriteObject(Object.assign(inputData, {
    				KOMCardModificationDate: new Date(),
    			}));
    		},

    		async KOMCardList (inputData) {
    			if (KOMDeck.KOMDeckErrors(inputData)) {
    				throw new Error('KOMErrorInputNotValid');
    			}
    			
    			const _this = this;

    			return Promise.all((await _this.App.ZDRStoragePathsRecursive(KOMDeck.KOMDeckFolderPath(inputData) + mod$1.KOMCardDirectory())).filter(function (e) {
    				return e === mod$1.KOMCardObjectPath(mod$1.KOMCardStub(e));
    			}).map(async function (e) {
    				return main$3.OLSKRemoteStoragePostJSONParse(await _this.App.ZDRStorageReadObject(e));
    			}));
    		},

    		async KOMCardDelete (inputData) {
    			if (typeof inputData !== 'object' || inputData === null) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			if (mod$1.KOMCardErrors(inputData)) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			await this.App.ZDRStorageDeleteFolderRecursive(mod$1.KOMCardFolderPath(inputData));

    			return inputData;
    		},

    		async KOMCardAudioCapture (param1, param2, param3) {
    			if (mod$1.KOMCardErrors(param1)) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			if (!mod$1.KOMCardSides().includes(param2)) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			if (!param3) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			await this.App.ZDRStorageWriteFile(mod$1.KOMCardSideAudioPath(param1, param2), param3, param3.type);

    			return Object.assign(param1, {
    				[param2 === mod$1.KOMCardSideFront() ? 'KOMCardFrontAudio' : 'KOMCardRearAudio']: true,
    			});
    		},

    		KOMCardAudioFetch (param1, param2) {
    			if (mod$1.KOMCardErrors(param1)) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			if (!mod$1.KOMCardAudioFields().includes(param2)) {
    				debugger
    				throw new Error('KOMErrorInputNotValid');
    			}

    			return this.App.ZDRStorageReadFile(mod$1.KOMCardSideAudioPath(param1, param2 === 'KOMCardFrontAudio' ? mod$1.KOMCardSideFront() : mod$1.KOMCardSideRear())).then(function (file) {
    				return new Blob([file]);
    			});
    		},

    		async KOMCardAudioList (inputData) {
    			if (mod$1.KOMCardErrors(inputData)) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			return mod$1.KOMCardAudioFields().reduce(function (coll, item) {
    				if (!coll[item]) {
    					delete coll[item];
    				}

    				return coll;
    			}, {
    				KOMCardFrontAudio: await this.App.KOMCard.KOMCardAudioFetch(inputData, mod$1.KOMCardSideFront()),
    				KOMCardRearAudio: await this.App.KOMCard.KOMCardAudioFetch(inputData, mod$1.KOMCardSideRear()),
    			});
    		},

    		async KOMCardAudioClear (param1, param2) {
    			if (mod$1.KOMCardErrors(param1)) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			if (!mod$1.KOMCardSides().includes(param2)) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			await this.App.ZDRStorageDeleteFile(mod$1.KOMCardSideAudioPath(param1, param2));

    			delete param1[param2 === mod$1.KOMCardSideFront() ? 'KOMCardFrontAudio' : 'KOMCardRearAudio'];

    			return param1;
    		},

    	},
    });

    var main$5 = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKMomentStringOffset () {
    		const item = (new Date()).getTimezoneOffset() / 60;
    		return (item < 0 ? '+' : '-') + String(Math.abs(item)).padStart(2, '0')
    	},

    	OLSKMomentPerceptionDay (inputData) {
    		if (!(inputData instanceof Date) || Number.isNaN(inputData.getTime())) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return (new Date(inputData.valueOf() - (inputData.getTimezoneOffset() / 60 + 4) * 1000 * 60 * 60)).toJSON().slice(0, 10);
    	},

    	OLSKMomentPerceptionDate (inputData) {
    		return new Date(mod.OLSKMomentPerceptionDay(inputData) + `T04:00:00${ mod.OLSKMomentStringOffset() }:00`);
    	},

    };

    Object.assign(exports, mod);
    });

    const mod$2 = {

    	KOMSpacingIdentifier(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!inputData.includes('-')) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.split('-').shift();
    	},

    	KOMSpacingLabelForward() {
    		return 'forward';
    	},

    	KOMSpacingLabelBackward() {
    		return 'backward';
    	},

    	KOMSpacingLabel(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!inputData.includes('-')) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.split('-').pop();
    	},

    	KOMSpacingErrors (inputData, options = {}) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const errors = {};

    		if (typeof inputData.KOMSpacingID !== 'string') {
    			errors.KOMSpacingID = [
    				'KOMErrorNotString',
    			];
    		} else if (!inputData.KOMSpacingID.includes('-')) {
    			errors.KOMSpacingID = [
    				'KOMErrorNotSeparated',
    			];
    		} else if (!mod$2.KOMSpacingIdentifier(inputData.KOMSpacingID)) {
    			errors.KOMSpacingID = [
    				'KOMErrorNotFilled',
    			];
    		} else if (![mod$2.KOMSpacingLabelForward(), mod$2.KOMSpacingLabelBackward()].includes(mod$2.KOMSpacingLabel(inputData.KOMSpacingID))) {
    			errors.KOMSpacingID = [
    				'KOMErrorNotLabelled',
    			];
    		}

    		if (!Array.isArray(inputData.KOMSpacingChronicles)) {
    			errors.KOMSpacingChronicles = [
    				'KOMErrorNotArray',
    			];
    		}

    		if (inputData.KOMSpacingDrawDate !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (!(inputData.KOMSpacingDrawDate instanceof Date) || Number.isNaN(inputData.KOMSpacingDrawDate.getTime())) {
    				errors.KOMSpacingDrawDate = [
    					'KOMErrorNotDate',
    				];
    			}
    		}

    		if (inputData.KOMSpacingFlipDate !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (!(inputData.KOMSpacingFlipDate instanceof Date) || Number.isNaN(inputData.KOMSpacingFlipDate.getTime())) {
    				errors.KOMSpacingFlipDate = [
    					'KOMErrorNotDate',
    				];
    			}
    		}

    		if (inputData.KOMSpacingDueDate !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (!(inputData.KOMSpacingDueDate instanceof Date) || Number.isNaN(inputData.KOMSpacingDueDate.getTime())) {
    				errors.KOMSpacingDueDate = [
    					'KOMErrorNotDate',
    				];
    			}
    		}

    		if (inputData.KOMSpacingIsLearning !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (typeof inputData.KOMSpacingIsLearning !== 'boolean') {
    				errors.KOMSpacingIsLearning = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		if (inputData.KOMSpacingInterval !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (typeof inputData.KOMSpacingInterval !== 'number') {
    				errors.KOMSpacingInterval = [
    					'KOMErrorNotNumber',
    				];
    			}
    		}

    		if (inputData.KOMSpacingMultiplier !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (typeof inputData.KOMSpacingMultiplier !== 'number') {
    				errors.KOMSpacingMultiplier = [
    					'KOMErrorNotNumber',
    				];
    			}
    		}

    		if (inputData.KOMSpacingIsLapsing !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (typeof inputData.KOMSpacingIsLapsing !== 'boolean') {
    				errors.KOMSpacingIsLapsing = [
    					'KOMErrorNotBoolean',
    				];
    			}
    		}

    		if (inputData.KOMSpacingLapseCount !== undefined || options.KOMOptionValidateIfNotPresent) {
    			if (typeof inputData.KOMSpacingLapseCount !== 'number') {
    				errors.KOMSpacingLapseCount = [
    					'KOMErrorNotNumber',
    				];
    			}
    		}

    		if (inputData.$KOMSpacingCard !== undefined) {
    			if (KOMCard.KOMCardErrors(inputData.$KOMSpacingCard)) {
    				errors.$KOMSpacingCard = [
    					'KOMErrorNotValid',
    				];
    			}
    		}

    		return Object.entries(errors).length ? errors : null;
    	},

    	KOMSpacingPath (param1, param2) {
    		return KOMCard.KOMCardFolderPath(param1.$KOMSpacingCard || param2) + 'spacing-' + mod$2.KOMSpacingLabel(param1.KOMSpacingID);
    	},

    	KOMSpacingStub (inputData) {
    		const groups = (inputData.match(new RegExp(`\/(?<deck>[\\w\.]+)\/${ KOMCard.KOMCardDirectory() }\/(?<date>[0-9]{4}-[0-9]{2}-[0-9]{2})\/(?<card>[\\w\.]+)\/spacing-(?<label>(${ mod$2.KOMSpacingLabelForward() }|${ mod$2.KOMSpacingLabelBackward() }))`)) || {}).groups || {};

    		return {
    			KOMSpacingID: [groups.card, groups.label].join('-'),
    			$KOMSpacingCard: {
    				KOMCardID: groups.card,
    				KOMCardCreationDate: new Date(groups.date || Date.now()),
    			},
    		};
    	},

    	KOMSpacingIsBackward(inputData) {
    		if (mod$2.KOMSpacingErrors(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return mod$2.KOMSpacingLabel(inputData.KOMSpacingID) === mod$2.KOMSpacingLabelBackward();
    	},

    	KOMSpacingIsUnseen(inputData) {
    		if (mod$2.KOMSpacingErrors(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return !inputData.KOMSpacingDueDate;
    	},

    	KOMSpacingIsFresh (inputData) {
    		if (mod$2.KOMSpacingErrors(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (inputData.KOMSpacingInterval) {
    			return false;
    		}

    		if (inputData.KOMSpacingIsLapsing) {
    			return false;
    		}

    		return !!inputData.KOMSpacingDueDate;
    	},

    	KOMSpacingIsLearning(inputData) {
    		if (mod$2.KOMSpacingErrors(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return !!inputData.KOMSpacingIsLearning;
    	},

    	KOMSpacingIsReviewing(inputData) {
    		if (mod$2.KOMSpacingErrors(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (inputData.KOMSpacingIsLearning) {
    			return false;
    		}

    		return !!inputData.KOMSpacingInterval;
    	},

    	KOMSpacingMatureThreshold() {
    		return 21;
    	},

    	KOMSpacingIsDeveloping(inputData) {
    		if (mod$2.KOMSpacingErrors(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (mod$2.KOMSpacingIsUnseen(inputData)) {
    			return false;
    		}

    		if (!inputData.KOMSpacingInterval) {
    			return true;
    		}

    		return inputData.KOMSpacingInterval < mod$2.KOMSpacingMatureThreshold();
    	},

    	KOMSpacingIsMature(inputData) {
    		if (mod$2.KOMSpacingErrors(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!inputData.KOMSpacingInterval) {
    			return false;
    		}

    		return inputData.KOMSpacingInterval >= mod$2.KOMSpacingMatureThreshold();
    	},

    	KOMSpacingFilterUnique(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		let cards = [];
    		return inputData.filter(function (e, i, coll) {
    			const id = mod$2.KOMSpacingIdentifier(e.KOMSpacingID);

    			if (cards.includes(id)) {
    				return false;
    			}

    			cards.push(id);

    			return true;
    		});
    	},

    	KOMSpacingByStatus(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.reduce(function (coll, item) {
    			coll.KOMSpacingGroupingTotal.push(item);

    			if ((item.$KOMSpacingCard || {}).KOMCardIsRetired) {
    				coll.KOMSpacingGroupingRetired.push(item);
    				
    				return coll;
    			}

    			if (mod$2.KOMSpacingIsUnseen(item) || mod$2.KOMSpacingIsFresh(item)) {
    				coll.KOMSpacingGroupingUnseen.push(item);
    			} else if (mod$2.KOMSpacingIsDeveloping(item)) {
    				coll.KOMSpacingGroupingDeveloping.push(item);
    			} else if (mod$2.KOMSpacingIsMature(item)) {
    				coll.KOMSpacingGroupingMature.push(item);
    			}
    			
    			return coll;
    		}, {
    			KOMSpacingGroupingTotal: [],
    			KOMSpacingGroupingUnseen: [],
    			KOMSpacingGroupingDeveloping: [],
    			KOMSpacingGroupingMature: [],
    			KOMSpacingGroupingRetired: [],
    		});
    	},

    	KOMSpacingChroniclesByStatus(param1, param2) {
    		if (!Array.isArray(param1)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!param2.match(/\d\d\d\d-\d\d-\d\d/)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return param1.reduce(function (coll, item) {
    			const chronicles = item.KOMSpacingChronicles.filter(function (e) {
    				return main$5.OLSKMomentPerceptionDay(e.KOMChronicleResponseDate) === param2;
    			});

    			if (chronicles.includes(item.KOMSpacingChronicles[0])) {
    				const match = chronicles.find((e) => e.KOMChronicleInterval);
    				coll.KOMChronicleGroupingLearning.push(...chronicles.splice(0, match ? chronicles.indexOf(match) : chronicles.length));
    			}

    			coll.KOMChronicleGroupingDeveloping.push(...chronicles.filter(function (e) {
    				return e.KOMChronicleInterval < mod$2.KOMSpacingMatureThreshold();
    			}));

    			coll.KOMChronicleGroupingMature.push(...chronicles.filter(function (e) {
    				return e.KOMChronicleInterval >= mod$2.KOMSpacingMatureThreshold();
    			}));

    			coll.KOMChronicleGroupingRelearning.push(...chronicles.filter(function (e) {
    				return !e.KOMChronicleInterval;
    			}));

    			return coll;
    		}, {
    			KOMChronicleGroupingLearning: [],
    			KOMChronicleGroupingRelearning: [],
    			KOMChronicleGroupingDeveloping: [],
    			KOMChronicleGroupingMature: [],
    		});
    	},

    };

    var KOMSpacing = Object.assign(mod$2, {
    	ZDRSchemaKey: 'KOMSpacing',
    	ZDRSchemaDispatchValidate: mod$2.KOMSpacingErrors,
    	ZDRSchemaPath: mod$2.KOMSpacingPath,
    	ZDRSchemaStub: mod$2.KOMSpacingStub,
    	ZDRSchemaMethods: {

    		KOMSpacingWrite (param1, param2) {
    			if (typeof param1 !== 'object' || param1 === null) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			if (KOMCard.KOMCardErrors(param2)) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			return this.App.KOMSpacing.ZDRModelWriteObject(...arguments);
    		},

    		async KOMSpacingList(inputData) {
    			if (KOMCard.KOMCardErrors(inputData)) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			const result = await this.App.ZDRStorageListingObjects(KOMCard.KOMCardFolderPath(inputData));

    			return {
    				KOMCardSpacingForward: main$3.OLSKRemoteStoragePostJSONParse(result['spacing-forward'] || {
    					KOMSpacingID: [inputData.KOMCardID, mod$2.KOMSpacingLabelForward()].join('-'),
    					KOMSpacingChronicles: [],
    				}),
    				KOMCardSpacingBackward: main$3.OLSKRemoteStoragePostJSONParse(result['spacing-backward'] || {
    					KOMSpacingID: [inputData.KOMCardID, mod$2.KOMSpacingLabelBackward()].join('-'),
    					KOMSpacingChronicles: [],
    				}),
    			};
    		},

    		KOMSpacingIsBackward: mod$2.KOMSpacingIsBackward,

    	},
    });

    const mod$3 = {

    	KOMSettingErrors (inputData, options = {}) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const errors = {};

    		if (typeof inputData.KOMSettingKey !== 'string') {
    			errors.KOMSettingKey = [
    				'KOMErrorNotString',
    			];
    		} else if (!inputData.KOMSettingKey.trim()) {
    			errors.KOMSettingKey = [
    				'KOMErrorNotFilled',
    			];
    		}

    		if (typeof inputData.KOMSettingValue !== 'string') {
    			errors.KOMSettingValue = [
    				'KOMErrorNotString',
    			];
    		}

    		return Object.entries(errors).length ? errors : null;
    	},

    	KOMSettingDirectory () {
    		return 'kom_settings';
    	},

    	KOMSettingPath (inputData) {
    		return `${ mod$3.KOMSettingDirectory() }/${ inputData.KOMSettingKey }`;
    	},

    	KOMSettingStub (inputData) {
    		return {
    			KOMSettingKey: inputData.split('/').pop(),
    		};
    	},

    };

    var KOMSetting = Object.assign(mod$3, {
    	ZDRSchemaKey: 'KOMSetting',
    	ZDRSchemaDispatchValidate: mod$3.KOMSettingErrors,
    	ZDRSchemaPath: mod$3.KOMSettingPath,
    	ZDRSchemaStub: mod$3.KOMSettingStub,
    	ZDRSchemaMethods: {
    		
    		async KOMSettingList () {
    			return Object.values(await this.App.KOMSetting.ZDRModelListObjects());
    		},

    	},
    });

    var KOMTransport = {
    	ZDRSchemaKey: 'KOMTransport',
    	ZDRSchemaDispatchValidate: (function () {}),
    	ZDRSchemaPath: (function () {}),
    	ZDRSchemaStub: (function () {}),
    	ZDRSchemaMethods: {

    		async KOMTransportImport (inputData) {
    			if (typeof inputData !== 'object' || inputData === null) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			const _this = this;

    			return Object.fromEntries(await Promise.all(Object.entries(inputData).map(async function ([key, value]) {
    				if (!Array.isArray(value)) {
    					throw new Error('KOMErrorInputNotValid');
    				}

    				return [key, await ({
    					KOMDeck: (function () {
    						return Promise.all(value.map(async function (e) {
    							if (!Array.isArray(e.$KOMDeckCards)) {
    								throw new Error('KOMErrorInputNotValid');
    							}

    							const deck = await _this.App.KOMDeck.KOMDeckCreate(e).catch(function () {
    								throw new Error('KOMErrorInputNotValid');
    							});

    							await Promise.all(e.$KOMDeckCards.map(async function (e) {
    								const card = await _this.App.KOMCard.KOMCardCreate(e, deck).catch(function () {
    									throw new Error('KOMErrorInputNotValid');
    								});

    								const spacings = await _this.App.KOMSpacing.KOMSpacingList(card);

    								return Promise.all(['$KOMCardSpacingForward', '$KOMCardSpacingBackward'].map(async function (e) {
    									if (!card[e]) {
    										return Promise.resolve();
    									}

    									return await _this.App.KOMSpacing.KOMSpacingWrite(Object.assign(card[e], {
    										KOMSpacingID: spacings[e.slice(1)].KOMSpacingID,
    									}), card).catch(function () {
    										throw new Error('KOMErrorInputNotValid');
    									});
    								}));
    							}));

    							delete deck.$KOMDeckCards;

    							return deck;
    						}));
    					}),
    					KOMSetting: (function () {
    						return Promise.all(value.map(function (e) {
    							return _this.App.KOMSetting.ZDRModelWriteObject(e).catch(function () {
    								throw new Error('KOMErrorInputNotValid');
    							});
    						}));
    					}),
    				}[key]())];
    			})));
    		},

    		async KOMTransportExport (inputData) {
    			if (typeof inputData !== 'object' || inputData === null) {
    				throw new Error('KOMErrorInputNotValid');
    			}

    			const _this = this;

    			return Object.fromEntries(await Promise.all(Object.entries(inputData).map(async function ([key, value]) {
    				if (!Array.isArray(value)) {
    					throw new Error('KOMErrorInputNotValid');
    				}

    				return [key, await Promise.all(value.map(async function (item) {
    					return Object.assign(main$3.OLSKRemoteStorageSafeCopy(item), key !== 'KOMDeck' ? {} : {
    						$KOMDeckCards: await Promise.all((await _this.App.KOMCard.KOMCardList(item)).map(async function (e) {
    							return Object.entries(await _this.App.KOMSpacing.KOMSpacingList(e, item)).reduce(function (coll, item) {
    								if (item[1].KOMSpacingChronicles.length) {
    									coll['$' + item[0]] = item[1];
    								}

    								return coll;
    							}, e);
    						})),
    					});
    				}))];
    			})));
    		},

    	},
    };

    const kIntervalAgainSeconds = 60;
    const kIntervalLearnMinutes = 10;
    const kIntervalDefaultDays = 1;
    const kIntervalEasyDays = 4;
    const kIntervalOverdueDivisorHard = 4;
    const kIntervalOverdueDivisorGood = 2;
    const kIntervalOverdueDivisorEasy = 1;
    const kMultiplierDefault = 2.5;
    const kMultiplierMin = 1.3;
    const kMultiplierHard = 1.2;
    const kMultiplierSummandFail = -0.2;
    const kMultiplierSummandGood = 0;
    const kMultiplierSummandHard = -0.15;
    const kMultiplierSummandEasy = 0.15;
    const kMultiplierMultiplicandEasy = 1.3;

    const uAscending = function (a, b) {
    	return (a < b) ? -1 : ((a > b) ? 1 : 0);
    };

    const uNot = function (callback) {
    	return function (e) {
    		return !callback(e);
    	};
    };

    const mod$4 = {

    	KOMPlaySort(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const seen = mod$4._KOMPlaySortShuffle(inputData.filter(uNot(KOMSpacing.KOMSpacingIsUnseen)));

    		const unseen = mod$4._KOMPlaySortShuffle(inputData.filter(KOMSpacing.KOMSpacingIsUnseen)).sort(function (a, b) {
    			return uAscending(KOMSpacing.KOMSpacingIsBackward(a), KOMSpacing.KOMSpacingIsBackward(b));
    		});

    		if (!seen.length) {
    			return unseen;
    		}

    		const lastIndex = seen.length - 1;
    		const width = Math.floor(seen.length / (unseen.length + 1));

    		return unseen.reduce(function (coll, item, index) {
    			coll.splice(lastIndex - width * (index + 1), 0, item);

    			return coll;
    		}, seen.reverse()).reverse();
    	},

    	//How to randomize (shuffle) a JavaScript array? - Stack Overflow https://stackoverflow.com/a/12646864
    	_KOMPlaySortShuffle(inputData) {
    		for (let i = inputData.length - 1; i > 0; i--) {
    			const j = Math.floor(Math.random() * (i + 1));
    			[inputData[i], inputData[j]] = [inputData[j], inputData[i]];
    		}

    		return inputData;
    	},

    	KOMPlayStateIsValid(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!Array.isArray(inputData.KOMPlayStateQueue)) {
    			return false;
    		}

    		if (!Array.isArray(inputData.KOMPlayStateWait)) {
    			return false;
    		}

    		if (!Array.isArray(inputData.KOMPlayStateHistory)) {
    			return false;
    		}

    		if (inputData.KOMPlayStateCurrent && KOMSpacing.KOMSpacingErrors(inputData.KOMPlayStateCurrent)) {
    			return false;
    		}

    		if (inputData.KOMPlayStateChronicle !== undefined && (typeof inputData.KOMPlayStateChronicle !== 'object' || inputData.KOMPlayStateChronicle === null)) {
    			return false;
    		}

    		if (inputData.KOMPlayStateShouldRandomizeDueDates !== undefined) {
    			if (typeof inputData.KOMPlayStateShouldRandomizeDueDates !== 'boolean') {
    				return false;
    			}
    		}

    		if (inputData.KOMPlayStatePairingIsEnabled !== undefined) {
    			if (typeof inputData.KOMPlayStatePairingIsEnabled !== 'boolean') {
    				return false;
    			}
    		}

    		return true;
    	},

    	KOMPlayResponseTypeAgain() {
    		return 'RESPONSE_AGAIN';
    	},

    	KOMPlayResponseTypeHard() {
    		return 'RESPONSE_HARD';
    	},

    	KOMPlayResponseTypeGood() {
    		return 'RESPONSE_GOOD';
    	},

    	KOMPlayResponseTypeEasy() {
    		return 'RESPONSE_EASY';
    	},

    	KOMPlayResponseTypes() {
    		return [
    			mod$4.KOMPlayResponseTypeAgain(),
    			mod$4.KOMPlayResponseTypeHard(),
    			mod$4.KOMPlayResponseTypeGood(),
    			mod$4.KOMPlayResponseTypeEasy(),
    		];
    	},

    	KOMPlayResponseIntervalAgain() {
    		return 1000 * kIntervalAgainSeconds;
    	},

    	KOMPlayResponseIntervalLearn() {
    		return 1000 * 60 * kIntervalLearnMinutes;
    	},

    	KOMPlayResponseIntervalGraduateDefault() {
    		return kIntervalDefaultDays;
    	},

    	KOMPlayResponseIntervalGraduateEasy() {
    		return kIntervalEasyDays;
    	},

    	KOMPlayResponseIntervalOverdueDivisorHard() {
    		return kIntervalOverdueDivisorHard;
    	},

    	KOMPlayResponseIntervalOverdueDivisorGood() {
    		return kIntervalOverdueDivisorGood;
    	},

    	KOMPlayResponseIntervalOverdueDivisorEasy() {
    		return kIntervalOverdueDivisorEasy;
    	},

    	KOMPlayResponseIntervalOverdueDays(spacing, chronicle) {
    		if (KOMSpacing.KOMSpacingErrors(spacing)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!mod$4.KOMChronicleIsPrepared(chronicle)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!spacing.KOMSpacingInterval) {
    			return 0;
    		}

    		const due = new Date(main$5.OLSKMomentPerceptionDay(spacing.KOMSpacingDueDate)).valueOf();
    		const date = new Date(main$5.OLSKMomentPerceptionDay(chronicle.KOMChronicleResponseDate)).valueOf();

    		if (date <= due) {
    			return 0;
    		}

    		return (date - due) / 1000 / 60 / 60 / 24;
    	},

    	KOMPlayResponseIntervalOverdueBonus(spacing, chronicle) {
    		if (KOMSpacing.KOMSpacingErrors(spacing)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!mod$4.KOMChronicleIsPrepared(chronicle)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const days = mod$4.KOMPlayResponseIntervalOverdueDays(spacing, chronicle);

    		if (chronicle.KOMChronicleResponseType === mod$4.KOMPlayResponseTypeHard()) {
    			return days / mod$4.KOMPlayResponseIntervalOverdueDivisorHard();
    		}

    		if (chronicle.KOMChronicleResponseType === mod$4.KOMPlayResponseTypeGood()) {
    			return days / mod$4.KOMPlayResponseIntervalOverdueDivisorGood();
    		}

    		if (chronicle.KOMChronicleResponseType === mod$4.KOMPlayResponseTypeEasy()) {
    			return days / mod$4.KOMPlayResponseIntervalOverdueDivisorEasy();
    		}

    		return 0;
    	},

    	KOMPlayResponseMultiplierDefault() {
    		return kMultiplierDefault;
    	},

    	KOMPlayResponseMultiplierMin() {
    		return kMultiplierMin;
    	},

    	KOMPlayResponseMultiplierHard() {
    		return kMultiplierHard;
    	},

    	KOMPlayResponseMultiplierSummandFail() {
    		return kMultiplierSummandFail;
    	},

    	KOMPlayResponseMultiplierSummandGood() {
    		return kMultiplierSummandGood;
    	},

    	KOMPlayResponseMultiplierSummandHard() {
    		return kMultiplierSummandHard;
    	},

    	KOMPlayResponseMultiplierSummandEasy() {
    		return kMultiplierSummandEasy;
    	},

    	KOMPlayResponseMultiplierMultiplicandEasy() {
    		return kMultiplierMultiplicandEasy;
    	},

    	KOMPlayRespond(state, chronicle) {
    		if (!mod$4.KOMPlayStateIsValid(state)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!mod$4.KOMChronicleIsPrepared(chronicle)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const update_spacing = function (spacing) {
    			Object.assign(spacing, (function update_properties() {
    				const lastResponseWasAgain = KOMSpacing.KOMSpacingIsLearning(spacing) && spacing.KOMSpacingChronicles.slice(-1).pop().KOMChronicleResponseType === mod$4.KOMPlayResponseTypeAgain();

    				// GRADUATE
    				if (!KOMSpacing.KOMSpacingIsReviewing(spacing) && (chronicle.KOMChronicleResponseType === mod$4.KOMPlayResponseTypeEasy() || (KOMSpacing.KOMSpacingIsLearning(spacing) && chronicle.KOMChronicleResponseType !== mod$4.KOMPlayResponseTypeAgain() && !lastResponseWasAgain))) {
    					delete spacing.KOMSpacingIsLearning;
    					delete spacing.KOMSpacingIsLapsing;

    					const interval = chronicle.KOMChronicleResponseType === mod$4.KOMPlayResponseTypeEasy() ? mod$4.KOMPlayResponseIntervalGraduateEasy() : mod$4.KOMPlayResponseIntervalGraduateDefault();
    					return {
    						KOMSpacingInterval: interval,
    						KOMSpacingMultiplier: mod$4.KOMPlayResponseMultiplierDefault(),
    						KOMSpacingDueDate: new Date(chronicle.KOMChronicleResponseDate.valueOf() + 1000 * 60 * 60 * 24 * interval),
    					};
    				}

    				// REVIEW
    				if (KOMSpacing.KOMSpacingIsReviewing(spacing) && chronicle.KOMChronicleResponseType !== mod$4.KOMPlayResponseTypeAgain()) {
    					let interval = (spacing.KOMSpacingInterval + mod$4.KOMPlayResponseIntervalOverdueBonus(spacing, chronicle)) * (chronicle.KOMChronicleResponseType === mod$4.KOMPlayResponseTypeHard() ? mod$4.KOMPlayResponseMultiplierHard() : spacing.KOMSpacingMultiplier);

    					if (state.KOMPlayStateShouldRandomizeDueDates) {
    						interval *= 1 + (Math.min(0.25, Math.random()) / 100 + 0.005) * (Math.random() > 0.5 ? -1 : 1);
    					}

    					if (chronicle.KOMChronicleResponseType === mod$4.KOMPlayResponseTypeEasy()) {
    						interval *= mod$4.KOMPlayResponseMultiplierMultiplicandEasy();
    					}

    					let multiplier = spacing.KOMSpacingMultiplier;

    					if (chronicle.KOMChronicleResponseType === mod$4.KOMPlayResponseTypeHard()) {
    						multiplier += mod$4.KOMPlayResponseMultiplierSummandHard();
    					}

    					if (chronicle.KOMChronicleResponseType === mod$4.KOMPlayResponseTypeEasy()) {
    						multiplier += mod$4.KOMPlayResponseMultiplierSummandEasy();
    					}

    					return {
    						KOMSpacingInterval: interval,
    						KOMSpacingMultiplier: Math.max(mod$4.KOMPlayResponseMultiplierMin(), multiplier),
    						KOMSpacingDueDate: new Date(chronicle.KOMChronicleResponseDate.valueOf() + 1000 * 60 * 60 * 24 * interval),
    					};
    				}

    				// LAPSE
    				if (KOMSpacing.KOMSpacingIsReviewing(spacing) && chronicle.KOMChronicleResponseType === mod$4.KOMPlayResponseTypeAgain()) {
    					delete spacing.KOMSpacingInterval;
    					spacing.KOMSpacingIsLapsing = true;
    					spacing.KOMSpacingLapseCount = (spacing.KOMSpacingLapseCount || 0) + 1;

    					spacing.KOMSpacingMultiplier += mod$4.KOMPlayResponseMultiplierSummandFail();
    				}

    				// LEARN
    				return {
    					KOMSpacingIsLearning: true,
    					KOMSpacingDueDate: new Date(chronicle.KOMChronicleResponseDate.valueOf() + (chronicle.KOMChronicleResponseType === mod$4.KOMPlayResponseTypeAgain() ? mod$4.KOMPlayResponseIntervalAgain() : mod$4.KOMPlayResponseIntervalLearn())),
    				};
    			})());

    			spacing.KOMSpacingChronicles.push((function() {
    				const assigns = [{
    					KOMChronicleDueDate: spacing.KOMSpacingDueDate,
    				}];

    				if (spacing.KOMSpacingIsLearning) {
    					assigns.push({
    						KOMChronicleIsLearning: true,
    					});
    				}

    				if (!spacing.KOMSpacingIsLearning) {
    					assigns.push({
    						KOMChronicleInterval: spacing.KOMSpacingInterval,
    						KOMChronicleMultiplier: spacing.KOMSpacingMultiplier,
    					});
    				}

    				if (spacing.KOMSpacingIsLapsing) {
    					assigns.push({
    						KOMChronicleIsLapsing: true,
    					});
    				}

    				if (spacing.KOMSpacingLapseCount) {
    					assigns.push({
    						KOMChronicleLapseCount: spacing.KOMSpacingLapseCount,
    					});
    				}

    				return Object.assign(chronicle, ...assigns);
    			})());

    			if (KOMSpacing.KOMSpacingIsLearning(spacing)) {
    				state.KOMPlayStateWait.push(spacing);
    			}
    		};

    		const currentSpacings = [state.KOMPlayStateCurrent].concat(state.KOMPlayStateCurrentPair ? [state.KOMPlayStateCurrentPair] : []);

    		currentSpacings.map(update_spacing);

    		(function update_state() {
    			state.KOMPlayStateWait.filter(function (e) {
    				if (!state.KOMPlayStateQueue.length) {
    					return true;
    				}

    				return e.KOMSpacingDueDate < chronicle.KOMChronicleResponseDate;
    			}).reverse().forEach(function (e) {
    				state.KOMPlayStateQueue.unshift(state.KOMPlayStateWait.splice(state.KOMPlayStateWait.indexOf(e), 1).pop());
    			});

    			state.KOMPlayStateHistory.push(currentSpacings);
    			
    			state.KOMPlayStateCurrent = undefined;
    			if (state.KOMPlayStateCurrentPair) {
    				state.KOMPlayStateCurrentPair = undefined;
    			}
    		})();

    		return state;
    	},

    	KOMChronicleIsPrepared(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!(inputData.KOMChronicleDrawDate instanceof Date) || Number.isNaN(inputData.KOMChronicleDrawDate.getTime())) {
    			return false;
    		}

    		if (!(inputData.KOMChronicleFlipDate instanceof Date) || Number.isNaN(inputData.KOMChronicleFlipDate.getTime())) {
    			return false;
    		}

    		if (!(inputData.KOMChronicleResponseDate instanceof Date) || Number.isNaN(inputData.KOMChronicleResponseDate.getTime())) {
    			return false;
    		}

    		if (!mod$4.KOMPlayResponseTypes().includes(inputData.KOMChronicleResponseType)) {
    			return false;
    		}

    		return true;
    	},

    	KOMChronicleIsValid(inputData) {
    		if (!mod$4.KOMChronicleIsPrepared(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!(inputData.KOMChronicleDueDate instanceof Date) || Number.isNaN(inputData.KOMChronicleDueDate.getTime())) {
    			return false;
    		}

    		if (inputData.KOMChronicleIsLearning !== undefined) {
    			if (typeof inputData.KOMChronicleIsLearning !== 'boolean') {
    				return false;
    			}
    		}

    		if (inputData.KOMChronicleIsReadyToGraduate !== undefined) {
    			if (typeof inputData.KOMChronicleIsReadyToGraduate !== 'boolean') {
    				return false;
    			}
    		}

    		if (inputData.KOMChronicleInterval !== undefined) {
    			if (typeof inputData.KOMChronicleInterval !== 'number') {
    				return false;
    			}
    		}

    		if (inputData.KOMChronicleMultiplier !== undefined) {
    			if (typeof inputData.KOMChronicleMultiplier !== 'number') {
    				return false;
    			}
    		}

    		if (inputData.KOMChronicleDidDrawMultipleTimes !== undefined) {
    			if (typeof inputData.KOMChronicleDidDrawMultipleTimes !== 'boolean') {
    				return false;
    			}
    		}

    		if (inputData.KOMChronicleDidFlipMultipleTimes !== undefined) {
    			if (typeof inputData.KOMChronicleDidFlipMultipleTimes !== 'boolean') {
    				return false;
    			}
    		}

    		return true;
    	},

    	KOMChronicleGenerateDraw(param1, param2) {
    		if (!(param1 instanceof Date) || Number.isNaN(param1.getTime())) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (KOMSpacing.KOMSpacingErrors(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return Object.assign({
    			KOMChronicleDrawDate: param1,
    		}, param2.KOMSpacingDrawDate && KOMSpacing.KOMSpacingIsReviewing(param2) && main$5.OLSKMomentPerceptionDay(param1) === main$5.OLSKMomentPerceptionDay(param2.KOMSpacingDrawDate) ? {
    			KOMChronicleDidDrawMultipleTimes: true,
    		} : {});
    	},

    	KOMPlayStateDraw (inputData, options = {}) {
    		if (!mod$4.KOMPlayStateIsValid(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		inputData.KOMPlayStateQueue = inputData.KOMPlayStateQueue.slice();

    		inputData.KOMPlayStateCurrent = inputData.KOMPlayStateQueue.shift();

    		// avoid showing a sibling if there are other options
    		if (inputData.KOMPlayStateHistory.length && inputData.KOMPlayStateQueue.length && (KOMSpacing.KOMSpacingIdentifier(inputData.KOMPlayStateCurrent.KOMSpacingID) === KOMSpacing.KOMSpacingIdentifier(inputData.KOMPlayStateHistory.slice(-1).pop().slice().pop().KOMSpacingID))) {
    			inputData.KOMPlayStateCurrent = inputData.KOMPlayStateQueue.splice(0, 1, inputData.KOMPlayStateCurrent).pop();
    		}

    		if (inputData.KOMPlayStateCurrent) {
    			inputData.KOMPlayStateCurrent.KOMSpacingDrawDate = (inputData.KOMPlayStateChronicle = mod$4.KOMChronicleGenerateDraw(options.paramDate || new Date(), inputData.KOMPlayStateCurrent)).KOMChronicleDrawDate;
    		}

    		// select pair if pairing enabled
    		if (inputData.KOMPlayStateCurrent && inputData.KOMPlayStatePairingIsEnabled && (inputData.KOMPlayStateCurrentPair = inputData.KOMPlayStateQueue.filter(function (e) {
    			if (inputData.KOMPlayStateCurrent.$KOMSpacingCard && (inputData.KOMPlayStateCurrent.$KOMSpacingCard[KOMSpacing.KOMSpacingIsBackward(inputData.KOMPlayStateCurrent) ? 'KOMCardRearText' : 'KOMCardFrontText'].split(' ').length > 2)) {
    				return false;
    			}

    			if (KOMSpacing.KOMSpacingLabel(e.KOMSpacingID) !== KOMSpacing.KOMSpacingLabel(inputData.KOMPlayStateCurrent.KOMSpacingID)) {
    				return false;
    			}

    			if (e.$KOMSpacingCard && e.$KOMSpacingCard[KOMSpacing.KOMSpacingIsBackward(inputData.KOMPlayStateCurrent) ? 'KOMCardRearText' : 'KOMCardFrontText'].split(' ').length > 2) {
    				return false;
    			}
    			
    			return true;
    		}).shift())) {
    			inputData.KOMPlayStateQueue.splice(inputData.KOMPlayStateQueue.indexOf(inputData.KOMPlayStateCurrentPair), 1);

    			inputData.KOMPlayStateCurrentPair.KOMSpacingDrawDate = (inputData.KOMPlayStateChronicle = mod$4.KOMChronicleGenerateDraw(inputData.KOMPlayStateCurrent.KOMSpacingDrawDate, inputData.KOMPlayStateCurrentPair)).KOMChronicleDrawDate;
    		}

    		return inputData;
    	},

    	KOMChronicleFlip(param1, param2) {
    		if (!(param1 instanceof Date) || Number.isNaN(param1.getTime())) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (KOMSpacing.KOMSpacingErrors(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return Object.assign({
    			KOMChronicleFlipDate: param1,
    		}, param2.KOMSpacingFlipDate && KOMSpacing.KOMSpacingIsReviewing(param2) && main$5.OLSKMomentPerceptionDay(param1) === main$5.OLSKMomentPerceptionDay(param2.KOMSpacingFlipDate) ? {
    			KOMChronicleDidFlipMultipleTimes: true,
    		} : {});
    	},

    	KOMPlayStateFlip (inputData, options = {}) {
    		if (!mod$4.KOMPlayStateIsValid(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		inputData.KOMPlayStateCurrent.KOMSpacingFlipDate = Object.assign(inputData.KOMPlayStateChronicle, mod$4.KOMChronicleFlip(options.paramDate || new Date(), inputData.KOMPlayStateCurrent)).KOMChronicleFlipDate;

    		if (inputData.KOMPlayStatePairingIsEnabled && inputData.KOMPlayStateCurrentPair) {
    			inputData.KOMPlayStateCurrentPair.KOMSpacingFlipDate = inputData.KOMPlayStateCurrent.KOMSpacingFlipDate;
    		}

    		return inputData;
    	},

    	KOMChronicleUndo(inputData) {
    		if (KOMSpacing.KOMSpacingErrors(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!inputData.KOMSpacingChronicles.length) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		Object.keys(inputData).forEach(function (e) {
    			if (['KOMSpacingID', 'KOMSpacingChronicles', 'KOMSpacingDrawDate', 'KOMSpacingFlipDate'].includes(e)) {
    				return;
    			}

    			if (e[0] === '$') {
    				return;
    			}

    			delete inputData[e];
    		});

    		inputData.KOMSpacingChronicles.pop();

    		const item = inputData.KOMSpacingChronicles.slice(-1).pop();
    		Object.keys(item || {}).forEach(function (e) {
    			if (['KOMChronicleResponseDate', 'KOMChronicleResponseType'].includes(e)) {
    				return;
    			}

    			inputData[e.replace('KOMChronicle', 'KOMSpacing')] = item[e];
    		});

    		return inputData;
    	},

    	KOMPlayStateUndo (inputData) {
    		if (!mod$4.KOMPlayStateIsValid(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		inputData.KOMPlayStateQueue.unshift(inputData.KOMPlayStateCurrent);
    		if (inputData.KOMPlayStateCurrentPair) {
    			inputData.KOMPlayStateQueue.unshift(inputData.KOMPlayStateCurrentPair);
    		}

    		const history = inputData.KOMPlayStateHistory.pop();
    		
    		inputData.KOMPlayStateCurrent = mod$4.KOMChronicleUndo(history.shift());
    		if (history.length) {
    			inputData.KOMPlayStateCurrentPair = mod$4.KOMChronicleUndo(history.shift());
    		}

    		return inputData;
    	},

    };

    const mod$5 = {

    	KOMSharedColorScheme() {
    		return [
    			'#252525',
    			'#636363',
    			'#969696',
    			'#cccccc',
    			'#f7f7f7',
    		];
    	},

    	KOMSharedColorUnseen () {
    		return mod$5.KOMSharedColorScheme()[0];
    	},

    	KOMSharedColorRelearning () {
    		return mod$5.KOMSharedColorScheme()[1];
    	},

    	KOMSharedColorDeveloping () {
    		return mod$5.KOMSharedColorScheme()[2];
    	},

    	KOMSharedColorMature () {
    		return mod$5.KOMSharedColorScheme()[3];
    	},

    	KOMSharedColorRetired () {
    		return mod$5.KOMSharedColorScheme()[4];
    	},

    };

    const mod$6 = {

    	KOMReviewGeneralTableDays() {
    		return 7;
    	},

    	KOMReviewGeneralUpcomingColors() {
    		return [
    			mod$5.KOMSharedColorMature(),
    			mod$5.KOMSharedColorDeveloping(),
    			];
    	},

    	KOMReviewGeneralHistoricalColors() {
    		return [
    			mod$5.KOMSharedColorMature(),
    			mod$5.KOMSharedColorDeveloping(),
    			mod$5.KOMSharedColorRelearning(),
    			mod$5.KOMSharedColorUnseen(),
    			];
    	},

    	KOMReviewGeneralCollectionColors() {
    		return [
    			mod$5.KOMSharedColorUnseen(),
    			mod$5.KOMSharedColorDeveloping(),
    			mod$5.KOMSharedColorMature(),
    			mod$5.KOMSharedColorRetired(),
    			];
    	},

    };

    const uDescending = function (a, b) {
      return (a > b) ? -1 : ((a < b) ? 1 : 0);
    };

    const mod$7 = {

    	KOMReviewDocumentCount (inputData, param2) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.reduce(function (coll, item) {
    			if (!item) {
    				return coll;
    			}

    			if (!param2 && !item.$KOMReviewChartCompositionCollectionData) {
    				return coll;
    			}

    			if (param2 && (param2[item.KOMDeckID] || {}).$KOMDeckCards) {
    				return coll + param2[item.KOMDeckID].$KOMDeckCards.length;
    			}

    			return coll + item.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingTotal;
    		}, 0);
    	},

    	KOMReviewSpacingsToday(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.filter(function (e) {
    			if (e.$KOMSpacingCard && e.$KOMSpacingCard.KOMCardIsRetired) {
    				return false;
    			}

    			if (!e.KOMSpacingDueDate) {
    				return true;
    			}

    			return main$5.OLSKMomentPerceptionDay(e.KOMSpacingDueDate).valueOf() <= main$5.OLSKMomentPerceptionDay(new Date()).valueOf();
    		});
    	},

    	KOMReviewSchemeReviewing() {
    		return 'kKOMReviewSchemeReviewing';
    	},

    	KOMReviewSchemeUnseen() {
    		return 'kKOMReviewSchemeUnseen';
    	},

    	KOMReviewSchemeMixed() {
    		return 'kKOMReviewSchemeMixed';
    	},

    	KOMReviewSchemes() {
    		return [
    			mod$7.KOMReviewSchemeReviewing(),
    			mod$7.KOMReviewSchemeUnseen(),
    			mod$7.KOMReviewSchemeMixed(),
    		];
    	},

    	KOMReviewObjectErrors(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const errors = {};

    		if (!mod$7.KOMReviewSchemes().includes(inputData.KOMReviewScheme)) {
    			errors.KOMReviewScheme = [
    				'KOMErrorNotValid',
    			];
    		} else if (inputData.KOMReviewScheme !== mod$7.KOMReviewSchemeReviewing()) {
    			if (typeof inputData.KOMReviewMaxUnseenCards === 'undefined') {
    				errors.KOMReviewMaxUnseenCards = [
    					'KOMErrorNotDefined',
    				];
    			}
    		}

    		if (inputData.KOMReviewMaxUnseenCards !== undefined) {
    			if (typeof inputData.KOMReviewMaxUnseenCards !== 'number') {
    				errors.KOMReviewMaxUnseenCards = [
    					'KOMErrorNotNumber',
    				];
    			} else if (inputData.KOMReviewMaxUnseenCards < 1) {
    				errors.KOMReviewMaxUnseenCards = [
    					'KOMErrorNotPositive',
    				];
    			}
    		}

    		return Object.entries(errors).length ? errors : null;
    	},

    	KOMReviewFilter(param1, param2, param3) {
    		if (!Array.isArray(param1)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (mod$7.KOMReviewObjectErrors(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (KOMDeck.KOMDeckErrors(param3)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		const cardIDs = [];
    		return param1.slice().sort(function (a, b) {
    			return uDescending(KOMSpacing.KOMSpacingIsLearning(a), KOMSpacing.KOMSpacingIsLearning(b));
    		}).filter(function (e, i) {
    			if (e.$KOMSpacingCard.KOMCardIsRetired) {
    				return false;
    			}

    			if (param2.KOMReviewScheme === mod$7.KOMReviewSchemeReviewing() && !KOMSpacing.KOMSpacingIsReviewing(e)) {
    				return false;
    			}

    			if (param2.KOMReviewScheme === mod$7.KOMReviewSchemeUnseen() && KOMSpacing.KOMSpacingIsReviewing(e)) {
    				return false;
    			}

    			if (param3.KOMDeckIsForwardOnly && KOMSpacing.KOMSpacingIsBackward(e)) {
    				return false;
    			}

    			if (param2.KOMReviewScheme !== mod$7.KOMReviewSchemeReviewing() && !KOMSpacing.KOMSpacingIsReviewing(e) && !cardIDs.includes(e.$KOMSpacingCard.KOMCardID) && (cardIDs.length < param2.KOMReviewMaxUnseenCards)) {
    				cardIDs.push(e.$KOMSpacingCard.KOMCardID);
    			}

    			if (param2.KOMReviewScheme !== mod$7.KOMReviewSchemeReviewing() && !KOMSpacing.KOMSpacingIsReviewing(e) && (cardIDs.length >= param2.KOMReviewMaxUnseenCards)) {
    				return cardIDs.includes(e.$KOMSpacingCard.KOMCardID);
    			}

    			return true;
    		});
    	},

    	KOMReviewRetireCards (param1, param2) {
    		if (KOMDeck.KOMDeckErrors(param1)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!Array.isArray(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!param1.KOMDeckRetireCardsMonths) {
    			return [];
    		}

    		return Object.values(param2.reduce(function (coll, item) {
    			return Object.assign(coll, {
    				[KOMSpacing.KOMSpacingIdentifier(item.KOMSpacingID)]: (coll[[KOMSpacing.KOMSpacingIdentifier(item.KOMSpacingID)]] || []).concat(item),
    			});
    		}, {})).filter(function (e) {
    			return e.filter(function (e) {
    				return e.KOMSpacingInterval > (365 / 12.0 * param1.KOMDeckRetireCardsMonths);
    			}).length;
    		}).map(function (e) {
    			return e[0].$KOMSpacingCard;
    		})
    	},

    	KOMReviewDeckSort(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.sort(function (a, b) {
    			return a.KOMDeckName.localeCompare(b.KOMDeckName);
    		});
    	},

    	KOMReviewTotalMinutes(inputData) {
    		if (typeof inputData !== 'number') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return Math.round(inputData / 1000 / 60 * 10) / 10;
    	},

    	KOMReviewTodayTotalMilliseconds(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.reduce(function (coll, item) {
    			return coll + item.KOMSpacingChronicles.filter(function (e) {
    				return main$5.OLSKMomentPerceptionDay(e.KOMChronicleResponseDate) === main$5.OLSKMomentPerceptionDay(new Date());
    			}).reduce(function (responseTime, e) {
    				return responseTime + (e.KOMChronicleResponseDate - e.KOMChronicleDrawDate);
    			}, 0);
    		}, 0);
    	},

    	KOMReviewTodayReviewAccuracy(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return (function (scores) {
    			if (!scores.length) {
    				return 0;
    			}

    			return scores.reduce(function (coll, item) {
    				return coll + item;
    			}, 0) * 1.0 / scores.length;
    		})(inputData.filter(function (e) {
    			const items = e.KOMSpacingChronicles.filter(function (e) {
    				return main$5.OLSKMomentPerceptionDay(e.KOMChronicleResponseDate) === main$5.OLSKMomentPerceptionDay(new Date());
    			});

    			if (!items.length) {
    				return false;
    			}

    			if (!e.KOMSpacingChronicles.filter(function (e) {
    				if (items.includes(e)) {
    					return false;
    				}

    				return e.KOMChronicleMultiplier;
    			}).length) {
    				return false;
    			}

    			return true;
    		}).map(function (e) {
    			return e.KOMSpacingChronicles.filter(function (e) {
    				return main$5.OLSKMomentPerceptionDay(e.KOMChronicleResponseDate) === main$5.OLSKMomentPerceptionDay(new Date());
    			}).filter(function (e) {
    				return e.KOMChronicleResponseType === mod$4.KOMPlayResponseTypeAgain();
    			}).length ? 0 : 1;
    		}));
    	},

    	KOMReviewTodayPercentage(inputData) {
    		if (typeof inputData !== 'number') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return Math.round(inputData * 100 * 10) / 10;
    	},

    	KOMReviewGeneralUpcomingDates() {
    		return Array.from(Array(mod$6.KOMReviewGeneralTableDays())).map(function (e, i) {
    			return main$5.OLSKMomentPerceptionDay(new Date(Date.now() + 1000 * 60 * 60 * 24 * i));
    		});
    	},

    	KOMReviewGeneralUpcomingFilter(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.filter(function (e) {
    			if (!e.KOMSpacingDueDate) {
    				return false;
    			}
    			
    			if (main$5.OLSKMomentPerceptionDay(e.KOMSpacingDueDate) < main$5.OLSKMomentPerceptionDay(new Date())) {
    				return false;
    			}

    			if (main$5.OLSKMomentPerceptionDay(e.KOMSpacingDueDate) >= main$5.OLSKMomentPerceptionDay(new Date(Date.now() + 1000 * 60 * 60 * 24 * mod$6.KOMReviewGeneralTableDays()))) {
    				return false;
    			}

    			return true;
    		});
    	},

    	KOMReviewGeneralUpcomingGroupByDate(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.reduce(function (coll, item) {
    			coll[main$5.OLSKMomentPerceptionDay(item.KOMSpacingDueDate)] = (coll[main$5.OLSKMomentPerceptionDay(item.KOMSpacingDueDate)] || []).concat(item);

    			return coll;
    		}, {});
    	},

    	KOMReviewGeneralHistoricalDates() {
    		return Array.from(Array(mod$6.KOMReviewGeneralTableDays())).map(function (e, i) {
    			return main$5.OLSKMomentPerceptionDay(new Date(Date.now() - 1000 * 60 * 60 * 24 * i));
    		});
    	},

    	KOMReviewGeneralHistoricalFilter(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.filter(function (e) {
    			if (!e.KOMSpacingDueDate) {
    				return false;
    			}

    			return e.KOMSpacingChronicles.filter(function (e) {
    				if (main$5.OLSKMomentPerceptionDay(e.KOMChronicleResponseDate) > main$5.OLSKMomentPerceptionDay(new Date())) {
    					return false;
    				}

    				if (main$5.OLSKMomentPerceptionDay(e.KOMChronicleResponseDate) < main$5.OLSKMomentPerceptionDay(new Date(Date.now() - 1000 * 60 * 60 * 24 * mod$6.KOMReviewGeneralTableDays()))) {
    					return false;
    				}

    				return true;
    			}).length;
    		});
    	},

    	KOMReviewGeneralHistoricalGroupByDate(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.reduce(function (coll, item) {
    			item.KOMSpacingChronicles.forEach(function (e) {
    				const array = (coll[main$5.OLSKMomentPerceptionDay(e.KOMChronicleResponseDate)] || []);
    				
    				if (!array.includes(item)) {
    					array.push(item);
    				}

    				coll[main$5.OLSKMomentPerceptionDay(e.KOMChronicleResponseDate)] = array;
    			});

    			return coll;
    		}, {});
    	},

    	KOMReviewGeneralHistoricalTotalMilliseconds(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.reduce(function (coll, item) {
    			return coll + (item.KOMChronicleResponseDate - item.KOMChronicleDrawDate);
    		}, 0);
    	},

    	KOMReviewDeckTXT (inputData) {
    		if (KOMDeck.KOMDeckErrors(inputData)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return (inputData.$KOMDeckCards || []).reduce(function (coll, item) {
    			return coll.concat([
    				item.KOMCardFrontText,
    				item.KOMCardRearText,
    				item.KOMCardNotes,
    				item.KOMCardTags,
    			].join(';') + '\n');
    		}, '');
    	},

    };

    const uDescending$1 = function (a, b) {
      return (a > b) ? -1 : ((a < b) ? 1 : 0);
    };

    const mod$8 = {

    	KOMBrowseAccessibilitySummary (inputData, OLSKLocalized) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return OLSKString.OLSKStringSnippet(inputData.KOMCardFrontText || inputData.KOMCardRearText || OLSKLocalized('KOMBrowseListItemUntitledText'));
    	},

    	KOMBrowseSortFunction (a, b) {
    		return (function(e) {
    			return uDescending$1(a[e], b[e]);
    		})(['KOMCardModificationDate', 'KOMCardCreationDate'].filter(function (e) {
    			return a[e] && b[e];
    		}).shift());
    	},

    	KOMBrowseIsMatch (param1, param2) {
    		if (typeof param2 !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return [param1.KOMCardFrontText, param1.KOMCardRearText, param1.KOMCardNotes].concat(param1.KOMCardTags).filter(function (e) {
    			if (!e) {
    				return false;
    			}

    			return OLSKString.OLSKStringMatch(param2, e);
    		}).length;
    	},

    	KOMBrowseExactSortFunction (needle, a, b) {
    		if (typeof needle !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return ['KOMCardFrontText', 'KOMCardRearText'].reduce(function (coll, item) {
    			return coll.concat(uDescending$1(OLSKString.OLSKStringMatch(needle, a[item] || '', 'startsWith'), OLSKString.OLSKStringMatch(needle, b[item] || '', 'startsWith')));
    		}, []).filter(function (e) {
    			return e !== 0;
    		}).shift();
    	},

    	KOMBrowseCardsFromSSV (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return inputData.replace(/  /g, '\n').split('\n').filter(function (e) {
    			return e.trim().length && (e.split(';').slice(0, 2).filter(function (e) {
    				return e.trim().length;
    			}).length == 2);
    		}).map(function (e) {
    			const item = e.split(';');
    			return Object.assign({
    				KOMCardFrontText: item.shift(),
    				KOMCardRearText: item.shift(),
    			}, item.length ? {
    				KOMCardNotes: item.shift(),
    			} : {}, item.length && item[0].length ? {
    				KOMCardTags: item.shift().split(','),
    			} : {}); 
    		});
    	},

    };

    var main$6 = createCommonjsModule(function (module, exports) {
    (function(global, factory) {
    	 factory(exports) ;
    }(commonjsGlobal, (function(exports) {
    	const mod = {

    		OLSKThrottleIsValid (inputData) {
    			if (typeof inputData !== 'object' || inputData === null) {
    				return false;
    			}

    			if (typeof inputData.OLSKThrottleCallback !== 'function') {
    				return false;
    			}

    			if (typeof inputData.OLSKThrottleDuration !== 'number') {
    				return false;
    			}

    			return true;
    		},

    		OLSKThrottleTimeoutFor (inputData) {
    			if (!mod.OLSKThrottleIsValid(inputData)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (inputData._OLSKThrottleTimeoutID) {
    				clearTimeout(inputData._OLSKThrottleTimeoutID);
    			}

    			inputData._OLSKThrottleTimeoutID = setTimeout(function () {
    				mod._OLSKThrottleFire(inputData);
    			}, inputData.OLSKThrottleDuration);

    			return inputData._OLSKThrottleTimeoutID;
    		},

    		OLSKThrottleSkip (inputData) {
    			if (!mod.OLSKThrottleIsValid(inputData)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			clearTimeout(inputData._OLSKThrottleTimeoutID);
    			
    			return mod._OLSKThrottleFire(inputData);
    		},

    		_OLSKThrottleFire (inputData) {
    			delete inputData._OLSKThrottleTimeoutID;
    			
    			return inputData.OLSKThrottleCallback();
    		},

    		OLSKThrottleMappedTimeout (param1, param2, param3) {
    			if (typeof param1 !== 'object' || param1 === null) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param2 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (!mod.OLSKThrottleIsValid(param3)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (!param1[param2]) {
    				param1[param2] = Object.assign(Object.assign({}, param3), {
    					OLSKThrottleCallback () {
    						mod._OLSKThrottleFire(param3);

    						delete param1[param2];
    					},
    				});
    			}

    			return param3._OLSKThrottleTimeoutID = mod.OLSKThrottleTimeoutFor(param1[param2]);
    		},

    	};

    	Object.assign(exports, mod);

    	Object.assign(exports, mod);

    	Object.defineProperty(exports, '__esModule', {
    		value: true
    	});

    })));
    });

    var OLSKThrottle = unwrapExports(main$6);

    var main$7 = createCommonjsModule(function (module, exports) {
    (function(global, factory) {
    	 factory(exports) ;
    }(commonjsGlobal, (function(exports) {
    	const mod = {

    		OLKSLocalStorageSet (param1, param2, param3) {
    			if (typeof param1 !== 'object' || param1 === null) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param1.setItem !== 'function') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param2 !== 'string' || !param2.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param3 === 'undefined') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			param3 ? param1.setItem(param2, JSON.stringify(param3)) : param1.removeItem(param2);

    			return param3;
    		},

    		OLKSLocalStorageGet (param1, param2) {
    			if (typeof param1 !== 'object' || param1 === null) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param1.getItem !== 'function') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param2 !== 'string' || !param2.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return JSON.parse(param1.getItem(param2));
    		},

    	};

    	Object.assign(exports, mod);

    	Object.defineProperty(exports, '__esModule', {
    		value: true
    	});

    })));
    });

    var OLSKLocalStorage = unwrapExports(main$7);

    var main$8 = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKCacheWriteFile (param1, param2, param3) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const _require = commonjsRequire;

    		_require().OLSKDiskWriteFile(_require().join(_require().OLSKDiskCreateFolder(param3), [param2, '.json'].join('')), JSON.stringify(param1, null, '\t'));

    		return param1;
    	},

    	OLSKCacheReadFile (param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const _require = commonjsRequire;

    		try {
    			return JSON.parse(_require('OLSKDisk').OLSKDiskReadFile(_require('path').join(param2, [param1, '.json'].join(''))));
    		} catch(e) {
    			return null;
    		}
    	},

    	async OLSKCacheResultFetchOnce (param1, param2, param3) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'function') {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (!param1[param2]) {
    			param1[param2] = await param3();
    		}

    		return param1[param2];
    	},

    	OLSKCacheResultFetchOnceSync (param1, param2, param3) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!param1[param2]) {
    			param1[param2] = param3();
    		}

    		return param1[param2];
    	},

    	async OLSKCacheResultFetchRenew (params) {
    		if (typeof params !== 'object' || params === null) {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamMap !== 'object' || params.ParamMap === null) {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamKey !== 'string') {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamCallback !== 'function') {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamInterval !== 'number') {
    			throw new Error('RCSErrorInputNotValid');
    		}

    		let timerID;
    		
    		const callback = async function () {
    			params.ParamMap[params.ParamKey] = await params.ParamCallback();

    			return params._ParamCallbackDidFinish(timerID);
    		};

    		if (!params.ParamMap[params.ParamKey]) {
    			await callback();
    		}

    		timerID = setInterval(function () {
    			return callback();
    		}, params.ParamInterval);

    		return params.ParamMap[params.ParamKey];
    	},

    	OLSKCacheExpiringMapEntry(param1, param2, param3, param4) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('RCSErrorInputNotValid');
    		}

    		if (typeof param4 !== 'number') {
    			throw new Error('RCSErrorInputNotValid');
    		}

    		param1[param2] = param3;

    		setTimeout(function () {
    			delete param1[param2];
    		}, param4);

    		return param2;
    	},

    	_OLSKCacheStringHash (inputData) {
    		const _require = commonjsRequire;
    		return _require().createHash('md5').update(inputData).digest('hex');
    	},

    	OLSKCacheURLBasename (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const host = (new URL('', inputData)).host.replace('www.', '');

    		return host + '.' + mod._OLSKCacheStringHash(inputData);
    	},

    	OLSKCacheURLFilename (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const _require = commonjsRequire;
    		const extension = _require().extname(inputData).split('?').shift();

    		return mod.OLSKCacheURLBasename(inputData) + extension;
    	},

    	OLSKCachePath (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const _require = commonjsRequire;
    		return _require().join(...[inputData, '__cached'].concat([...arguments].slice(1)));
    	},

    	async OLSKCacheQueuedFetch (params) {
    		if (typeof params !== 'object' || params === null) {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamMod !== 'object' || params.ParamMod === null) {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamKey !== 'string') {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamCallback !== 'function') {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamInterval !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKQueue !== 'object' || params.OLSKQueue === null) {
    			return Promise.reject('OLSKErrorInputNotValid');
    		}

    		if (params.ParamFileURLs !== undefined) {
    			if (!Array.isArray(params.ParamFileURLs)) {
    				return Promise.reject('OLSKErrorInputNotValid');
    			}

    			if (typeof params.OLSKDisk !== 'object' || params.OLSKDisk === null) {
    				return Promise.reject('OLSKErrorInputNotValid');
    			}

    			if (typeof params.ParamFileDirectory !== 'string') {
    				return Promise.reject('OLSKErrorInputNotValid');
    			}

    			if (params.ParamFileJSON && typeof params.ParamFileJSON !== 'boolean') {
    				return Promise.reject('OLSKErrorInputNotValid');
    			}
    		}

    		(function SetupQueue () {
    			params.ParamMod._OLSKCacheQueue = params.ParamMod._OLSKCacheQueue || params.OLSKQueue.OLSKQueueAPI();
    		})();

    		(function SetupResultMap () {
    			params.ParamMod._OLSKCacheResultMap = params.ParamMod._OLSKCacheResultMap || (params.ParamFileURLs || []).reduce(function (coll, item) {
    				return Object.assign(coll, {
    					[item]: (function(inputData) {
    						return params.ParamFileJSON ? JSON.parse(inputData) : inputData;
    					})(params.OLSKDisk.OLSKDiskRead(mod.OLSKCachePath(params.ParamFileDirectory, mod.OLSKCacheURLBasename(item)))),
    				});
    			}, {});
    		})();

    		(function SetupTimerMap () {
    			params.ParamMod._OLSKCacheTimerMap = params.ParamMod._OLSKCacheTimerMap || {};
    		})();

    		const callback = async function () {
    			params.ParamMod._OLSKCacheResultMap[params.ParamKey] = await params.ParamCallback();

    			if (params.ParamFileURLs) {
    				params.OLSKDisk.OLSKDiskWrite(mod.OLSKCachePath(params.ParamFileDirectory, mod.OLSKCacheURLBasename(params.ParamKey)), (function(inputData) {
    						return params.ParamFileJSON ? JSON.stringify(inputData) : inputData;
    					})(params.ParamMod._OLSKCacheResultMap[params.ParamKey]));
    			}

    			return params._ParamCallbackDidFinish && params._ParamCallbackDidFinish();
    		};

    		if (!params.ParamMod._OLSKCacheResultMap[params.ParamKey]) {
    			await callback();
    		}

    		params.ParamMod._OLSKCacheTimerMap[params.ParamKey] = params.ParamMod._OLSKCacheTimerMap[params.ParamKey] || setInterval(callback, params.ParamInterval);

    		return params.ParamMod._OLSKCacheResultMap[params.ParamKey];
    	},

    };

    Object.assign(exports, mod);
    });

    var main$9 = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKChainGather (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const _OLSKChainQueue = [];

    		const _OLSKChainGatherObject = function () {
    			return Object.keys(inputData).reduce(function (coll, item) {
    				return Object.assign(coll, typeof inputData[item] === 'function' ? {
    					[item]: function () {
    						const _arguments = arguments;

    						_OLSKChainQueue.push(function () {
    							return inputData[item](..._arguments);
    						});

    						return _OLSKChainGatherObject();
    					},
    				} : {});
    			}, {
    				_OLSKChainQueue,
    				OLSKChainExecute () {
    					return _OLSKChainQueue.reduce(async function (coll, e) {
    						return (await coll).concat(await e());
    					}, Promise.resolve([]));
    				},
    			});
    		};

    		return _OLSKChainGatherObject();
    	},

    };

    Object.assign(exports, mod);
    });

    var main$a = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKBeaconWait (inputData) {
    		if (typeof inputData !== 'undefined' && typeof inputData !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return new Promise(function (resolve) {
    			return setTimeout(resolve, inputData || 650);
    		});
    	},

    	OLSKBeaconDeferFunction (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return new Promise(function (resolve) {
    			const item = document.querySelector(inputData);

    			let listener = item.addEventListener('click', function () {
    				item.removeEventListener('click', listener);
    				resolve();
    			});
    		});
    	},

    	OLSKBeaconPointFunction (param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const startRect = document.querySelector(param1).getBoundingClientRect();
    		const endRect = document.querySelector(param2).getBoundingClientRect();

    		return function (pct) {
    			return (function (el, left, top) {
    				el.style.left = left + 'px';
    				el.style.top = top + 'px';
    			})(
    				document.querySelector(param1),
    				startRect.left - (startRect.left - (endRect.left + endRect.width / 2 - startRect.width / 2)) * pct,
    				startRect.top - (startRect.top - (endRect.top + endRect.height / 2 - startRect.height / 2)) * pct,
    			);
    		};
    	},

    	_OLSKBeaconFire (el, etype) {
    		if (el.fireEvent) {
    		  return el.fireEvent('on' + etype);
    		}

    		const evObj = document.createEvent('Events');
    		evObj.initEvent(etype, true, false);
    		el.dispatchEvent(evObj);
    	},

    	OLSKBeaconClickFunction (param1, param2, param3) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const state = {
    			didClick: false,
    			didTouchDown: false,
    			didTouchUp: false,
    		};

    		const start = performance.now();

    		return function (pct) {
    			const time = performance.now() - start;

    			if (!state.didClick) {
    				mod._OLSKBeaconFire(document.querySelector(param1), 'click');

    				state.didClick = true;
    			}

    			if (!state.didTouchDown) {
    				document.querySelector(param2).classList.add(param3);

    				state.didTouchDown = true;

    				return
    			}

    			if (!state.didTouchUp && time > 250) {
    				document.querySelector(param2).classList.remove(param3);

    				state.didTouchUp = true;
    				
    				return
    			}
    		};
    	},

    	OLSKBeaconNudgeFunction (param1, param2, param3) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const startRect = document.querySelector(param1).getBoundingClientRect();
    		return function (pct) {
    			return (function (el, left, top) {
    				el.style.left = left + 'px';
    				el.style.top = top + 'px';
    			})(
    				document.querySelector(param1),
    				startRect.left + param2 * pct,
    				startRect.top + param3 * pct,
    			);
    		};
    	},

    	OLSKBeaconFillFunction (param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return function (pct) {
    			document.querySelector(param1).value = param2.slice(0, param2.length * pct);
    			mod._OLSKBeaconFire(document.querySelector(param1), 'input');
    		};
    	},

    	OLSKBeaconSetFunction (param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return function (pct) {
    			document.querySelector(param1).value = param2;
    			mod._OLSKBeaconFire(document.querySelector(param1), 'change');
    		};
    	},

    	_OLSKBeaconAnimate (param1, param2) {
    		if (typeof param1 !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'undefined' && typeof param2 !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		// jsanimation/index.js at master · allenhwkim/jsanimation https://github.com/allenhwkim/jsanimation/blob/master/src/index.js

    		const start = performance.now();
    		return new Promise(function(resolve) {
    			const easeInOut = function(n) {
    				return 0.5 * (Math.sin((n - 0.5) * Math.PI) + 1);
    			};

    		  requestAnimationFrame(function animate(time) {
    		    let timeFraction = (time - start) / (param2 || 650);
    		    (timeFraction > 1) && (timeFraction = 1);
    		    param1(easeInOut(timeFraction), timeFraction);
    		    timeFraction < 1 ? requestAnimationFrame(animate) : resolve();
    		  });
    		});
    	},

    };

    Object.assign(exports, mod);
    });

    var main$b = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKLanguageSwitcherCodesMap () {
    		return {
    			en: 'English',
    			fr: 'Français',
    			es: 'Español',
    			pt: 'Português',
    			de: 'Deutsch',
    		};
    	},

    	OLSKLanguageSwitcherLauncherFakeItemProxy () {
    		return {
    			LCHRecipeName: 'OLSKLanguageSwitcherLauncherFakeItemProxy',
    			LCHRecipeCallback () {},
    		};
    	},

    	OLSKLanguageSwitcherLauncherItemSwitch (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamLanguageCode !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamRouteConstant !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKCanonical !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: ['OLSKLanguageSwitcherLauncherItemSwitch', params.ParamLanguageCode].join('-'),
    			LCHRecipeName: mod.OLSKLanguageSwitcherCodesMap()[params.ParamLanguageCode],
    			LCHRecipeCallback () {
    				(debug.DebugWindow || window).location.href = params.OLSKCanonical(params.ParamRouteConstant, {
    					OLSKRoutingLanguage: params.ParamLanguageCode,
    				});
    			},
    			LCHRecipeIsExcluded () {
    				return !!params.ParamAuthorized;
    			},
    		};
    	},

    	OLSKLanguageSwitcherRecipes (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!Array.isArray(params.ParamLanguageCodes)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamCurrentLanguage !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamSpecUI !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [
    			mod.OLSKLanguageSwitcherLauncherFakeItemProxy(),
    		].concat(params.ParamLanguageCodes.filter(function (e) {
    			return e !== params.ParamCurrentLanguage;
    		}).map(function (ParamLanguageCode) {
    			return mod.OLSKLanguageSwitcherLauncherItemSwitch(Object.assign(Object.assign(Object.assign({}, params), {}), {
    				ParamLanguageCode,
    			}))
    		})).filter(function (e) {
    			if (params.ParamSpecUI) {
    				return true;
    			}

    			return !(e.LCHRecipeSignature || e.LCHRecipeName).match(/Fake/);
    		});
    	},

    };

    Object.assign(exports, mod);
    });

    var main$c = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKTransportExportBasename (debug = {}) {
    		return (debug.DebugWindow || window).location.hostname + '-' + (debug.DebugDate || Date).now();
    	},

    	OLSKTransportExportJSONFilename (debug = {}) {
    		return this.OLSKTransportExportBasename(debug) + '.json';
    	},

    	OLSKTransportExportTXTFilename (debug = {}) {
    		return this.OLSKTransportExportBasename(debug) + '.txt';
    	},

    	OLSKTransportLauncherFakeItemProxy () {
    		return {
    			LCHRecipeName: 'OLSKTransportLauncherFakeItemProxy',
    			LCHRecipeCallback () {},
    		};
    	},

    	_AlertIfNotValid (text, params, debug = {}) {
    		if (!text.trim()) {
    			return (debug.DebugWindow || window).alert(params.OLSKLocalized('OLSKTransportLauncherItemImportJSONErrorNotFilledAlertText'));
    		}

    		if (!text.startsWith('{') || !text.endsWith('}')) {
    			return (debug.DebugWindow || window).alert(params.OLSKLocalized('OLSKTransportLauncherItemImportJSONErrorNotValidAlertText'));
    		}

    		try {
    			return params.OLSKTransportDispatchImportJSON(JSON.parse(text));
    		} catch {
    			return (debug.DebugWindow || window).alert(params.OLSKLocalized('OLSKTransportLauncherItemImportJSONErrorNotValidAlertText'));
    		}
    	},

    	OLSKTransportLauncherItemImportJSON (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof params.OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof params.OLSKTransportDispatchImportJSON !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKTransportLauncherItemImportJSON',
    			LCHRecipeName: params.OLSKLocalized('OLSKTransportLauncherItemImportJSONText'),
    			async LCHRecipeCallback () {
    				const text = await this.api.LCHReadTextFile({
    					accept: '.json',
    				});

    				return mod._AlertIfNotValid(text, params, debug);
    			},
    		};
    	},

    	OLSKTransportLauncherItemExportJSON (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof params.OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof params.OLSKTransportDispatchExportInput !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKTransportLauncherItemExportJSON',
    			LCHRecipeName: params.OLSKLocalized('OLSKTransportLauncherItemExportJSONText'),
    			async LCHRecipeCallback (inputData) {
    				return this.api.LCHSaveFile(JSON.stringify(inputData || await params.OLSKTransportDispatchExportInput()), mod.OLSKTransportExportJSONFilename(debug));
    			},
    		};
    	},

    	OLSKTransportLauncherFakeItemImportSerialized (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKTransportDispatchImportJSON !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'OLSKTransportLauncherFakeItemImportSerialized',
    			LCHRecipeCallback () {
    				return mod._AlertIfNotValid((debug.DebugWindow || window).prompt(), params);
    			},
    		};
    	},

    	OLSKTransportLauncherFakeItemExportSerialized (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKTransportDispatchExportInput !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKTransportLauncherFakeItemExportSerialized',
    			LCHRecipeName: 'OLSKTransportLauncherFakeItemExportSerialized',
    			async LCHRecipeCallback (inputData) {
    				return (debug.DebugWindow || window).alert(JSON.stringify({
    					OLSKDownloadName: mod.OLSKTransportExportJSONFilename(debug),
    					OLSKDownloadData: JSON.stringify(inputData || await params.OLSKTransportDispatchExportInput()),
    				}));
    			},
    		};
    	},

    	OLSKTransportFakeExportPlaintext (inputData, debug = {}) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return (debug.DebugWindow || window).alert(JSON.stringify({
    			OLSKDownloadName: mod.OLSKTransportExportTXTFilename(debug),
    			OLSKDownloadData: inputData,
    		}));
    	},

    	OLSKTransportRecipes (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamSpecUI !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [
    			mod.OLSKTransportLauncherFakeItemProxy(),
    			mod.OLSKTransportLauncherItemImportJSON(params),
    			mod.OLSKTransportLauncherItemExportJSON(params),
    			mod.OLSKTransportLauncherFakeItemImportSerialized(params),
    			mod.OLSKTransportLauncherFakeItemExportSerialized(params),
    		].filter(function (e) {
    			if (params.ParamSpecUI) {
    				return true;
    			}

    			return !(e.LCHRecipeSignature || e.LCHRecipeName).match(/Fake/);
    		});
    	},

    };

    Object.assign(exports, mod);
    });

    var main$d = createCommonjsModule(function (module, exports) {
    const uFlatten = function (inputData) {
    	return [].concat.apply([], inputData);
    };

    const mod = {

    	_ZDRSchemaObjectValidate(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		if (typeof inputData.ZDRSchemaKey !== 'string') {
    			throw new Error('ZDRErrorInputNotString');
    		}

    		if (!inputData.ZDRSchemaKey.trim()) {
    			throw new Error('ZDRErrorInputNotFilled');
    		}

    		if (inputData.ZDRSchemaKey.trim() !== inputData.ZDRSchemaKey) {
    			throw new Error('ZDRErrorInputNotTrimmed');
    		}

    		if (typeof inputData.ZDRSchemaStub !== 'function') {
    			throw new Error('ZDRErrorInputNotFunction');
    		}

    		if (typeof inputData.ZDRSchemaPath !== 'function') {
    			throw new Error('ZDRErrorInputNotFunction');
    		}

    		if (inputData.ZDRSchemaMethods !== undefined) {
    			if (typeof inputData.ZDRSchemaMethods !== 'object' || inputData.ZDRSchemaMethods === null) {
    				throw new Error('ZDRErrorInputNotObject');
    			}
    		}

    		if (inputData.ZDRSchemaDispatchValidate !== undefined) {
    			if (typeof inputData.ZDRSchemaDispatchValidate !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		if (inputData.ZDRSchemaDispatchSyncCreate !== undefined) {
    			if (typeof inputData.ZDRSchemaDispatchSyncCreate !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		if (inputData.ZDRSchemaDispatchSyncUpdate !== undefined) {
    			if (typeof inputData.ZDRSchemaDispatchSyncUpdate !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		if (inputData.ZDRSchemaDispatchSyncDelete !== undefined) {
    			if (typeof inputData.ZDRSchemaDispatchSyncDelete !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		if (inputData.ZDRSchemaDispatchSyncConflict !== undefined) {
    			if (typeof inputData.ZDRSchemaDispatchSyncConflict !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		return true;
    	},

    	_ZDRScopeObjectValidate(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		if (typeof inputData.ZDRScopeKey !== 'string') {
    			throw new Error('ZDRErrorInputNotString');
    		}

    		if (!inputData.ZDRScopeKey.trim()) {
    			throw new Error('ZDRErrorInputNotFilled');
    		}

    		if (inputData.ZDRScopeKey.trim() !== inputData.ZDRScopeKey) {
    			throw new Error('ZDRErrorInputNotTrimmed');
    		}

    		if (typeof inputData.ZDRScopeDirectory !== 'string') {
    			throw new Error('ZDRErrorInputNotString');
    		}

    		if (!inputData.ZDRScopeDirectory.trim()) {
    			throw new Error('ZDRErrorInputNotFilled');
    		}

    		if (inputData.ZDRScopeDirectory.trim() !== inputData.ZDRScopeDirectory) {
    			throw new Error('ZDRErrorInputNotTrimmed');
    		}

    		if (inputData.ZDRScopeDirectory.match('/')) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		if (inputData.ZDRScopeSchemas !== undefined) {
    			if (!Array.isArray(inputData.ZDRScopeSchemas)) {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (inputData.ZDRScopeCreatorDirectory !== undefined) {
    			if (typeof inputData.ZDRScopeCreatorDirectory !== 'string') {
    				throw new Error('ZDRErrorInputNotString');
    			}

    			if (!inputData.ZDRScopeCreatorDirectory.trim()) {
    				throw new Error('ZDRErrorInputNotFilled');
    			}

    			if (inputData.ZDRScopeCreatorDirectory.trim() !== inputData.ZDRScopeCreatorDirectory) {
    				throw new Error('ZDRErrorInputNotTrimmed');
    			}
    		}

    		if (inputData.ZDRScopeIsPublic !== undefined) {
    			if (typeof inputData.ZDRScopeIsPublic !== 'boolean') {
    				throw new Error('ZDRErrorInputNotBoolean');
    			}
    		}

    		return true;
    	},

    	_ZDRClientObjectValidate(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		if (typeof inputData.ZDRClientWriteFile !== 'function') {
    			throw new Error('ZDRErrorInputNotFunction');
    		}

    		if (typeof inputData.ZDRClientReadFile !== 'function') {
    			throw new Error('ZDRErrorInputNotFunction');
    		}

    		if (typeof inputData.ZDRClientListObjects !== 'function') {
    			throw new Error('ZDRErrorInputNotFunction');
    		}

    		if (typeof inputData.ZDRClientDelete !== 'function') {
    			throw new Error('ZDRErrorInputNotFunction');
    		}

    		if (inputData.ZDRClientPrepare !== undefined) {
    			if (typeof inputData.ZDRClientPrepare !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		if (inputData.ZDRClientConnect !== undefined) {
    			if (typeof inputData.ZDRClientConnect !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		if (inputData.ZDRClientReconnect !== undefined) {
    			if (typeof inputData.ZDRClientReconnect !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		if (inputData.ZDRClientDisconnect !== undefined) {
    			if (typeof inputData.ZDRClientDisconnect !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		return true;
    	},

    	_ZDRPathIsDirectory(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		return inputData.slice(-1) === '/';
    	},

    	_ZDRPathFormatDirectory(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		return mod._ZDRPathIsDirectory(inputData) ? inputData : inputData.concat('/')
    	},

    	_ZDRPathFormatPath(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		return inputData[0] === '/' ? inputData : '/'.concat(inputData);
    	},

    	_ZDRModelSyncCallbackSignatures() {
    		return [
    			'ZDRSchemaDispatchSyncCreate',
    			'ZDRSchemaDispatchSyncUpdate',
    			'ZDRSchemaDispatchSyncDelete',
    			'ZDRSchemaDispatchSyncConflict',
    		];
    	},

    	_ZDRModelSyncCallbackInput(param1, param2) {
    		if (!mod._ZDRModelSyncCallbackSignatures().includes(param1)) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		if (!param2.origin) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		if (param1 === 'ZDRSchemaDispatchSyncConflict') {
    			return param2;
    		}

    		return param2[param1 === 'ZDRSchemaDispatchSyncDelete' ? 'oldValue' : 'newValue'];
    	},

    	_ZDRModelSyncCallbackSignature(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			return;
    		}

    		if (inputData.origin === 'remote' && typeof inputData.oldValue === 'undefined' && typeof inputData.newValue !== 'undefined') {
    			return 'ZDRSchemaDispatchSyncCreate';
    		}

    		if (inputData.origin === 'remote' && typeof inputData.oldValue !== 'undefined' && typeof inputData.newValue !== 'undefined') {
    			return 'ZDRSchemaDispatchSyncUpdate';
    		}

    		if (inputData.origin === 'remote' && typeof inputData.oldValue !== 'undefined' && typeof inputData.newValue === 'undefined') {
    			return 'ZDRSchemaDispatchSyncDelete';
    		}

    		if (inputData.origin === 'conflict') {
    			return 'ZDRSchemaDispatchSyncConflict';
    		}

    		return;
    	},

    	ZDRProtocolRemoteStorage() {
    		return 'ZDR_PROTOCOL_REMOTE_STORAGE';
    	},

    	ZDRProtocolCustom() {
    		return 'ZDR_PROTOCOL_CUSTOM';
    	},

    	_ZDRProtocols() {
    		return [
    			mod.ZDRProtocolRemoteStorage(),
    			mod.ZDRProtocolCustom(),
    		];
    	},

    	ZDRProtocolForIdentity(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		return mod.ZDRProtocolRemoteStorage();
    	},

    	_ZDRProtocol(inputData) {
    		if (typeof inputData === 'function' && Object.keys(inputData).includes('Unauthorized')) {
    			return mod.ZDRProtocolRemoteStorage();
    		}

    		if (!!inputData && typeof inputData === 'object' && inputData.ZDRClientWriteFile && mod._ZDRClientObjectValidate(inputData)) {
    			return mod.ZDRProtocolCustom();
    		}

    		throw new Error('ZDRErrorInputNotValid');
    	},

    	_ZDRClientInterface(_client, protocol, options) {
    		return {

    			async ClientWriteFile(param1, param2, param3) {
    				try {
    					await ({
    						[mod.ZDRProtocolRemoteStorage()]: (async function () {
    							return _client.storeFile(param3, param1, typeof Blob !== 'undefined' && param2.constructor === Blob ? await new Promise(function (res, rej) {
    								const reader = new FileReader();

    								reader.onload = function () {
    									res(reader.result);
    								};

    								reader.readAsArrayBuffer(param2);
    							}) : param2);
    						}),
    						[mod.ZDRProtocolCustom()]: (function () {
    							return _client.ZDRClientWriteFile(param1, param2, param3);
    						}),
    					})[protocol]();
    				} catch (e) {
    					if (options.ZDRParamDispatchWriteError) {
    						return options.ZDRParamDispatchWriteError(e);
    					}

    					throw e;
    				}

    				return param2;
    			},

    			async ClientWriteObject(param1, param2) {
    				const _this = this;
    				const writeData = JSON.stringify(options._ZDRParamDispatchJSONPreStringify ? options._ZDRParamDispatchJSONPreStringify(param2) : param2);

    				await _this.ClientWriteFile(param1, writeData, 'application/json');

    				return param2;
    			},

    			ClientReadFile(inputData) {
    				return ({
    					[mod.ZDRProtocolRemoteStorage()]: (async function () {
    						return ((await _client.getFile(inputData, false)) || {}).data;
    					}),
    					[mod.ZDRProtocolCustom()]: (function () {
    						return _client.ZDRClientReadFile(inputData);
    					}),
    				})[protocol]();
    			},

    			async ClientReadObject(inputData) {
    				const result = await this.ClientReadFile(inputData);

    				if (!result) {
    					return null;
    				}

    				const parsed = JSON.parse(result);
    				return options._ZDRParamDispatchJSONPostParse ? options._ZDRParamDispatchJSONPostParse(parsed) : parsed;
    			},

    			async ClientListObjects(inputData) {
    				return Object.fromEntries((await ({
    					[mod.ZDRProtocolRemoteStorage()]: (async function () {
    						return Object.entries(await _client.getAll(inputData === '/' ? '' : inputData, false)).filter(function ([key, value]) {
    							if (mod._ZDRPathIsDirectory(key)) {
    								return false;
    							}

    							return value !== true;
    						});
    					}),
    					[mod.ZDRProtocolCustom()]: (async function () {
    						return Object.entries(await _client.ZDRClientListObjects(inputData));
    					}),
    				})[protocol]()).map(function ([key, value]) {
    					return [key, options._ZDRParamDispatchJSONPostParse ? options._ZDRParamDispatchJSONPostParse(value) : value];
    				}));
    			},

    			async ClientPaths(inputData) {
    				return await ({
    					[mod.ZDRProtocolRemoteStorage()]: (async function () {
    						return Object.keys(await _client.getListing(inputData, false));
    					}),
    					[mod.ZDRProtocolCustom()]: (async function () {
    						return Object.keys(await _client.ZDRClientListObjects(inputData));
    					}),
    				})[protocol]();
    			},

    			ClientPermalink(inputData) {
    				return ({
    					[mod.ZDRProtocolRemoteStorage()]: (function () {
    						return _client.getItemURL(inputData);
    					}),
    					[mod.ZDRProtocolCustom()]: (function () {
    						throw new Error('ZDRErrorMethodNotDefined');
    					}),
    				})[protocol]();
    			},

    			ClientDelete(inputData) {
    				return ({
    					[mod.ZDRProtocolRemoteStorage()]: (function () {
    						if (mod._ZDRPathIsDirectory(inputData)) {
    							return null;
    						}
    						
    						return _client.remove(inputData.replace(/^\/+/, ''));
    					}),
    					[mod.ZDRProtocolCustom()]: (function () {
    						return _client.ZDRClientDelete(inputData);
    					}),
    				})[protocol]();
    			},

    		};
    	},

    	_ZDRWrap(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		const ZDRStorageProtocol = mod._ZDRProtocol(inputData.ZDRParamLibrary);

    		if (!Array.isArray(inputData.ZDRParamScopes) || !inputData.ZDRParamScopes.length) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		const scopes = inputData.ZDRParamScopes.filter(mod._ZDRScopeObjectValidate);

    		if (!scopes.length) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		if (typeof inputData.ZDRParamDispatchReady !== 'function') {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		if (typeof inputData.ZDRParamDispatchError !== 'undefined') {
    			if (typeof inputData.ZDRParamDispatchError !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (typeof inputData.ZDRParamDispatchConnected !== 'undefined') {
    			if (typeof inputData.ZDRParamDispatchConnected !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (typeof inputData.ZDRParamDispatchOnline !== 'undefined') {
    			if (typeof inputData.ZDRParamDispatchOnline !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (typeof inputData.ZDRParamDispatchOffline !== 'undefined') {
    			if (typeof inputData.ZDRParamDispatchOffline !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (typeof inputData.ZDRParamDispatchSyncDidStart !== 'undefined') {
    			if (typeof inputData.ZDRParamDispatchSyncDidStart !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (typeof inputData.ZDRParamDispatchSyncDidStop !== 'undefined') {
    			if (typeof inputData.ZDRParamDispatchSyncDidStop !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (typeof inputData.ZDRParamDispatchWriteError !== 'undefined') {
    			if (typeof inputData.ZDRParamDispatchWriteError !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (typeof inputData._ZDRParamDispatchJSONPreStringify !== 'undefined') {
    			if (typeof inputData._ZDRParamDispatchJSONPreStringify !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (typeof inputData._ZDRParamDispatchJSONPostParse !== 'undefined') {
    			if (typeof inputData._ZDRParamDispatchJSONPostParse !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		const library = (function () {
    			if (ZDRStorageProtocol !== mod.ZDRProtocolRemoteStorage()) {
    				return inputData.ZDRParamLibrary;
    			}

    			return new(inputData.ZDRParamLibrary)({
    				modules: scopes.reduce(function (coll, item) {
    					return coll.concat({
    						name: item.ZDRScopeDirectory,
    						builder: (function (privateClient, publicClient) {
    							return {
    								exports: {
    									privateClient,
    									publicClient,
    								},
    							};
    						}),
    					});
    				}, [])
    			});
    		})();

    		if (ZDRStorageProtocol === mod.ZDRProtocolRemoteStorage()) {
    			library.on('error', function (error) {
    				if (!library.remote.online && error.message === 'Sync failed: Network request failed.') {
    					return;
    				}

    				inputData.ZDRParamDispatchError && inputData.ZDRParamDispatchError(error);
    			});

    			library.on('connected', function () {
    				inputData.ZDRParamDispatchConnected && inputData.ZDRParamDispatchConnected(library.remote.userAddress, library.remote.token);
    			});

    			library.on('network-online', function () {
    				inputData.ZDRParamDispatchOnline && inputData.ZDRParamDispatchOnline();
    			});

    			library.on('network-offline', function () {
    				inputData.ZDRParamDispatchOffline && inputData.ZDRParamDispatchOffline();
    			});

    			library.on('sync-done', function () {
    				inputData.ZDRParamDispatchSyncDidStop && inputData.ZDRParamDispatchSyncDidStop();
    			});

    			library.on('ready', function () {
    				inputData.ZDRParamDispatchReady();
    			});
    		}

    		if (ZDRStorageProtocol === mod.ZDRProtocolCustom()) {
    			Promise.resolve((library.ZDRClientPrepare || function () {})()).then(inputData.ZDRParamDispatchReady);
    		}

    		const outputData = {

    			ZDRStorageProtocol,

    			ZDRStorageClient() {
    				return ({
    					[mod.ZDRProtocolRemoteStorage()]: (function () {
    						return library;
    					}),
    					[mod.ZDRProtocolCustom()]: (function () {
    						return inputData.ZDRParamLibrary;
    					}),
    				})[ZDRStorageProtocol]();
    			},

    			ZDRCloudConnect(inputData) {
    				if (typeof inputData !== 'string') {
    					throw new Error('ZDRErrorInputNotValid');
    				}

    				return ({
    					[mod.ZDRProtocolRemoteStorage()]: (function () {
    						return library.connect(inputData);
    					}),
    					[mod.ZDRProtocolCustom()]: (function () {
    						return library.ZDRClientConnect(inputData);
    					}),
    				})[ZDRStorageProtocol]();
    			},

    			ZDRCloudReconnect() {
    				return ({
    					[mod.ZDRProtocolRemoteStorage()]: (function () {
    						return library.reconnect(inputData);
    					}),
    					[mod.ZDRProtocolCustom()]: (function () {
    						return !library.ZDRClientReconnect ? library.ZDRClientConnect() : library.ZDRClientReconnect();
    					}),
    				})[ZDRStorageProtocol]();
    			},

    			ZDRCloudDisconnect() {
    				return ({
    					[mod.ZDRProtocolRemoteStorage()]: (function () {
    						return library.disconnect(inputData);
    					}),
    					[mod.ZDRProtocolCustom()]: (function () {
    						return library.ZDRClientDisconnect(inputData);
    					}),
    				})[ZDRStorageProtocol]();
    			},

    		};

    		return scopes.reduce(function (coll, item) {
    			if (ZDRStorageProtocol === mod.ZDRProtocolRemoteStorage()) {
    				library.access.claim(item.ZDRScopeDirectory, 'rw');

    				library.caching.enable(`/${ item.ZDRScopeDirectory }/`);
    			}

    			const schemas = (item.ZDRScopeSchemas || []).filter(mod._ZDRSchemaObjectValidate);

    			const _client = {
    				[mod.ZDRProtocolRemoteStorage()]: (function () {
    					return library[item.ZDRScopeDirectory][item.ZDRScopeIsPublic ? 'publicClient' : 'privateClient'];
    				}),
    				[mod.ZDRProtocolCustom()]: (function () {
    					return library;
    				}),
    			}[ZDRStorageProtocol]();
    			const client = mod._ZDRClientInterface(_client, ZDRStorageProtocol, inputData);

    			if (ZDRStorageProtocol === mod.ZDRProtocolRemoteStorage() && schemas.filter(function (e) {
    					return Object.keys(e).filter(function (e) {
    						return mod._ZDRModelSyncCallbackSignatures().includes(e);
    					}).length;
    				}).length) {
    				_client.on('change', function (event) {
    					const signature = mod._ZDRModelSyncCallbackSignature(event);

    					if (!signature) {
    						return;
    					}

    					schemas.forEach(function (e) {
    						if (e.ZDRSchemaPath(e.ZDRSchemaStub(event.relativePath)) !== event.relativePath) {
    							return;
    						}

    						if (!e[signature]) {
    							return;
    						}

    						const outputData = mod._ZDRModelSyncCallbackInput(signature, event);
    						return e[signature](inputData._ZDRParamDispatchJSONPostParse ? inputData._ZDRParamDispatchJSONPostParse(outputData) : outputData);
    					});
    				});
    			}

    			const _ZDRStorageBasePath = function (inputData, pretty = false) {
    				if (typeof inputData !== 'string') {
    					throw new Error('ZDRErrorInputNotValid');
    				}

    				return ((ZDRStorageProtocol === 'mod.ZDRProtocolFission()' ? `/${ pretty ? 'p' : (item.ZDRScopeIsPublic ? 'public' : 'private') }/${ item.ZDRScopeCreatorDirectory ? `Apps/${ item.ZDRScopeCreatorDirectory }/${ item.ZDRScopeDirectory }` : item.ZDRScopeDirectory }/` : '') + inputData).slice(ZDRStorageProtocol === mod.ZDRProtocolRemoteStorage() && inputData[0] === '/' ? 1 : 0);
    			};

    			return Object.assign(coll, {
    				[item.ZDRScopeKey]: Object.assign({

    					_ZDRStorageBasePath,

    					ZDRStorageWriteFile(param1, param2, param3) {
    						if (typeof param1 !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						if (typeof param3 !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						return client.ClientWriteFile(_ZDRStorageBasePath(param1), param2, param3);
    					},

    					ZDRStorageWriteObject(param1, param2) {
    						if (typeof param1 !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						if (typeof param2 !== 'object' || param2 === null) {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						return client.ClientWriteObject(_ZDRStorageBasePath(param1), param2);
    					},

    					ZDRStorageReadFile(inputData) {
    						if (typeof inputData !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						return client.ClientReadFile(_ZDRStorageBasePath(inputData));
    					},

    					ZDRStorageReadObject(inputData) {
    						if (typeof inputData !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						return client.ClientReadObject(_ZDRStorageBasePath(inputData));
    					},

    					ZDRStorageListingObjects(inputData) {
    						if (typeof inputData !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						return client.ClientListObjects(mod._ZDRPathFormatDirectory(_ZDRStorageBasePath(inputData)));
    					},

    					_ZDRStoragePaths(inputData) {
    						return client.ClientPaths(_ZDRStorageBasePath(inputData));
    					},

    					ZDRStoragePaths(inputData) {
    						if (typeof inputData !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						return this._ZDRStoragePaths(mod._ZDRPathFormatDirectory(inputData));
    					},

    					async _ZDRStoragePathsRecursive(inputData, includeFolders = false) {
    						const _this = this;
    						return uFlatten(await Promise.all((await _this.ZDRStoragePaths(inputData)).map(function (e) {
    							return mod._ZDRPathIsDirectory(e) ? _this._ZDRStoragePathsRecursive(inputData + e, includeFolders) : inputData + e;
    						}))).concat(includeFolders ? inputData : []);
    					},

    					ZDRStoragePathsRecursive(inputData, includeFolders = false) {
    						if (typeof inputData !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						if (typeof includeFolders !== 'undefined') {
    							if (typeof includeFolders !== 'boolean') {
    								throw new Error('ZDRErrorInputNotValid');
    							}
    						}

    						return this._ZDRStoragePathsRecursive(mod._ZDRPathFormatDirectory(inputData), includeFolders);
    					},

    					ZDRStoragePermalink(inputData) {
    						if (typeof inputData !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						return client.ClientPermalink(_ZDRStorageBasePath(inputData, true));
    					},

    					_ZDRStorageDeleteFile(inputData) {
    						return client.ClientDelete(inputData);
    					},

    					ZDRStorageDeleteFile(inputData) {
    						if (typeof inputData !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						return client.ClientDelete(_ZDRStorageBasePath(inputData));
    					},

    					async ZDRStorageDeleteFolderRecursive(inputData) {
    						if (typeof inputData !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						const _this = this._ZDRStoragePathsRecursive ? this : coll[item.ZDRScopeKey];

    						await Promise.all((await _this._ZDRStoragePathsRecursive(mod._ZDRPathFormatDirectory(inputData))).map(_ZDRStorageBasePath).map(_this._ZDRStorageDeleteFile));

    						return inputData;
    					},

    				}, schemas.reduce(function (map, model) {
    					return Object.assign(map, {
    						[model.ZDRSchemaKey]: Object.assign({

    							ZDRModelPath(inputData) {
    								if (typeof inputData !== 'object' || inputData === null) {
    									throw new Error('ZDRErrorInputNotValid');
    								}

    								return model.ZDRSchemaPath(...arguments);
    							},

    							ZDRModelWriteObject(inputData) {
    								if (model.ZDRSchemaDispatchValidate) {
    									const outputData = model.ZDRSchemaDispatchValidate(...arguments);

    									if (outputData) {
    										return Promise.reject(outputData);
    									}
    								}

    								return coll[item.ZDRScopeKey].ZDRStorageWriteObject(mod._ZDRPathFormatPath(map[model.ZDRSchemaKey].ZDRModelPath(...arguments)), inputData);
    							},

    							async _ZDRModelListObjects() {
    								const _this = this;

    								return (await coll[item.ZDRScopeKey].ZDRStoragePathsRecursive('/')).filter(function (e) {
    									return mod._ZDRPathFormatPath(e) === mod._ZDRPathFormatPath(_this.ZDRModelPath(model.ZDRSchemaStub(e)));
    								});
    							},

    							async ZDRModelListObjects() {
    								return Promise.all((await this._ZDRModelListObjects()).map(coll[item.ZDRScopeKey].ZDRStorageReadObject));
    							},

    							async ZDRModelDeleteObject(inputData) {
    								await coll[item.ZDRScopeKey].ZDRStorageDeleteFile(mod._ZDRPathFormatPath(map[model.ZDRSchemaKey].ZDRModelPath(inputData)));

    								return inputData;
    							},

    						}, Object.entries(model.ZDRSchemaMethods || {}).reduce(function (coll, [key, value]) {
    							if (typeof value !== 'function') {
    								throw new Error('ZDRErrorInputNotFunction');
    							}

    							return Object.assign(coll, {
    								[key]: value.bind(outputData),
    							});
    						}, {})),
    					});
    				}, {})),
    			});
    		}, outputData);
    	},

    	ZDRWrap(inputData = {}) {
    		const _this = this;
    		return new Promise(async function (res, rej) {
    			try {
    				const outputData = _this._ZDRWrap(Object.assign(inputData, {
    					ZDRParamDispatchReady: (function () {
    						setTimeout(function () {
    							return res(outputData);
    						});
    					}),
    				}));
    			} catch (error) {
    				rej(error);
    			}
    		});
    	},

    	ZDRPreferenceProtocol(inputData, _localStorage) {
    		if (!mod._ZDRProtocols().includes(inputData)) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		const api = typeof localStorage === 'object' ? localStorage : _localStorage;
    		if (!api.getItem('ZDR_PREFERENCE_PROTOCOL')) {
    			api.setItem('ZDR_PREFERENCE_PROTOCOL', inputData);
    		}

    		return api.getItem('ZDR_PREFERENCE_PROTOCOL');
    	},

    	ZDRPreferenceProtocolClear(_localStorage) {
    		return (typeof localStorage === 'object' ? localStorage : _localStorage).removeItem('ZDR_PREFERENCE_PROTOCOL');
    	},

    	ZDRPreferenceProtocolMigrate(_localStorage) {
    		return (typeof localStorage === 'object' ? localStorage : _localStorage).getItem('ZDR_PREFERENCE_PROTOCOL_MIGRATE');
    	},

    	ZDRPreferenceProtocolMigrateClear(_localStorage) {
    		return (typeof localStorage === 'object' ? localStorage : _localStorage).removeItem('ZDR_PREFERENCE_PROTOCOL_MIGRATE');
    	},

    	ZDRPreferenceProtocolConnect(inputData, _localStorage) {
    		const protocol = this.ZDRProtocolForIdentity(inputData);

    		const api = typeof localStorage === 'object' ? localStorage : _localStorage;

    		if (api.getItem('ZDR_PREFERENCE_PROTOCOL') && (api.getItem('ZDR_PREFERENCE_PROTOCOL') !== protocol)) {
    			api.setItem('ZDR_PREFERENCE_PROTOCOL_MIGRATE', api.getItem('ZDR_PREFERENCE_PROTOCOL'));
    		}

    		api.setItem('ZDR_PREFERENCE_PROTOCOL', protocol);

    		return protocol;
    	},

    	ZDRLauncherFakeItemProxy() {
    		return {
    			LCHRecipeName: 'ZDRLauncherFakeItemProxy',
    			LCHRecipeCallback() {},
    		};
    	},

    	ZDRLauncherItemFakeDispatchError(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'ZDRLauncherItemFakeDispatchError',
    			LCHRecipeCallback() {
    				return inputData.ZDRParamDispatchError(new Error('ZDR_FAKE_CLOUD_ERROR'));
    			},
    		};
    	},

    	ZDRLauncherItemFakeDispatchWriteError(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'ZDRLauncherItemFakeDispatchWriteError',
    			LCHRecipeCallback() {
    				return inputData.ZDRParamDispatchWriteError(new Error('ZDR_FAKE_WRITE_ERROR'));
    			},
    		};
    	},

    	ZDRLauncherItemFakeDispatchConnected(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'ZDRLauncherItemFakeDispatchConnected',
    			LCHRecipeCallback() {
    				return inputData.ZDRParamDispatchConnected('ZDR_FAKE_CLOUD_IDENTITY', 'ZDR_FAKE_CLOUD_TOKEN');
    			},
    		};
    	},

    	ZDRLauncherItemFakeDispatchOnline(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'ZDRLauncherItemFakeDispatchOnline',
    			LCHRecipeCallback() {
    				return inputData.ZDRParamDispatchOnline();
    			},
    		};
    	},

    	ZDRLauncherItemFakeDispatchOffline(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'ZDRLauncherItemFakeDispatchOffline',
    			LCHRecipeCallback() {
    				return inputData.ZDRParamDispatchOffline();
    			},
    		};
    	},

    	ZDRLauncherItemFakeDispatchSyncDidStart(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'ZDRLauncherItemFakeDispatchSyncDidStart',
    			LCHRecipeCallback() {
    				return inputData.ZDRParamDispatchSyncDidStart();
    			},
    		};
    	},

    	ZDRLauncherItemFakeDispatchSyncDidStop(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'ZDRLauncherItemFakeDispatchSyncDidStop',
    			LCHRecipeCallback() {
    				return inputData.ZDRParamDispatchSyncDidStop();
    			},
    		};
    	},

    	ZDRLauncherItemFakeDispatchDisconnected(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'ZDRLauncherItemFakeDispatchDisconnected',
    			LCHRecipeCallback() {
    				return inputData.ZDRParamDispatchConnected(null);
    			},
    		};
    	},

    	ZDRRecipes(params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamMod !== 'object' || params.ParamMod === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamSpecUI !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [
    			mod.ZDRLauncherFakeItemProxy(),
    			mod.ZDRLauncherItemFakeDispatchError(params.ParamMod),
    			mod.ZDRLauncherItemFakeDispatchWriteError(params.ParamMod),
    			mod.ZDRLauncherItemFakeDispatchConnected(params.ParamMod),
    			mod.ZDRLauncherItemFakeDispatchOnline(params.ParamMod),
    			mod.ZDRLauncherItemFakeDispatchOffline(params.ParamMod),
    			mod.ZDRLauncherItemFakeDispatchSyncDidStart(params.ParamMod),
    			mod.ZDRLauncherItemFakeDispatchSyncDidStop(params.ParamMod),
    			mod.ZDRLauncherItemFakeDispatchDisconnected(params.ParamMod),
    		].filter(function (e) {
    			if (params.ParamSpecUI) {
    				return true;
    			}

    			return !(e.LCHRecipeSignature || e.LCHRecipeName).match(/Fake/);
    		});
    	},

    };

    Object.assign(exports, mod);
    });

    /* os-app/open-review/submodules/KOMReviewMasterListItem/main.svelte generated by Svelte v3.59.2 */
    const file = "os-app/open-review/submodules/KOMReviewMasterListItem/main.svelte";

    function create_fragment(ctx) {
    	let button;
    	let strong;
    	let t0;
    	let t1;
    	let p0;
    	let span0;
    	let t2;
    	let t3;
    	let span1;
    	let t5;
    	let p1;
    	let span2;
    	let t6;
    	let t7;
    	let span3;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			strong = element("strong");
    			t0 = text(/*KOMReviewMasterListItemName*/ ctx[0]);
    			t1 = space();
    			p0 = element("p");
    			span0 = element("span");
    			t2 = text(/*KOMReviewMasterListItemReviewCount*/ ctx[1]);
    			t3 = space();
    			span1 = element("span");
    			span1.textContent = `${main_1('KOMReviewMasterListItemReviewLabelText')}`;
    			t5 = space();
    			p1 = element("p");
    			span2 = element("span");
    			t6 = text(/*KOMReviewMasterListItemUnseenCount*/ ctx[2]);
    			t7 = space();
    			span3 = element("span");
    			span3.textContent = `${main_1('KOMReviewMasterListItemUnseenLabelText')}`;
    			attr_dev(strong, "class", "KOMReviewMasterListItemName svelte-2hmn6a");
    			add_location(strong, file, 11, 1, 406);
    			attr_dev(span0, "class", "KOMReviewMasterListItemReviewValue");
    			add_location(span0, file, 14, 2, 500);
    			attr_dev(span1, "class", "KOMReviewMasterListItemReviewLabel");
    			add_location(span1, file, 15, 2, 597);
    			attr_dev(p0, "class", "svelte-2hmn6a");
    			add_location(p0, file, 13, 1, 494);
    			attr_dev(span2, "class", "KOMReviewMasterListItemUnseenValue");
    			add_location(span2, file, 19, 2, 727);
    			attr_dev(span3, "class", "KOMReviewMasterListItemUnseenLabel");
    			add_location(span3, file, 20, 2, 824);
    			attr_dev(p1, "class", "svelte-2hmn6a");
    			add_location(p1, file, 18, 1, 721);
    			attr_dev(button, "class", "KOMReviewMasterListItem OLSKDecorPress svelte-2hmn6a");
    			attr_dev(button, "aria-label", /*KOMReviewMasterListItemName*/ ctx[0]);
    			add_location(button, file, 9, 0, 255);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, strong);
    			append_dev(strong, t0);
    			append_dev(button, t1);
    			append_dev(button, p0);
    			append_dev(p0, span0);
    			append_dev(span0, t2);
    			append_dev(p0, t3);
    			append_dev(p0, span1);
    			append_dev(button, t5);
    			append_dev(button, p1);
    			append_dev(p1, span2);
    			append_dev(span2, t6);
    			append_dev(p1, t7);
    			append_dev(p1, span3);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*KOMReviewMasterListItemDispatchClick*/ ctx[3])) /*KOMReviewMasterListItemDispatchClick*/ ctx[3].apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if (dirty & /*KOMReviewMasterListItemName*/ 1) set_data_dev(t0, /*KOMReviewMasterListItemName*/ ctx[0]);
    			if (dirty & /*KOMReviewMasterListItemReviewCount*/ 2) set_data_dev(t2, /*KOMReviewMasterListItemReviewCount*/ ctx[1]);
    			if (dirty & /*KOMReviewMasterListItemUnseenCount*/ 4) set_data_dev(t6, /*KOMReviewMasterListItemUnseenCount*/ ctx[2]);

    			if (dirty & /*KOMReviewMasterListItemName*/ 1) {
    				attr_dev(button, "aria-label", /*KOMReviewMasterListItemName*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMReviewMasterListItemName } = $$props;
    	let { KOMReviewMasterListItemReviewCount } = $$props;
    	let { KOMReviewMasterListItemUnseenCount } = $$props;
    	let { KOMReviewMasterListItemDispatchClick } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (KOMReviewMasterListItemName === undefined && !('KOMReviewMasterListItemName' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewMasterListItemName']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterListItemName'");
    		}

    		if (KOMReviewMasterListItemReviewCount === undefined && !('KOMReviewMasterListItemReviewCount' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewMasterListItemReviewCount']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterListItemReviewCount'");
    		}

    		if (KOMReviewMasterListItemUnseenCount === undefined && !('KOMReviewMasterListItemUnseenCount' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewMasterListItemUnseenCount']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterListItemUnseenCount'");
    		}

    		if (KOMReviewMasterListItemDispatchClick === undefined && !('KOMReviewMasterListItemDispatchClick' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewMasterListItemDispatchClick']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterListItemDispatchClick'");
    		}
    	});

    	const writable_props = [
    		'KOMReviewMasterListItemName',
    		'KOMReviewMasterListItemReviewCount',
    		'KOMReviewMasterListItemUnseenCount',
    		'KOMReviewMasterListItemDispatchClick'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('KOMReviewMasterListItemName' in $$props) $$invalidate(0, KOMReviewMasterListItemName = $$props.KOMReviewMasterListItemName);
    		if ('KOMReviewMasterListItemReviewCount' in $$props) $$invalidate(1, KOMReviewMasterListItemReviewCount = $$props.KOMReviewMasterListItemReviewCount);
    		if ('KOMReviewMasterListItemUnseenCount' in $$props) $$invalidate(2, KOMReviewMasterListItemUnseenCount = $$props.KOMReviewMasterListItemUnseenCount);
    		if ('KOMReviewMasterListItemDispatchClick' in $$props) $$invalidate(3, KOMReviewMasterListItemDispatchClick = $$props.KOMReviewMasterListItemDispatchClick);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewMasterListItemName,
    		KOMReviewMasterListItemReviewCount,
    		KOMReviewMasterListItemUnseenCount,
    		KOMReviewMasterListItemDispatchClick,
    		OLSKLocalized: main_1
    	});

    	$$self.$inject_state = $$props => {
    		if ('KOMReviewMasterListItemName' in $$props) $$invalidate(0, KOMReviewMasterListItemName = $$props.KOMReviewMasterListItemName);
    		if ('KOMReviewMasterListItemReviewCount' in $$props) $$invalidate(1, KOMReviewMasterListItemReviewCount = $$props.KOMReviewMasterListItemReviewCount);
    		if ('KOMReviewMasterListItemUnseenCount' in $$props) $$invalidate(2, KOMReviewMasterListItemUnseenCount = $$props.KOMReviewMasterListItemUnseenCount);
    		if ('KOMReviewMasterListItemDispatchClick' in $$props) $$invalidate(3, KOMReviewMasterListItemDispatchClick = $$props.KOMReviewMasterListItemDispatchClick);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewMasterListItemName,
    		KOMReviewMasterListItemReviewCount,
    		KOMReviewMasterListItemUnseenCount,
    		KOMReviewMasterListItemDispatchClick
    	];
    }

    class Main extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance, create_fragment, safe_not_equal, {
    			KOMReviewMasterListItemName: 0,
    			KOMReviewMasterListItemReviewCount: 1,
    			KOMReviewMasterListItemUnseenCount: 2,
    			KOMReviewMasterListItemDispatchClick: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment.name
    		});
    	}

    	get KOMReviewMasterListItemName() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterListItemName(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMasterListItemReviewCount() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterListItemReviewCount(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMasterListItemUnseenCount() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterListItemUnseenCount(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMasterListItemDispatchClick() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterListItemDispatchClick(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-review/submodules/KOMReviewToday/main.svelte generated by Svelte v3.59.2 */
    const file$1 = "os-app/open-review/submodules/KOMReviewToday/main.svelte";

    function create_fragment$1(ctx) {
    	let div;
    	let h2;
    	let t1;
    	let table;
    	let tr0;
    	let td0;
    	let t3;
    	let td1;
    	let t4;
    	let t5;
    	let tr1;
    	let td2;
    	let t7;
    	let td3;
    	let t8;
    	let t9;
    	let tr2;
    	let td4;
    	let t11;
    	let td5;
    	let t12;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h2 = element("h2");
    			h2.textContent = `${main_1('KOMReviewTodayHeadingText')}`;
    			t1 = space();
    			table = element("table");
    			tr0 = element("tr");
    			td0 = element("td");
    			td0.textContent = `${main_1('KOMReviewTodayTotalCardsLabelText')}`;
    			t3 = space();
    			td1 = element("td");
    			t4 = text(/*KOMReviewTodayTotalCards*/ ctx[0]);
    			t5 = space();
    			tr1 = element("tr");
    			td2 = element("td");
    			td2.textContent = `${main_1('KOMReviewTodayTimeMinutesLabelText')}`;
    			t7 = space();
    			td3 = element("td");
    			t8 = text(/*KOMReviewTodayTimeMinutes*/ ctx[1]);
    			t9 = space();
    			tr2 = element("tr");
    			td4 = element("td");
    			td4.textContent = `${main_1('KOMReviewTodayReviewAccuracyLabelText')}`;
    			t11 = space();
    			td5 = element("td");
    			t12 = text(/*KOMReviewTodayReviewAccuracy*/ ctx[2]);
    			attr_dev(h2, "class", "KOMReviewTodayHeading");
    			add_location(h2, file$1, 10, 0, 218);
    			attr_dev(td0, "class", "KOMReviewTodayTotalCardsLabel svelte-w8e259");
    			add_location(td0, file$1, 15, 1, 320);
    			attr_dev(td1, "class", "KOMReviewTodayTotalCardsValue svelte-w8e259");
    			add_location(td1, file$1, 16, 1, 423);
    			add_location(tr0, file$1, 14, 0, 314);
    			attr_dev(td2, "class", "KOMReviewTodayTimeMinutesLabel svelte-w8e259");
    			add_location(td2, file$1, 20, 1, 512);
    			attr_dev(td3, "class", "KOMReviewTodayTimeMinutesValue svelte-w8e259");
    			add_location(td3, file$1, 21, 1, 617);
    			add_location(tr1, file$1, 19, 0, 506);
    			attr_dev(td4, "class", "KOMReviewTodayReviewAccuracyLabel svelte-w8e259");
    			add_location(td4, file$1, 25, 1, 708);
    			attr_dev(td5, "class", "KOMReviewTodayReviewAccuracyValue svelte-w8e259");
    			add_location(td5, file$1, 26, 1, 819);
    			add_location(tr2, file$1, 24, 0, 702);
    			add_location(table, file$1, 12, 0, 305);
    			attr_dev(div, "class", "KOMReviewToday");
    			add_location(div, file$1, 8, 0, 188);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h2);
    			append_dev(div, t1);
    			append_dev(div, table);
    			append_dev(table, tr0);
    			append_dev(tr0, td0);
    			append_dev(tr0, t3);
    			append_dev(tr0, td1);
    			append_dev(td1, t4);
    			append_dev(table, t5);
    			append_dev(table, tr1);
    			append_dev(tr1, td2);
    			append_dev(tr1, t7);
    			append_dev(tr1, td3);
    			append_dev(td3, t8);
    			append_dev(table, t9);
    			append_dev(table, tr2);
    			append_dev(tr2, td4);
    			append_dev(tr2, t11);
    			append_dev(tr2, td5);
    			append_dev(td5, t12);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*KOMReviewTodayTotalCards*/ 1) set_data_dev(t4, /*KOMReviewTodayTotalCards*/ ctx[0]);
    			if (dirty & /*KOMReviewTodayTimeMinutes*/ 2) set_data_dev(t8, /*KOMReviewTodayTimeMinutes*/ ctx[1]);
    			if (dirty & /*KOMReviewTodayReviewAccuracy*/ 4) set_data_dev(t12, /*KOMReviewTodayReviewAccuracy*/ ctx[2]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMReviewTodayTotalCards } = $$props;
    	let { KOMReviewTodayTimeMinutes } = $$props;
    	let { KOMReviewTodayReviewAccuracy } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (KOMReviewTodayTotalCards === undefined && !('KOMReviewTodayTotalCards' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewTodayTotalCards']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewTodayTotalCards'");
    		}

    		if (KOMReviewTodayTimeMinutes === undefined && !('KOMReviewTodayTimeMinutes' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewTodayTimeMinutes']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewTodayTimeMinutes'");
    		}

    		if (KOMReviewTodayReviewAccuracy === undefined && !('KOMReviewTodayReviewAccuracy' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewTodayReviewAccuracy']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewTodayReviewAccuracy'");
    		}
    	});

    	const writable_props = [
    		'KOMReviewTodayTotalCards',
    		'KOMReviewTodayTimeMinutes',
    		'KOMReviewTodayReviewAccuracy'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('KOMReviewTodayTotalCards' in $$props) $$invalidate(0, KOMReviewTodayTotalCards = $$props.KOMReviewTodayTotalCards);
    		if ('KOMReviewTodayTimeMinutes' in $$props) $$invalidate(1, KOMReviewTodayTimeMinutes = $$props.KOMReviewTodayTimeMinutes);
    		if ('KOMReviewTodayReviewAccuracy' in $$props) $$invalidate(2, KOMReviewTodayReviewAccuracy = $$props.KOMReviewTodayReviewAccuracy);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewTodayTotalCards,
    		KOMReviewTodayTimeMinutes,
    		KOMReviewTodayReviewAccuracy,
    		OLSKLocalized: main_1
    	});

    	$$self.$inject_state = $$props => {
    		if ('KOMReviewTodayTotalCards' in $$props) $$invalidate(0, KOMReviewTodayTotalCards = $$props.KOMReviewTodayTotalCards);
    		if ('KOMReviewTodayTimeMinutes' in $$props) $$invalidate(1, KOMReviewTodayTimeMinutes = $$props.KOMReviewTodayTimeMinutes);
    		if ('KOMReviewTodayReviewAccuracy' in $$props) $$invalidate(2, KOMReviewTodayReviewAccuracy = $$props.KOMReviewTodayReviewAccuracy);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewTodayTotalCards,
    		KOMReviewTodayTimeMinutes,
    		KOMReviewTodayReviewAccuracy
    	];
    }

    class Main$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
    			KOMReviewTodayTotalCards: 0,
    			KOMReviewTodayTimeMinutes: 1,
    			KOMReviewTodayReviewAccuracy: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$1.name
    		});
    	}

    	get KOMReviewTodayTotalCards() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewTodayTotalCards(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewTodayTimeMinutes() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewTodayTimeMinutes(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewTodayReviewAccuracy() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewTodayReviewAccuracy(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const mod$9 = {

    	KOMReviewChartElementHorizontalStackedBarWidth() {
    		return 100;
    	},

    	KOMReviewChartElementHorizontalStackedBarHeight() {
    		return 10;
    	},

    	KOMReviewChartElementHorizontalStackedBarScaleHorizontal(param1, param2, param3) {
    		if (typeof param1 !== 'function') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!Array.isArray(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!param2.length) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (typeof param3 !== 'undefined') {
    			if (typeof param3 !== 'number') {
    				throw new Error('KOMErrorInputNotValid');
    			}
    		}

    		return param1()
    			.range([0, mod$9.KOMReviewChartElementHorizontalStackedBarWidth()])
    			.domain([0, param3 || param2.reduce(function (coll, item) {
    				return coll + item;
    			}, 0)]);
    	},

    	KOMReviewChartElementHorizontalStackedBarScaleColor(param1, param2, param3) {
    		if (typeof param1 !== 'function') {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!Array.isArray(param2)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!param2.length) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (!Array.isArray(param3)) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (param3.length !== param2.length) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		return param1()
    			.domain(param3)
    			.range(param2)
    			.unknown('pink');
    	},

    };

    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function bisector(f) {
      let delta = f;
      let compare = f;

      if (f.length === 1) {
        delta = (d, x) => f(d) - x;
        compare = ascendingComparator(f);
      }

      function left(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          const mid = (lo + hi) >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1;
          else hi = mid;
        }
        return lo;
      }

      function right(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          const mid = (lo + hi) >>> 1;
          if (compare(a[mid], x) > 0) hi = mid;
          else lo = mid + 1;
        }
        return lo;
      }

      function center(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        const i = left(a, x, lo, hi - 1);
        return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
      }

      return {left, center, right};
    }

    function ascendingComparator(f) {
      return (d, x) => ascending(f(d), x);
    }

    function number(x) {
      return x === null ? NaN : +x;
    }

    function* numbers(values, valueof) {
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            yield value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            yield value;
          }
        }
      }
    }

    const ascendingBisect = bisector(ascending);
    const bisectRight = ascendingBisect.right;
    const bisectLeft = ascendingBisect.left;
    const bisectCenter = bisector(number).center;

    function count(values, valueof) {
      let count = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            ++count;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            ++count;
          }
        }
      }
      return count;
    }

    function length(array) {
      return array.length | 0;
    }

    function empty$1(length) {
      return !(length > 0);
    }

    function arrayify(values) {
      return typeof values !== "object" || "length" in values ? values : Array.from(values);
    }

    function reducer(reduce) {
      return values => reduce(...values);
    }

    function cross(...values) {
      const reduce = typeof values[values.length - 1] === "function" && reducer(values.pop());
      values = values.map(arrayify);
      const lengths = values.map(length);
      const j = values.length - 1;
      const index = new Array(j + 1).fill(0);
      const product = [];
      if (j < 0 || lengths.some(empty$1)) return product;
      while (true) {
        product.push(index.map((j, i) => values[i][j]));
        let i = j;
        while (++index[i] === lengths[i]) {
          if (i === 0) return reduce ? product.map(reduce) : product;
          index[i--] = 0;
        }
      }
    }

    function cumsum(values, valueof) {
      var sum = 0, index = 0;
      return Float64Array.from(values, valueof === undefined
        ? v => (sum += +v || 0)
        : v => (sum += +valueof(v, index++, values) || 0));
    }

    function descending(a, b) {
      return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
    }

    function variance(values, valueof) {
      let count = 0;
      let delta;
      let mean = 0;
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
          }
        }
      }
      if (count > 1) return sum / (count - 1);
    }

    function deviation(values, valueof) {
      const v = variance(values, valueof);
      return v ? Math.sqrt(v) : v;
    }

    function extent(values, valueof) {
      let min;
      let max;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null) {
            if (min === undefined) {
              if (value >= value) min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null) {
            if (min === undefined) {
              if (value >= value) min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      }
      return [min, max];
    }

    // https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
    class Adder {
      constructor() {
        this._partials = new Float64Array(32);
        this._n = 0;
      }
      add(x) {
        const p = this._partials;
        let i = 0;
        for (let j = 0; j < this._n && j < 32; j++) {
          const y = p[j],
            hi = x + y,
            lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
          if (lo) p[i++] = lo;
          x = hi;
        }
        p[i] = x;
        this._n = i + 1;
        return this;
      }
      valueOf() {
        const p = this._partials;
        let n = this._n, x, y, lo, hi = 0;
        if (n > 0) {
          hi = p[--n];
          while (n > 0) {
            x = hi;
            y = p[--n];
            hi = x + y;
            lo = y - (hi - x);
            if (lo) break;
          }
          if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {
            y = lo * 2;
            x = hi + y;
            if (y == x - hi) hi = x;
          }
        }
        return hi;
      }
    }

    function fsum(values, valueof) {
      const adder = new Adder();
      if (valueof === undefined) {
        for (let value of values) {
          if (value = +value) {
            adder.add(value);
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if (value = +valueof(value, ++index, values)) {
            adder.add(value);
          }
        }
      }
      return +adder;
    }

    function fcumsum(values, valueof) {
      const adder = new Adder();
      let index = -1;
      return Float64Array.from(values, valueof === undefined
          ? v => adder.add(+v || 0)
          : v => adder.add(+valueof(v, ++index, values) || 0)
      );
    }

    class InternMap extends Map {
      constructor(entries, key = keyof) {
        super();
        Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
        if (entries != null) for (const [key, value] of entries) this.set(key, value);
      }
      get(key) {
        return super.get(intern_get(this, key));
      }
      has(key) {
        return super.has(intern_get(this, key));
      }
      set(key, value) {
        return super.set(intern_set(this, key), value);
      }
      delete(key) {
        return super.delete(intern_delete(this, key));
      }
    }

    class InternSet extends Set {
      constructor(values, key = keyof) {
        super();
        Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
        if (values != null) for (const value of values) this.add(value);
      }
      has(value) {
        return super.has(intern_get(this, value));
      }
      add(value) {
        return super.add(intern_set(this, value));
      }
      delete(value) {
        return super.delete(intern_delete(this, value));
      }
    }

    function intern_get({_intern, _key}, value) {
      const key = _key(value);
      return _intern.has(key) ? _intern.get(key) : value;
    }

    function intern_set({_intern, _key}, value) {
      const key = _key(value);
      if (_intern.has(key)) return _intern.get(key);
      _intern.set(key, value);
      return value;
    }

    function intern_delete({_intern, _key}, value) {
      const key = _key(value);
      if (_intern.has(key)) {
        value = _intern.get(value);
        _intern.delete(key);
      }
      return value;
    }

    function keyof(value) {
      return value !== null && typeof value === "object" ? value.valueOf() : value;
    }

    function identity(x) {
      return x;
    }

    function group(values, ...keys) {
      return nest(values, identity, identity, keys);
    }

    function groups(values, ...keys) {
      return nest(values, Array.from, identity, keys);
    }

    function rollup(values, reduce, ...keys) {
      return nest(values, identity, reduce, keys);
    }

    function rollups(values, reduce, ...keys) {
      return nest(values, Array.from, reduce, keys);
    }

    function index(values, ...keys) {
      return nest(values, identity, unique, keys);
    }

    function indexes(values, ...keys) {
      return nest(values, Array.from, unique, keys);
    }

    function unique(values) {
      if (values.length !== 1) throw new Error("duplicate key");
      return values[0];
    }

    function nest(values, map, reduce, keys) {
      return (function regroup(values, i) {
        if (i >= keys.length) return reduce(values);
        const groups = new InternMap();
        const keyof = keys[i++];
        let index = -1;
        for (const value of values) {
          const key = keyof(value, ++index, values);
          const group = groups.get(key);
          if (group) group.push(value);
          else groups.set(key, [value]);
        }
        for (const [key, values] of groups) {
          groups.set(key, regroup(values, i));
        }
        return map(groups);
      })(values, 0);
    }

    function permute(source, keys) {
      return Array.from(keys, key => source[key]);
    }

    function sort(values, ...F) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      values = Array.from(values);
      let [f = ascending] = F;
      if (f.length === 1 || F.length > 1) {
        const index = Uint32Array.from(values, (d, i) => i);
        if (F.length > 1) {
          F = F.map(f => values.map(f));
          index.sort((i, j) => {
            for (const f of F) {
              const c = ascending(f[i], f[j]);
              if (c) return c;
            }
          });
        } else {
          f = values.map(f);
          index.sort((i, j) => ascending(f[i], f[j]));
        }
        return permute(values, index);
      }
      return values.sort(f);
    }

    function groupSort(values, reduce, key) {
      return (reduce.length === 1
        ? sort(rollup(values, reduce, key), (([ak, av], [bk, bv]) => ascending(av, bv) || ascending(ak, bk)))
        : sort(group(values, key), (([ak, av], [bk, bv]) => reduce(av, bv) || ascending(ak, bk))))
        .map(([key]) => key);
    }

    var array = Array.prototype;

    var slice = array.slice;

    function constant(x) {
      return function() {
        return x;
      };
    }

    var e10 = Math.sqrt(50),
        e5 = Math.sqrt(10),
        e2 = Math.sqrt(2);

    function ticks(start, stop, count) {
      var reverse,
          i = -1,
          n,
          ticks,
          step;

      stop = +stop, start = +start, count = +count;
      if (start === stop && count > 0) return [start];
      if (reverse = stop < start) n = start, start = stop, stop = n;
      if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

      if (step > 0) {
        let r0 = Math.round(start / step), r1 = Math.round(stop / step);
        if (r0 * step < start) ++r0;
        if (r1 * step > stop) --r1;
        ticks = new Array(n = r1 - r0 + 1);
        while (++i < n) ticks[i] = (r0 + i) * step;
      } else {
        step = -step;
        let r0 = Math.round(start * step), r1 = Math.round(stop * step);
        if (r0 / step < start) ++r0;
        if (r1 / step > stop) --r1;
        ticks = new Array(n = r1 - r0 + 1);
        while (++i < n) ticks[i] = (r0 + i) / step;
      }

      if (reverse) ticks.reverse();

      return ticks;
    }

    function tickIncrement(start, stop, count) {
      var step = (stop - start) / Math.max(0, count),
          power = Math.floor(Math.log(step) / Math.LN10),
          error = step / Math.pow(10, power);
      return power >= 0
          ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
          : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
    }

    function tickStep(start, stop, count) {
      var step0 = Math.abs(stop - start) / Math.max(0, count),
          step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
          error = step0 / step1;
      if (error >= e10) step1 *= 10;
      else if (error >= e5) step1 *= 5;
      else if (error >= e2) step1 *= 2;
      return stop < start ? -step1 : step1;
    }

    function nice(start, stop, count) {
      let prestep;
      while (true) {
        const step = tickIncrement(start, stop, count);
        if (step === prestep || step === 0 || !isFinite(step)) {
          return [start, stop];
        } else if (step > 0) {
          start = Math.floor(start / step) * step;
          stop = Math.ceil(stop / step) * step;
        } else if (step < 0) {
          start = Math.ceil(start * step) / step;
          stop = Math.floor(stop * step) / step;
        }
        prestep = step;
      }
    }

    function sturges(values) {
      return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;
    }

    function bin() {
      var value = identity,
          domain = extent,
          threshold = sturges;

      function histogram(data) {
        if (!Array.isArray(data)) data = Array.from(data);

        var i,
            n = data.length,
            x,
            values = new Array(n);

        for (i = 0; i < n; ++i) {
          values[i] = value(data[i], i, data);
        }

        var xz = domain(values),
            x0 = xz[0],
            x1 = xz[1],
            tz = threshold(values, x0, x1);

        // Convert number of thresholds into uniform thresholds, and nice the
        // default domain accordingly.
        if (!Array.isArray(tz)) {
          const max = x1, tn = +tz;
          if (domain === extent) [x0, x1] = nice(x0, x1, tn);
          tz = ticks(x0, x1, tn);

          // If the last threshold is coincident with the domain’s upper bound, the
          // last bin will be zero-width. If the default domain is used, and this
          // last threshold is coincident with the maximum input value, we can
          // extend the niced upper bound by one tick to ensure uniform bin widths;
          // otherwise, we simply remove the last threshold. Note that we don’t
          // coerce values or the domain to numbers, and thus must be careful to
          // compare order (>=) rather than strict equality (===)!
          if (tz[tz.length - 1] >= x1) {
            if (max >= x1 && domain === extent) {
              const step = tickIncrement(x0, x1, tn);
              if (isFinite(step)) {
                if (step > 0) {
                  x1 = (Math.floor(x1 / step) + 1) * step;
                } else if (step < 0) {
                  x1 = (Math.ceil(x1 * -step) + 1) / -step;
                }
              }
            } else {
              tz.pop();
            }
          }
        }

        // Remove any thresholds outside the domain.
        var m = tz.length;
        while (tz[0] <= x0) tz.shift(), --m;
        while (tz[m - 1] > x1) tz.pop(), --m;

        var bins = new Array(m + 1),
            bin;

        // Initialize bins.
        for (i = 0; i <= m; ++i) {
          bin = bins[i] = [];
          bin.x0 = i > 0 ? tz[i - 1] : x0;
          bin.x1 = i < m ? tz[i] : x1;
        }

        // Assign data to bins by value, ignoring any outside the domain.
        for (i = 0; i < n; ++i) {
          x = values[i];
          if (x0 <= x && x <= x1) {
            bins[bisectRight(tz, x, 0, m)].push(data[i]);
          }
        }

        return bins;
      }

      histogram.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
      };

      histogram.domain = function(_) {
        return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
      };

      histogram.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
      };

      return histogram;
    }

    function max(values, valueof) {
      let max;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null
              && (max < value || (max === undefined && value >= value))) {
            max = value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (max < value || (max === undefined && value >= value))) {
            max = value;
          }
        }
      }
      return max;
    }

    function min(values, valueof) {
      let min;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null
              && (min > value || (min === undefined && value >= value))) {
            min = value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (min > value || (min === undefined && value >= value))) {
            min = value;
          }
        }
      }
      return min;
    }

    // Based on https://github.com/mourner/quickselect
    // ISC license, Copyright 2018 Vladimir Agafonkin.
    function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {
      while (right > left) {
        if (right - left > 600) {
          const n = right - left + 1;
          const m = k - left + 1;
          const z = Math.log(n);
          const s = 0.5 * Math.exp(2 * z / 3);
          const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
          const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
          const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
          quickselect(array, k, newLeft, newRight, compare);
        }

        const t = array[k];
        let i = left;
        let j = right;

        swap(array, left, k);
        if (compare(array[right], t) > 0) swap(array, left, right);

        while (i < j) {
          swap(array, i, j), ++i, --j;
          while (compare(array[i], t) < 0) ++i;
          while (compare(array[j], t) > 0) --j;
        }

        if (compare(array[left], t) === 0) swap(array, left, j);
        else ++j, swap(array, j, right);

        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
      }
      return array;
    }

    function swap(array, i, j) {
      const t = array[i];
      array[i] = array[j];
      array[j] = t;
    }

    function quantile(values, p, valueof) {
      values = Float64Array.from(numbers(values, valueof));
      if (!(n = values.length)) return;
      if ((p = +p) <= 0 || n < 2) return min(values);
      if (p >= 1) return max(values);
      var n,
          i = (n - 1) * p,
          i0 = Math.floor(i),
          value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),
          value1 = min(values.subarray(i0 + 1));
      return value0 + (value1 - value0) * (i - i0);
    }

    function quantileSorted(values, p, valueof = number) {
      if (!(n = values.length)) return;
      if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
      if (p >= 1) return +valueof(values[n - 1], n - 1, values);
      var n,
          i = (n - 1) * p,
          i0 = Math.floor(i),
          value0 = +valueof(values[i0], i0, values),
          value1 = +valueof(values[i0 + 1], i0 + 1, values);
      return value0 + (value1 - value0) * (i - i0);
    }

    function freedmanDiaconis(values, min, max) {
      return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(count(values), -1 / 3)));
    }

    function scott(values, min, max) {
      return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(count(values), -1 / 3)));
    }

    function maxIndex(values, valueof) {
      let max;
      let maxIndex = -1;
      let index = -1;
      if (valueof === undefined) {
        for (const value of values) {
          ++index;
          if (value != null
              && (max < value || (max === undefined && value >= value))) {
            max = value, maxIndex = index;
          }
        }
      } else {
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (max < value || (max === undefined && value >= value))) {
            max = value, maxIndex = index;
          }
        }
      }
      return maxIndex;
    }

    function mean(values, valueof) {
      let count = 0;
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            ++count, sum += value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            ++count, sum += value;
          }
        }
      }
      if (count) return sum / count;
    }

    function median(values, valueof) {
      return quantile(values, 0.5, valueof);
    }

    function* flatten(arrays) {
      for (const array of arrays) {
        yield* array;
      }
    }

    function merge(arrays) {
      return Array.from(flatten(arrays));
    }

    function minIndex(values, valueof) {
      let min;
      let minIndex = -1;
      let index = -1;
      if (valueof === undefined) {
        for (const value of values) {
          ++index;
          if (value != null
              && (min > value || (min === undefined && value >= value))) {
            min = value, minIndex = index;
          }
        }
      } else {
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (min > value || (min === undefined && value >= value))) {
            min = value, minIndex = index;
          }
        }
      }
      return minIndex;
    }

    function pairs(values, pairof = pair) {
      const pairs = [];
      let previous;
      let first = false;
      for (const value of values) {
        if (first) pairs.push(pairof(previous, value));
        previous = value;
        first = true;
      }
      return pairs;
    }

    function pair(a, b) {
      return [a, b];
    }

    function range(start, stop, step) {
      start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

      var i = -1,
          n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
          range = new Array(n);

      while (++i < n) {
        range[i] = start + i * step;
      }

      return range;
    }

    function least(values, compare = ascending) {
      let min;
      let defined = false;
      if (compare.length === 1) {
        let minValue;
        for (const element of values) {
          const value = compare(element);
          if (defined
              ? ascending(value, minValue) < 0
              : ascending(value, value) === 0) {
            min = element;
            minValue = value;
            defined = true;
          }
        }
      } else {
        for (const value of values) {
          if (defined
              ? compare(value, min) < 0
              : compare(value, value) === 0) {
            min = value;
            defined = true;
          }
        }
      }
      return min;
    }

    function leastIndex(values, compare = ascending) {
      if (compare.length === 1) return minIndex(values, compare);
      let minValue;
      let min = -1;
      let index = -1;
      for (const value of values) {
        ++index;
        if (min < 0
            ? compare(value, value) === 0
            : compare(value, minValue) < 0) {
          minValue = value;
          min = index;
        }
      }
      return min;
    }

    function greatest(values, compare = ascending) {
      let max;
      let defined = false;
      if (compare.length === 1) {
        let maxValue;
        for (const element of values) {
          const value = compare(element);
          if (defined
              ? ascending(value, maxValue) > 0
              : ascending(value, value) === 0) {
            max = element;
            maxValue = value;
            defined = true;
          }
        }
      } else {
        for (const value of values) {
          if (defined
              ? compare(value, max) > 0
              : compare(value, value) === 0) {
            max = value;
            defined = true;
          }
        }
      }
      return max;
    }

    function greatestIndex(values, compare = ascending) {
      if (compare.length === 1) return maxIndex(values, compare);
      let maxValue;
      let max = -1;
      let index = -1;
      for (const value of values) {
        ++index;
        if (max < 0
            ? compare(value, value) === 0
            : compare(value, maxValue) > 0) {
          maxValue = value;
          max = index;
        }
      }
      return max;
    }

    function scan(values, compare) {
      const index = leastIndex(values, compare);
      return index < 0 ? undefined : index;
    }

    var shuffle = shuffler(Math.random);

    function shuffler(random) {
      return function shuffle(array, i0 = 0, i1 = array.length) {
        let m = i1 - (i0 = +i0);
        while (m) {
          const i = random() * m-- | 0, t = array[m + i0];
          array[m + i0] = array[i + i0];
          array[i + i0] = t;
        }
        return array;
      };
    }

    function sum(values, valueof) {
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value = +value) {
            sum += value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if (value = +valueof(value, ++index, values)) {
            sum += value;
          }
        }
      }
      return sum;
    }

    function transpose(matrix) {
      if (!(n = matrix.length)) return [];
      for (var i = -1, m = min(matrix, length$1), transpose = new Array(m); ++i < m;) {
        for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
          row[j] = matrix[j][i];
        }
      }
      return transpose;
    }

    function length$1(d) {
      return d.length;
    }

    function zip() {
      return transpose(arguments);
    }

    function every(values, test) {
      if (typeof test !== "function") throw new TypeError("test is not a function");
      let index = -1;
      for (const value of values) {
        if (!test(value, ++index, values)) {
          return false;
        }
      }
      return true;
    }

    function some(values, test) {
      if (typeof test !== "function") throw new TypeError("test is not a function");
      let index = -1;
      for (const value of values) {
        if (test(value, ++index, values)) {
          return true;
        }
      }
      return false;
    }

    function filter(values, test) {
      if (typeof test !== "function") throw new TypeError("test is not a function");
      const array = [];
      let index = -1;
      for (const value of values) {
        if (test(value, ++index, values)) {
          array.push(value);
        }
      }
      return array;
    }

    function map(values, mapper) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      if (typeof mapper !== "function") throw new TypeError("mapper is not a function");
      return Array.from(values, (value, index) => mapper(value, index, values));
    }

    function reduce(values, reducer, value) {
      if (typeof reducer !== "function") throw new TypeError("reducer is not a function");
      const iterator = values[Symbol.iterator]();
      let done, next, index = -1;
      if (arguments.length < 3) {
        ({done, value} = iterator.next());
        if (done) return;
        ++index;
      }
      while (({done, value: next} = iterator.next()), !done) {
        value = reducer(value, next, ++index, values);
      }
      return value;
    }

    function reverse(values) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      return Array.from(values).reverse();
    }

    function difference(values, ...others) {
      values = new Set(values);
      for (const other of others) {
        for (const value of other) {
          values.delete(value);
        }
      }
      return values;
    }

    function disjoint(values, other) {
      const iterator = other[Symbol.iterator](), set = new Set();
      for (const v of values) {
        if (set.has(v)) return false;
        let value, done;
        while (({value, done} = iterator.next())) {
          if (done) break;
          if (Object.is(v, value)) return false;
          set.add(value);
        }
      }
      return true;
    }

    function set(values) {
      return values instanceof Set ? values : new Set(values);
    }

    function intersection(values, ...others) {
      values = new Set(values);
      others = others.map(set);
      out: for (const value of values) {
        for (const other of others) {
          if (!other.has(value)) {
            values.delete(value);
            continue out;
          }
        }
      }
      return values;
    }

    function superset(values, other) {
      const iterator = values[Symbol.iterator](), set = new Set();
      for (const o of other) {
        if (set.has(o)) continue;
        let value, done;
        while (({value, done} = iterator.next())) {
          if (done) return false;
          set.add(value);
          if (Object.is(o, value)) break;
        }
      }
      return true;
    }

    function subset(values, other) {
      return superset(other, values);
    }

    function union(...others) {
      const set = new Set();
      for (const other of others) {
        for (const o of other) {
          set.add(o);
        }
      }
      return set;
    }



    var src = /*#__PURE__*/Object.freeze({
        bisect: bisectRight,
        bisectRight: bisectRight,
        bisectLeft: bisectLeft,
        bisectCenter: bisectCenter,
        ascending: ascending,
        bisector: bisector,
        count: count,
        cross: cross,
        cumsum: cumsum,
        descending: descending,
        deviation: deviation,
        extent: extent,
        Adder: Adder,
        fsum: fsum,
        fcumsum: fcumsum,
        group: group,
        groups: groups,
        index: index,
        indexes: indexes,
        rollup: rollup,
        rollups: rollups,
        groupSort: groupSort,
        bin: bin,
        histogram: bin,
        thresholdFreedmanDiaconis: freedmanDiaconis,
        thresholdScott: scott,
        thresholdSturges: sturges,
        max: max,
        maxIndex: maxIndex,
        mean: mean,
        median: median,
        merge: merge,
        min: min,
        minIndex: minIndex,
        nice: nice,
        pairs: pairs,
        permute: permute,
        quantile: quantile,
        quantileSorted: quantileSorted,
        quickselect: quickselect,
        range: range,
        least: least,
        leastIndex: leastIndex,
        greatest: greatest,
        greatestIndex: greatestIndex,
        scan: scan,
        shuffle: shuffle,
        shuffler: shuffler,
        sum: sum,
        ticks: ticks,
        tickIncrement: tickIncrement,
        tickStep: tickStep,
        transpose: transpose,
        variance: variance,
        zip: zip,
        every: every,
        some: some,
        filter: filter,
        map: map,
        reduce: reduce,
        reverse: reverse,
        sort: sort,
        difference: difference,
        disjoint: disjoint,
        intersection: intersection,
        subset: subset,
        superset: superset,
        union: union,
        InternMap: InternMap,
        InternSet: InternSet
    });

    function define(constructor, factory, prototype) {
      constructor.prototype = factory.prototype = prototype;
      prototype.constructor = constructor;
    }

    function extend(parent, definition) {
      var prototype = Object.create(parent.prototype);
      for (var key in definition) prototype[key] = definition[key];
      return prototype;
    }

    function Color() {}

    var darker = 0.7;
    var brighter = 1 / darker;

    var reI = "\\s*([+-]?\\d+)\\s*",
        reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
        reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
        reHex = /^#([0-9a-f]{3,8})$/,
        reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
        reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
        reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
        reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
        reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
        reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

    var named = {
      aliceblue: 0xf0f8ff,
      antiquewhite: 0xfaebd7,
      aqua: 0x00ffff,
      aquamarine: 0x7fffd4,
      azure: 0xf0ffff,
      beige: 0xf5f5dc,
      bisque: 0xffe4c4,
      black: 0x000000,
      blanchedalmond: 0xffebcd,
      blue: 0x0000ff,
      blueviolet: 0x8a2be2,
      brown: 0xa52a2a,
      burlywood: 0xdeb887,
      cadetblue: 0x5f9ea0,
      chartreuse: 0x7fff00,
      chocolate: 0xd2691e,
      coral: 0xff7f50,
      cornflowerblue: 0x6495ed,
      cornsilk: 0xfff8dc,
      crimson: 0xdc143c,
      cyan: 0x00ffff,
      darkblue: 0x00008b,
      darkcyan: 0x008b8b,
      darkgoldenrod: 0xb8860b,
      darkgray: 0xa9a9a9,
      darkgreen: 0x006400,
      darkgrey: 0xa9a9a9,
      darkkhaki: 0xbdb76b,
      darkmagenta: 0x8b008b,
      darkolivegreen: 0x556b2f,
      darkorange: 0xff8c00,
      darkorchid: 0x9932cc,
      darkred: 0x8b0000,
      darksalmon: 0xe9967a,
      darkseagreen: 0x8fbc8f,
      darkslateblue: 0x483d8b,
      darkslategray: 0x2f4f4f,
      darkslategrey: 0x2f4f4f,
      darkturquoise: 0x00ced1,
      darkviolet: 0x9400d3,
      deeppink: 0xff1493,
      deepskyblue: 0x00bfff,
      dimgray: 0x696969,
      dimgrey: 0x696969,
      dodgerblue: 0x1e90ff,
      firebrick: 0xb22222,
      floralwhite: 0xfffaf0,
      forestgreen: 0x228b22,
      fuchsia: 0xff00ff,
      gainsboro: 0xdcdcdc,
      ghostwhite: 0xf8f8ff,
      gold: 0xffd700,
      goldenrod: 0xdaa520,
      gray: 0x808080,
      green: 0x008000,
      greenyellow: 0xadff2f,
      grey: 0x808080,
      honeydew: 0xf0fff0,
      hotpink: 0xff69b4,
      indianred: 0xcd5c5c,
      indigo: 0x4b0082,
      ivory: 0xfffff0,
      khaki: 0xf0e68c,
      lavender: 0xe6e6fa,
      lavenderblush: 0xfff0f5,
      lawngreen: 0x7cfc00,
      lemonchiffon: 0xfffacd,
      lightblue: 0xadd8e6,
      lightcoral: 0xf08080,
      lightcyan: 0xe0ffff,
      lightgoldenrodyellow: 0xfafad2,
      lightgray: 0xd3d3d3,
      lightgreen: 0x90ee90,
      lightgrey: 0xd3d3d3,
      lightpink: 0xffb6c1,
      lightsalmon: 0xffa07a,
      lightseagreen: 0x20b2aa,
      lightskyblue: 0x87cefa,
      lightslategray: 0x778899,
      lightslategrey: 0x778899,
      lightsteelblue: 0xb0c4de,
      lightyellow: 0xffffe0,
      lime: 0x00ff00,
      limegreen: 0x32cd32,
      linen: 0xfaf0e6,
      magenta: 0xff00ff,
      maroon: 0x800000,
      mediumaquamarine: 0x66cdaa,
      mediumblue: 0x0000cd,
      mediumorchid: 0xba55d3,
      mediumpurple: 0x9370db,
      mediumseagreen: 0x3cb371,
      mediumslateblue: 0x7b68ee,
      mediumspringgreen: 0x00fa9a,
      mediumturquoise: 0x48d1cc,
      mediumvioletred: 0xc71585,
      midnightblue: 0x191970,
      mintcream: 0xf5fffa,
      mistyrose: 0xffe4e1,
      moccasin: 0xffe4b5,
      navajowhite: 0xffdead,
      navy: 0x000080,
      oldlace: 0xfdf5e6,
      olive: 0x808000,
      olivedrab: 0x6b8e23,
      orange: 0xffa500,
      orangered: 0xff4500,
      orchid: 0xda70d6,
      palegoldenrod: 0xeee8aa,
      palegreen: 0x98fb98,
      paleturquoise: 0xafeeee,
      palevioletred: 0xdb7093,
      papayawhip: 0xffefd5,
      peachpuff: 0xffdab9,
      peru: 0xcd853f,
      pink: 0xffc0cb,
      plum: 0xdda0dd,
      powderblue: 0xb0e0e6,
      purple: 0x800080,
      rebeccapurple: 0x663399,
      red: 0xff0000,
      rosybrown: 0xbc8f8f,
      royalblue: 0x4169e1,
      saddlebrown: 0x8b4513,
      salmon: 0xfa8072,
      sandybrown: 0xf4a460,
      seagreen: 0x2e8b57,
      seashell: 0xfff5ee,
      sienna: 0xa0522d,
      silver: 0xc0c0c0,
      skyblue: 0x87ceeb,
      slateblue: 0x6a5acd,
      slategray: 0x708090,
      slategrey: 0x708090,
      snow: 0xfffafa,
      springgreen: 0x00ff7f,
      steelblue: 0x4682b4,
      tan: 0xd2b48c,
      teal: 0x008080,
      thistle: 0xd8bfd8,
      tomato: 0xff6347,
      turquoise: 0x40e0d0,
      violet: 0xee82ee,
      wheat: 0xf5deb3,
      white: 0xffffff,
      whitesmoke: 0xf5f5f5,
      yellow: 0xffff00,
      yellowgreen: 0x9acd32
    };

    define(Color, color, {
      copy: function(channels) {
        return Object.assign(new this.constructor, this, channels);
      },
      displayable: function() {
        return this.rgb().displayable();
      },
      hex: color_formatHex, // Deprecated! Use color.formatHex.
      formatHex: color_formatHex,
      formatHsl: color_formatHsl,
      formatRgb: color_formatRgb,
      toString: color_formatRgb
    });

    function color_formatHex() {
      return this.rgb().formatHex();
    }

    function color_formatHsl() {
      return hslConvert(this).formatHsl();
    }

    function color_formatRgb() {
      return this.rgb().formatRgb();
    }

    function color(format) {
      var m, l;
      format = (format + "").trim().toLowerCase();
      return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
          : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
          : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
          : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
          : null) // invalid hex
          : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
          : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
          : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
          : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
          : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
          : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
          : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
          : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
          : null;
    }

    function rgbn(n) {
      return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
    }

    function rgba(r, g, b, a) {
      if (a <= 0) r = g = b = NaN;
      return new Rgb(r, g, b, a);
    }

    function rgbConvert(o) {
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Rgb;
      o = o.rgb();
      return new Rgb(o.r, o.g, o.b, o.opacity);
    }

    function rgb(r, g, b, opacity) {
      return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
    }

    function Rgb(r, g, b, opacity) {
      this.r = +r;
      this.g = +g;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Rgb, rgb, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      rgb: function() {
        return this;
      },
      displayable: function() {
        return (-0.5 <= this.r && this.r < 255.5)
            && (-0.5 <= this.g && this.g < 255.5)
            && (-0.5 <= this.b && this.b < 255.5)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex, // Deprecated! Use color.formatHex.
      formatHex: rgb_formatHex,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb
    }));

    function rgb_formatHex() {
      return "#" + hex(this.r) + hex(this.g) + hex(this.b);
    }

    function rgb_formatRgb() {
      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
      return (a === 1 ? "rgb(" : "rgba(")
          + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.b) || 0))
          + (a === 1 ? ")" : ", " + a + ")");
    }

    function hex(value) {
      value = Math.max(0, Math.min(255, Math.round(value) || 0));
      return (value < 16 ? "0" : "") + value.toString(16);
    }

    function hsla(h, s, l, a) {
      if (a <= 0) h = s = l = NaN;
      else if (l <= 0 || l >= 1) h = s = NaN;
      else if (s <= 0) h = NaN;
      return new Hsl(h, s, l, a);
    }

    function hslConvert(o) {
      if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Hsl;
      if (o instanceof Hsl) return o;
      o = o.rgb();
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          h = NaN,
          s = max - min,
          l = (max + min) / 2;
      if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
      } else {
        s = l > 0 && l < 1 ? 0 : h;
      }
      return new Hsl(h, s, l, o.opacity);
    }

    function hsl(h, s, l, opacity) {
      return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
    }

    function Hsl(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Hsl, hsl, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      rgb: function() {
        var h = this.h % 360 + (this.h < 0) * 360,
            s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
            l = this.l,
            m2 = l + (l < 0.5 ? l : 1 - l) * s,
            m1 = 2 * l - m2;
        return new Rgb(
          hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb(h, m1, m2),
          hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        );
      },
      displayable: function() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s))
            && (0 <= this.l && this.l <= 1)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl: function() {
        var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
        return (a === 1 ? "hsl(" : "hsla(")
            + (this.h || 0) + ", "
            + (this.s || 0) * 100 + "%, "
            + (this.l || 0) * 100 + "%"
            + (a === 1 ? ")" : ", " + a + ")");
      }
    }));

    /* From FvD 13.37, CSS Color Module Level 3 */
    function hsl2rgb(h, m1, m2) {
      return (h < 60 ? m1 + (m2 - m1) * h / 60
          : h < 180 ? m2
          : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
          : m1) * 255;
    }

    const radians = Math.PI / 180;
    const degrees = 180 / Math.PI;

    // https://observablehq.com/@mbostock/lab-and-rgb
    const K = 18,
        Xn = 0.96422,
        Yn = 1,
        Zn = 0.82521,
        t0 = 4 / 29,
        t1 = 6 / 29,
        t2 = 3 * t1 * t1,
        t3 = t1 * t1 * t1;

    function labConvert(o) {
      if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
      if (o instanceof Hcl) return hcl2lab(o);
      if (!(o instanceof Rgb)) o = rgbConvert(o);
      var r = rgb2lrgb(o.r),
          g = rgb2lrgb(o.g),
          b = rgb2lrgb(o.b),
          y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
      if (r === g && g === b) x = z = y; else {
        x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
        z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
      }
      return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
    }

    function lab(l, a, b, opacity) {
      return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
    }

    function Lab(l, a, b, opacity) {
      this.l = +l;
      this.a = +a;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Lab, lab, extend(Color, {
      brighter: function(k) {
        return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
      },
      darker: function(k) {
        return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
      },
      rgb: function() {
        var y = (this.l + 16) / 116,
            x = isNaN(this.a) ? y : y + this.a / 500,
            z = isNaN(this.b) ? y : y - this.b / 200;
        x = Xn * lab2xyz(x);
        y = Yn * lab2xyz(y);
        z = Zn * lab2xyz(z);
        return new Rgb(
          lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),
          lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),
          lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),
          this.opacity
        );
      }
    }));

    function xyz2lab(t) {
      return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
    }

    function lab2xyz(t) {
      return t > t1 ? t * t * t : t2 * (t - t0);
    }

    function lrgb2rgb(x) {
      return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
    }

    function rgb2lrgb(x) {
      return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
    }

    function hclConvert(o) {
      if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
      if (!(o instanceof Lab)) o = labConvert(o);
      if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
      var h = Math.atan2(o.b, o.a) * degrees;
      return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
    }

    function hcl(h, c, l, opacity) {
      return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
    }

    function Hcl(h, c, l, opacity) {
      this.h = +h;
      this.c = +c;
      this.l = +l;
      this.opacity = +opacity;
    }

    function hcl2lab(o) {
      if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
      var h = o.h * radians;
      return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
    }

    define(Hcl, hcl, extend(Color, {
      brighter: function(k) {
        return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
      },
      darker: function(k) {
        return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
      },
      rgb: function() {
        return hcl2lab(this).rgb();
      }
    }));

    var A = -0.14861,
        B = +1.78277,
        C = -0.29227,
        D = -0.90649,
        E = +1.97294,
        ED = E * D,
        EB = E * B,
        BC_DA = B * C - D * A;

    function cubehelixConvert(o) {
      if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Rgb)) o = rgbConvert(o);
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
          bl = b - l,
          k = (E * (g - l) - C * bl) / D,
          s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
          h = s ? Math.atan2(k, bl) * degrees - 120 : NaN;
      return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
    }

    function cubehelix(h, s, l, opacity) {
      return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
    }

    function Cubehelix(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Cubehelix, cubehelix, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
      },
      rgb: function() {
        var h = isNaN(this.h) ? 0 : (this.h + 120) * radians,
            l = +this.l,
            a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
            cosh = Math.cos(h),
            sinh = Math.sin(h);
        return new Rgb(
          255 * (l + a * (A * cosh + B * sinh)),
          255 * (l + a * (C * cosh + D * sinh)),
          255 * (l + a * (E * cosh)),
          this.opacity
        );
      }
    }));

    function basis(t1, v0, v1, v2, v3) {
      var t2 = t1 * t1, t3 = t2 * t1;
      return ((1 - 3 * t1 + 3 * t2 - t3) * v0
          + (4 - 6 * t2 + 3 * t3) * v1
          + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
          + t3 * v3) / 6;
    }

    function basis$1(values) {
      var n = values.length - 1;
      return function(t) {
        var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
            v1 = values[i],
            v2 = values[i + 1],
            v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
            v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
        return basis((t - i / n) * n, v0, v1, v2, v3);
      };
    }

    function basisClosed(values) {
      var n = values.length;
      return function(t) {
        var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
            v0 = values[(i + n - 1) % n],
            v1 = values[i % n],
            v2 = values[(i + 1) % n],
            v3 = values[(i + 2) % n];
        return basis((t - i / n) * n, v0, v1, v2, v3);
      };
    }

    var constant$1 = x => () => x;

    function linear(a, d) {
      return function(t) {
        return a + t * d;
      };
    }

    function exponential(a, b, y) {
      return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
      };
    }

    function hue(a, b) {
      var d = b - a;
      return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$1(isNaN(a) ? b : a);
    }

    function gamma(y) {
      return (y = +y) === 1 ? nogamma : function(a, b) {
        return b - a ? exponential(a, b, y) : constant$1(isNaN(a) ? b : a);
      };
    }

    function nogamma(a, b) {
      var d = b - a;
      return d ? linear(a, d) : constant$1(isNaN(a) ? b : a);
    }

    var rgb$1 = (function rgbGamma(y) {
      var color = gamma(y);

      function rgb$1(start, end) {
        var r = color((start = rgb(start)).r, (end = rgb(end)).r),
            g = color(start.g, end.g),
            b = color(start.b, end.b),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.r = r(t);
          start.g = g(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }

      rgb$1.gamma = rgbGamma;

      return rgb$1;
    })(1);

    function rgbSpline(spline) {
      return function(colors) {
        var n = colors.length,
            r = new Array(n),
            g = new Array(n),
            b = new Array(n),
            i, color;
        for (i = 0; i < n; ++i) {
          color = rgb(colors[i]);
          r[i] = color.r || 0;
          g[i] = color.g || 0;
          b[i] = color.b || 0;
        }
        r = spline(r);
        g = spline(g);
        b = spline(b);
        color.opacity = 1;
        return function(t) {
          color.r = r(t);
          color.g = g(t);
          color.b = b(t);
          return color + "";
        };
      };
    }

    var rgbBasis = rgbSpline(basis$1);
    var rgbBasisClosed = rgbSpline(basisClosed);

    function numberArray(a, b) {
      if (!b) b = [];
      var n = a ? Math.min(b.length, a.length) : 0,
          c = b.slice(),
          i;
      return function(t) {
        for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
        return c;
      };
    }

    function isNumberArray(x) {
      return ArrayBuffer.isView(x) && !(x instanceof DataView);
    }

    function array$1(a, b) {
      return (isNumberArray(b) ? numberArray : genericArray)(a, b);
    }

    function genericArray(a, b) {
      var nb = b ? b.length : 0,
          na = a ? Math.min(nb, a.length) : 0,
          x = new Array(na),
          c = new Array(nb),
          i;

      for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);
      for (; i < nb; ++i) c[i] = b[i];

      return function(t) {
        for (i = 0; i < na; ++i) c[i] = x[i](t);
        return c;
      };
    }

    function date(a, b) {
      var d = new Date;
      return a = +a, b = +b, function(t) {
        return d.setTime(a * (1 - t) + b * t), d;
      };
    }

    function number$1(a, b) {
      return a = +a, b = +b, function(t) {
        return a * (1 - t) + b * t;
      };
    }

    function object(a, b) {
      var i = {},
          c = {},
          k;

      if (a === null || typeof a !== "object") a = {};
      if (b === null || typeof b !== "object") b = {};

      for (k in b) {
        if (k in a) {
          i[k] = value(a[k], b[k]);
        } else {
          c[k] = b[k];
        }
      }

      return function(t) {
        for (k in i) c[k] = i[k](t);
        return c;
      };
    }

    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
        reB = new RegExp(reA.source, "g");

    function zero(b) {
      return function() {
        return b;
      };
    }

    function one(b) {
      return function(t) {
        return b(t) + "";
      };
    }

    function string(a, b) {
      var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
          am, // current match in a
          bm, // current match in b
          bs, // string preceding current number in b, if any
          i = -1, // index in s
          s = [], // string constants and placeholders
          q = []; // number interpolators

      // Coerce inputs to strings.
      a = a + "", b = b + "";

      // Interpolate pairs of numbers in a & b.
      while ((am = reA.exec(a))
          && (bm = reB.exec(b))) {
        if ((bs = bm.index) > bi) { // a string precedes the next number in b
          bs = b.slice(bi, bs);
          if (s[i]) s[i] += bs; // coalesce with previous string
          else s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
          if (s[i]) s[i] += bm; // coalesce with previous string
          else s[++i] = bm;
        } else { // interpolate non-matching numbers
          s[++i] = null;
          q.push({i: i, x: number$1(am, bm)});
        }
        bi = reB.lastIndex;
      }

      // Add remains of b.
      if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
      }

      // Special optimization for only a single match.
      // Otherwise, interpolate each of the numbers and rejoin the string.
      return s.length < 2 ? (q[0]
          ? one(q[0].x)
          : zero(b))
          : (b = q.length, function(t) {
              for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
              return s.join("");
            });
    }

    function value(a, b) {
      var t = typeof b, c;
      return b == null || t === "boolean" ? constant$1(b)
          : (t === "number" ? number$1
          : t === "string" ? ((c = color(b)) ? (b = c, rgb$1) : string)
          : b instanceof color ? rgb$1
          : b instanceof Date ? date
          : isNumberArray(b) ? numberArray
          : Array.isArray(b) ? genericArray
          : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
          : number$1)(a, b);
    }

    function discrete(range) {
      var n = range.length;
      return function(t) {
        return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
      };
    }

    function hue$1(a, b) {
      var i = hue(+a, +b);
      return function(t) {
        var x = i(t);
        return x - 360 * Math.floor(x / 360);
      };
    }

    function round(a, b) {
      return a = +a, b = +b, function(t) {
        return Math.round(a * (1 - t) + b * t);
      };
    }

    var degrees$1 = 180 / Math.PI;

    var identity$1 = {
      translateX: 0,
      translateY: 0,
      rotate: 0,
      skewX: 0,
      scaleX: 1,
      scaleY: 1
    };

    function decompose(a, b, c, d, e, f) {
      var scaleX, scaleY, skewX;
      if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
      if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
      if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
      if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
      return {
        translateX: e,
        translateY: f,
        rotate: Math.atan2(b, a) * degrees$1,
        skewX: Math.atan(skewX) * degrees$1,
        scaleX: scaleX,
        scaleY: scaleY
      };
    }

    var svgNode;

    /* eslint-disable no-undef */
    function parseCss(value) {
      const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
      return m.isIdentity ? identity$1 : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
    }

    function parseSvg(value) {
      if (value == null) return identity$1;
      if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
      svgNode.setAttribute("transform", value);
      if (!(value = svgNode.transform.baseVal.consolidate())) return identity$1;
      value = value.matrix;
      return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
    }

    function interpolateTransform(parse, pxComma, pxParen, degParen) {

      function pop(s) {
        return s.length ? s.pop() + " " : "";
      }

      function translate(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
          var i = s.push("translate(", null, pxComma, null, pxParen);
          q.push({i: i - 4, x: number$1(xa, xb)}, {i: i - 2, x: number$1(ya, yb)});
        } else if (xb || yb) {
          s.push("translate(" + xb + pxComma + yb + pxParen);
        }
      }

      function rotate(a, b, s, q) {
        if (a !== b) {
          if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
          q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number$1(a, b)});
        } else if (b) {
          s.push(pop(s) + "rotate(" + b + degParen);
        }
      }

      function skewX(a, b, s, q) {
        if (a !== b) {
          q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number$1(a, b)});
        } else if (b) {
          s.push(pop(s) + "skewX(" + b + degParen);
        }
      }

      function scale(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
          var i = s.push(pop(s) + "scale(", null, ",", null, ")");
          q.push({i: i - 4, x: number$1(xa, xb)}, {i: i - 2, x: number$1(ya, yb)});
        } else if (xb !== 1 || yb !== 1) {
          s.push(pop(s) + "scale(" + xb + "," + yb + ")");
        }
      }

      return function(a, b) {
        var s = [], // string constants and placeholders
            q = []; // number interpolators
        a = parse(a), b = parse(b);
        translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
        rotate(a.rotate, b.rotate, s, q);
        skewX(a.skewX, b.skewX, s, q);
        scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
        a = b = null; // gc
        return function(t) {
          var i = -1, n = q.length, o;
          while (++i < n) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        };
      };
    }

    var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
    var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

    var epsilon2 = 1e-12;

    function cosh(x) {
      return ((x = Math.exp(x)) + 1 / x) / 2;
    }

    function sinh(x) {
      return ((x = Math.exp(x)) - 1 / x) / 2;
    }

    function tanh(x) {
      return ((x = Math.exp(2 * x)) - 1) / (x + 1);
    }

    var zoom = (function zoomRho(rho, rho2, rho4) {

      // p0 = [ux0, uy0, w0]
      // p1 = [ux1, uy1, w1]
      function zoom(p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
            ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
            dx = ux1 - ux0,
            dy = uy1 - uy0,
            d2 = dx * dx + dy * dy,
            i,
            S;

        // Special case for u0 ≅ u1.
        if (d2 < epsilon2) {
          S = Math.log(w1 / w0) / rho;
          i = function(t) {
            return [
              ux0 + t * dx,
              uy0 + t * dy,
              w0 * Math.exp(rho * t * S)
            ];
          };
        }

        // General case.
        else {
          var d1 = Math.sqrt(d2),
              b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
              b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
              r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
              r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
          S = (r1 - r0) / rho;
          i = function(t) {
            var s = t * S,
                coshr0 = cosh(r0),
                u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
            return [
              ux0 + u * dx,
              uy0 + u * dy,
              w0 * coshr0 / cosh(rho * s + r0)
            ];
          };
        }

        i.duration = S * 1000 * rho / Math.SQRT2;

        return i;
      }

      zoom.rho = function(_) {
        var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
        return zoomRho(_1, _2, _4);
      };

      return zoom;
    })(Math.SQRT2, 2, 4);

    function hsl$1(hue) {
      return function(start, end) {
        var h = hue((start = hsl(start)).h, (end = hsl(end)).h),
            s = nogamma(start.s, end.s),
            l = nogamma(start.l, end.l),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.h = h(t);
          start.s = s(t);
          start.l = l(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }
    }

    var hsl$2 = hsl$1(hue);
    var hslLong = hsl$1(nogamma);

    function lab$1(start, end) {
      var l = nogamma((start = lab(start)).l, (end = lab(end)).l),
          a = nogamma(start.a, end.a),
          b = nogamma(start.b, end.b),
          opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.l = l(t);
        start.a = a(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + "";
      };
    }

    function hcl$1(hue) {
      return function(start, end) {
        var h = hue((start = hcl(start)).h, (end = hcl(end)).h),
            c = nogamma(start.c, end.c),
            l = nogamma(start.l, end.l),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.h = h(t);
          start.c = c(t);
          start.l = l(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }
    }

    var hcl$2 = hcl$1(hue);
    var hclLong = hcl$1(nogamma);

    function cubehelix$1(hue) {
      return (function cubehelixGamma(y) {
        y = +y;

        function cubehelix$1(start, end) {
          var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),
              s = nogamma(start.s, end.s),
              l = nogamma(start.l, end.l),
              opacity = nogamma(start.opacity, end.opacity);
          return function(t) {
            start.h = h(t);
            start.s = s(t);
            start.l = l(Math.pow(t, y));
            start.opacity = opacity(t);
            return start + "";
          };
        }

        cubehelix$1.gamma = cubehelixGamma;

        return cubehelix$1;
      })(1);
    }

    var cubehelix$2 = cubehelix$1(hue);
    var cubehelixLong = cubehelix$1(nogamma);

    function piecewise(interpolate, values) {
      if (values === undefined) values = interpolate, interpolate = value;
      var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
      while (i < n) I[i] = interpolate(v, v = values[++i]);
      return function(t) {
        var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
        return I[i](t - i);
      };
    }

    function quantize(interpolator, n) {
      var samples = new Array(n);
      for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
      return samples;
    }



    var src$1 = /*#__PURE__*/Object.freeze({
        interpolate: value,
        interpolateArray: array$1,
        interpolateBasis: basis$1,
        interpolateBasisClosed: basisClosed,
        interpolateDate: date,
        interpolateDiscrete: discrete,
        interpolateHue: hue$1,
        interpolateNumber: number$1,
        interpolateNumberArray: numberArray,
        interpolateObject: object,
        interpolateRound: round,
        interpolateString: string,
        interpolateTransformCss: interpolateTransformCss,
        interpolateTransformSvg: interpolateTransformSvg,
        interpolateZoom: zoom,
        interpolateRgb: rgb$1,
        interpolateRgbBasis: rgbBasis,
        interpolateRgbBasisClosed: rgbBasisClosed,
        interpolateHsl: hsl$2,
        interpolateHslLong: hslLong,
        interpolateLab: lab$1,
        interpolateHcl: hcl$2,
        interpolateHclLong: hclLong,
        interpolateCubehelix: cubehelix$2,
        interpolateCubehelixLong: cubehelixLong,
        piecewise: piecewise,
        quantize: quantize
    });

    function formatDecimal(x) {
      return Math.abs(x = Math.round(x)) >= 1e21
          ? x.toLocaleString("en").replace(/,/g, "")
          : x.toString(10);
    }

    // Computes the decimal coefficient and exponent of the specified number x with
    // significant digits p, where x is positive and p is in [1, 21] or undefined.
    // For example, formatDecimalParts(1.23) returns ["123", 0].
    function formatDecimalParts(x, p) {
      if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
      var i, coefficient = x.slice(0, i);

      // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
      // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
      return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
      ];
    }

    function exponent(x) {
      return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
    }

    function formatGroup(grouping, thousands) {
      return function(value, width) {
        var i = value.length,
            t = [],
            j = 0,
            g = grouping[0],
            length = 0;

        while (i > 0 && g > 0) {
          if (length + g + 1 > width) g = Math.max(1, width - length);
          t.push(value.substring(i -= g, i + g));
          if ((length += g + 1) > width) break;
          g = grouping[j = (j + 1) % grouping.length];
        }

        return t.reverse().join(thousands);
      };
    }

    function formatNumerals(numerals) {
      return function(value) {
        return value.replace(/[0-9]/g, function(i) {
          return numerals[+i];
        });
      };
    }

    // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
    var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

    function formatSpecifier(specifier) {
      if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
      var match;
      return new FormatSpecifier({
        fill: match[1],
        align: match[2],
        sign: match[3],
        symbol: match[4],
        zero: match[5],
        width: match[6],
        comma: match[7],
        precision: match[8] && match[8].slice(1),
        trim: match[9],
        type: match[10]
      });
    }

    formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

    function FormatSpecifier(specifier) {
      this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
      this.align = specifier.align === undefined ? ">" : specifier.align + "";
      this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
      this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
      this.zero = !!specifier.zero;
      this.width = specifier.width === undefined ? undefined : +specifier.width;
      this.comma = !!specifier.comma;
      this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
      this.trim = !!specifier.trim;
      this.type = specifier.type === undefined ? "" : specifier.type + "";
    }

    FormatSpecifier.prototype.toString = function() {
      return this.fill
          + this.align
          + this.sign
          + this.symbol
          + (this.zero ? "0" : "")
          + (this.width === undefined ? "" : Math.max(1, this.width | 0))
          + (this.comma ? "," : "")
          + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
          + (this.trim ? "~" : "")
          + this.type;
    };

    // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
    function formatTrim(s) {
      out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
        switch (s[i]) {
          case ".": i0 = i1 = i; break;
          case "0": if (i0 === 0) i0 = i; i1 = i; break;
          default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
        }
      }
      return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
    }

    var prefixExponent;

    function formatPrefixAuto(x, p) {
      var d = formatDecimalParts(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1],
          i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
          n = coefficient.length;
      return i === n ? coefficient
          : i > n ? coefficient + new Array(i - n + 1).join("0")
          : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
          : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
    }

    function formatRounded(x, p) {
      var d = formatDecimalParts(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1];
      return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
          : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
          : coefficient + new Array(exponent - coefficient.length + 2).join("0");
    }

    var formatTypes = {
      "%": (x, p) => (x * 100).toFixed(p),
      "b": (x) => Math.round(x).toString(2),
      "c": (x) => x + "",
      "d": formatDecimal,
      "e": (x, p) => x.toExponential(p),
      "f": (x, p) => x.toFixed(p),
      "g": (x, p) => x.toPrecision(p),
      "o": (x) => Math.round(x).toString(8),
      "p": (x, p) => formatRounded(x * 100, p),
      "r": formatRounded,
      "s": formatPrefixAuto,
      "X": (x) => Math.round(x).toString(16).toUpperCase(),
      "x": (x) => Math.round(x).toString(16)
    };

    function identity$2(x) {
      return x;
    }

    var map$1 = Array.prototype.map,
        prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

    function formatLocale(locale) {
      var group = locale.grouping === undefined || locale.thousands === undefined ? identity$2 : formatGroup(map$1.call(locale.grouping, Number), locale.thousands + ""),
          currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
          currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
          decimal = locale.decimal === undefined ? "." : locale.decimal + "",
          numerals = locale.numerals === undefined ? identity$2 : formatNumerals(map$1.call(locale.numerals, String)),
          percent = locale.percent === undefined ? "%" : locale.percent + "",
          minus = locale.minus === undefined ? "−" : locale.minus + "",
          nan = locale.nan === undefined ? "NaN" : locale.nan + "";

      function newFormat(specifier) {
        specifier = formatSpecifier(specifier);

        var fill = specifier.fill,
            align = specifier.align,
            sign = specifier.sign,
            symbol = specifier.symbol,
            zero = specifier.zero,
            width = specifier.width,
            comma = specifier.comma,
            precision = specifier.precision,
            trim = specifier.trim,
            type = specifier.type;

        // The "n" type is an alias for ",g".
        if (type === "n") comma = true, type = "g";

        // The "" type, and any invalid type, is an alias for ".12~g".
        else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

        // Compute the prefix and suffix.
        // For SI-prefix, the suffix is lazily computed.
        var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
            suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

        // What format function should we use?
        // Is this an integer type?
        // Can this type generate exponential notation?
        var formatType = formatTypes[type],
            maybeSuffix = /[defgprs%]/.test(type);

        // Set the default precision if not specified,
        // or clamp the specified precision to the supported range.
        // For significant precision, it must be in [1, 21].
        // For fixed precision, it must be in [0, 20].
        precision = precision === undefined ? 6
            : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
            : Math.max(0, Math.min(20, precision));

        function format(value) {
          var valuePrefix = prefix,
              valueSuffix = suffix,
              i, n, c;

          if (type === "c") {
            valueSuffix = formatType(value) + valueSuffix;
            value = "";
          } else {
            value = +value;

            // Determine the sign. -0 is not less than 0, but 1 / -0 is!
            var valueNegative = value < 0 || 1 / value < 0;

            // Perform the initial formatting.
            value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

            // Trim insignificant zeros.
            if (trim) value = formatTrim(value);

            // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
            if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

            // Compute the prefix and suffix.
            valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
            valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

            // Break the formatted value into the integer “value” part that can be
            // grouped, and fractional or exponential “suffix” part that is not.
            if (maybeSuffix) {
              i = -1, n = value.length;
              while (++i < n) {
                if (c = value.charCodeAt(i), 48 > c || c > 57) {
                  valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                  value = value.slice(0, i);
                  break;
                }
              }
            }
          }

          // If the fill character is not "0", grouping is applied before padding.
          if (comma && !zero) value = group(value, Infinity);

          // Compute the padding.
          var length = valuePrefix.length + value.length + valueSuffix.length,
              padding = length < width ? new Array(width - length + 1).join(fill) : "";

          // If the fill character is "0", grouping is applied after padding.
          if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

          // Reconstruct the final output based on the desired alignment.
          switch (align) {
            case "<": value = valuePrefix + value + valueSuffix + padding; break;
            case "=": value = valuePrefix + padding + value + valueSuffix; break;
            case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
            default: value = padding + valuePrefix + value + valueSuffix; break;
          }

          return numerals(value);
        }

        format.toString = function() {
          return specifier + "";
        };

        return format;
      }

      function formatPrefix(specifier, value) {
        var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
            e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
            k = Math.pow(10, -e),
            prefix = prefixes[8 + e / 3];
        return function(value) {
          return f(k * value) + prefix;
        };
      }

      return {
        format: newFormat,
        formatPrefix: formatPrefix
      };
    }

    var locale;
    var format;
    var formatPrefix;

    defaultLocale({
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });

    function defaultLocale(definition) {
      locale = formatLocale(definition);
      format = locale.format;
      formatPrefix = locale.formatPrefix;
      return locale;
    }

    function precisionFixed(step) {
      return Math.max(0, -exponent(Math.abs(step)));
    }

    function precisionPrefix(step, value) {
      return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
    }

    function precisionRound(step, max) {
      step = Math.abs(step), max = Math.abs(max) - step;
      return Math.max(0, exponent(max) - exponent(step)) + 1;
    }



    var src$2 = /*#__PURE__*/Object.freeze({
        formatDefaultLocale: defaultLocale,
        get format () { return format; },
        get formatPrefix () { return formatPrefix; },
        formatLocale: formatLocale,
        formatSpecifier: formatSpecifier,
        FormatSpecifier: FormatSpecifier,
        precisionFixed: precisionFixed,
        precisionPrefix: precisionPrefix,
        precisionRound: precisionRound
    });

    var t0$1 = new Date,
        t1$1 = new Date;

    function newInterval(floori, offseti, count, field) {

      function interval(date) {
        return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
      }

      interval.floor = function(date) {
        return floori(date = new Date(+date)), date;
      };

      interval.ceil = function(date) {
        return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
      };

      interval.round = function(date) {
        var d0 = interval(date),
            d1 = interval.ceil(date);
        return date - d0 < d1 - date ? d0 : d1;
      };

      interval.offset = function(date, step) {
        return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
      };

      interval.range = function(start, stop, step) {
        var range = [], previous;
        start = interval.ceil(start);
        step = step == null ? 1 : Math.floor(step);
        if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
        do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
        while (previous < start && start < stop);
        return range;
      };

      interval.filter = function(test) {
        return newInterval(function(date) {
          if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
        }, function(date, step) {
          if (date >= date) {
            if (step < 0) while (++step <= 0) {
              while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
            } else while (--step >= 0) {
              while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
            }
          }
        });
      };

      if (count) {
        interval.count = function(start, end) {
          t0$1.setTime(+start), t1$1.setTime(+end);
          floori(t0$1), floori(t1$1);
          return Math.floor(count(t0$1, t1$1));
        };

        interval.every = function(step) {
          step = Math.floor(step);
          return !isFinite(step) || !(step > 0) ? null
              : !(step > 1) ? interval
              : interval.filter(field
                  ? function(d) { return field(d) % step === 0; }
                  : function(d) { return interval.count(0, d) % step === 0; });
        };
      }

      return interval;
    }

    var millisecond = newInterval(function() {
      // noop
    }, function(date, step) {
      date.setTime(+date + step);
    }, function(start, end) {
      return end - start;
    });

    // An optimized implementation for this simple case.
    millisecond.every = function(k) {
      k = Math.floor(k);
      if (!isFinite(k) || !(k > 0)) return null;
      if (!(k > 1)) return millisecond;
      return newInterval(function(date) {
        date.setTime(Math.floor(date / k) * k);
      }, function(date, step) {
        date.setTime(+date + step * k);
      }, function(start, end) {
        return (end - start) / k;
      });
    };
    var milliseconds = millisecond.range;

    const durationSecond = 1000;
    const durationMinute = durationSecond * 60;
    const durationHour = durationMinute * 60;
    const durationDay = durationHour * 24;
    const durationWeek = durationDay * 7;
    const durationMonth = durationDay * 30;
    const durationYear = durationDay * 365;

    var second = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds());
    }, function(date, step) {
      date.setTime(+date + step * durationSecond);
    }, function(start, end) {
      return (end - start) / durationSecond;
    }, function(date) {
      return date.getUTCSeconds();
    });
    var seconds = second.range;

    var minute = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
    }, function(date, step) {
      date.setTime(+date + step * durationMinute);
    }, function(start, end) {
      return (end - start) / durationMinute;
    }, function(date) {
      return date.getMinutes();
    });
    var minutes = minute.range;

    var hour = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
    }, function(date, step) {
      date.setTime(+date + step * durationHour);
    }, function(start, end) {
      return (end - start) / durationHour;
    }, function(date) {
      return date.getHours();
    });
    var hours = hour.range;

    var day = newInterval(
      date => date.setHours(0, 0, 0, 0),
      (date, step) => date.setDate(date.getDate() + step),
      (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
      date => date.getDate() - 1
    );
    var days = day.range;

    function weekday(i) {
      return newInterval(function(date) {
        date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
        date.setHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setDate(date.getDate() + step * 7);
      }, function(start, end) {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
      });
    }

    var sunday = weekday(0);
    var monday = weekday(1);
    var tuesday = weekday(2);
    var wednesday = weekday(3);
    var thursday = weekday(4);
    var friday = weekday(5);
    var saturday = weekday(6);

    var sundays = sunday.range;
    var mondays = monday.range;
    var tuesdays = tuesday.range;
    var wednesdays = wednesday.range;
    var thursdays = thursday.range;
    var fridays = friday.range;
    var saturdays = saturday.range;

    var month = newInterval(function(date) {
      date.setDate(1);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setMonth(date.getMonth() + step);
    }, function(start, end) {
      return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
    }, function(date) {
      return date.getMonth();
    });
    var months = month.range;

    var year = newInterval(function(date) {
      date.setMonth(0, 1);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setFullYear(date.getFullYear() + step);
    }, function(start, end) {
      return end.getFullYear() - start.getFullYear();
    }, function(date) {
      return date.getFullYear();
    });

    // An optimized implementation for this simple case.
    year.every = function(k) {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
        date.setFullYear(Math.floor(date.getFullYear() / k) * k);
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setFullYear(date.getFullYear() + step * k);
      });
    };
    var years = year.range;

    var utcMinute = newInterval(function(date) {
      date.setUTCSeconds(0, 0);
    }, function(date, step) {
      date.setTime(+date + step * durationMinute);
    }, function(start, end) {
      return (end - start) / durationMinute;
    }, function(date) {
      return date.getUTCMinutes();
    });
    var utcMinutes = utcMinute.range;

    var utcHour = newInterval(function(date) {
      date.setUTCMinutes(0, 0, 0);
    }, function(date, step) {
      date.setTime(+date + step * durationHour);
    }, function(start, end) {
      return (end - start) / durationHour;
    }, function(date) {
      return date.getUTCHours();
    });
    var utcHours = utcHour.range;

    var utcDay = newInterval(function(date) {
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCDate(date.getUTCDate() + step);
    }, function(start, end) {
      return (end - start) / durationDay;
    }, function(date) {
      return date.getUTCDate() - 1;
    });
    var utcDays = utcDay.range;

    function utcWeekday(i) {
      return newInterval(function(date) {
        date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
        date.setUTCHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setUTCDate(date.getUTCDate() + step * 7);
      }, function(start, end) {
        return (end - start) / durationWeek;
      });
    }

    var utcSunday = utcWeekday(0);
    var utcMonday = utcWeekday(1);
    var utcTuesday = utcWeekday(2);
    var utcWednesday = utcWeekday(3);
    var utcThursday = utcWeekday(4);
    var utcFriday = utcWeekday(5);
    var utcSaturday = utcWeekday(6);

    var utcSundays = utcSunday.range;
    var utcMondays = utcMonday.range;
    var utcTuesdays = utcTuesday.range;
    var utcWednesdays = utcWednesday.range;
    var utcThursdays = utcThursday.range;
    var utcFridays = utcFriday.range;
    var utcSaturdays = utcSaturday.range;

    var utcMonth = newInterval(function(date) {
      date.setUTCDate(1);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCMonth(date.getUTCMonth() + step);
    }, function(start, end) {
      return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
    }, function(date) {
      return date.getUTCMonth();
    });
    var utcMonths = utcMonth.range;

    var utcYear = newInterval(function(date) {
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCFullYear(date.getUTCFullYear() + step);
    }, function(start, end) {
      return end.getUTCFullYear() - start.getUTCFullYear();
    }, function(date) {
      return date.getUTCFullYear();
    });

    // An optimized implementation for this simple case.
    utcYear.every = function(k) {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
        date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setUTCFullYear(date.getUTCFullYear() + step * k);
      });
    };
    var utcYears = utcYear.range;

    function ticker(year, month, week, day, hour, minute) {

      const tickIntervals = [
        [second,  1,      durationSecond],
        [second,  5,  5 * durationSecond],
        [second, 15, 15 * durationSecond],
        [second, 30, 30 * durationSecond],
        [minute,  1,      durationMinute],
        [minute,  5,  5 * durationMinute],
        [minute, 15, 15 * durationMinute],
        [minute, 30, 30 * durationMinute],
        [  hour,  1,      durationHour  ],
        [  hour,  3,  3 * durationHour  ],
        [  hour,  6,  6 * durationHour  ],
        [  hour, 12, 12 * durationHour  ],
        [   day,  1,      durationDay   ],
        [   day,  2,  2 * durationDay   ],
        [  week,  1,      durationWeek  ],
        [ month,  1,      durationMonth ],
        [ month,  3,  3 * durationMonth ],
        [  year,  1,      durationYear  ]
      ];

      function ticks(start, stop, count) {
        const reverse = stop < start;
        if (reverse) [start, stop] = [stop, start];
        const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
        const ticks = interval ? interval.range(start, +stop + 1) : []; // inclusive stop
        return reverse ? ticks.reverse() : ticks;
      }

      function tickInterval(start, stop, count) {
        const target = Math.abs(stop - start) / count;
        const i = bisector(([,, step]) => step).right(tickIntervals, target);
        if (i === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count));
        if (i === 0) return millisecond.every(Math.max(tickStep(start, stop, count), 1));
        const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        return t.every(step);
      }

      return [ticks, tickInterval];
    }

    const [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute);
    const [timeTicks, timeTickInterval] = ticker(year, month, sunday, day, hour, minute);



    var src$3 = /*#__PURE__*/Object.freeze({
        timeInterval: newInterval,
        timeMillisecond: millisecond,
        timeMilliseconds: milliseconds,
        utcMillisecond: millisecond,
        utcMilliseconds: milliseconds,
        timeSecond: second,
        timeSeconds: seconds,
        utcSecond: second,
        utcSeconds: seconds,
        timeMinute: minute,
        timeMinutes: minutes,
        timeHour: hour,
        timeHours: hours,
        timeDay: day,
        timeDays: days,
        timeWeek: sunday,
        timeWeeks: sundays,
        timeSunday: sunday,
        timeSundays: sundays,
        timeMonday: monday,
        timeMondays: mondays,
        timeTuesday: tuesday,
        timeTuesdays: tuesdays,
        timeWednesday: wednesday,
        timeWednesdays: wednesdays,
        timeThursday: thursday,
        timeThursdays: thursdays,
        timeFriday: friday,
        timeFridays: fridays,
        timeSaturday: saturday,
        timeSaturdays: saturdays,
        timeMonth: month,
        timeMonths: months,
        timeYear: year,
        timeYears: years,
        utcMinute: utcMinute,
        utcMinutes: utcMinutes,
        utcHour: utcHour,
        utcHours: utcHours,
        utcDay: utcDay,
        utcDays: utcDays,
        utcWeek: utcSunday,
        utcWeeks: utcSundays,
        utcSunday: utcSunday,
        utcSundays: utcSundays,
        utcMonday: utcMonday,
        utcMondays: utcMondays,
        utcTuesday: utcTuesday,
        utcTuesdays: utcTuesdays,
        utcWednesday: utcWednesday,
        utcWednesdays: utcWednesdays,
        utcThursday: utcThursday,
        utcThursdays: utcThursdays,
        utcFriday: utcFriday,
        utcFridays: utcFridays,
        utcSaturday: utcSaturday,
        utcSaturdays: utcSaturdays,
        utcMonth: utcMonth,
        utcMonths: utcMonths,
        utcYear: utcYear,
        utcYears: utcYears,
        utcTicks: utcTicks,
        utcTickInterval: utcTickInterval,
        timeTicks: timeTicks,
        timeTickInterval: timeTickInterval
    });

    function localDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
        date.setFullYear(d.y);
        return date;
      }
      return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
    }

    function utcDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
        date.setUTCFullYear(d.y);
        return date;
      }
      return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
    }

    function newDate(y, m, d) {
      return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};
    }

    function formatLocale$1(locale) {
      var locale_dateTime = locale.dateTime,
          locale_date = locale.date,
          locale_time = locale.time,
          locale_periods = locale.periods,
          locale_weekdays = locale.days,
          locale_shortWeekdays = locale.shortDays,
          locale_months = locale.months,
          locale_shortMonths = locale.shortMonths;

      var periodRe = formatRe(locale_periods),
          periodLookup = formatLookup(locale_periods),
          weekdayRe = formatRe(locale_weekdays),
          weekdayLookup = formatLookup(locale_weekdays),
          shortWeekdayRe = formatRe(locale_shortWeekdays),
          shortWeekdayLookup = formatLookup(locale_shortWeekdays),
          monthRe = formatRe(locale_months),
          monthLookup = formatLookup(locale_months),
          shortMonthRe = formatRe(locale_shortMonths),
          shortMonthLookup = formatLookup(locale_shortMonths);

      var formats = {
        "a": formatShortWeekday,
        "A": formatWeekday,
        "b": formatShortMonth,
        "B": formatMonth,
        "c": null,
        "d": formatDayOfMonth,
        "e": formatDayOfMonth,
        "f": formatMicroseconds,
        "g": formatYearISO,
        "G": formatFullYearISO,
        "H": formatHour24,
        "I": formatHour12,
        "j": formatDayOfYear,
        "L": formatMilliseconds,
        "m": formatMonthNumber,
        "M": formatMinutes,
        "p": formatPeriod,
        "q": formatQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatSeconds,
        "u": formatWeekdayNumberMonday,
        "U": formatWeekNumberSunday,
        "V": formatWeekNumberISO,
        "w": formatWeekdayNumberSunday,
        "W": formatWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatYear,
        "Y": formatFullYear,
        "Z": formatZone,
        "%": formatLiteralPercent
      };

      var utcFormats = {
        "a": formatUTCShortWeekday,
        "A": formatUTCWeekday,
        "b": formatUTCShortMonth,
        "B": formatUTCMonth,
        "c": null,
        "d": formatUTCDayOfMonth,
        "e": formatUTCDayOfMonth,
        "f": formatUTCMicroseconds,
        "g": formatUTCYearISO,
        "G": formatUTCFullYearISO,
        "H": formatUTCHour24,
        "I": formatUTCHour12,
        "j": formatUTCDayOfYear,
        "L": formatUTCMilliseconds,
        "m": formatUTCMonthNumber,
        "M": formatUTCMinutes,
        "p": formatUTCPeriod,
        "q": formatUTCQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatUTCSeconds,
        "u": formatUTCWeekdayNumberMonday,
        "U": formatUTCWeekNumberSunday,
        "V": formatUTCWeekNumberISO,
        "w": formatUTCWeekdayNumberSunday,
        "W": formatUTCWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatUTCYear,
        "Y": formatUTCFullYear,
        "Z": formatUTCZone,
        "%": formatLiteralPercent
      };

      var parses = {
        "a": parseShortWeekday,
        "A": parseWeekday,
        "b": parseShortMonth,
        "B": parseMonth,
        "c": parseLocaleDateTime,
        "d": parseDayOfMonth,
        "e": parseDayOfMonth,
        "f": parseMicroseconds,
        "g": parseYear,
        "G": parseFullYear,
        "H": parseHour24,
        "I": parseHour24,
        "j": parseDayOfYear,
        "L": parseMilliseconds,
        "m": parseMonthNumber,
        "M": parseMinutes,
        "p": parsePeriod,
        "q": parseQuarter,
        "Q": parseUnixTimestamp,
        "s": parseUnixTimestampSeconds,
        "S": parseSeconds,
        "u": parseWeekdayNumberMonday,
        "U": parseWeekNumberSunday,
        "V": parseWeekNumberISO,
        "w": parseWeekdayNumberSunday,
        "W": parseWeekNumberMonday,
        "x": parseLocaleDate,
        "X": parseLocaleTime,
        "y": parseYear,
        "Y": parseFullYear,
        "Z": parseZone,
        "%": parseLiteralPercent
      };

      // These recursive directive definitions must be deferred.
      formats.x = newFormat(locale_date, formats);
      formats.X = newFormat(locale_time, formats);
      formats.c = newFormat(locale_dateTime, formats);
      utcFormats.x = newFormat(locale_date, utcFormats);
      utcFormats.X = newFormat(locale_time, utcFormats);
      utcFormats.c = newFormat(locale_dateTime, utcFormats);

      function newFormat(specifier, formats) {
        return function(date) {
          var string = [],
              i = -1,
              j = 0,
              n = specifier.length,
              c,
              pad,
              format;

          if (!(date instanceof Date)) date = new Date(+date);

          while (++i < n) {
            if (specifier.charCodeAt(i) === 37) {
              string.push(specifier.slice(j, i));
              if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
              else pad = c === "e" ? " " : "0";
              if (format = formats[c]) c = format(date, pad);
              string.push(c);
              j = i + 1;
            }
          }

          string.push(specifier.slice(j, i));
          return string.join("");
        };
      }

      function newParse(specifier, Z) {
        return function(string) {
          var d = newDate(1900, undefined, 1),
              i = parseSpecifier(d, specifier, string += "", 0),
              week, day$1;
          if (i != string.length) return null;

          // If a UNIX timestamp is specified, return it.
          if ("Q" in d) return new Date(d.Q);
          if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));

          // If this is utcParse, never use the local timezone.
          if (Z && !("Z" in d)) d.Z = 0;

          // The am-pm flag is 0 for AM, and 1 for PM.
          if ("p" in d) d.H = d.H % 12 + d.p * 12;

          // If the month was not specified, inherit from the quarter.
          if (d.m === undefined) d.m = "q" in d ? d.q : 0;

          // Convert day-of-week and week-of-year to day-of-year.
          if ("V" in d) {
            if (d.V < 1 || d.V > 53) return null;
            if (!("w" in d)) d.w = 1;
            if ("Z" in d) {
              week = utcDate(newDate(d.y, 0, 1)), day$1 = week.getUTCDay();
              week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);
              week = utcDay.offset(week, (d.V - 1) * 7);
              d.y = week.getUTCFullYear();
              d.m = week.getUTCMonth();
              d.d = week.getUTCDate() + (d.w + 6) % 7;
            } else {
              week = localDate(newDate(d.y, 0, 1)), day$1 = week.getDay();
              week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);
              week = day.offset(week, (d.V - 1) * 7);
              d.y = week.getFullYear();
              d.m = week.getMonth();
              d.d = week.getDate() + (d.w + 6) % 7;
            }
          } else if ("W" in d || "U" in d) {
            if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
            day$1 = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
            d.m = 0;
            d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;
          }

          // If a time zone is specified, all fields are interpreted as UTC and then
          // offset according to the specified time zone.
          if ("Z" in d) {
            d.H += d.Z / 100 | 0;
            d.M += d.Z % 100;
            return utcDate(d);
          }

          // Otherwise, all fields are in local time.
          return localDate(d);
        };
      }

      function parseSpecifier(d, specifier, string, j) {
        var i = 0,
            n = specifier.length,
            m = string.length,
            c,
            parse;

        while (i < n) {
          if (j >= m) return -1;
          c = specifier.charCodeAt(i++);
          if (c === 37) {
            c = specifier.charAt(i++);
            parse = parses[c in pads ? specifier.charAt(i++) : c];
            if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
          } else if (c != string.charCodeAt(j++)) {
            return -1;
          }
        }

        return j;
      }

      function parsePeriod(d, string, i) {
        var n = periodRe.exec(string.slice(i));
        return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseShortWeekday(d, string, i) {
        var n = shortWeekdayRe.exec(string.slice(i));
        return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseWeekday(d, string, i) {
        var n = weekdayRe.exec(string.slice(i));
        return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseShortMonth(d, string, i) {
        var n = shortMonthRe.exec(string.slice(i));
        return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseMonth(d, string, i) {
        var n = monthRe.exec(string.slice(i));
        return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseLocaleDateTime(d, string, i) {
        return parseSpecifier(d, locale_dateTime, string, i);
      }

      function parseLocaleDate(d, string, i) {
        return parseSpecifier(d, locale_date, string, i);
      }

      function parseLocaleTime(d, string, i) {
        return parseSpecifier(d, locale_time, string, i);
      }

      function formatShortWeekday(d) {
        return locale_shortWeekdays[d.getDay()];
      }

      function formatWeekday(d) {
        return locale_weekdays[d.getDay()];
      }

      function formatShortMonth(d) {
        return locale_shortMonths[d.getMonth()];
      }

      function formatMonth(d) {
        return locale_months[d.getMonth()];
      }

      function formatPeriod(d) {
        return locale_periods[+(d.getHours() >= 12)];
      }

      function formatQuarter(d) {
        return 1 + ~~(d.getMonth() / 3);
      }

      function formatUTCShortWeekday(d) {
        return locale_shortWeekdays[d.getUTCDay()];
      }

      function formatUTCWeekday(d) {
        return locale_weekdays[d.getUTCDay()];
      }

      function formatUTCShortMonth(d) {
        return locale_shortMonths[d.getUTCMonth()];
      }

      function formatUTCMonth(d) {
        return locale_months[d.getUTCMonth()];
      }

      function formatUTCPeriod(d) {
        return locale_periods[+(d.getUTCHours() >= 12)];
      }

      function formatUTCQuarter(d) {
        return 1 + ~~(d.getUTCMonth() / 3);
      }

      return {
        format: function(specifier) {
          var f = newFormat(specifier += "", formats);
          f.toString = function() { return specifier; };
          return f;
        },
        parse: function(specifier) {
          var p = newParse(specifier += "", false);
          p.toString = function() { return specifier; };
          return p;
        },
        utcFormat: function(specifier) {
          var f = newFormat(specifier += "", utcFormats);
          f.toString = function() { return specifier; };
          return f;
        },
        utcParse: function(specifier) {
          var p = newParse(specifier += "", true);
          p.toString = function() { return specifier; };
          return p;
        }
      };
    }

    var pads = {"-": "", "_": " ", "0": "0"},
        numberRe = /^\s*\d+/, // note: ignores next directive
        percentRe = /^%/,
        requoteRe = /[\\^$*+?|[\]().{}]/g;

    function pad(value, fill, width) {
      var sign = value < 0 ? "-" : "",
          string = (sign ? -value : value) + "",
          length = string.length;
      return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
    }

    function requote(s) {
      return s.replace(requoteRe, "\\$&");
    }

    function formatRe(names) {
      return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
    }

    function formatLookup(names) {
      return new Map(names.map((name, i) => [name.toLowerCase(), i]));
    }

    function parseWeekdayNumberSunday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.w = +n[0], i + n[0].length) : -1;
    }

    function parseWeekdayNumberMonday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.u = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberSunday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.U = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberISO(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.V = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberMonday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.W = +n[0], i + n[0].length) : -1;
    }

    function parseFullYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 4));
      return n ? (d.y = +n[0], i + n[0].length) : -1;
    }

    function parseYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
    }

    function parseZone(d, string, i) {
      var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
      return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
    }

    function parseQuarter(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
    }

    function parseMonthNumber(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
    }

    function parseDayOfMonth(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.d = +n[0], i + n[0].length) : -1;
    }

    function parseDayOfYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 3));
      return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
    }

    function parseHour24(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.H = +n[0], i + n[0].length) : -1;
    }

    function parseMinutes(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.M = +n[0], i + n[0].length) : -1;
    }

    function parseSeconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.S = +n[0], i + n[0].length) : -1;
    }

    function parseMilliseconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 3));
      return n ? (d.L = +n[0], i + n[0].length) : -1;
    }

    function parseMicroseconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 6));
      return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
    }

    function parseLiteralPercent(d, string, i) {
      var n = percentRe.exec(string.slice(i, i + 1));
      return n ? i + n[0].length : -1;
    }

    function parseUnixTimestamp(d, string, i) {
      var n = numberRe.exec(string.slice(i));
      return n ? (d.Q = +n[0], i + n[0].length) : -1;
    }

    function parseUnixTimestampSeconds(d, string, i) {
      var n = numberRe.exec(string.slice(i));
      return n ? (d.s = +n[0], i + n[0].length) : -1;
    }

    function formatDayOfMonth(d, p) {
      return pad(d.getDate(), p, 2);
    }

    function formatHour24(d, p) {
      return pad(d.getHours(), p, 2);
    }

    function formatHour12(d, p) {
      return pad(d.getHours() % 12 || 12, p, 2);
    }

    function formatDayOfYear(d, p) {
      return pad(1 + day.count(year(d), d), p, 3);
    }

    function formatMilliseconds(d, p) {
      return pad(d.getMilliseconds(), p, 3);
    }

    function formatMicroseconds(d, p) {
      return formatMilliseconds(d, p) + "000";
    }

    function formatMonthNumber(d, p) {
      return pad(d.getMonth() + 1, p, 2);
    }

    function formatMinutes(d, p) {
      return pad(d.getMinutes(), p, 2);
    }

    function formatSeconds(d, p) {
      return pad(d.getSeconds(), p, 2);
    }

    function formatWeekdayNumberMonday(d) {
      var day = d.getDay();
      return day === 0 ? 7 : day;
    }

    function formatWeekNumberSunday(d, p) {
      return pad(sunday.count(year(d) - 1, d), p, 2);
    }

    function dISO(d) {
      var day = d.getDay();
      return (day >= 4 || day === 0) ? thursday(d) : thursday.ceil(d);
    }

    function formatWeekNumberISO(d, p) {
      d = dISO(d);
      return pad(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);
    }

    function formatWeekdayNumberSunday(d) {
      return d.getDay();
    }

    function formatWeekNumberMonday(d, p) {
      return pad(monday.count(year(d) - 1, d), p, 2);
    }

    function formatYear(d, p) {
      return pad(d.getFullYear() % 100, p, 2);
    }

    function formatYearISO(d, p) {
      d = dISO(d);
      return pad(d.getFullYear() % 100, p, 2);
    }

    function formatFullYear(d, p) {
      return pad(d.getFullYear() % 10000, p, 4);
    }

    function formatFullYearISO(d, p) {
      var day = d.getDay();
      d = (day >= 4 || day === 0) ? thursday(d) : thursday.ceil(d);
      return pad(d.getFullYear() % 10000, p, 4);
    }

    function formatZone(d) {
      var z = d.getTimezoneOffset();
      return (z > 0 ? "-" : (z *= -1, "+"))
          + pad(z / 60 | 0, "0", 2)
          + pad(z % 60, "0", 2);
    }

    function formatUTCDayOfMonth(d, p) {
      return pad(d.getUTCDate(), p, 2);
    }

    function formatUTCHour24(d, p) {
      return pad(d.getUTCHours(), p, 2);
    }

    function formatUTCHour12(d, p) {
      return pad(d.getUTCHours() % 12 || 12, p, 2);
    }

    function formatUTCDayOfYear(d, p) {
      return pad(1 + utcDay.count(utcYear(d), d), p, 3);
    }

    function formatUTCMilliseconds(d, p) {
      return pad(d.getUTCMilliseconds(), p, 3);
    }

    function formatUTCMicroseconds(d, p) {
      return formatUTCMilliseconds(d, p) + "000";
    }

    function formatUTCMonthNumber(d, p) {
      return pad(d.getUTCMonth() + 1, p, 2);
    }

    function formatUTCMinutes(d, p) {
      return pad(d.getUTCMinutes(), p, 2);
    }

    function formatUTCSeconds(d, p) {
      return pad(d.getUTCSeconds(), p, 2);
    }

    function formatUTCWeekdayNumberMonday(d) {
      var dow = d.getUTCDay();
      return dow === 0 ? 7 : dow;
    }

    function formatUTCWeekNumberSunday(d, p) {
      return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);
    }

    function UTCdISO(d) {
      var day = d.getUTCDay();
      return (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
    }

    function formatUTCWeekNumberISO(d, p) {
      d = UTCdISO(d);
      return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
    }

    function formatUTCWeekdayNumberSunday(d) {
      return d.getUTCDay();
    }

    function formatUTCWeekNumberMonday(d, p) {
      return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);
    }

    function formatUTCYear(d, p) {
      return pad(d.getUTCFullYear() % 100, p, 2);
    }

    function formatUTCYearISO(d, p) {
      d = UTCdISO(d);
      return pad(d.getUTCFullYear() % 100, p, 2);
    }

    function formatUTCFullYear(d, p) {
      return pad(d.getUTCFullYear() % 10000, p, 4);
    }

    function formatUTCFullYearISO(d, p) {
      var day = d.getUTCDay();
      d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
      return pad(d.getUTCFullYear() % 10000, p, 4);
    }

    function formatUTCZone() {
      return "+0000";
    }

    function formatLiteralPercent() {
      return "%";
    }

    function formatUnixTimestamp(d) {
      return +d;
    }

    function formatUnixTimestampSeconds(d) {
      return Math.floor(+d / 1000);
    }

    var locale$1;
    var timeFormat;
    var timeParse;
    var utcFormat;
    var utcParse;

    defaultLocale$1({
      dateTime: "%x, %X",
      date: "%-m/%-d/%Y",
      time: "%-I:%M:%S %p",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });

    function defaultLocale$1(definition) {
      locale$1 = formatLocale$1(definition);
      timeFormat = locale$1.format;
      timeParse = locale$1.parse;
      utcFormat = locale$1.utcFormat;
      utcParse = locale$1.utcParse;
      return locale$1;
    }

    var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

    function formatIsoNative(date) {
      return date.toISOString();
    }

    var formatIso = Date.prototype.toISOString
        ? formatIsoNative
        : utcFormat(isoSpecifier);

    function parseIsoNative(string) {
      var date = new Date(string);
      return isNaN(date) ? null : date;
    }

    var parseIso = +new Date("2000-01-01T00:00:00.000Z")
        ? parseIsoNative
        : utcParse(isoSpecifier);



    var src$4 = /*#__PURE__*/Object.freeze({
        timeFormatDefaultLocale: defaultLocale$1,
        get timeFormat () { return timeFormat; },
        get timeParse () { return timeParse; },
        get utcFormat () { return utcFormat; },
        get utcParse () { return utcParse; },
        timeFormatLocale: formatLocale$1,
        isoFormat: formatIso,
        isoParse: parseIso
    });

    var d3Scale_min = createCommonjsModule(function (module, exports) {
    // https://d3js.org/d3-scale/ v3.3.0 Copyright 2021 Mike Bostock
    !function(n,t){t(exports,src,src$1,src$2,src$3,src$4);}(commonjsGlobal,(function(n,t,r,e,u,i){function o(n,t){switch(arguments.length){case 0:break;case 1:this.range(n);break;default:this.range(t).domain(n);}return this}function a(n,t){switch(arguments.length){case 0:break;case 1:"function"==typeof n?this.interpolator(n):this.range(n);break;default:this.domain(n),"function"==typeof t?this.interpolator(t):this.range(t);}return this}const c=Symbol("implicit");function l(){var n=new Map,t=[],r=[],e=c;function u(u){var i=u+"",o=n.get(i);if(!o){if(e!==c)return e;n.set(i,o=t.push(u));}return r[(o-1)%r.length]}return u.domain=function(r){if(!arguments.length)return t.slice();t=[],n=new Map;for(const e of r){const r=e+"";n.has(r)||n.set(r,t.push(e));}return u},u.range=function(n){return arguments.length?(r=Array.from(n),u):r.slice()},u.unknown=function(n){return arguments.length?(e=n,u):e},u.copy=function(){return l(t,r).unknown(e)},o.apply(u,arguments),u}function f(){var n,r,e=l().unknown(void 0),u=e.domain,i=e.range,a=0,c=1,p=!1,s=0,h=0,g=.5;function m(){var e=u().length,o=c<a,l=o?c:a,f=o?a:c;n=(f-l)/Math.max(1,e-s+2*h),p&&(n=Math.floor(n)),l+=(f-l-n*(e-s))*g,r=n*(1-s),p&&(l=Math.round(l),r=Math.round(r));var m=t.range(e).map((function(t){return l+n*t}));return i(o?m.reverse():m)}return delete e.unknown,e.domain=function(n){return arguments.length?(u(n),m()):u()},e.range=function(n){return arguments.length?([a,c]=n,a=+a,c=+c,m()):[a,c]},e.rangeRound=function(n){return [a,c]=n,a=+a,c=+c,p=!0,m()},e.bandwidth=function(){return r},e.step=function(){return n},e.round=function(n){return arguments.length?(p=!!n,m()):p},e.padding=function(n){return arguments.length?(s=Math.min(1,h=+n),m()):s},e.paddingInner=function(n){return arguments.length?(s=Math.min(1,n),m()):s},e.paddingOuter=function(n){return arguments.length?(h=+n,m()):h},e.align=function(n){return arguments.length?(g=Math.max(0,Math.min(1,n)),m()):g},e.copy=function(){return f(u(),[a,c]).round(p).paddingInner(s).paddingOuter(h).align(g)},o.apply(m(),arguments)}function p(n){var t=n.copy;return n.padding=n.paddingOuter,delete n.paddingInner,delete n.paddingOuter,n.copy=function(){return p(t())},n}function s(n){return +n}var h=[0,1];function g(n){return n}function m(n,t){return (t-=n=+n)?function(r){return (r-n)/t}:(r=isNaN(t)?NaN:.5,function(){return r});var r;}function d(n,t,r){var e=n[0],u=n[1],i=t[0],o=t[1];return u<e?(e=m(u,e),i=r(o,i)):(e=m(e,u),i=r(i,o)),function(n){return i(e(n))}}function y(n,r,e){var u=Math.min(n.length,r.length)-1,i=new Array(u),o=new Array(u),a=-1;for(n[u]<n[0]&&(n=n.slice().reverse(),r=r.slice().reverse());++a<u;)i[a]=m(n[a],n[a+1]),o[a]=e(r[a],r[a+1]);return function(r){var e=t.bisect(n,r,1,u)-1;return o[e](i[e](r))}}function v(n,t){return t.domain(n.domain()).range(n.range()).interpolate(n.interpolate()).clamp(n.clamp()).unknown(n.unknown())}function M(){var n,t,e,u,i,o,a=h,c=h,l=r.interpolate,f=g;function p(){var n,t,r,e=Math.min(a.length,c.length);return f!==g&&(n=a[0],t=a[e-1],n>t&&(r=n,n=t,t=r),f=function(r){return Math.max(n,Math.min(t,r))}),u=e>2?y:d,i=o=null,m}function m(t){return null==t||isNaN(t=+t)?e:(i||(i=u(a.map(n),c,l)))(n(f(t)))}return m.invert=function(e){return f(t((o||(o=u(c,a.map(n),r.interpolateNumber)))(e)))},m.domain=function(n){return arguments.length?(a=Array.from(n,s),p()):a.slice()},m.range=function(n){return arguments.length?(c=Array.from(n),p()):c.slice()},m.rangeRound=function(n){return c=Array.from(n),l=r.interpolateRound,p()},m.clamp=function(n){return arguments.length?(f=!!n||g,p()):f!==g},m.interpolate=function(n){return arguments.length?(l=n,p()):l},m.unknown=function(n){return arguments.length?(e=n,m):e},function(r,e){return n=r,t=e,p()}}function k(){return M()(g,g)}function w(n,r,u,i){var o,a=t.tickStep(n,r,u);switch((i=e.formatSpecifier(null==i?",f":i)).type){case"s":var c=Math.max(Math.abs(n),Math.abs(r));return null!=i.precision||isNaN(o=e.precisionPrefix(a,c))||(i.precision=o),e.formatPrefix(i,c);case"":case"e":case"g":case"p":case"r":null!=i.precision||isNaN(o=e.precisionRound(a,Math.max(Math.abs(n),Math.abs(r))))||(i.precision=o-("e"===i.type));break;case"f":case"%":null!=i.precision||isNaN(o=e.precisionFixed(a))||(i.precision=o-2*("%"===i.type));}return e.format(i)}function N(n){var r=n.domain;return n.ticks=function(n){var e=r();return t.ticks(e[0],e[e.length-1],null==n?10:n)},n.tickFormat=function(n,t){var e=r();return w(e[0],e[e.length-1],null==n?10:n,t)},n.nice=function(e){null==e&&(e=10);var u,i,o=r(),a=0,c=o.length-1,l=o[a],f=o[c],p=10;for(f<l&&(i=l,l=f,f=i,i=a,a=c,c=i);p-- >0;){if((i=t.tickIncrement(l,f,e))===u)return o[a]=l,o[c]=f,r(o);if(i>0)l=Math.floor(l/i)*i,f=Math.ceil(f/i)*i;else{if(!(i<0))break;l=Math.ceil(l*i)/i,f=Math.floor(f*i)/i;}u=i;}return n},n}function b(n,t){var r,e=0,u=(n=n.slice()).length-1,i=n[e],o=n[u];return o<i&&(r=e,e=u,u=r,r=i,i=o,o=r),n[e]=t.floor(i),n[u]=t.ceil(o),n}function x(n){return Math.log(n)}function q(n){return Math.exp(n)}function S(n){return -Math.log(-n)}function A(n){return -Math.exp(-n)}function D(n){return isFinite(n)?+("1e"+n):n<0?0:n}function I(n){return function(t){return -n(-t)}}function R(n){var r,u,i=n(x,q),o=i.domain,a=10;function c(){return r=function(n){return n===Math.E?Math.log:10===n&&Math.log10||2===n&&Math.log2||(n=Math.log(n),function(t){return Math.log(t)/n})}(a),u=function(n){return 10===n?D:n===Math.E?Math.exp:function(t){return Math.pow(n,t)}}(a),o()[0]<0?(r=I(r),u=I(u),n(S,A)):n(x,q),i}return i.base=function(n){return arguments.length?(a=+n,c()):a},i.domain=function(n){return arguments.length?(o(n),c()):o()},i.ticks=function(n){var e,i=o(),c=i[0],l=i[i.length-1];(e=l<c)&&(h=c,c=l,l=h);var f,p,s,h=r(c),g=r(l),m=null==n?10:+n,d=[];if(!(a%1)&&g-h<m){if(h=Math.floor(h),g=Math.ceil(g),c>0){for(;h<=g;++h)for(p=1,f=u(h);p<a;++p)if(!((s=f*p)<c)){if(s>l)break;d.push(s);}}else for(;h<=g;++h)for(p=a-1,f=u(h);p>=1;--p)if(!((s=f*p)<c)){if(s>l)break;d.push(s);}2*d.length<m&&(d=t.ticks(c,l,m));}else d=t.ticks(h,g,Math.min(g-h,m)).map(u);return e?d.reverse():d},i.tickFormat=function(n,t){if(null==t&&(t=10===a?".0e":","),"function"!=typeof t&&(t=e.format(t)),n===1/0)return t;null==n&&(n=10);var o=Math.max(1,a*n/i.ticks().length);return function(n){var e=n/u(Math.round(r(n)));return e*a<a-.5&&(e*=a),e<=o?t(n):""}},i.nice=function(){return o(b(o(),{floor:function(n){return u(Math.floor(r(n)))},ceil:function(n){return u(Math.ceil(r(n)))}}))},i}function T(n){return function(t){return Math.sign(t)*Math.log1p(Math.abs(t/n))}}function O(n){return function(t){return Math.sign(t)*Math.expm1(Math.abs(t))*n}}function F(n){var t=1,r=n(T(t),O(t));return r.constant=function(r){return arguments.length?n(T(t=+r),O(t)):t},N(r)}function P(n){return function(t){return t<0?-Math.pow(-t,n):Math.pow(t,n)}}function E(n){return n<0?-Math.sqrt(-n):Math.sqrt(n)}function L(n){return n<0?-n*n:n*n}function Q(n){var t=n(g,g),r=1;function e(){return 1===r?n(g,g):.5===r?n(E,L):n(P(r),P(1/r))}return t.exponent=function(n){return arguments.length?(r=+n,e()):r},N(t)}function U(){var n=Q(M());return n.copy=function(){return v(n,U()).exponent(n.exponent())},o.apply(n,arguments),n}function Y(n){return Math.sign(n)*n*n}function j(n){return Math.sign(n)*Math.sqrt(Math.abs(n))}function B(n){return new Date(n)}function C(n){return n instanceof Date?+n:+new Date(+n)}function H(n,t,r,e,u,i,o,a,c,l){var f=k(),p=f.invert,s=f.domain,h=l(".%L"),g=l(":%S"),m=l("%I:%M"),d=l("%I %p"),y=l("%a %d"),M=l("%b %d"),w=l("%B"),N=l("%Y");function x(n){return (c(n)<n?h:a(n)<n?g:o(n)<n?m:i(n)<n?d:e(n)<n?u(n)<n?y:M:r(n)<n?w:N)(n)}return f.invert=function(n){return new Date(p(n))},f.domain=function(n){return arguments.length?s(Array.from(n,C)):s().map(B)},f.ticks=function(t){var r=s();return n(r[0],r[r.length-1],null==t?10:t)},f.tickFormat=function(n,t){return null==t?x:l(t)},f.nice=function(n){var r=s();return n&&"function"==typeof n.range||(n=t(r[0],r[r.length-1],null==n?10:n)),n?s(b(r,n)):f},f.copy=function(){return v(f,H(n,t,r,e,u,i,o,a,c,l))},f}function W(){var n,t,e,u,i,o=0,a=1,c=g,l=!1;function f(t){return null==t||isNaN(t=+t)?i:c(0===e?.5:(t=(u(t)-n)*e,l?Math.max(0,Math.min(1,t)):t))}function p(n){return function(t){var r,e;return arguments.length?([r,e]=t,c=n(r,e),f):[c(0),c(1)]}}return f.domain=function(r){return arguments.length?([o,a]=r,n=u(o=+o),t=u(a=+a),e=n===t?0:1/(t-n),f):[o,a]},f.clamp=function(n){return arguments.length?(l=!!n,f):l},f.interpolator=function(n){return arguments.length?(c=n,f):c},f.range=p(r.interpolate),f.rangeRound=p(r.interpolateRound),f.unknown=function(n){return arguments.length?(i=n,f):i},function(r){return u=r,n=r(o),t=r(a),e=n===t?0:1/(t-n),f}}function _(n,t){return t.domain(n.domain()).interpolator(n.interpolator()).clamp(n.clamp()).unknown(n.unknown())}function z(){var n=Q(W());return n.copy=function(){return _(n,z()).exponent(n.exponent())},a.apply(n,arguments)}function G(){var n,t,e,u,i,o,a,c=0,l=.5,f=1,p=1,s=g,h=!1;function m(n){return isNaN(n=+n)?a:(n=.5+((n=+o(n))-t)*(p*n<p*t?u:i),s(h?Math.max(0,Math.min(1,n)):n))}function d(n){return function(t){var e,u,i;return arguments.length?([e,u,i]=t,s=r.piecewise(n,[e,u,i]),m):[s(0),s(.5),s(1)]}}return m.domain=function(r){return arguments.length?([c,l,f]=r,n=o(c=+c),t=o(l=+l),e=o(f=+f),u=n===t?0:.5/(t-n),i=t===e?0:.5/(e-t),p=t<n?-1:1,m):[c,l,f]},m.clamp=function(n){return arguments.length?(h=!!n,m):h},m.interpolator=function(n){return arguments.length?(s=n,m):s},m.range=d(r.interpolate),m.rangeRound=d(r.interpolateRound),m.unknown=function(n){return arguments.length?(a=n,m):a},function(r){return o=r,n=r(c),t=r(l),e=r(f),u=n===t?0:.5/(t-n),i=t===e?0:.5/(e-t),p=t<n?-1:1,m}}function J(){var n=Q(G());return n.copy=function(){return _(n,J()).exponent(n.exponent())},a.apply(n,arguments)}n.scaleBand=f,n.scaleDiverging=function n(){var t=N(G()(g));return t.copy=function(){return _(t,n())},a.apply(t,arguments)},n.scaleDivergingLog=function n(){var t=R(G()).domain([.1,1,10]);return t.copy=function(){return _(t,n()).base(t.base())},a.apply(t,arguments)},n.scaleDivergingPow=J,n.scaleDivergingSqrt=function(){return J.apply(null,arguments).exponent(.5)},n.scaleDivergingSymlog=function n(){var t=F(G());return t.copy=function(){return _(t,n()).constant(t.constant())},a.apply(t,arguments)},n.scaleIdentity=function n(t){var r;function e(n){return null==n||isNaN(n=+n)?r:n}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=Array.from(n,s),e):t.slice()},e.unknown=function(n){return arguments.length?(r=n,e):r},e.copy=function(){return n(t).unknown(r)},t=arguments.length?Array.from(t,s):[0,1],N(e)},n.scaleImplicit=c,n.scaleLinear=function n(){var t=k();return t.copy=function(){return v(t,n())},o.apply(t,arguments),N(t)},n.scaleLog=function n(){var t=R(M()).domain([1,10]);return t.copy=function(){return v(t,n()).base(t.base())},o.apply(t,arguments),t},n.scaleOrdinal=l,n.scalePoint=function(){return p(f.apply(null,arguments).paddingInner(1))},n.scalePow=U,n.scaleQuantile=function n(){var r,e=[],u=[],i=[];function a(){var n=0,r=Math.max(1,u.length);for(i=new Array(r-1);++n<r;)i[n-1]=t.quantileSorted(e,n/r);return c}function c(n){return null==n||isNaN(n=+n)?r:u[t.bisect(i,n)]}return c.invertExtent=function(n){var t=u.indexOf(n);return t<0?[NaN,NaN]:[t>0?i[t-1]:e[0],t<i.length?i[t]:e[e.length-1]]},c.domain=function(n){if(!arguments.length)return e.slice();e=[];for(let t of n)null==t||isNaN(t=+t)||e.push(t);return e.sort(t.ascending),a()},c.range=function(n){return arguments.length?(u=Array.from(n),a()):u.slice()},c.unknown=function(n){return arguments.length?(r=n,c):r},c.quantiles=function(){return i.slice()},c.copy=function(){return n().domain(e).range(u).unknown(r)},o.apply(c,arguments)},n.scaleQuantize=function n(){var r,e=0,u=1,i=1,a=[.5],c=[0,1];function l(n){return null!=n&&n<=n?c[t.bisect(a,n,0,i)]:r}function f(){var n=-1;for(a=new Array(i);++n<i;)a[n]=((n+1)*u-(n-i)*e)/(i+1);return l}return l.domain=function(n){return arguments.length?([e,u]=n,e=+e,u=+u,f()):[e,u]},l.range=function(n){return arguments.length?(i=(c=Array.from(n)).length-1,f()):c.slice()},l.invertExtent=function(n){var t=c.indexOf(n);return t<0?[NaN,NaN]:t<1?[e,a[0]]:t>=i?[a[i-1],u]:[a[t-1],a[t]]},l.unknown=function(n){return arguments.length?(r=n,l):l},l.thresholds=function(){return a.slice()},l.copy=function(){return n().domain([e,u]).range(c).unknown(r)},o.apply(N(l),arguments)},n.scaleRadial=function n(){var t,r=k(),e=[0,1],u=!1;function i(n){var e=j(r(n));return isNaN(e)?t:u?Math.round(e):e}return i.invert=function(n){return r.invert(Y(n))},i.domain=function(n){return arguments.length?(r.domain(n),i):r.domain()},i.range=function(n){return arguments.length?(r.range((e=Array.from(n,s)).map(Y)),i):e.slice()},i.rangeRound=function(n){return i.range(n).round(!0)},i.round=function(n){return arguments.length?(u=!!n,i):u},i.clamp=function(n){return arguments.length?(r.clamp(n),i):r.clamp()},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return n(r.domain(),e).round(u).clamp(r.clamp()).unknown(t)},o.apply(i,arguments),N(i)},n.scaleSequential=function n(){var t=N(W()(g));return t.copy=function(){return _(t,n())},a.apply(t,arguments)},n.scaleSequentialLog=function n(){var t=R(W()).domain([1,10]);return t.copy=function(){return _(t,n()).base(t.base())},a.apply(t,arguments)},n.scaleSequentialPow=z,n.scaleSequentialQuantile=function n(){var r=[],e=g;function u(n){if(null!=n&&!isNaN(n=+n))return e((t.bisect(r,n,1)-1)/(r.length-1))}return u.domain=function(n){if(!arguments.length)return r.slice();r=[];for(let t of n)null==t||isNaN(t=+t)||r.push(t);return r.sort(t.ascending),u},u.interpolator=function(n){return arguments.length?(e=n,u):e},u.range=function(){return r.map(((n,t)=>e(t/(r.length-1))))},u.quantiles=function(n){return Array.from({length:n+1},((e,u)=>t.quantile(r,u/n)))},u.copy=function(){return n(e).domain(r)},a.apply(u,arguments)},n.scaleSequentialSqrt=function(){return z.apply(null,arguments).exponent(.5)},n.scaleSequentialSymlog=function n(){var t=F(W());return t.copy=function(){return _(t,n()).constant(t.constant())},a.apply(t,arguments)},n.scaleSqrt=function(){return U.apply(null,arguments).exponent(.5)},n.scaleSymlog=function n(){var t=F(M());return t.copy=function(){return v(t,n()).constant(t.constant())},o.apply(t,arguments)},n.scaleThreshold=function n(){var r,e=[.5],u=[0,1],i=1;function a(n){return null!=n&&n<=n?u[t.bisect(e,n,0,i)]:r}return a.domain=function(n){return arguments.length?(e=Array.from(n),i=Math.min(e.length,u.length-1),a):e.slice()},a.range=function(n){return arguments.length?(u=Array.from(n),i=Math.min(e.length,u.length-1),a):u.slice()},a.invertExtent=function(n){var t=u.indexOf(n);return [e[t-1],e[t]]},a.unknown=function(n){return arguments.length?(r=n,a):r},a.copy=function(){return n().domain(e).range(u).unknown(r)},o.apply(a,arguments)},n.scaleTime=function(){return o.apply(H(u.timeTicks,u.timeTickInterval,u.timeYear,u.timeMonth,u.timeWeek,u.timeDay,u.timeHour,u.timeMinute,u.timeSecond,i.timeFormat).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},n.scaleUtc=function(){return o.apply(H(u.utcTicks,u.utcTickInterval,u.utcYear,u.utcMonth,u.utcWeek,u.utcDay,u.utcHour,u.utcMinute,u.utcSecond,i.utcFormat).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)},n.tickFormat=w,Object.defineProperty(n,"__esModule",{value:!0});}));
    });

    var d3 = unwrapExports(d3Scale_min);

    /* os-app/open-review/submodules/KOMReviewChartElementHorizontalStackedBar/main.svelte generated by Svelte v3.59.2 */
    const file$2 = "os-app/open-review/submodules/KOMReviewChartElementHorizontalStackedBar/main.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	child_ctx[6] = i;
    	return child_ctx;
    }

    // (30:0) {#each KOMReviewChartElementHorizontalStackedBarValues as item, index }
    function create_each_block(ctx) {
    	let rect;
    	let rect_x_value;
    	let rect_width_value;
    	let rect_height_value;
    	let rect_fill_value;

    	const block = {
    		c: function create() {
    			rect = svg_element("rect");
    			attr_dev(rect, "class", "KOMReviewChartElementHorizontalStackedBarSection");
    			attr_dev(rect, "x", rect_x_value = /*mod*/ ctx[1].DataScaleHorizontal(/*KOMReviewChartElementHorizontalStackedBarValues*/ ctx[0].slice(0, /*index*/ ctx[6]).reduce(func, 0)));
    			attr_dev(rect, "y", "0");
    			attr_dev(rect, "width", rect_width_value = /*mod*/ ctx[1].DataScaleHorizontal(/*item*/ ctx[4]));
    			attr_dev(rect, "height", rect_height_value = mod$9.KOMReviewChartElementHorizontalStackedBarHeight());
    			attr_dev(rect, "fill", rect_fill_value = /*mod*/ ctx[1].DataScaleColor(/*index*/ ctx[6]));
    			add_location(rect, file$2, 30, 1, 1388);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, rect, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*KOMReviewChartElementHorizontalStackedBarValues*/ 1 && rect_x_value !== (rect_x_value = /*mod*/ ctx[1].DataScaleHorizontal(/*KOMReviewChartElementHorizontalStackedBarValues*/ ctx[0].slice(0, /*index*/ ctx[6]).reduce(func, 0)))) {
    				attr_dev(rect, "x", rect_x_value);
    			}

    			if (dirty & /*KOMReviewChartElementHorizontalStackedBarValues*/ 1 && rect_width_value !== (rect_width_value = /*mod*/ ctx[1].DataScaleHorizontal(/*item*/ ctx[4]))) {
    				attr_dev(rect, "width", rect_width_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(rect);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(30:0) {#each KOMReviewChartElementHorizontalStackedBarValues as item, index }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let svg;
    	let svg_viewBox_value;
    	let each_value = /*KOMReviewChartElementHorizontalStackedBarValues*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(svg, "class", "KOMReviewChartElementHorizontalStackedBar");
    			attr_dev(svg, "viewBox", svg_viewBox_value = `0,0,${mod$9.KOMReviewChartElementHorizontalStackedBarWidth()},${mod$9.KOMReviewChartElementHorizontalStackedBarHeight()}`);
    			add_location(svg, file$2, 27, 0, 1037);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(svg, null);
    				}
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*mod, KOMReviewChartElementHorizontalStackedBarValues, KOMReviewChartElementHorizontalStackedBarLogic*/ 3) {
    				each_value = /*KOMReviewChartElementHorizontalStackedBarValues*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(svg, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func = function (coll, item) {
    	return coll + item;
    };

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMReviewChartElementHorizontalStackedBarValues } = $$props;
    	let { KOMReviewChartElementHorizontalStackedBarColors } = $$props;
    	let { KOMReviewChartElementHorizontalStackedBarMaximum = undefined } = $$props;

    	const mod = {
    		// DATA
    		DataScaleHorizontal(inputData) {
    			return mod$9.KOMReviewChartElementHorizontalStackedBarScaleHorizontal(d3.scaleLinear, KOMReviewChartElementHorizontalStackedBarValues, KOMReviewChartElementHorizontalStackedBarMaximum)(inputData);
    		},
    		DataScaleColor(inputData) {
    			return mod$9.KOMReviewChartElementHorizontalStackedBarScaleColor(d3.scaleOrdinal, KOMReviewChartElementHorizontalStackedBarColors, KOMReviewChartElementHorizontalStackedBarValues.map(function (e, i) {
    				return i;
    			}))(inputData);
    		}
    	};

    	$$self.$$.on_mount.push(function () {
    		if (KOMReviewChartElementHorizontalStackedBarValues === undefined && !('KOMReviewChartElementHorizontalStackedBarValues' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewChartElementHorizontalStackedBarValues']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartElementHorizontalStackedBarValues'");
    		}

    		if (KOMReviewChartElementHorizontalStackedBarColors === undefined && !('KOMReviewChartElementHorizontalStackedBarColors' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewChartElementHorizontalStackedBarColors']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartElementHorizontalStackedBarColors'");
    		}
    	});

    	const writable_props = [
    		'KOMReviewChartElementHorizontalStackedBarValues',
    		'KOMReviewChartElementHorizontalStackedBarColors',
    		'KOMReviewChartElementHorizontalStackedBarMaximum'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('KOMReviewChartElementHorizontalStackedBarValues' in $$props) $$invalidate(0, KOMReviewChartElementHorizontalStackedBarValues = $$props.KOMReviewChartElementHorizontalStackedBarValues);
    		if ('KOMReviewChartElementHorizontalStackedBarColors' in $$props) $$invalidate(2, KOMReviewChartElementHorizontalStackedBarColors = $$props.KOMReviewChartElementHorizontalStackedBarColors);
    		if ('KOMReviewChartElementHorizontalStackedBarMaximum' in $$props) $$invalidate(3, KOMReviewChartElementHorizontalStackedBarMaximum = $$props.KOMReviewChartElementHorizontalStackedBarMaximum);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewChartElementHorizontalStackedBarValues,
    		KOMReviewChartElementHorizontalStackedBarColors,
    		KOMReviewChartElementHorizontalStackedBarMaximum,
    		OLSKLocalized: main_1,
    		KOMReviewChartElementHorizontalStackedBarLogic: mod$9,
    		d3,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ('KOMReviewChartElementHorizontalStackedBarValues' in $$props) $$invalidate(0, KOMReviewChartElementHorizontalStackedBarValues = $$props.KOMReviewChartElementHorizontalStackedBarValues);
    		if ('KOMReviewChartElementHorizontalStackedBarColors' in $$props) $$invalidate(2, KOMReviewChartElementHorizontalStackedBarColors = $$props.KOMReviewChartElementHorizontalStackedBarColors);
    		if ('KOMReviewChartElementHorizontalStackedBarMaximum' in $$props) $$invalidate(3, KOMReviewChartElementHorizontalStackedBarMaximum = $$props.KOMReviewChartElementHorizontalStackedBarMaximum);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewChartElementHorizontalStackedBarValues,
    		mod,
    		KOMReviewChartElementHorizontalStackedBarColors,
    		KOMReviewChartElementHorizontalStackedBarMaximum
    	];
    }

    class Main$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
    			KOMReviewChartElementHorizontalStackedBarValues: 0,
    			KOMReviewChartElementHorizontalStackedBarColors: 2,
    			KOMReviewChartElementHorizontalStackedBarMaximum: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$2.name
    		});
    	}

    	get KOMReviewChartElementHorizontalStackedBarValues() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementHorizontalStackedBarValues(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewChartElementHorizontalStackedBarColors() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementHorizontalStackedBarColors(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewChartElementHorizontalStackedBarMaximum() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementHorizontalStackedBarMaximum(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-review/submodules/KOMReviewChartCompositionCollection/main.svelte generated by Svelte v3.59.2 */

    const { Object: Object_1 } = globals;
    const file$3 = "os-app/open-review/submodules/KOMReviewChartCompositionCollection/main.svelte";

    function create_fragment$3(ctx) {
    	let table;
    	let tr0;
    	let th0;
    	let t0;
    	let th1;
    	let t2;
    	let th2;
    	let t3_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingTotal + "";
    	let t3;
    	let t4;
    	let tr1;
    	let td0;
    	let span0;
    	let t5;
    	let td1;
    	let t7;
    	let td2;
    	let t8_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingUnseen + "";
    	let t8;
    	let t9;
    	let tr2;
    	let td3;
    	let span1;
    	let t10;
    	let td4;
    	let t12;
    	let td5;
    	let t13_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingDeveloping + "";
    	let t13;
    	let t14;
    	let tr3;
    	let td6;
    	let span2;
    	let t15;
    	let td7;
    	let t17;
    	let td8;
    	let t18_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingMature + "";
    	let t18;
    	let t19;
    	let tr4;
    	let td9;
    	let span3;
    	let t20;
    	let td10;
    	let t22;
    	let td11;
    	let t23_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingRetired + "";
    	let t23;
    	let t24;
    	let tr5;
    	let td12;
    	let komreviewchartelementhorizontalstackedbar;
    	let current;

    	komreviewchartelementhorizontalstackedbar = new Main$2({
    			props: {
    				KOMReviewChartElementHorizontalStackedBarValues: /*mod*/ ctx[2].DataStackedBarValues(),
    				KOMReviewChartElementHorizontalStackedBarColors: /*KOMReviewChartElementHorizontalStackedBarColors*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			table = element("table");
    			tr0 = element("tr");
    			th0 = element("th");
    			t0 = space();
    			th1 = element("th");
    			th1.textContent = `${main_1('KOMReviewChartCompositionCollectionTotalCardsLabelText')}`;
    			t2 = space();
    			th2 = element("th");
    			t3 = text(t3_value);
    			t4 = space();
    			tr1 = element("tr");
    			td0 = element("td");
    			span0 = element("span");
    			t5 = space();
    			td1 = element("td");
    			td1.textContent = `${main_1('KOMReviewChartCompositionCollectionUnseenCardsLabelText')}`;
    			t7 = space();
    			td2 = element("td");
    			t8 = text(t8_value);
    			t9 = space();
    			tr2 = element("tr");
    			td3 = element("td");
    			span1 = element("span");
    			t10 = space();
    			td4 = element("td");
    			td4.textContent = `${main_1('KOMReviewChartCompositionCollectionDevelopingCardsLabelText')}`;
    			t12 = space();
    			td5 = element("td");
    			t13 = text(t13_value);
    			t14 = space();
    			tr3 = element("tr");
    			td6 = element("td");
    			span2 = element("span");
    			t15 = space();
    			td7 = element("td");
    			td7.textContent = `${main_1('KOMReviewChartCompositionCollectionMatureCardsLabelText')}`;
    			t17 = space();
    			td8 = element("td");
    			t18 = text(t18_value);
    			t19 = space();
    			tr4 = element("tr");
    			td9 = element("td");
    			span3 = element("span");
    			t20 = space();
    			td10 = element("td");
    			td10.textContent = `${main_1('KOMReviewChartCompositionCollectionRetiredCardsLabelText')}`;
    			t22 = space();
    			td11 = element("td");
    			t23 = text(t23_value);
    			t24 = space();
    			tr5 = element("tr");
    			td12 = element("td");
    			create_component(komreviewchartelementhorizontalstackedbar.$$.fragment);
    			attr_dev(th0, "class", "svelte-yk4wz6");
    			add_location(th0, file$3, 31, 1, 978);
    			attr_dev(th1, "class", "KOMReviewChartCompositionCollectionTotalCardsLabel svelte-yk4wz6");
    			add_location(th1, file$3, 32, 1, 989);
    			attr_dev(th2, "class", "KOMReviewChartCompositionCollectionTotalCardsValue svelte-yk4wz6");
    			add_location(th2, file$3, 33, 1, 1134);
    			add_location(tr0, file$3, 30, 0, 972);
    			attr_dev(span0, "class", "KOMReviewChartCompositionCollectionUnseenCardsColor svelte-yk4wz6");
    			set_style(span0, "background", /*mod*/ ctx[2].DataScaleColor(0));
    			add_location(span0, file$3, 37, 5, 1287);
    			attr_dev(td0, "class", "svelte-yk4wz6");
    			add_location(td0, file$3, 37, 1, 1283);
    			attr_dev(td1, "class", "KOMReviewChartCompositionCollectionUnseenCardsLabel svelte-yk4wz6");
    			add_location(td1, file$3, 38, 1, 1414);
    			attr_dev(td2, "class", "KOMReviewChartCompositionCollectionUnseenCardsValue svelte-yk4wz6");
    			add_location(td2, file$3, 39, 1, 1561);
    			attr_dev(tr1, "class", "svelte-yk4wz6");
    			add_location(tr1, file$3, 36, 0, 1277);
    			attr_dev(span1, "class", "KOMReviewChartCompositionCollectionDevelopingCardsColor svelte-yk4wz6");
    			set_style(span1, "background", /*mod*/ ctx[2].DataScaleColor(1));
    			add_location(span1, file$3, 43, 5, 1716);
    			attr_dev(td3, "class", "svelte-yk4wz6");
    			add_location(td3, file$3, 43, 1, 1712);
    			attr_dev(td4, "class", "KOMReviewChartCompositionCollectionDevelopingCardsLabel svelte-yk4wz6");
    			add_location(td4, file$3, 44, 1, 1847);
    			attr_dev(td5, "class", "KOMReviewChartCompositionCollectionDevelopingCardsValue svelte-yk4wz6");
    			add_location(td5, file$3, 45, 1, 2002);
    			attr_dev(tr2, "class", "svelte-yk4wz6");
    			add_location(tr2, file$3, 42, 0, 1706);
    			attr_dev(span2, "class", "KOMReviewChartCompositionCollectionMatureCardsColor svelte-yk4wz6");
    			set_style(span2, "background", /*mod*/ ctx[2].DataScaleColor(2));
    			add_location(span2, file$3, 49, 5, 2165);
    			attr_dev(td6, "class", "svelte-yk4wz6");
    			add_location(td6, file$3, 49, 1, 2161);
    			attr_dev(td7, "class", "KOMReviewChartCompositionCollectionMatureCardsLabel svelte-yk4wz6");
    			add_location(td7, file$3, 50, 1, 2292);
    			attr_dev(td8, "class", "KOMReviewChartCompositionCollectionMatureCardsValue svelte-yk4wz6");
    			add_location(td8, file$3, 51, 1, 2439);
    			attr_dev(tr3, "class", "svelte-yk4wz6");
    			add_location(tr3, file$3, 48, 0, 2155);
    			attr_dev(span3, "class", "KOMReviewChartCompositionCollectionRetiredCardsColor svelte-yk4wz6");
    			set_style(span3, "background", /*mod*/ ctx[2].DataScaleColor(3));
    			add_location(span3, file$3, 55, 5, 2594);
    			attr_dev(td9, "class", "svelte-yk4wz6");
    			add_location(td9, file$3, 55, 1, 2590);
    			attr_dev(td10, "class", "KOMReviewChartCompositionCollectionRetiredCardsLabel svelte-yk4wz6");
    			add_location(td10, file$3, 56, 1, 2722);
    			attr_dev(td11, "class", "KOMReviewChartCompositionCollectionRetiredCardsValue svelte-yk4wz6");
    			add_location(td11, file$3, 57, 1, 2871);
    			attr_dev(tr4, "class", "svelte-yk4wz6");
    			add_location(tr4, file$3, 54, 0, 2584);
    			attr_dev(td12, "colspan", "3");
    			attr_dev(td12, "class", "svelte-yk4wz6");
    			add_location(td12, file$3, 61, 1, 3024);
    			attr_dev(tr5, "class", "svelte-yk4wz6");
    			add_location(tr5, file$3, 60, 0, 3018);
    			attr_dev(table, "class", "KOMReviewChartCompositionCollection");
    			add_location(table, file$3, 28, 0, 919);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);
    			append_dev(table, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t0);
    			append_dev(tr0, th1);
    			append_dev(tr0, t2);
    			append_dev(tr0, th2);
    			append_dev(th2, t3);
    			append_dev(table, t4);
    			append_dev(table, tr1);
    			append_dev(tr1, td0);
    			append_dev(td0, span0);
    			append_dev(tr1, t5);
    			append_dev(tr1, td1);
    			append_dev(tr1, t7);
    			append_dev(tr1, td2);
    			append_dev(td2, t8);
    			append_dev(table, t9);
    			append_dev(table, tr2);
    			append_dev(tr2, td3);
    			append_dev(td3, span1);
    			append_dev(tr2, t10);
    			append_dev(tr2, td4);
    			append_dev(tr2, t12);
    			append_dev(tr2, td5);
    			append_dev(td5, t13);
    			append_dev(table, t14);
    			append_dev(table, tr3);
    			append_dev(tr3, td6);
    			append_dev(td6, span2);
    			append_dev(tr3, t15);
    			append_dev(tr3, td7);
    			append_dev(tr3, t17);
    			append_dev(tr3, td8);
    			append_dev(td8, t18);
    			append_dev(table, t19);
    			append_dev(table, tr4);
    			append_dev(tr4, td9);
    			append_dev(td9, span3);
    			append_dev(tr4, t20);
    			append_dev(tr4, td10);
    			append_dev(tr4, t22);
    			append_dev(tr4, td11);
    			append_dev(td11, t23);
    			append_dev(table, t24);
    			append_dev(table, tr5);
    			append_dev(tr5, td12);
    			mount_component(komreviewchartelementhorizontalstackedbar, td12, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*KOMReviewChartCompositionCollectionData*/ 1) && t3_value !== (t3_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingTotal + "")) set_data_dev(t3, t3_value);
    			if ((!current || dirty & /*KOMReviewChartCompositionCollectionData*/ 1) && t8_value !== (t8_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingUnseen + "")) set_data_dev(t8, t8_value);
    			if ((!current || dirty & /*KOMReviewChartCompositionCollectionData*/ 1) && t13_value !== (t13_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingDeveloping + "")) set_data_dev(t13, t13_value);
    			if ((!current || dirty & /*KOMReviewChartCompositionCollectionData*/ 1) && t18_value !== (t18_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingMature + "")) set_data_dev(t18, t18_value);
    			if ((!current || dirty & /*KOMReviewChartCompositionCollectionData*/ 1) && t23_value !== (t23_value = /*KOMReviewChartCompositionCollectionData*/ ctx[0].KOMSpacingGroupingRetired + "")) set_data_dev(t23, t23_value);
    			const komreviewchartelementhorizontalstackedbar_changes = {};
    			if (dirty & /*KOMReviewChartElementHorizontalStackedBarColors*/ 2) komreviewchartelementhorizontalstackedbar_changes.KOMReviewChartElementHorizontalStackedBarColors = /*KOMReviewChartElementHorizontalStackedBarColors*/ ctx[1];
    			komreviewchartelementhorizontalstackedbar.$set(komreviewchartelementhorizontalstackedbar_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewchartelementhorizontalstackedbar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewchartelementhorizontalstackedbar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(table);
    			destroy_component(komreviewchartelementhorizontalstackedbar);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMReviewChartCompositionCollectionData } = $$props;
    	let { KOMReviewChartElementHorizontalStackedBarColors } = $$props;

    	const mod = {
    		// DATA
    		DataScaleColor(inputData) {
    			return mod$9.KOMReviewChartElementHorizontalStackedBarScaleColor(d3.scaleOrdinal, KOMReviewChartElementHorizontalStackedBarColors, mod.DataStackedBarValues().map(function (e, i) {
    				return i;
    			}))(inputData);
    		},
    		DataStackedBarValues() {
    			return Object.values(KOMReviewChartCompositionCollectionData).slice(1);
    		}
    	};

    	$$self.$$.on_mount.push(function () {
    		if (KOMReviewChartCompositionCollectionData === undefined && !('KOMReviewChartCompositionCollectionData' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewChartCompositionCollectionData']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartCompositionCollectionData'");
    		}

    		if (KOMReviewChartElementHorizontalStackedBarColors === undefined && !('KOMReviewChartElementHorizontalStackedBarColors' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewChartElementHorizontalStackedBarColors']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartElementHorizontalStackedBarColors'");
    		}
    	});

    	const writable_props = [
    		'KOMReviewChartCompositionCollectionData',
    		'KOMReviewChartElementHorizontalStackedBarColors'
    	];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('KOMReviewChartCompositionCollectionData' in $$props) $$invalidate(0, KOMReviewChartCompositionCollectionData = $$props.KOMReviewChartCompositionCollectionData);
    		if ('KOMReviewChartElementHorizontalStackedBarColors' in $$props) $$invalidate(1, KOMReviewChartElementHorizontalStackedBarColors = $$props.KOMReviewChartElementHorizontalStackedBarColors);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewChartCompositionCollectionData,
    		KOMReviewChartElementHorizontalStackedBarColors,
    		OLSKLocalized: main_1,
    		KOMReviewChartElementHorizontalStackedBarLogic: mod$9,
    		d3,
    		mod,
    		KOMReviewChartElementHorizontalStackedBar: Main$2
    	});

    	$$self.$inject_state = $$props => {
    		if ('KOMReviewChartCompositionCollectionData' in $$props) $$invalidate(0, KOMReviewChartCompositionCollectionData = $$props.KOMReviewChartCompositionCollectionData);
    		if ('KOMReviewChartElementHorizontalStackedBarColors' in $$props) $$invalidate(1, KOMReviewChartElementHorizontalStackedBarColors = $$props.KOMReviewChartElementHorizontalStackedBarColors);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewChartCompositionCollectionData,
    		KOMReviewChartElementHorizontalStackedBarColors,
    		mod
    	];
    }

    class Main$3 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
    			KOMReviewChartCompositionCollectionData: 0,
    			KOMReviewChartElementHorizontalStackedBarColors: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get KOMReviewChartCompositionCollectionData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartCompositionCollectionData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewChartElementHorizontalStackedBarColors() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementHorizontalStackedBarColors(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const mod$a = {

    	KOMReviewChartElementDateBarTableRowIsValid(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('KOMErrorInputNotValid');
    		}

    		if (typeof inputData.KOMReviewChartElementDateBarTableRowDataKey !== 'string') {
    			return false;
    		}

    		if (!Array.isArray(inputData.KOMReviewChartElementDateBarTableRowDataValues)) {
    			return false;
    		}

    		if (!inputData.KOMReviewChartElementDateBarTableRowDataValues.length) {
    			return false;
    		}

    		return true;
    	},

    };

    /* os-app/open-review/submodules/KOMReviewChartElementDateBarTableRow/main.svelte generated by Svelte v3.59.2 */

    const { Error: Error_1 } = globals;
    const file$4 = "os-app/open-review/submodules/KOMReviewChartElementDateBarTableRow/main.svelte";

    function create_fragment$4(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*KOMReviewChartElementDateBarTableRowData*/ ctx[0].KOMReviewChartElementDateBarTableRowDataKey + "";
    	let t0;
    	let t1;
    	let td1;
    	let komreviewchartelementhorizontalstackedbar;
    	let t2;
    	let td2;
    	let current;

    	komreviewchartelementhorizontalstackedbar = new Main$2({
    			props: {
    				KOMReviewChartElementHorizontalStackedBarValues: /*KOMReviewChartElementDateBarTableRowData*/ ctx[0].KOMReviewChartElementDateBarTableRowDataValues,
    				KOMReviewChartElementHorizontalStackedBarMaximum: /*KOMReviewChartElementHorizontalStackedBarMaximum*/ ctx[2],
    				KOMReviewChartElementHorizontalStackedBarColors: /*KOMReviewChartElementHorizontalStackedBarColors*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			create_component(komreviewchartelementhorizontalstackedbar.$$.fragment);
    			t2 = space();
    			td2 = element("td");
    			td2.textContent = `${/*mod*/ ctx[3].DataSum() || ''}`;
    			attr_dev(td0, "class", "KOMReviewChartElementDateBarTableRowKey");
    			add_location(td0, file$4, 28, 0, 909);
    			attr_dev(td1, "class", "KOMReviewChartElementDateBarTableRowBar svelte-kksz88");
    			add_location(td1, file$4, 30, 0, 1056);
    			attr_dev(td2, "class", "KOMReviewChartElementDateBarTableRowCount");
    			add_location(td2, file$4, 38, 0, 1513);
    			attr_dev(tr, "class", "KOMReviewChartElementDateBarTableRow svelte-kksz88");
    			toggle_class(tr, "KOMReviewChartElementDateBarTableRowZero", !/*mod*/ ctx[3].DataSum());
    			add_location(tr, file$4, 26, 0, 792);
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			mount_component(komreviewchartelementhorizontalstackedbar, td1, null);
    			append_dev(tr, t2);
    			append_dev(tr, td2);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*KOMReviewChartElementDateBarTableRowData*/ 1) && t0_value !== (t0_value = /*KOMReviewChartElementDateBarTableRowData*/ ctx[0].KOMReviewChartElementDateBarTableRowDataKey + "")) set_data_dev(t0, t0_value);
    			const komreviewchartelementhorizontalstackedbar_changes = {};
    			if (dirty & /*KOMReviewChartElementDateBarTableRowData*/ 1) komreviewchartelementhorizontalstackedbar_changes.KOMReviewChartElementHorizontalStackedBarValues = /*KOMReviewChartElementDateBarTableRowData*/ ctx[0].KOMReviewChartElementDateBarTableRowDataValues;
    			if (dirty & /*KOMReviewChartElementHorizontalStackedBarMaximum*/ 4) komreviewchartelementhorizontalstackedbar_changes.KOMReviewChartElementHorizontalStackedBarMaximum = /*KOMReviewChartElementHorizontalStackedBarMaximum*/ ctx[2];
    			if (dirty & /*KOMReviewChartElementHorizontalStackedBarColors*/ 2) komreviewchartelementhorizontalstackedbar_changes.KOMReviewChartElementHorizontalStackedBarColors = /*KOMReviewChartElementHorizontalStackedBarColors*/ ctx[1];
    			komreviewchartelementhorizontalstackedbar.$set(komreviewchartelementhorizontalstackedbar_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewchartelementhorizontalstackedbar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewchartelementhorizontalstackedbar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_component(komreviewchartelementhorizontalstackedbar);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMReviewChartElementDateBarTableRowData } = $$props;
    	let { KOMReviewChartElementHorizontalStackedBarColors } = $$props;
    	let { KOMReviewChartElementHorizontalStackedBarMaximum } = $$props;

    	if (!mod$a.KOMReviewChartElementDateBarTableRowIsValid(KOMReviewChartElementDateBarTableRowData)) {
    		throw new Error('KOMErrorInputNotValid');
    	}

    	const mod = {
    		// DATA
    		DataSum() {
    			return Math.round(KOMReviewChartElementDateBarTableRowData.KOMReviewChartElementDateBarTableRowDataValues.reduce(
    				function (coll, item) {
    					return coll + item;
    				},
    				0
    			) * 10) / 10;
    		}
    	};

    	$$self.$$.on_mount.push(function () {
    		if (KOMReviewChartElementDateBarTableRowData === undefined && !('KOMReviewChartElementDateBarTableRowData' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewChartElementDateBarTableRowData']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartElementDateBarTableRowData'");
    		}

    		if (KOMReviewChartElementHorizontalStackedBarColors === undefined && !('KOMReviewChartElementHorizontalStackedBarColors' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewChartElementHorizontalStackedBarColors']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartElementHorizontalStackedBarColors'");
    		}

    		if (KOMReviewChartElementHorizontalStackedBarMaximum === undefined && !('KOMReviewChartElementHorizontalStackedBarMaximum' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewChartElementHorizontalStackedBarMaximum']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartElementHorizontalStackedBarMaximum'");
    		}
    	});

    	const writable_props = [
    		'KOMReviewChartElementDateBarTableRowData',
    		'KOMReviewChartElementHorizontalStackedBarColors',
    		'KOMReviewChartElementHorizontalStackedBarMaximum'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('KOMReviewChartElementDateBarTableRowData' in $$props) $$invalidate(0, KOMReviewChartElementDateBarTableRowData = $$props.KOMReviewChartElementDateBarTableRowData);
    		if ('KOMReviewChartElementHorizontalStackedBarColors' in $$props) $$invalidate(1, KOMReviewChartElementHorizontalStackedBarColors = $$props.KOMReviewChartElementHorizontalStackedBarColors);
    		if ('KOMReviewChartElementHorizontalStackedBarMaximum' in $$props) $$invalidate(2, KOMReviewChartElementHorizontalStackedBarMaximum = $$props.KOMReviewChartElementHorizontalStackedBarMaximum);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewChartElementDateBarTableRowData,
    		KOMReviewChartElementHorizontalStackedBarColors,
    		KOMReviewChartElementHorizontalStackedBarMaximum,
    		KOMReviewChartElementDateBarTableRowLogic: mod$a,
    		mod,
    		KOMReviewChartElementHorizontalStackedBar: Main$2
    	});

    	$$self.$inject_state = $$props => {
    		if ('KOMReviewChartElementDateBarTableRowData' in $$props) $$invalidate(0, KOMReviewChartElementDateBarTableRowData = $$props.KOMReviewChartElementDateBarTableRowData);
    		if ('KOMReviewChartElementHorizontalStackedBarColors' in $$props) $$invalidate(1, KOMReviewChartElementHorizontalStackedBarColors = $$props.KOMReviewChartElementHorizontalStackedBarColors);
    		if ('KOMReviewChartElementHorizontalStackedBarMaximum' in $$props) $$invalidate(2, KOMReviewChartElementHorizontalStackedBarMaximum = $$props.KOMReviewChartElementHorizontalStackedBarMaximum);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewChartElementDateBarTableRowData,
    		KOMReviewChartElementHorizontalStackedBarColors,
    		KOMReviewChartElementHorizontalStackedBarMaximum,
    		mod
    	];
    }

    class Main$4 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
    			KOMReviewChartElementDateBarTableRowData: 0,
    			KOMReviewChartElementHorizontalStackedBarColors: 1,
    			KOMReviewChartElementHorizontalStackedBarMaximum: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$4.name
    		});
    	}

    	get KOMReviewChartElementDateBarTableRowData() {
    		throw new Error_1("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementDateBarTableRowData(value) {
    		throw new Error_1("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewChartElementHorizontalStackedBarColors() {
    		throw new Error_1("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementHorizontalStackedBarColors(value) {
    		throw new Error_1("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewChartElementHorizontalStackedBarMaximum() {
    		throw new Error_1("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementHorizontalStackedBarMaximum(value) {
    		throw new Error_1("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-review/submodules/KOMReviewChartElementDateBarTable/main.svelte generated by Svelte v3.59.2 */
    const file$5 = "os-app/open-review/submodules/KOMReviewChartElementDateBarTable/main.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    // (30:0) {#each KOMReviewChartElementDateBarTableData as item }
    function create_each_block$1(ctx) {
    	let komreviewchartelementdatebartablerow;
    	let current;

    	komreviewchartelementdatebartablerow = new Main$4({
    			props: {
    				KOMReviewChartElementDateBarTableRowData: /*item*/ ctx[3],
    				KOMReviewChartElementHorizontalStackedBarMaximum: /*mod*/ ctx[2].DataMaximum(),
    				KOMReviewChartElementHorizontalStackedBarColors: /*KOMReviewChartElementHorizontalStackedBarColors*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(komreviewchartelementdatebartablerow.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(komreviewchartelementdatebartablerow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komreviewchartelementdatebartablerow_changes = {};
    			if (dirty & /*KOMReviewChartElementDateBarTableData*/ 1) komreviewchartelementdatebartablerow_changes.KOMReviewChartElementDateBarTableRowData = /*item*/ ctx[3];
    			if (dirty & /*KOMReviewChartElementHorizontalStackedBarColors*/ 2) komreviewchartelementdatebartablerow_changes.KOMReviewChartElementHorizontalStackedBarColors = /*KOMReviewChartElementHorizontalStackedBarColors*/ ctx[1];
    			komreviewchartelementdatebartablerow.$set(komreviewchartelementdatebartablerow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewchartelementdatebartablerow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewchartelementdatebartablerow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(komreviewchartelementdatebartablerow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(30:0) {#each KOMReviewChartElementDateBarTableData as item }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let table;
    	let current;
    	let each_value = /*KOMReviewChartElementDateBarTableData*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			table = element("table");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(table, "class", "KOMReviewChartElementDateBarTable");
    			add_location(table, file$5, 27, 0, 566);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(table, null);
    				}
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*KOMReviewChartElementDateBarTableData, mod, KOMReviewChartElementHorizontalStackedBarColors*/ 7) {
    				each_value = /*KOMReviewChartElementDateBarTableData*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(table, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(table);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMReviewChartElementDateBarTableData } = $$props;
    	let { KOMReviewChartElementHorizontalStackedBarColors } = $$props;

    	const mod = {
    		// DATA
    		DataMaximum() {
    			return KOMReviewChartElementDateBarTableData.reduce(
    				function (coll, item) {
    					const sum = item.KOMReviewChartElementDateBarTableRowDataValues.reduce(
    						function (coll, item) {
    							return coll + item;
    						},
    						0
    					);

    					if (sum > coll) {
    						return sum;
    					}

    					return coll;
    				},
    				0
    			);
    		}
    	};

    	$$self.$$.on_mount.push(function () {
    		if (KOMReviewChartElementDateBarTableData === undefined && !('KOMReviewChartElementDateBarTableData' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewChartElementDateBarTableData']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartElementDateBarTableData'");
    		}

    		if (KOMReviewChartElementHorizontalStackedBarColors === undefined && !('KOMReviewChartElementHorizontalStackedBarColors' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewChartElementHorizontalStackedBarColors']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartElementHorizontalStackedBarColors'");
    		}
    	});

    	const writable_props = [
    		'KOMReviewChartElementDateBarTableData',
    		'KOMReviewChartElementHorizontalStackedBarColors'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('KOMReviewChartElementDateBarTableData' in $$props) $$invalidate(0, KOMReviewChartElementDateBarTableData = $$props.KOMReviewChartElementDateBarTableData);
    		if ('KOMReviewChartElementHorizontalStackedBarColors' in $$props) $$invalidate(1, KOMReviewChartElementHorizontalStackedBarColors = $$props.KOMReviewChartElementHorizontalStackedBarColors);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewChartElementDateBarTableData,
    		KOMReviewChartElementHorizontalStackedBarColors,
    		mod,
    		KOMReviewChartElementDateBarTableRow: Main$4
    	});

    	$$self.$inject_state = $$props => {
    		if ('KOMReviewChartElementDateBarTableData' in $$props) $$invalidate(0, KOMReviewChartElementDateBarTableData = $$props.KOMReviewChartElementDateBarTableData);
    		if ('KOMReviewChartElementHorizontalStackedBarColors' in $$props) $$invalidate(1, KOMReviewChartElementHorizontalStackedBarColors = $$props.KOMReviewChartElementHorizontalStackedBarColors);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewChartElementDateBarTableData,
    		KOMReviewChartElementHorizontalStackedBarColors,
    		mod
    	];
    }

    class Main$5 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
    			KOMReviewChartElementDateBarTableData: 0,
    			KOMReviewChartElementHorizontalStackedBarColors: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$5.name
    		});
    	}

    	get KOMReviewChartElementDateBarTableData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementDateBarTableData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewChartElementHorizontalStackedBarColors() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartElementHorizontalStackedBarColors(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-review/submodules/KOMReviewGeneral/main.svelte generated by Svelte v3.59.2 */
    const file$6 = "os-app/open-review/submodules/KOMReviewGeneral/main.svelte";

    // (15:0) {#if KOMReviewGeneralUpcomingData.length }
    function create_if_block_1(ctx) {
    	let div;
    	let h2;
    	let t1;
    	let komreviewchartelementdatebartable;
    	let current;

    	komreviewchartelementdatebartable = new Main$5({
    			props: {
    				KOMReviewChartElementDateBarTableData: /*KOMReviewGeneralUpcomingData*/ ctx[0],
    				KOMReviewChartElementHorizontalStackedBarColors: mod$6.KOMReviewGeneralUpcomingColors()
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			h2 = element("h2");
    			h2.textContent = `${main_1('KOMReviewGeneralUpcomingHeadingText')}`;
    			t1 = space();
    			create_component(komreviewchartelementdatebartable.$$.fragment);
    			attr_dev(h2, "class", "KOMReviewGeneralUpcomingHeading");
    			add_location(h2, file$6, 17, 1, 576);
    			attr_dev(div, "class", "KOMReviewGeneralUpcoming");
    			add_location(div, file$6, 16, 0, 536);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h2);
    			append_dev(div, t1);
    			mount_component(komreviewchartelementdatebartable, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komreviewchartelementdatebartable_changes = {};
    			if (dirty & /*KOMReviewGeneralUpcomingData*/ 1) komreviewchartelementdatebartable_changes.KOMReviewChartElementDateBarTableData = /*KOMReviewGeneralUpcomingData*/ ctx[0];
    			komreviewchartelementdatebartable.$set(komreviewchartelementdatebartable_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewchartelementdatebartable.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewchartelementdatebartable.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(komreviewchartelementdatebartable);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(15:0) {#if KOMReviewGeneralUpcomingData.length }",
    		ctx
    	});

    	return block;
    }

    // (25:0) {#if KOMReviewGeneralHistoricalData.length }
    function create_if_block(ctx) {
    	let div;
    	let h2;
    	let t1;
    	let komreviewchartelementdatebartable;
    	let current;

    	komreviewchartelementdatebartable = new Main$5({
    			props: {
    				KOMReviewChartElementDateBarTableData: /*KOMReviewGeneralHistoricalData*/ ctx[1],
    				KOMReviewChartElementHorizontalStackedBarColors: mod$6.KOMReviewGeneralHistoricalColors()
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			h2 = element("h2");
    			h2.textContent = `${main_1('KOMReviewGeneralHistoricalHeadingText')}`;
    			t1 = space();
    			create_component(komreviewchartelementdatebartable.$$.fragment);
    			attr_dev(h2, "class", "KOMReviewGeneralHistoricalHeading");
    			add_location(h2, file$6, 27, 1, 1004);
    			attr_dev(div, "class", "KOMReviewGeneralHistorical");
    			add_location(div, file$6, 26, 0, 962);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h2);
    			append_dev(div, t1);
    			mount_component(komreviewchartelementdatebartable, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komreviewchartelementdatebartable_changes = {};
    			if (dirty & /*KOMReviewGeneralHistoricalData*/ 2) komreviewchartelementdatebartable_changes.KOMReviewChartElementDateBarTableData = /*KOMReviewGeneralHistoricalData*/ ctx[1];
    			komreviewchartelementdatebartable.$set(komreviewchartelementdatebartable_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewchartelementdatebartable.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewchartelementdatebartable.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(komreviewchartelementdatebartable);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(25:0) {#if KOMReviewGeneralHistoricalData.length }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let div1;
    	let t0;
    	let t1;
    	let div0;
    	let h2;
    	let t3;
    	let komreviewchartcompositioncollection;
    	let current;
    	let if_block0 = /*KOMReviewGeneralUpcomingData*/ ctx[0].length && create_if_block_1(ctx);
    	let if_block1 = /*KOMReviewGeneralHistoricalData*/ ctx[1].length && create_if_block(ctx);

    	komreviewchartcompositioncollection = new Main$3({
    			props: {
    				KOMReviewChartCompositionCollectionData: /*KOMReviewChartCompositionCollectionData*/ ctx[2],
    				KOMReviewChartElementHorizontalStackedBarColors: mod$6.KOMReviewGeneralCollectionColors()
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			div0 = element("div");
    			h2 = element("h2");
    			h2.textContent = `${main_1('KOMReviewGeneralCollectionHeadingText')}`;
    			t3 = space();
    			create_component(komreviewchartcompositioncollection.$$.fragment);
    			attr_dev(h2, "class", "KOMReviewGeneralCollectionHeading");
    			add_location(h2, file$6, 35, 1, 1394);
    			attr_dev(div0, "class", "KOMReviewGeneralCollection");
    			add_location(div0, file$6, 34, 0, 1352);
    			attr_dev(div1, "class", "KOMReviewGeneral");
    			add_location(div1, file$6, 12, 0, 460);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div1, t0);
    			if (if_block1) if_block1.m(div1, null);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, h2);
    			append_dev(div0, t3);
    			mount_component(komreviewchartcompositioncollection, div0, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*KOMReviewGeneralUpcomingData*/ ctx[0].length) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*KOMReviewGeneralUpcomingData*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div1, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*KOMReviewGeneralHistoricalData*/ ctx[1].length) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*KOMReviewGeneralHistoricalData*/ 2) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div1, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			const komreviewchartcompositioncollection_changes = {};
    			if (dirty & /*KOMReviewChartCompositionCollectionData*/ 4) komreviewchartcompositioncollection_changes.KOMReviewChartCompositionCollectionData = /*KOMReviewChartCompositionCollectionData*/ ctx[2];
    			komreviewchartcompositioncollection.$set(komreviewchartcompositioncollection_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(komreviewchartcompositioncollection.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(komreviewchartcompositioncollection.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			destroy_component(komreviewchartcompositioncollection);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMReviewGeneralUpcomingData } = $$props;
    	let { KOMReviewGeneralHistoricalData } = $$props;
    	let { KOMReviewChartCompositionCollectionData } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (KOMReviewGeneralUpcomingData === undefined && !('KOMReviewGeneralUpcomingData' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewGeneralUpcomingData']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewGeneralUpcomingData'");
    		}

    		if (KOMReviewGeneralHistoricalData === undefined && !('KOMReviewGeneralHistoricalData' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewGeneralHistoricalData']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewGeneralHistoricalData'");
    		}

    		if (KOMReviewChartCompositionCollectionData === undefined && !('KOMReviewChartCompositionCollectionData' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewChartCompositionCollectionData']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartCompositionCollectionData'");
    		}
    	});

    	const writable_props = [
    		'KOMReviewGeneralUpcomingData',
    		'KOMReviewGeneralHistoricalData',
    		'KOMReviewChartCompositionCollectionData'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('KOMReviewGeneralUpcomingData' in $$props) $$invalidate(0, KOMReviewGeneralUpcomingData = $$props.KOMReviewGeneralUpcomingData);
    		if ('KOMReviewGeneralHistoricalData' in $$props) $$invalidate(1, KOMReviewGeneralHistoricalData = $$props.KOMReviewGeneralHistoricalData);
    		if ('KOMReviewChartCompositionCollectionData' in $$props) $$invalidate(2, KOMReviewChartCompositionCollectionData = $$props.KOMReviewChartCompositionCollectionData);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewGeneralUpcomingData,
    		KOMReviewGeneralHistoricalData,
    		KOMReviewChartCompositionCollectionData,
    		OLSKLocalized: main_1,
    		KOMReviewGeneralLogic: mod$6,
    		KOMReviewChartCompositionCollection: Main$3,
    		KOMReviewChartElementDateBarTable: Main$5
    	});

    	$$self.$inject_state = $$props => {
    		if ('KOMReviewGeneralUpcomingData' in $$props) $$invalidate(0, KOMReviewGeneralUpcomingData = $$props.KOMReviewGeneralUpcomingData);
    		if ('KOMReviewGeneralHistoricalData' in $$props) $$invalidate(1, KOMReviewGeneralHistoricalData = $$props.KOMReviewGeneralHistoricalData);
    		if ('KOMReviewChartCompositionCollectionData' in $$props) $$invalidate(2, KOMReviewChartCompositionCollectionData = $$props.KOMReviewChartCompositionCollectionData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewGeneralUpcomingData,
    		KOMReviewGeneralHistoricalData,
    		KOMReviewChartCompositionCollectionData
    	];
    }

    class Main$6 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
    			KOMReviewGeneralUpcomingData: 0,
    			KOMReviewGeneralHistoricalData: 1,
    			KOMReviewChartCompositionCollectionData: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$6.name
    		});
    	}

    	get KOMReviewGeneralUpcomingData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewGeneralUpcomingData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewGeneralHistoricalData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewGeneralHistoricalData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewChartCompositionCollectionData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartCompositionCollectionData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-review/submodules/KOMReviewStats/main.svelte generated by Svelte v3.59.2 */
    const file$7 = "os-app/open-review/submodules/KOMReviewStats/main.svelte";

    // (18:1) {#if KOMReviewTodayTotalCards }
    function create_if_block$1(ctx) {
    	let komreviewtoday;
    	let current;

    	komreviewtoday = new Main$1({
    			props: {
    				KOMReviewTodayTotalCards: /*KOMReviewTodayTotalCards*/ ctx[0],
    				KOMReviewTodayTimeMinutes: /*KOMReviewTodayTimeMinutes*/ ctx[1],
    				KOMReviewTodayReviewAccuracy: /*KOMReviewTodayReviewAccuracy*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(komreviewtoday.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(komreviewtoday, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komreviewtoday_changes = {};
    			if (dirty & /*KOMReviewTodayTotalCards*/ 1) komreviewtoday_changes.KOMReviewTodayTotalCards = /*KOMReviewTodayTotalCards*/ ctx[0];
    			if (dirty & /*KOMReviewTodayTimeMinutes*/ 2) komreviewtoday_changes.KOMReviewTodayTimeMinutes = /*KOMReviewTodayTimeMinutes*/ ctx[1];
    			if (dirty & /*KOMReviewTodayReviewAccuracy*/ 4) komreviewtoday_changes.KOMReviewTodayReviewAccuracy = /*KOMReviewTodayReviewAccuracy*/ ctx[2];
    			komreviewtoday.$set(komreviewtoday_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewtoday.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewtoday.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(komreviewtoday, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(18:1) {#if KOMReviewTodayTotalCards }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div;
    	let h1;
    	let t1;
    	let t2;
    	let komreviewgeneral;
    	let current;
    	let if_block = /*KOMReviewTodayTotalCards*/ ctx[0] && create_if_block$1(ctx);

    	komreviewgeneral = new Main$6({
    			props: {
    				KOMReviewGeneralUpcomingData: /*KOMReviewGeneralUpcomingData*/ ctx[3],
    				KOMReviewGeneralHistoricalData: /*KOMReviewGeneralHistoricalData*/ ctx[4],
    				KOMReviewChartCompositionCollectionData: /*KOMReviewChartCompositionCollectionData*/ ctx[5]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			h1 = element("h1");
    			h1.textContent = `${main_1('KOMReviewStatsHeadingText')}`;
    			t1 = space();
    			if (if_block) if_block.c();
    			t2 = space();
    			create_component(komreviewgeneral.$$.fragment);
    			attr_dev(h1, "class", "KOMReviewStatsHeading");
    			add_location(h1, file$7, 15, 1, 479);
    			attr_dev(div, "class", "KOMReviewStats");
    			add_location(div, file$7, 14, 0, 449);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h1);
    			append_dev(div, t1);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t2);
    			mount_component(komreviewgeneral, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*KOMReviewTodayTotalCards*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*KOMReviewTodayTotalCards*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, t2);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const komreviewgeneral_changes = {};
    			if (dirty & /*KOMReviewGeneralUpcomingData*/ 8) komreviewgeneral_changes.KOMReviewGeneralUpcomingData = /*KOMReviewGeneralUpcomingData*/ ctx[3];
    			if (dirty & /*KOMReviewGeneralHistoricalData*/ 16) komreviewgeneral_changes.KOMReviewGeneralHistoricalData = /*KOMReviewGeneralHistoricalData*/ ctx[4];
    			if (dirty & /*KOMReviewChartCompositionCollectionData*/ 32) komreviewgeneral_changes.KOMReviewChartCompositionCollectionData = /*KOMReviewChartCompositionCollectionData*/ ctx[5];
    			komreviewgeneral.$set(komreviewgeneral_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(komreviewgeneral.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(komreviewgeneral.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			destroy_component(komreviewgeneral);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMReviewTodayTotalCards } = $$props;
    	let { KOMReviewTodayTimeMinutes } = $$props;
    	let { KOMReviewTodayReviewAccuracy } = $$props;
    	let { KOMReviewGeneralUpcomingData } = $$props;
    	let { KOMReviewGeneralHistoricalData } = $$props;
    	let { KOMReviewChartCompositionCollectionData } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (KOMReviewTodayTotalCards === undefined && !('KOMReviewTodayTotalCards' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewTodayTotalCards']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewTodayTotalCards'");
    		}

    		if (KOMReviewTodayTimeMinutes === undefined && !('KOMReviewTodayTimeMinutes' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewTodayTimeMinutes']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewTodayTimeMinutes'");
    		}

    		if (KOMReviewTodayReviewAccuracy === undefined && !('KOMReviewTodayReviewAccuracy' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewTodayReviewAccuracy']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewTodayReviewAccuracy'");
    		}

    		if (KOMReviewGeneralUpcomingData === undefined && !('KOMReviewGeneralUpcomingData' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewGeneralUpcomingData']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewGeneralUpcomingData'");
    		}

    		if (KOMReviewGeneralHistoricalData === undefined && !('KOMReviewGeneralHistoricalData' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewGeneralHistoricalData']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewGeneralHistoricalData'");
    		}

    		if (KOMReviewChartCompositionCollectionData === undefined && !('KOMReviewChartCompositionCollectionData' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewChartCompositionCollectionData']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewChartCompositionCollectionData'");
    		}
    	});

    	const writable_props = [
    		'KOMReviewTodayTotalCards',
    		'KOMReviewTodayTimeMinutes',
    		'KOMReviewTodayReviewAccuracy',
    		'KOMReviewGeneralUpcomingData',
    		'KOMReviewGeneralHistoricalData',
    		'KOMReviewChartCompositionCollectionData'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('KOMReviewTodayTotalCards' in $$props) $$invalidate(0, KOMReviewTodayTotalCards = $$props.KOMReviewTodayTotalCards);
    		if ('KOMReviewTodayTimeMinutes' in $$props) $$invalidate(1, KOMReviewTodayTimeMinutes = $$props.KOMReviewTodayTimeMinutes);
    		if ('KOMReviewTodayReviewAccuracy' in $$props) $$invalidate(2, KOMReviewTodayReviewAccuracy = $$props.KOMReviewTodayReviewAccuracy);
    		if ('KOMReviewGeneralUpcomingData' in $$props) $$invalidate(3, KOMReviewGeneralUpcomingData = $$props.KOMReviewGeneralUpcomingData);
    		if ('KOMReviewGeneralHistoricalData' in $$props) $$invalidate(4, KOMReviewGeneralHistoricalData = $$props.KOMReviewGeneralHistoricalData);
    		if ('KOMReviewChartCompositionCollectionData' in $$props) $$invalidate(5, KOMReviewChartCompositionCollectionData = $$props.KOMReviewChartCompositionCollectionData);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewTodayTotalCards,
    		KOMReviewTodayTimeMinutes,
    		KOMReviewTodayReviewAccuracy,
    		KOMReviewGeneralUpcomingData,
    		KOMReviewGeneralHistoricalData,
    		KOMReviewChartCompositionCollectionData,
    		OLSKLocalized: main_1,
    		KOMReviewToday: Main$1,
    		KOMReviewGeneral: Main$6
    	});

    	$$self.$inject_state = $$props => {
    		if ('KOMReviewTodayTotalCards' in $$props) $$invalidate(0, KOMReviewTodayTotalCards = $$props.KOMReviewTodayTotalCards);
    		if ('KOMReviewTodayTimeMinutes' in $$props) $$invalidate(1, KOMReviewTodayTimeMinutes = $$props.KOMReviewTodayTimeMinutes);
    		if ('KOMReviewTodayReviewAccuracy' in $$props) $$invalidate(2, KOMReviewTodayReviewAccuracy = $$props.KOMReviewTodayReviewAccuracy);
    		if ('KOMReviewGeneralUpcomingData' in $$props) $$invalidate(3, KOMReviewGeneralUpcomingData = $$props.KOMReviewGeneralUpcomingData);
    		if ('KOMReviewGeneralHistoricalData' in $$props) $$invalidate(4, KOMReviewGeneralHistoricalData = $$props.KOMReviewGeneralHistoricalData);
    		if ('KOMReviewChartCompositionCollectionData' in $$props) $$invalidate(5, KOMReviewChartCompositionCollectionData = $$props.KOMReviewChartCompositionCollectionData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewTodayTotalCards,
    		KOMReviewTodayTimeMinutes,
    		KOMReviewTodayReviewAccuracy,
    		KOMReviewGeneralUpcomingData,
    		KOMReviewGeneralHistoricalData,
    		KOMReviewChartCompositionCollectionData
    	];
    }

    class Main$7 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			KOMReviewTodayTotalCards: 0,
    			KOMReviewTodayTimeMinutes: 1,
    			KOMReviewTodayReviewAccuracy: 2,
    			KOMReviewGeneralUpcomingData: 3,
    			KOMReviewGeneralHistoricalData: 4,
    			KOMReviewChartCompositionCollectionData: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get KOMReviewTodayTotalCards() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewTodayTotalCards(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewTodayTimeMinutes() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewTodayTimeMinutes(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewTodayReviewAccuracy() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewTodayReviewAccuracy(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewGeneralUpcomingData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewGeneralUpcomingData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewGeneralHistoricalData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewGeneralHistoricalData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewChartCompositionCollectionData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewChartCompositionCollectionData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-review/submodules/KOMReviewMaster/main.svelte generated by Svelte v3.59.2 */

    const { Object: Object_1$1 } = globals;
    const file$8 = "os-app/open-review/submodules/KOMReviewMaster/main.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	return child_ctx;
    }

    // (155:1) {#each KOMReviewMasterItems as e}
    function create_each_block$2(ctx) {
    	let komreviewmasterlistitem;
    	let current;

    	function func() {
    		return /*func*/ ctx[8](/*e*/ ctx[9]);
    	}

    	komreviewmasterlistitem = new Main({
    			props: {
    				KOMReviewMasterListItemName: /*e*/ ctx[9].KOMDeckName,
    				KOMReviewMasterListItemReviewCount: /*e*/ ctx[9].$KOMDeckTodayReviewCount,
    				KOMReviewMasterListItemUnseenCount: /*e*/ ctx[9].$KOMDeckTodayNewCount,
    				KOMReviewMasterListItemDispatchClick: func
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(komreviewmasterlistitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(komreviewmasterlistitem, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const komreviewmasterlistitem_changes = {};
    			if (dirty & /*KOMReviewMasterItems*/ 1) komreviewmasterlistitem_changes.KOMReviewMasterListItemName = /*e*/ ctx[9].KOMDeckName;
    			if (dirty & /*KOMReviewMasterItems*/ 1) komreviewmasterlistitem_changes.KOMReviewMasterListItemReviewCount = /*e*/ ctx[9].$KOMDeckTodayReviewCount;
    			if (dirty & /*KOMReviewMasterItems*/ 1) komreviewmasterlistitem_changes.KOMReviewMasterListItemUnseenCount = /*e*/ ctx[9].$KOMDeckTodayNewCount;
    			if (dirty & /*KOMReviewMasterDispatchSelect, KOMReviewMasterItems*/ 5) komreviewmasterlistitem_changes.KOMReviewMasterListItemDispatchClick = func;
    			komreviewmasterlistitem.$set(komreviewmasterlistitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewmasterlistitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewmasterlistitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(komreviewmasterlistitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(155:1) {#each KOMReviewMasterItems as e}",
    		ctx
    	});

    	return block;
    }

    // (169:0) {#if KOMReviewMasterItems.length && mod.DataUnseenCount(KOMReviewMasterItems) }
    function create_if_block_1$1(ctx) {
    	let hr;
    	let t;
    	let komreviewstats;
    	let current;

    	const komreviewstats_spread_levels = [
    		/*mod*/ ctx[4].DataTodayParameters(/*KOMReviewMasterItems*/ ctx[0]),
    		/*mod*/ ctx[4].DataGeneralParameters(/*KOMReviewMasterItems*/ ctx[0])
    	];

    	let komreviewstats_props = {};

    	for (let i = 0; i < komreviewstats_spread_levels.length; i += 1) {
    		komreviewstats_props = assign(komreviewstats_props, komreviewstats_spread_levels[i]);
    	}

    	komreviewstats = new Main$7({
    			props: komreviewstats_props,
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			hr = element("hr");
    			t = space();
    			create_component(komreviewstats.$$.fragment);
    			attr_dev(hr, "role", "presentation");
    			attr_dev(hr, "class", "svelte-1f1v2qr");
    			add_location(hr, file$8, 169, 1, 6450);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(komreviewstats, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komreviewstats_changes = (dirty & /*mod, KOMReviewMasterItems*/ 17)
    			? get_spread_update(komreviewstats_spread_levels, [
    					get_spread_object(/*mod*/ ctx[4].DataTodayParameters(/*KOMReviewMasterItems*/ ctx[0])),
    					get_spread_object(/*mod*/ ctx[4].DataGeneralParameters(/*KOMReviewMasterItems*/ ctx[0]))
    				])
    			: {};

    			komreviewstats.$set(komreviewstats_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewstats.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewstats.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(hr);
    			if (detaching) detach_dev(t);
    			destroy_component(komreviewstats, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(169:0) {#if KOMReviewMasterItems.length && mod.DataUnseenCount(KOMReviewMasterItems) }",
    		ctx
    	});

    	return block;
    }

    // (182:0) {#if OLSK_SPEC_UI() && KOMReviewMaster_DebugShowLauncherButton }
    function create_if_block$2(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			attr_dev(button, "class", "OLSKAppToolbarLauncherButton");
    			add_location(button, file$8, 182, 1, 6701);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*mod*/ ctx[4]._OLSKAppToolbarDispatchLauncher, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(182:0) {#if OLSK_SPEC_UI() && KOMReviewMaster_DebugShowLauncherButton }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let div3;
    	let header;
    	let div0;
    	let span;
    	let t1;
    	let div2;
    	let div1;
    	let t2;
    	let p;
    	let button;
    	let t4;
    	let show_if_1 = /*KOMReviewMasterItems*/ ctx[0].length && /*mod*/ ctx[4].DataUnseenCount(/*KOMReviewMasterItems*/ ctx[0]);
    	let t5;
    	let show_if = main_1$2() && /*KOMReviewMaster_DebugShowLauncherButton*/ ctx[3];
    	let if_block1_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*KOMReviewMasterItems*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block0 = show_if_1 && create_if_block_1$1(ctx);
    	let if_block1 = show_if && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			header = element("header");
    			div0 = element("div");
    			span = element("span");
    			span.textContent = `${main_1('KOMReviewMasterToolbarTitleText')}`;
    			t1 = space();
    			div2 = element("div");
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			p = element("p");
    			button = element("button");
    			button.textContent = `${main_1('KOMReviewMasterCreateButtonText')}`;
    			t4 = space();
    			if (if_block0) if_block0.c();
    			t5 = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    			attr_dev(span, "class", "KOMReviewMasterToolbarTitle svelte-1f1v2qr");
    			add_location(span, file$8, 147, 2, 5633);
    			attr_dev(div0, "class", "OLSKToolbarElementGroup");
    			add_location(div0, file$8, 146, 1, 5593);
    			attr_dev(header, "class", "KOMReviewMasterToolbar OLSKToolbar OLSKToolbarJustify OLSKCommonEdgeBottom OLSKMobileViewHeader svelte-1f1v2qr");
    			add_location(header, file$8, 145, 0, 5479);
    			attr_dev(div1, "class", "KOMReviewMasterBodyItems svelte-1f1v2qr");
    			add_location(div1, file$8, 153, 0, 5789);
    			attr_dev(button, "class", "KOMReviewMasterCreateButton OLSKDecorPress");
    			attr_dev(button, "accesskey", "n");
    			add_location(button, file$8, 165, 1, 6185);
    			add_location(p, file$8, 164, 0, 6180);
    			attr_dev(div2, "class", "KOMReviewMasterBody svelte-1f1v2qr");
    			add_location(div2, file$8, 151, 0, 5754);
    			attr_dev(div3, "class", "KOMReviewMaster svelte-1f1v2qr");
    			add_location(div3, file$8, 143, 0, 5448);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, header);
    			append_dev(header, div0);
    			append_dev(div0, span);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div1, null);
    				}
    			}

    			append_dev(div2, t2);
    			append_dev(div2, p);
    			append_dev(p, button);
    			append_dev(div2, t4);
    			if (if_block0) if_block0.m(div2, null);
    			insert_dev(target, t5, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*KOMReviewMasterDispatchCreate*/ ctx[1])) /*KOMReviewMasterDispatchCreate*/ ctx[1].apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (dirty & /*KOMReviewMasterItems, KOMReviewMasterDispatchSelect*/ 5) {
    				each_value = /*KOMReviewMasterItems*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div1, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (dirty & /*KOMReviewMasterItems*/ 1) show_if_1 = /*KOMReviewMasterItems*/ ctx[0].length && /*mod*/ ctx[4].DataUnseenCount(/*KOMReviewMasterItems*/ ctx[0]);

    			if (show_if_1) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*KOMReviewMasterItems*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1$1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div2, null);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*KOMReviewMaster_DebugShowLauncherButton*/ 8) show_if = main_1$2() && /*KOMReviewMaster_DebugShowLauncherButton*/ ctx[3];

    			if (show_if) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$2(ctx);
    					if_block1.c();
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block0);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_each(each_blocks, detaching);
    			if (if_block0) if_block0.d();
    			if (detaching) detach_dev(t5);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMReviewMasterItems } = $$props;
    	let { KOMReviewMasterDispatchCreate } = $$props;
    	let { KOMReviewMasterDispatchSelect } = $$props;
    	let { KOMReviewMasterDispatchToggleExcludeTripleQuestionMark } = $$props;
    	let { KOMReviewMasterDispatchToggleDeckFiguresCaching } = $$props;
    	let { KOMReviewMaster_DebugShowLauncherButton = false } = $$props;

    	const modPublic = {
    		KOMReviewMasterRecipes() {
    			return mod.DataReviewMasterRecipes();
    		}
    	};

    	const mod = {
    		// DATA
    		DataUnseenCount(inputData) {
    			return inputData.reduce(
    				function (coll, item) {
    					return coll + (item.$KOMDeckGeneralNotUnseenCount || 0);
    				},
    				0
    			);
    		},
    		DataTodayParameters(inputData) {
    			const filtered = inputData.filter(function (e) {
    				return e.$KOMReviewTodayTotalCards;
    			});

    			return (function (obj) {
    				return Object.assign(obj, {
    					KOMReviewTodayTimeMinutes: Math.round(obj.KOMReviewTodayTimeMinutes * 10) / 10,
    					KOMReviewTodayReviewAccuracy: Math.round(obj.KOMReviewTodayReviewAccuracy / filtered.length * 10) / 10
    				});
    			})(filtered.reduce(
    				function (coll, item) {
    					return Object.assign(coll, {
    						KOMReviewTodayTotalCards: coll.KOMReviewTodayTotalCards + item.$KOMReviewTodayTotalCards,
    						KOMReviewTodayTimeMinutes: coll.KOMReviewTodayTimeMinutes + item.$KOMReviewTodayTimeMinutes,
    						KOMReviewTodayReviewAccuracy: coll.KOMReviewTodayReviewAccuracy + item.$KOMReviewTodayReviewAccuracy
    					});
    				},
    				{
    					KOMReviewTodayTotalCards: 0,
    					KOMReviewTodayTimeMinutes: 0,
    					KOMReviewTodayReviewAccuracy: 0
    				}
    			));
    		},
    		DataGeneralParameters(inputData) {
    			const filtered = inputData.filter(function (e) {
    				return e.$KOMDeckGeneralNotUnseenCount;
    			});

    			return {
    				KOMReviewGeneralUpcomingData: Object.entries(filtered.reduce(
    					function (coll, item) {
    						return item.$KOMReviewGeneralUpcomingData.reduce(
    							function (coll, item) {
    								return Object.assign(coll, {
    									[item.KOMReviewChartElementDateBarTableRowDataKey]: coll[item.KOMReviewChartElementDateBarTableRowDataKey]
    									? coll[item.KOMReviewChartElementDateBarTableRowDataKey].map(function (e, i) {
    											return e + item.KOMReviewChartElementDateBarTableRowDataValues[i];
    										})
    									: item.KOMReviewChartElementDateBarTableRowDataValues
    								});
    							},
    							coll
    						);
    					},
    					{}
    				)).map(function (e) {
    					return {
    						KOMReviewChartElementDateBarTableRowDataKey: e[0],
    						KOMReviewChartElementDateBarTableRowDataValues: e[1]
    					};
    				}),
    				KOMReviewGeneralHistoricalData: Object.entries(filtered.reduce(
    					function (coll, item) {
    						return item.$KOMReviewGeneralHistoricalData.reduce(
    							function (coll, item) {
    								return Object.assign(coll, {
    									[item.KOMReviewChartElementDateBarTableRowDataKey]: coll[item.KOMReviewChartElementDateBarTableRowDataKey]
    									? coll[item.KOMReviewChartElementDateBarTableRowDataKey].map(function (e, i) {
    											return e + item.KOMReviewChartElementDateBarTableRowDataValues[i];
    										})
    									: item.KOMReviewChartElementDateBarTableRowDataValues
    								});
    							},
    							coll
    						);
    					},
    					{}
    				)).map(function (e) {
    					return {
    						KOMReviewChartElementDateBarTableRowDataKey: e[0],
    						KOMReviewChartElementDateBarTableRowDataValues: e[1]
    					};
    				}),
    				KOMReviewChartCompositionCollectionData: filtered.reduce(
    					function (coll, item) {
    						return Object.assign(coll, {
    							KOMSpacingGroupingTotal: coll.KOMSpacingGroupingTotal + item.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingTotal,
    							KOMSpacingGroupingUnseen: coll.KOMSpacingGroupingUnseen + item.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingUnseen,
    							KOMSpacingGroupingDeveloping: coll.KOMSpacingGroupingDeveloping + item.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingDeveloping,
    							KOMSpacingGroupingMature: coll.KOMSpacingGroupingMature + item.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingMature,
    							KOMSpacingGroupingRetired: coll.KOMSpacingGroupingRetired + item.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingRetired
    						});
    					},
    					{
    						KOMSpacingGroupingTotal: 0,
    						KOMSpacingGroupingUnseen: 0,
    						KOMSpacingGroupingDeveloping: 0,
    						KOMSpacingGroupingMature: 0,
    						KOMSpacingGroupingRetired: 0
    					}
    				)
    			};
    		},
    		DataReviewMasterRecipes() {
    			const items = [
    				{
    					LCHRecipeSignature: 'KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMark',
    					LCHRecipeName: main_1('KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMarkText'),
    					LCHRecipeCallback: function KOMReviewMasterLauncherItemToggleExcludeTripleQuestionMark() {
    						return KOMReviewMasterDispatchToggleExcludeTripleQuestionMark();
    					}
    				},
    				{
    					LCHRecipeSignature: 'KOMReviewMasterLauncherItemToggleDeckFiguresCaching',
    					LCHRecipeName: main_1('KOMReviewMasterLauncherItemToggleDeckFiguresCachingText'),
    					LCHRecipeCallback: function KOMReviewMasterLauncherItemToggleDeckFiguresCaching() {
    						return KOMReviewMasterDispatchToggleDeckFiguresCaching();
    					}
    				}
    			];

    			if (main_1$2()) {
    				items.push({
    					LCHRecipeName: 'KOMReviewMasterLauncherFakeItemProxy',
    					LCHRecipeCallback: function KOMReviewMasterLauncherFakeItemProxy() {
    						
    					}
    				});
    			}

    			return items;
    		},
    		// MESSAGES
    		_OLSKAppToolbarDispatchLauncher() {
    			window.Launchlet.LCHSingletonCreate({
    				LCHOptionRecipes: mod.DataReviewMasterRecipes()
    			});
    		}
    	};

    	$$self.$$.on_mount.push(function () {
    		if (KOMReviewMasterItems === undefined && !('KOMReviewMasterItems' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewMasterItems']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterItems'");
    		}

    		if (KOMReviewMasterDispatchCreate === undefined && !('KOMReviewMasterDispatchCreate' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewMasterDispatchCreate']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterDispatchCreate'");
    		}

    		if (KOMReviewMasterDispatchSelect === undefined && !('KOMReviewMasterDispatchSelect' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewMasterDispatchSelect']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterDispatchSelect'");
    		}

    		if (KOMReviewMasterDispatchToggleExcludeTripleQuestionMark === undefined && !('KOMReviewMasterDispatchToggleExcludeTripleQuestionMark' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewMasterDispatchToggleExcludeTripleQuestionMark']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterDispatchToggleExcludeTripleQuestionMark'");
    		}

    		if (KOMReviewMasterDispatchToggleDeckFiguresCaching === undefined && !('KOMReviewMasterDispatchToggleDeckFiguresCaching' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewMasterDispatchToggleDeckFiguresCaching']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewMasterDispatchToggleDeckFiguresCaching'");
    		}
    	});

    	const writable_props = [
    		'KOMReviewMasterItems',
    		'KOMReviewMasterDispatchCreate',
    		'KOMReviewMasterDispatchSelect',
    		'KOMReviewMasterDispatchToggleExcludeTripleQuestionMark',
    		'KOMReviewMasterDispatchToggleDeckFiguresCaching',
    		'KOMReviewMaster_DebugShowLauncherButton'
    	];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const func = e => KOMReviewMasterDispatchSelect(e);

    	$$self.$$set = $$props => {
    		if ('KOMReviewMasterItems' in $$props) $$invalidate(0, KOMReviewMasterItems = $$props.KOMReviewMasterItems);
    		if ('KOMReviewMasterDispatchCreate' in $$props) $$invalidate(1, KOMReviewMasterDispatchCreate = $$props.KOMReviewMasterDispatchCreate);
    		if ('KOMReviewMasterDispatchSelect' in $$props) $$invalidate(2, KOMReviewMasterDispatchSelect = $$props.KOMReviewMasterDispatchSelect);
    		if ('KOMReviewMasterDispatchToggleExcludeTripleQuestionMark' in $$props) $$invalidate(5, KOMReviewMasterDispatchToggleExcludeTripleQuestionMark = $$props.KOMReviewMasterDispatchToggleExcludeTripleQuestionMark);
    		if ('KOMReviewMasterDispatchToggleDeckFiguresCaching' in $$props) $$invalidate(6, KOMReviewMasterDispatchToggleDeckFiguresCaching = $$props.KOMReviewMasterDispatchToggleDeckFiguresCaching);
    		if ('KOMReviewMaster_DebugShowLauncherButton' in $$props) $$invalidate(3, KOMReviewMaster_DebugShowLauncherButton = $$props.KOMReviewMaster_DebugShowLauncherButton);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewMasterItems,
    		KOMReviewMasterDispatchCreate,
    		KOMReviewMasterDispatchSelect,
    		KOMReviewMasterDispatchToggleExcludeTripleQuestionMark,
    		KOMReviewMasterDispatchToggleDeckFiguresCaching,
    		KOMReviewMaster_DebugShowLauncherButton,
    		modPublic,
    		OLSKLocalized: main_1,
    		OLSK_SPEC_UI: main_1$2,
    		mod,
    		KOMReviewMasterListItem: Main,
    		KOMReviewStats: Main$7
    	});

    	$$self.$inject_state = $$props => {
    		if ('KOMReviewMasterItems' in $$props) $$invalidate(0, KOMReviewMasterItems = $$props.KOMReviewMasterItems);
    		if ('KOMReviewMasterDispatchCreate' in $$props) $$invalidate(1, KOMReviewMasterDispatchCreate = $$props.KOMReviewMasterDispatchCreate);
    		if ('KOMReviewMasterDispatchSelect' in $$props) $$invalidate(2, KOMReviewMasterDispatchSelect = $$props.KOMReviewMasterDispatchSelect);
    		if ('KOMReviewMasterDispatchToggleExcludeTripleQuestionMark' in $$props) $$invalidate(5, KOMReviewMasterDispatchToggleExcludeTripleQuestionMark = $$props.KOMReviewMasterDispatchToggleExcludeTripleQuestionMark);
    		if ('KOMReviewMasterDispatchToggleDeckFiguresCaching' in $$props) $$invalidate(6, KOMReviewMasterDispatchToggleDeckFiguresCaching = $$props.KOMReviewMasterDispatchToggleDeckFiguresCaching);
    		if ('KOMReviewMaster_DebugShowLauncherButton' in $$props) $$invalidate(3, KOMReviewMaster_DebugShowLauncherButton = $$props.KOMReviewMaster_DebugShowLauncherButton);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewMasterItems,
    		KOMReviewMasterDispatchCreate,
    		KOMReviewMasterDispatchSelect,
    		KOMReviewMaster_DebugShowLauncherButton,
    		mod,
    		KOMReviewMasterDispatchToggleExcludeTripleQuestionMark,
    		KOMReviewMasterDispatchToggleDeckFiguresCaching,
    		modPublic,
    		func
    	];
    }

    class Main$8 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
    			KOMReviewMasterItems: 0,
    			KOMReviewMasterDispatchCreate: 1,
    			KOMReviewMasterDispatchSelect: 2,
    			KOMReviewMasterDispatchToggleExcludeTripleQuestionMark: 5,
    			KOMReviewMasterDispatchToggleDeckFiguresCaching: 6,
    			KOMReviewMaster_DebugShowLauncherButton: 3,
    			modPublic: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$8.name
    		});
    	}

    	get KOMReviewMasterItems() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterItems(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMasterDispatchCreate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterDispatchCreate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMasterDispatchSelect() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterDispatchSelect(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMasterDispatchToggleExcludeTripleQuestionMark() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterDispatchToggleExcludeTripleQuestionMark(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMasterDispatchToggleDeckFiguresCaching() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMasterDispatchToggleDeckFiguresCaching(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewMaster_DebugShowLauncherButton() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewMaster_DebugShowLauncherButton(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[7];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var _OLSKSharedBack = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedBack\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedBack-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 11,1 L 4,8 11,15\" />\n</svg>\n";

    /* os-app/open-review/submodules/KOMReviewDetailLanguageCode/main.svelte generated by Svelte v3.59.2 */
    const file$9 = "os-app/open-review/submodules/KOMReviewDetailLanguageCode/main.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	return child_ctx;
    }

    // (44:2) {#each KOMReviewDetailLanguageCodeOptions as item}
    function create_each_block$3(ctx) {
    	let option;
    	let t_value = /*item*/ ctx[6] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*item*/ ctx[6];
    			option.value = option.__value;
    			add_location(option, file$9, 44, 3, 1589);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*KOMReviewDetailLanguageCodeOptions*/ 4 && t_value !== (t_value = /*item*/ ctx[6] + "")) set_data_dev(t, t_value);

    			if (dirty & /*KOMReviewDetailLanguageCodeOptions*/ 4 && option_value_value !== (option_value_value = /*item*/ ctx[6])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(44:2) {#each KOMReviewDetailLanguageCodeOptions as item}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let label;
    	let span;
    	let t1;
    	let select;
    	let option;
    	let select_tabindex_value;
    	let mounted;
    	let dispose;
    	let each_value = /*KOMReviewDetailLanguageCodeOptions*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			label = element("label");
    			span = element("span");
    			span.textContent = `${main_1('KOMReviewDetailLanguageCodeFieldLabelText')}`;
    			t1 = space();
    			select = element("select");
    			option = element("option");
    			option.textContent = `${main_1('KOMReviewDetailLanguageCodeFieldOptionUnspecifiedText')}`;

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(span, "class", "KOMReviewDetailLanguageCodeFieldLabel");
    			add_location(span, file$9, 40, 1, 1021);
    			attr_dev(option, "class", "KOMReviewDetailLanguageCodeFieldOptionUnspecified");
    			option.__value = "";
    			option.value = option.__value;
    			add_location(option, file$9, 42, 2, 1374);
    			attr_dev(select, "class", "KOMReviewDetailLanguageCodeField");

    			attr_dev(select, "tabindex", select_tabindex_value = /*KOMReviewDetailLanguageCodeItem*/ ctx[0][/*KOMReviewDetailLanguageCodeItemProperty*/ ctx[1]]
    			? -1
    			: null);

    			if (/*mod*/ ctx[3]._ValueLanguageCode === void 0) add_render_callback(() => /*select_change_handler*/ ctx[5].call(select));
    			add_location(select, file$9, 41, 1, 1144);
    			attr_dev(label, "class", "KOMReviewDetailLanguageCode svelte-12zfbl1");
    			add_location(label, file$9, 39, 0, 976);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, span);
    			append_dev(label, t1);
    			append_dev(label, select);
    			append_dev(select, option);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(select, null);
    				}
    			}

    			select_option(select, /*mod*/ ctx[3]._ValueLanguageCode, true);

    			if (!mounted) {
    				dispose = [
    					listen_dev(select, "change", /*select_change_handler*/ ctx[5]),
    					listen_dev(
    						select,
    						"change",
    						function () {
    							if (is_function(/*mod*/ ctx[3].InterfaceFieldDidChange)) /*mod*/ ctx[3].InterfaceFieldDidChange.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (dirty & /*KOMReviewDetailLanguageCodeOptions*/ 4) {
    				each_value = /*KOMReviewDetailLanguageCodeOptions*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*KOMReviewDetailLanguageCodeItem, KOMReviewDetailLanguageCodeItemProperty*/ 3 && select_tabindex_value !== (select_tabindex_value = /*KOMReviewDetailLanguageCodeItem*/ ctx[0][/*KOMReviewDetailLanguageCodeItemProperty*/ ctx[1]]
    			? -1
    			: null)) {
    				attr_dev(select, "tabindex", select_tabindex_value);
    			}

    			if (dirty & /*mod, KOMReviewDetailLanguageCodeOptions*/ 12) {
    				select_option(select, /*mod*/ ctx[3]._ValueLanguageCode);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMReviewDetailLanguageCodeItem } = $$props;
    	let { KOMReviewDetailLanguageCodeItemProperty } = $$props;
    	let { KOMReviewDetailLanguageCodeOptions } = $$props;
    	let { KOMReviewDetailLanguageCodeDispatchUpdate } = $$props;

    	const mod = {
    		// VALUE
    		_ValueLanguageCode: KOMReviewDetailLanguageCodeItem[KOMReviewDetailLanguageCodeItemProperty],
    		// INTERFACE
    		InterfaceFieldDidChange() {
    			if (!mod._ValueLanguageCode) {
    				delete KOMReviewDetailLanguageCodeItem[KOMReviewDetailLanguageCodeItemProperty];
    			}

    			if (mod._ValueLanguageCode) {
    				$$invalidate(0, KOMReviewDetailLanguageCodeItem[KOMReviewDetailLanguageCodeItemProperty] = mod._ValueLanguageCode, KOMReviewDetailLanguageCodeItem);
    			}

    			KOMReviewDetailLanguageCodeDispatchUpdate(KOMReviewDetailLanguageCodeItem);
    		},
    		// REACT
    		ReactItemDidChange(inputData) {
    			$$invalidate(3, mod._ValueLanguageCode = inputData[KOMReviewDetailLanguageCodeItemProperty], mod);
    		}
    	};

    	$$self.$$.on_mount.push(function () {
    		if (KOMReviewDetailLanguageCodeItem === undefined && !('KOMReviewDetailLanguageCodeItem' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewDetailLanguageCodeItem']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailLanguageCodeItem'");
    		}

    		if (KOMReviewDetailLanguageCodeItemProperty === undefined && !('KOMReviewDetailLanguageCodeItemProperty' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewDetailLanguageCodeItemProperty']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailLanguageCodeItemProperty'");
    		}

    		if (KOMReviewDetailLanguageCodeOptions === undefined && !('KOMReviewDetailLanguageCodeOptions' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewDetailLanguageCodeOptions']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailLanguageCodeOptions'");
    		}

    		if (KOMReviewDetailLanguageCodeDispatchUpdate === undefined && !('KOMReviewDetailLanguageCodeDispatchUpdate' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewDetailLanguageCodeDispatchUpdate']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailLanguageCodeDispatchUpdate'");
    		}
    	});

    	const writable_props = [
    		'KOMReviewDetailLanguageCodeItem',
    		'KOMReviewDetailLanguageCodeItemProperty',
    		'KOMReviewDetailLanguageCodeOptions',
    		'KOMReviewDetailLanguageCodeDispatchUpdate'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function select_change_handler() {
    		mod._ValueLanguageCode = select_value(this);
    		$$invalidate(3, mod);
    		$$invalidate(2, KOMReviewDetailLanguageCodeOptions);
    	}

    	$$self.$$set = $$props => {
    		if ('KOMReviewDetailLanguageCodeItem' in $$props) $$invalidate(0, KOMReviewDetailLanguageCodeItem = $$props.KOMReviewDetailLanguageCodeItem);
    		if ('KOMReviewDetailLanguageCodeItemProperty' in $$props) $$invalidate(1, KOMReviewDetailLanguageCodeItemProperty = $$props.KOMReviewDetailLanguageCodeItemProperty);
    		if ('KOMReviewDetailLanguageCodeOptions' in $$props) $$invalidate(2, KOMReviewDetailLanguageCodeOptions = $$props.KOMReviewDetailLanguageCodeOptions);
    		if ('KOMReviewDetailLanguageCodeDispatchUpdate' in $$props) $$invalidate(4, KOMReviewDetailLanguageCodeDispatchUpdate = $$props.KOMReviewDetailLanguageCodeDispatchUpdate);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewDetailLanguageCodeItem,
    		KOMReviewDetailLanguageCodeItemProperty,
    		KOMReviewDetailLanguageCodeOptions,
    		KOMReviewDetailLanguageCodeDispatchUpdate,
    		OLSKLocalized: main_1,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ('KOMReviewDetailLanguageCodeItem' in $$props) $$invalidate(0, KOMReviewDetailLanguageCodeItem = $$props.KOMReviewDetailLanguageCodeItem);
    		if ('KOMReviewDetailLanguageCodeItemProperty' in $$props) $$invalidate(1, KOMReviewDetailLanguageCodeItemProperty = $$props.KOMReviewDetailLanguageCodeItemProperty);
    		if ('KOMReviewDetailLanguageCodeOptions' in $$props) $$invalidate(2, KOMReviewDetailLanguageCodeOptions = $$props.KOMReviewDetailLanguageCodeOptions);
    		if ('KOMReviewDetailLanguageCodeDispatchUpdate' in $$props) $$invalidate(4, KOMReviewDetailLanguageCodeDispatchUpdate = $$props.KOMReviewDetailLanguageCodeDispatchUpdate);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewDetailLanguageCodeItem,
    		KOMReviewDetailLanguageCodeItemProperty,
    		KOMReviewDetailLanguageCodeOptions,
    		mod,
    		KOMReviewDetailLanguageCodeDispatchUpdate,
    		select_change_handler
    	];
    }

    class Main$9 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			KOMReviewDetailLanguageCodeItem: 0,
    			KOMReviewDetailLanguageCodeItemProperty: 1,
    			KOMReviewDetailLanguageCodeOptions: 2,
    			KOMReviewDetailLanguageCodeDispatchUpdate: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get KOMReviewDetailLanguageCodeItem() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailLanguageCodeItem(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailLanguageCodeItemProperty() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailLanguageCodeItemProperty(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailLanguageCodeOptions() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailLanguageCodeOptions(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailLanguageCodeDispatchUpdate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailLanguageCodeDispatchUpdate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-review/submodules/KOMReviewDetail/main.svelte generated by Svelte v3.59.2 */

    const { Object: Object_1$2, window: window_1 } = globals;
    const file$a = "os-app/open-review/submodules/KOMReviewDetail/main.svelte";

    // (289:0) {#if !KOMReviewDetailDeck.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingTotal }
    function create_if_block_4(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = `${main_1('KOMReviewDetailNoCardsText')}`;
    			attr_dev(p, "class", "KOMReviewDetailNoCards");
    			add_location(p, file$a, 289, 1, 9790);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(289:0) {#if !KOMReviewDetailDeck.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingTotal }",
    		ctx
    	});

    	return block;
    }

    // (293:0) {#if KOMReviewDetailDeck.$KOMDeckTodayReviewCount || KOMReviewDetailDeck.$KOMDeckTodayNewCount}
    function create_if_block_3(ctx) {
    	let div;
    	let p;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			button = element("button");
    			button.textContent = `${main_1('KOMReviewDetailPlayButtonText')}`;
    			attr_dev(button, "class", "KOMReviewDetailPlayButton OLSKDecorPress svelte-q2vy0z");
    			attr_dev(button, "accesskey", "g");
    			add_location(button, file$a, 295, 3, 10023);
    			add_location(p, file$a, 294, 2, 10016);
    			attr_dev(div, "class", "KOMReviewDetailPlay");
    			add_location(div, file$a, 293, 1, 9980);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    			append_dev(p, button);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[5].InterfaceMixedButtonDidClick)) /*mod*/ ctx[5].InterfaceMixedButtonDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(293:0) {#if KOMReviewDetailDeck.$KOMDeckTodayReviewCount || KOMReviewDetailDeck.$KOMDeckTodayNewCount}",
    		ctx
    	});

    	return block;
    }

    // (301:0) {#if KOMReviewDetailDeck.$KOMDeckTodayStudiedCount && !KOMReviewDetailDeck.$KOMDeckTodayReviewCount && !KOMReviewDetailDeck.$KOMDeckTodayNewCount}
    function create_if_block_2(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = `${main_1('KOMReviewDetailNoSpacingsText')}`;
    			attr_dev(p, "class", "KOMReviewDetailNoSpacings");
    			add_location(p, file$a, 301, 1, 10370);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(301:0) {#if KOMReviewDetailDeck.$KOMDeckTodayStudiedCount && !KOMReviewDetailDeck.$KOMDeckTodayReviewCount && !KOMReviewDetailDeck.$KOMDeckTodayNewCount}",
    		ctx
    	});

    	return block;
    }

    // (305:0) {#if KOMReviewDetailDeck.$KOMDeckGeneralNotUnseenCount }
    function create_if_block_1$2(ctx) {
    	let hr;
    	let t;
    	let komreviewstats;
    	let current;

    	komreviewstats = new Main$7({
    			props: {
    				KOMReviewTodayTotalCards: /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewTodayTotalCards,
    				KOMReviewTodayTimeMinutes: /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewTodayTimeMinutes,
    				KOMReviewTodayReviewAccuracy: /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewTodayReviewAccuracy,
    				KOMReviewGeneralUpcomingData: /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewGeneralUpcomingData,
    				KOMReviewGeneralHistoricalData: /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewGeneralHistoricalData,
    				KOMReviewChartCompositionCollectionData: /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewChartCompositionCollectionData
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			hr = element("hr");
    			t = space();
    			create_component(komreviewstats.$$.fragment);
    			attr_dev(hr, "role", "presentation");
    			attr_dev(hr, "class", "svelte-q2vy0z");
    			add_location(hr, file$a, 305, 1, 10527);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(komreviewstats, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komreviewstats_changes = {};
    			if (dirty & /*KOMReviewDetailDeck*/ 1) komreviewstats_changes.KOMReviewTodayTotalCards = /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewTodayTotalCards;
    			if (dirty & /*KOMReviewDetailDeck*/ 1) komreviewstats_changes.KOMReviewTodayTimeMinutes = /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewTodayTimeMinutes;
    			if (dirty & /*KOMReviewDetailDeck*/ 1) komreviewstats_changes.KOMReviewTodayReviewAccuracy = /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewTodayReviewAccuracy;
    			if (dirty & /*KOMReviewDetailDeck*/ 1) komreviewstats_changes.KOMReviewGeneralUpcomingData = /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewGeneralUpcomingData;
    			if (dirty & /*KOMReviewDetailDeck*/ 1) komreviewstats_changes.KOMReviewGeneralHistoricalData = /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewGeneralHistoricalData;
    			if (dirty & /*KOMReviewDetailDeck*/ 1) komreviewstats_changes.KOMReviewChartCompositionCollectionData = /*KOMReviewDetailDeck*/ ctx[0].$KOMReviewChartCompositionCollectionData;
    			komreviewstats.$set(komreviewstats_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewstats.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewstats.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(hr);
    			if (detaching) detach_dev(t);
    			destroy_component(komreviewstats, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(305:0) {#if KOMReviewDetailDeck.$KOMDeckGeneralNotUnseenCount }",
    		ctx
    	});

    	return block;
    }

    // (336:0) {#if OLSK_SPEC_UI() && KOMReviewDetail_DebugShowLauncherButton }
    function create_if_block$3(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			attr_dev(button, "class", "OLSKAppToolbarLauncherButton");
    			add_location(button, file$a, 336, 1, 11917);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[5]._OLSKAppToolbarDispatchLauncher)) /*mod*/ ctx[5]._OLSKAppToolbarDispatchLauncher.apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(336:0) {#if OLSK_SPEC_UI() && KOMReviewDetail_DebugShowLauncherButton }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let div6;
    	let header;
    	let div1;
    	let button0;
    	let div0;
    	let button0_title_value;
    	let t0;
    	let div2;
    	let strong;
    	let t1_value = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckName + "";
    	let t1;
    	let t2;
    	let div3;
    	let button1;
    	let t4;
    	let div5;
    	let h10;
    	let t6;
    	let div4;
    	let p0;
    	let label0;
    	let input0;
    	let t7;
    	let span0;
    	let t9;
    	let p1;
    	let label1;
    	let input1;
    	let t10;
    	let span1;
    	let t12;
    	let span2;
    	let komreviewdetaillanguagecode0;
    	let t13;
    	let p2;
    	let label2;
    	let input2;
    	let t14;
    	let span3;
    	let t16;
    	let span4;
    	let komreviewdetaillanguagecode1;
    	let t17;
    	let p3;
    	let label3;
    	let input3;
    	let t18;
    	let span5;
    	let t20;
    	let p4;
    	let label4;
    	let input4;
    	let t21;
    	let span6;
    	let t23;
    	let p5;
    	let label5;
    	let span7;
    	let t25;
    	let select;
    	let option0;
    	let option0_value_value;
    	let option1;
    	let option1_value_value;
    	let option2;
    	let option2_value_value;
    	let option3;
    	let option3_value_value;
    	let option4;
    	let option4_value_value;
    	let t31;
    	let t32;
    	let t33;
    	let t34;
    	let t35;
    	let hr0;
    	let t36;
    	let h11;
    	let t38;
    	let p6;
    	let button2;
    	let t40;
    	let hr1;
    	let t41;
    	let p7;
    	let button3;
    	let t43;
    	let show_if = main_1$2() && /*KOMReviewDetail_DebugShowLauncherButton*/ ctx[4];
    	let if_block4_anchor;
    	let current;
    	let mounted;
    	let dispose;

    	komreviewdetaillanguagecode0 = new Main$9({
    			props: {
    				KOMReviewDetailLanguageCodeItem: /*KOMReviewDetailDeck*/ ctx[0],
    				KOMReviewDetailLanguageCodeItemProperty: 'KOMDeckFrontLanguageCode',
    				KOMReviewDetailLanguageCodeOptions: /*mod*/ ctx[5]._ValueLanguages,
    				KOMReviewDetailLanguageCodeDispatchUpdate: /*mod*/ ctx[5].InterfaceFormDidUpdate
    			},
    			$$inline: true
    		});

    	komreviewdetaillanguagecode1 = new Main$9({
    			props: {
    				KOMReviewDetailLanguageCodeItem: /*KOMReviewDetailDeck*/ ctx[0],
    				KOMReviewDetailLanguageCodeItemProperty: 'KOMDeckRearLanguageCode',
    				KOMReviewDetailLanguageCodeOptions: /*mod*/ ctx[5]._ValueLanguages,
    				KOMReviewDetailLanguageCodeDispatchUpdate: /*mod*/ ctx[5].InterfaceFormDidUpdate
    			},
    			$$inline: true
    		});

    	let if_block0 = !/*KOMReviewDetailDeck*/ ctx[0].$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingTotal && create_if_block_4(ctx);
    	let if_block1 = (/*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayReviewCount || /*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayNewCount) && create_if_block_3(ctx);
    	let if_block2 = /*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayStudiedCount && !/*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayReviewCount && !/*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayNewCount && create_if_block_2(ctx);
    	let if_block3 = /*KOMReviewDetailDeck*/ ctx[0].$KOMDeckGeneralNotUnseenCount && create_if_block_1$2(ctx);
    	let if_block4 = show_if && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			header = element("header");
    			div1 = element("div");
    			button0 = element("button");
    			div0 = element("div");
    			t0 = space();
    			div2 = element("div");
    			strong = element("strong");
    			t1 = text(t1_value);
    			t2 = space();
    			div3 = element("div");
    			button1 = element("button");
    			button1.textContent = `${main_1('KOMReviewDetailToolbarCardsButtonText')}`;
    			t4 = space();
    			div5 = element("div");
    			h10 = element("h1");
    			h10.textContent = `${main_1('KOMReviewDetailGameOptionsHeadingText')}`;
    			t6 = space();
    			div4 = element("div");
    			p0 = element("p");
    			label0 = element("label");
    			input0 = element("input");
    			t7 = space();
    			span0 = element("span");
    			span0.textContent = `${main_1('KOMReviewDetailFormAudioIsEnabledFieldLabelText')}`;
    			t9 = space();
    			p1 = element("p");
    			label1 = element("label");
    			input1 = element("input");
    			t10 = space();
    			span1 = element("span");
    			span1.textContent = `${main_1('KOMReviewDetailFormFrontSpeechIsEnabledFieldLabelText')}`;
    			t12 = space();
    			span2 = element("span");
    			create_component(komreviewdetaillanguagecode0.$$.fragment);
    			t13 = space();
    			p2 = element("p");
    			label2 = element("label");
    			input2 = element("input");
    			t14 = space();
    			span3 = element("span");
    			span3.textContent = `${main_1('KOMReviewDetailFormRearSpeechIsEnabledFieldLabelText')}`;
    			t16 = space();
    			span4 = element("span");
    			create_component(komreviewdetaillanguagecode1.$$.fragment);
    			t17 = space();
    			p3 = element("p");
    			label3 = element("label");
    			input3 = element("input");
    			t18 = space();
    			span5 = element("span");
    			span5.textContent = `${main_1('KOMReviewDetailFormIsForwardOnlyFieldLabelText')}`;
    			t20 = space();
    			p4 = element("p");
    			label4 = element("label");
    			input4 = element("input");
    			t21 = space();
    			span6 = element("span");
    			span6.textContent = `${main_1('KOMReviewDetailFormPairingIsEnabledFieldLabelText')}`;
    			t23 = space();
    			p5 = element("p");
    			label5 = element("label");
    			span7 = element("span");
    			span7.textContent = `${main_1('KOMReviewDetailFormRetireCardsFieldLabelText')}`;
    			t25 = space();
    			select = element("select");
    			option0 = element("option");
    			option0.textContent = `${main_1('KOMReviewDetailFormRetireCardsFieldOptionNeverText')}`;
    			option1 = element("option");
    			option1.textContent = `${main_1('KOMReviewDetailFormRetireCardsFieldOptionOneMonthText')}`;
    			option2 = element("option");
    			option2.textContent = `${main_1('KOMReviewDetailFormRetireCardsFieldOptionThreeMonthsText')}`;
    			option3 = element("option");
    			option3.textContent = `${main_1('KOMReviewDetailFormRetireCardsFieldOptionSixMonthsText')}`;
    			option4 = element("option");
    			option4.textContent = `${main_1('KOMReviewDetailFormRetireCardsFieldOptionTwelveMonthsText')}`;
    			t31 = space();
    			if (if_block0) if_block0.c();
    			t32 = space();
    			if (if_block1) if_block1.c();
    			t33 = space();
    			if (if_block2) if_block2.c();
    			t34 = space();
    			if (if_block3) if_block3.c();
    			t35 = space();
    			hr0 = element("hr");
    			t36 = space();
    			h11 = element("h1");
    			h11.textContent = `${main_1('KOMReviewDetailDeckHeadingText')}`;
    			t38 = space();
    			p6 = element("p");
    			button2 = element("button");
    			button2.textContent = `${main_1('KOMReviewDetailRenameButtonText')}`;
    			t40 = space();
    			hr1 = element("hr");
    			t41 = space();
    			p7 = element("p");
    			button3 = element("button");
    			button3.textContent = `${main_1('KOMReviewDetailDiscardButtonText')}`;
    			t43 = space();
    			if (if_block4) if_block4.c();
    			if_block4_anchor = empty();
    			attr_dev(div0, "class", "KOMReviewDetailToolbarBackButtonImage");
    			add_location(div0, file$a, 208, 3, 5299);
    			attr_dev(button0, "class", "KOMReviewDetailToolbarBackButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton");
    			attr_dev(button0, "title", button0_title_value = main_1('KOMReviewDetailToolbarBackButtonText'));
    			add_location(button0, file$a, 207, 2, 5082);
    			attr_dev(div1, "class", "OLSKToolbarElementGroup");
    			add_location(div1, file$a, 206, 1, 5042);
    			attr_dev(strong, "class", "KOMReviewDetailToolbarTitle");
    			add_location(strong, file$a, 213, 2, 5443);
    			attr_dev(div2, "class", "OLSKToolbarElementGroup");
    			add_location(div2, file$a, 212, 1, 5403);
    			attr_dev(button1, "class", "KOMReviewDetailToolbarCardsButton OLSKDecorButtonNoStyle OLSKDecorTappable");
    			attr_dev(button1, "accesskey", "c");
    			add_location(button1, file$a, 217, 2, 5582);
    			attr_dev(div3, "class", "OLSKToolbarElementGroup");
    			add_location(div3, file$a, 216, 1, 5542);
    			attr_dev(header, "class", "KOMReviewDetailToolbar OLSKToolbar OLSKToolbarJustify OLSKCommonEdgeBottom OLSKMobileViewHeader");
    			add_location(header, file$a, 205, 0, 4928);
    			attr_dev(h10, "class", "KOMReviewDetailStudyHeading");
    			add_location(h10, file$a, 223, 0, 5852);
    			attr_dev(input0, "class", "KOMReviewDetailFormAudioIsEnabledField");
    			attr_dev(input0, "type", "checkbox");
    			add_location(input0, file$a, 228, 3, 6009);
    			attr_dev(span0, "class", "KOMReviewDetailFormAudioIsEnabledFieldLabel");
    			add_location(span0, file$a, 229, 3, 6184);
    			add_location(label0, file$a, 227, 2, 5998);
    			add_location(p0, file$a, 226, 1, 5992);
    			attr_dev(input1, "class", "KOMReviewDetailFormFrontSpeechIsEnabledField");
    			attr_dev(input1, "type", "checkbox");
    			add_location(input1, file$a, 234, 3, 6353);
    			attr_dev(span1, "class", "KOMReviewDetailFormFrontSpeechIsEnabledFieldLabel");
    			add_location(span1, file$a, 235, 3, 6540);
    			add_location(label1, file$a, 233, 2, 6342);
    			attr_dev(span2, "class", "KOMReviewDetailFormFrontLanguageCode");
    			add_location(span2, file$a, 238, 2, 6700);
    			add_location(p1, file$a, 232, 1, 6336);
    			attr_dev(input2, "class", "KOMReviewDetailFormRearSpeechIsEnabledField");
    			attr_dev(input2, "type", "checkbox");
    			add_location(input2, file$a, 249, 3, 7100);
    			attr_dev(span3, "class", "KOMReviewDetailFormRearSpeechIsEnabledFieldLabel");
    			add_location(span3, file$a, 250, 3, 7285);
    			add_location(label2, file$a, 248, 2, 7089);
    			attr_dev(span4, "class", "KOMReviewDetailFormRearLanguageCode");
    			add_location(span4, file$a, 253, 2, 7443);
    			add_location(p2, file$a, 247, 1, 7083);
    			attr_dev(input3, "class", "KOMReviewDetailFormIsForwardOnlyField");
    			attr_dev(input3, "type", "checkbox");
    			add_location(input3, file$a, 264, 3, 7841);
    			attr_dev(span5, "class", "KOMReviewDetailFormIsForwardOnlyFieldLabel");
    			add_location(span5, file$a, 265, 3, 8014);
    			add_location(label3, file$a, 263, 2, 7830);
    			add_location(p3, file$a, 262, 1, 7824);
    			attr_dev(input4, "class", "KOMReviewDetailFormPairingIsEnabledField");
    			attr_dev(input4, "type", "checkbox");
    			add_location(input4, file$a, 270, 3, 8181);
    			attr_dev(span6, "class", "KOMReviewDetailFormPairingIsEnabledFieldLabel");
    			add_location(span6, file$a, 271, 3, 8360);
    			add_location(label4, file$a, 269, 2, 8170);
    			add_location(p4, file$a, 268, 1, 8164);
    			attr_dev(span7, "class", "KOMReviewDetailFormRetireCardsFieldLabel");
    			add_location(span7, file$a, 276, 3, 8533);
    			attr_dev(option0, "class", "KOMReviewDetailFormRetireCardsFieldOptionNever");
    			option0.__value = option0_value_value = 0;
    			option0.value = option0.__value;
    			add_location(option0, file$a, 278, 4, 8821);
    			attr_dev(option1, "class", "KOMReviewDetailFormRetireCardsFieldOptionOneMonth");
    			option1.__value = option1_value_value = 1;
    			option1.value = option1.__value;
    			add_location(option1, file$a, 279, 4, 8981);
    			attr_dev(option2, "class", "KOMReviewDetailFormRetireCardsFieldOptionThreeMonths");
    			option2.__value = option2_value_value = 3;
    			option2.value = option2.__value;
    			add_location(option2, file$a, 280, 4, 9147);
    			attr_dev(option3, "class", "KOMReviewDetailFormRetireCardsFieldOptionSixMonths");
    			option3.__value = option3_value_value = 6;
    			option3.value = option3.__value;
    			add_location(option3, file$a, 281, 4, 9319);
    			attr_dev(option4, "class", "KOMReviewDetailFormRetireCardsFieldOptionTwelveMonths");
    			option4.__value = option4_value_value = 12;
    			option4.value = option4.__value;
    			add_location(option4, file$a, 282, 4, 9487);
    			attr_dev(select, "class", "KOMReviewDetailFormRetireCardsField");
    			if (/*KOMReviewDetailDeck*/ ctx[0].KOMDeckRetireCardsMonths === void 0) add_render_callback(() => /*select_change_handler*/ ctx[15].call(select));
    			add_location(select, file$a, 277, 3, 8664);
    			add_location(label5, file$a, 275, 2, 8522);
    			add_location(p5, file$a, 274, 1, 8516);
    			attr_dev(div4, "class", "KOMReviewDetailForm");
    			add_location(div4, file$a, 225, 0, 5957);
    			attr_dev(hr0, "role", "presentation");
    			attr_dev(hr0, "class", "svelte-q2vy0z");
    			add_location(hr0, file$a, 317, 0, 11106);
    			attr_dev(h11, "class", "KOMReviewDetailDeckHeading");
    			add_location(h11, file$a, 319, 0, 11134);
    			attr_dev(button2, "class", "KOMReviewDetailRenameButton OLSKDecorPress");
    			add_location(button2, file$a, 322, 1, 11236);
    			add_location(p6, file$a, 321, 0, 11231);
    			attr_dev(hr1, "role", "presentation");
    			attr_dev(hr1, "class", "svelte-q2vy0z");
    			add_location(hr1, file$a, 325, 0, 11410);
    			attr_dev(button3, "class", "KOMReviewDetailDiscardButton OLSKDecorPress OLSKDecorPressDestroy");
    			add_location(button3, file$a, 328, 1, 11443);
    			add_location(p7, file$a, 327, 0, 11438);
    			attr_dev(div5, "class", "KOMReviewDetailBody svelte-q2vy0z");
    			add_location(div5, file$a, 221, 0, 5817);
    			attr_dev(div6, "class", "KOMReviewDetail svelte-q2vy0z");
    			add_location(div6, file$a, 203, 0, 4897);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, header);
    			append_dev(header, div1);
    			append_dev(div1, button0);
    			append_dev(button0, div0);
    			div0.innerHTML = _OLSKSharedBack;
    			append_dev(header, t0);
    			append_dev(header, div2);
    			append_dev(div2, strong);
    			append_dev(strong, t1);
    			append_dev(header, t2);
    			append_dev(header, div3);
    			append_dev(div3, button1);
    			append_dev(div6, t4);
    			append_dev(div6, div5);
    			append_dev(div5, h10);
    			append_dev(div5, t6);
    			append_dev(div5, div4);
    			append_dev(div4, p0);
    			append_dev(p0, label0);
    			append_dev(label0, input0);
    			input0.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckAudioIsEnabled;
    			append_dev(label0, t7);
    			append_dev(label0, span0);
    			append_dev(div4, t9);
    			append_dev(div4, p1);
    			append_dev(p1, label1);
    			append_dev(label1, input1);
    			input1.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckFrontSpeechIsEnabled;
    			append_dev(label1, t10);
    			append_dev(label1, span1);
    			append_dev(p1, t12);
    			append_dev(p1, span2);
    			mount_component(komreviewdetaillanguagecode0, span2, null);
    			append_dev(div4, t13);
    			append_dev(div4, p2);
    			append_dev(p2, label2);
    			append_dev(label2, input2);
    			input2.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckRearSpeechIsEnabled;
    			append_dev(label2, t14);
    			append_dev(label2, span3);
    			append_dev(p2, t16);
    			append_dev(p2, span4);
    			mount_component(komreviewdetaillanguagecode1, span4, null);
    			append_dev(div4, t17);
    			append_dev(div4, p3);
    			append_dev(p3, label3);
    			append_dev(label3, input3);
    			input3.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckIsForwardOnly;
    			append_dev(label3, t18);
    			append_dev(label3, span5);
    			append_dev(div4, t20);
    			append_dev(div4, p4);
    			append_dev(p4, label4);
    			append_dev(label4, input4);
    			input4.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckPairingIsEnabled;
    			append_dev(label4, t21);
    			append_dev(label4, span6);
    			append_dev(div4, t23);
    			append_dev(div4, p5);
    			append_dev(p5, label5);
    			append_dev(label5, span7);
    			append_dev(label5, t25);
    			append_dev(label5, select);
    			append_dev(select, option0);
    			append_dev(select, option1);
    			append_dev(select, option2);
    			append_dev(select, option3);
    			append_dev(select, option4);
    			select_option(select, /*KOMReviewDetailDeck*/ ctx[0].KOMDeckRetireCardsMonths, true);
    			append_dev(div5, t31);
    			if (if_block0) if_block0.m(div5, null);
    			append_dev(div5, t32);
    			if (if_block1) if_block1.m(div5, null);
    			append_dev(div5, t33);
    			if (if_block2) if_block2.m(div5, null);
    			append_dev(div5, t34);
    			if (if_block3) if_block3.m(div5, null);
    			append_dev(div5, t35);
    			append_dev(div5, hr0);
    			append_dev(div5, t36);
    			append_dev(div5, h11);
    			append_dev(div5, t38);
    			append_dev(div5, p6);
    			append_dev(p6, button2);
    			append_dev(div5, t40);
    			append_dev(div5, hr1);
    			append_dev(div5, t41);
    			append_dev(div5, p7);
    			append_dev(p7, button3);
    			insert_dev(target, t43, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, if_block4_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						window_1,
    						"keydown",
    						function () {
    							if (is_function(/*mod*/ ctx[5].InterfaceWindowDidKeydown)) /*mod*/ ctx[5].InterfaceWindowDidKeydown.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*KOMReviewDetailDispatchBack*/ ctx[1])) /*KOMReviewDetailDispatchBack*/ ctx[1].apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button1,
    						"click",
    						function () {
    							if (is_function(/*KOMReviewDetailDispatchBrowse*/ ctx[2])) /*KOMReviewDetailDispatchBrowse*/ ctx[2].apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(input0, "change", /*input0_change_handler*/ ctx[10]),
    					listen_dev(
    						input0,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[5].InterfaceFormDidUpdate)) /*mod*/ ctx[5].InterfaceFormDidUpdate.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(input1, "change", /*input1_change_handler*/ ctx[11]),
    					listen_dev(
    						input1,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[5].InterfaceFormDidUpdate)) /*mod*/ ctx[5].InterfaceFormDidUpdate.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(input2, "change", /*input2_change_handler*/ ctx[12]),
    					listen_dev(
    						input2,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[5].InterfaceFormDidUpdate)) /*mod*/ ctx[5].InterfaceFormDidUpdate.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(input3, "change", /*input3_change_handler*/ ctx[13]),
    					listen_dev(
    						input3,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[5].InterfaceFormDidUpdate)) /*mod*/ ctx[5].InterfaceFormDidUpdate.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(input4, "change", /*input4_change_handler*/ ctx[14]),
    					listen_dev(
    						input4,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[5].InterfaceFormDidUpdate)) /*mod*/ ctx[5].InterfaceFormDidUpdate.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[15]),
    					listen_dev(
    						select,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[5].InterfaceFormDidUpdate)) /*mod*/ ctx[5].InterfaceFormDidUpdate.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button2,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[5].InterfaceRenameButtonDidClick)) /*mod*/ ctx[5].InterfaceRenameButtonDidClick.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(button3, "click", /*click_handler*/ ctx[16], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if ((!current || dirty & /*KOMReviewDetailDeck*/ 1) && t1_value !== (t1_value = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckName + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*KOMReviewDetailDeck*/ 1) {
    				input0.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckAudioIsEnabled;
    			}

    			if (dirty & /*KOMReviewDetailDeck*/ 1) {
    				input1.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckFrontSpeechIsEnabled;
    			}

    			const komreviewdetaillanguagecode0_changes = {};
    			if (dirty & /*KOMReviewDetailDeck*/ 1) komreviewdetaillanguagecode0_changes.KOMReviewDetailLanguageCodeItem = /*KOMReviewDetailDeck*/ ctx[0];
    			if (dirty & /*mod*/ 32) komreviewdetaillanguagecode0_changes.KOMReviewDetailLanguageCodeOptions = /*mod*/ ctx[5]._ValueLanguages;
    			if (dirty & /*mod*/ 32) komreviewdetaillanguagecode0_changes.KOMReviewDetailLanguageCodeDispatchUpdate = /*mod*/ ctx[5].InterfaceFormDidUpdate;
    			komreviewdetaillanguagecode0.$set(komreviewdetaillanguagecode0_changes);

    			if (dirty & /*KOMReviewDetailDeck*/ 1) {
    				input2.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckRearSpeechIsEnabled;
    			}

    			const komreviewdetaillanguagecode1_changes = {};
    			if (dirty & /*KOMReviewDetailDeck*/ 1) komreviewdetaillanguagecode1_changes.KOMReviewDetailLanguageCodeItem = /*KOMReviewDetailDeck*/ ctx[0];
    			if (dirty & /*mod*/ 32) komreviewdetaillanguagecode1_changes.KOMReviewDetailLanguageCodeOptions = /*mod*/ ctx[5]._ValueLanguages;
    			if (dirty & /*mod*/ 32) komreviewdetaillanguagecode1_changes.KOMReviewDetailLanguageCodeDispatchUpdate = /*mod*/ ctx[5].InterfaceFormDidUpdate;
    			komreviewdetaillanguagecode1.$set(komreviewdetaillanguagecode1_changes);

    			if (dirty & /*KOMReviewDetailDeck*/ 1) {
    				input3.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckIsForwardOnly;
    			}

    			if (dirty & /*KOMReviewDetailDeck*/ 1) {
    				input4.checked = /*KOMReviewDetailDeck*/ ctx[0].KOMDeckPairingIsEnabled;
    			}

    			if (dirty & /*KOMReviewDetailDeck*/ 1) {
    				select_option(select, /*KOMReviewDetailDeck*/ ctx[0].KOMDeckRetireCardsMonths);
    			}

    			if (!/*KOMReviewDetailDeck*/ ctx[0].$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingTotal) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_4(ctx);
    					if_block0.c();
    					if_block0.m(div5, t32);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayReviewCount || /*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayNewCount) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_3(ctx);
    					if_block1.c();
    					if_block1.m(div5, t33);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayStudiedCount && !/*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayReviewCount && !/*KOMReviewDetailDeck*/ ctx[0].$KOMDeckTodayNewCount) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_2(ctx);
    					if_block2.c();
    					if_block2.m(div5, t34);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*KOMReviewDetailDeck*/ ctx[0].$KOMDeckGeneralNotUnseenCount) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty & /*KOMReviewDetailDeck*/ 1) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_1$2(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div5, t35);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*KOMReviewDetail_DebugShowLauncherButton*/ 16) show_if = main_1$2() && /*KOMReviewDetail_DebugShowLauncherButton*/ ctx[4];

    			if (show_if) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block$3(ctx);
    					if_block4.c();
    					if_block4.m(if_block4_anchor.parentNode, if_block4_anchor);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewdetaillanguagecode0.$$.fragment, local);
    			transition_in(komreviewdetaillanguagecode1.$$.fragment, local);
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewdetaillanguagecode0.$$.fragment, local);
    			transition_out(komreviewdetaillanguagecode1.$$.fragment, local);
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			destroy_component(komreviewdetaillanguagecode0);
    			destroy_component(komreviewdetaillanguagecode1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (detaching) detach_dev(t43);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(if_block4_anchor);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const kMaxUnseenCards = 10;

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMReviewDetailDeck } = $$props;
    	let { KOMReviewDetailDispatchBack } = $$props;
    	let { KOMReviewDetailDispatchBrowse } = $$props;
    	let { KOMReviewDetailDispatchUpdate } = $$props;
    	let { KOMReviewDetailDispatchRecount } = $$props;
    	let { KOMReviewDetailDispatchPlay } = $$props;
    	let { KOMReviewDetailDispatchDiscard } = $$props;
    	let { KOMReviewDetail_DebugShowLauncherButton = false } = $$props;

    	const modPublic = {
    		KOMReviewDetailRecipes() {
    			return mod.DataReviewDetailRecipes();
    		}
    	};

    	const mod = {
    		// VALUE
    		_ValueLanguages: [],
    		ValueLanguages(inputData) {
    			$$invalidate(
    				5,
    				mod._ValueLanguages = inputData.map(function (e) {
    					return e.lang;
    				}).filter(function (e, i, coll) {
    					return coll.indexOf(e) === i;
    				}).sort(),
    				mod
    			);
    		},
    		// DATA
    		DataReviewDetailRecipes() {
    			const items = [];

    			if (KOMReviewDetailDeck.$KOMDeckTodayReviewCount) {
    				items.push({
    					LCHRecipeSignature: 'KOMReviewDetailLauncherItemPlayReviewing',
    					LCHRecipeName: main_1('KOMReviewDetailLauncherItemPlayReviewingText'),
    					LCHRecipeCallback() {
    						mod.ContolPlay(mod$7.KOMReviewSchemeReviewing());
    					}
    				});
    			}

    			if (KOMReviewDetailDeck.$KOMDeckTodayNewCount) {
    				items.push({
    					LCHRecipeSignature: 'KOMReviewDetailLauncherItemPlayUnseen',
    					LCHRecipeName: main_1('KOMReviewDetailLauncherItemPlayUnseenText'),
    					LCHRecipeCallback() {
    						mod.ContolPlay(mod$7.KOMReviewSchemeUnseen());
    					}
    				});
    			}

    			if (main_1$2()) {
    				items.push({
    					LCHRecipeName: 'KOMReviewDetailLauncherFakeItemProxy',
    					LCHRecipeCallback: function KOMReviewDetailLauncherFakeItemProxy() {
    						
    					}
    				});
    			}

    			return items;
    		},
    		// INTERFACE
    		InterfaceFormDidUpdate() {
    			// if (!KOMReviewDetailDeck.KOMDeckFrontLanguageCode && KOMReviewDetailDeck.KOMDeckFrontSpeechIsEnabled) {
    			// 	KOMReviewDetailDeck.KOMDeckFrontSpeechIsEnabled = false;
    			// 	delete KOMReviewDetailDeck.KOMDeckFrontSpeechIsEnabled;
    			// }
    			// if (!KOMReviewDetailDeck.KOMDeckRearLanguageCode && KOMReviewDetailDeck.KOMDeckRearSpeechIsEnabled) {
    			// 	KOMReviewDetailDeck.KOMDeckRearSpeechIsEnabled = false;
    			// 	delete KOMReviewDetailDeck.KOMDeckRearSpeechIsEnabled;
    			// }
    			setTimeout(function () {
    				KOMReviewDetailDispatchUpdate(KOMReviewDetailDeck);

    				setTimeout(
    					function () {
    						KOMReviewDetailDispatchRecount();
    					},
    					100
    				);
    			});
    		},
    		InterfaceReviewingButtonDidClick() {
    			mod.ContolPlay(mod$7.KOMReviewSchemeReviewing());
    		},
    		InterfaceUnseenButtonDidClick() {
    			mod.ContolPlay(mod$7.KOMReviewSchemeUnseen());
    		},
    		InterfaceMixedButtonDidClick() {
    			mod.ContolPlay(mod$7.KOMReviewSchemeMixed());
    		},
    		InterfaceRenameButtonDidClick() {
    			mod.ControlRename();
    		},
    		InterfaceWindowDidKeydown(event) {
    			if (document.querySelector('.LCHLauncher')) {
    				// #spec
    				return;
    			}

    			const handlerFunctions = {
    				Escape() {
    					KOMReviewDetailDispatchBack();
    				}
    			};

    			handlerFunctions[event.key] && handlerFunctions[event.key]();
    		},
    		// CONTROL
    		ControlRename() {
    			let outputData = window.prompt(main_1('KOMReviewDetailRenameButtonPromptText'), KOMReviewDetailDeck.KOMDeckName);

    			if (!outputData) {
    				return;
    			}

    			if (outputData === KOMReviewDetailDeck.KOMDeckName) {
    				return;
    			}

    			KOMReviewDetailDispatchUpdate(Object.assign(KOMReviewDetailDeck, { KOMDeckName: outputData }));
    		},
    		ContolPlay(inputData) {
    			const outputData = { KOMReviewScheme: inputData };

    			if (inputData !== mod$7.KOMReviewSchemeReviewing()) {
    				outputData.KOMReviewMaxUnseenCards = kMaxUnseenCards;
    			}

    			KOMReviewDetailDispatchPlay(outputData);
    		},
    		// MESSAGES
    		_OLSKAppToolbarDispatchLauncher() {
    			window.Launchlet.LCHSingletonCreate({
    				LCHOptionRecipes: mod.DataReviewDetailRecipes()
    			});
    		},
    		// SETUP
    		SetupEverything() {
    			mod.SetupLanguages();
    		},
    		SetupLanguages() {
    			if (!('speechSynthesis' in window)) {
    				return;
    			}

    			mod.ValueLanguages(speechSynthesis.getVoices());

    			if (mod._ValueLanguages.length) {
    				return;
    			}

    			// dom events - Getting the list of voices in speechSynthesis (Web Speech API) - Stack Overflow https://stackoverflow.com/questions/21513706/getting-the-list-of-voices-in-speechsynthesis-web-speech-api
    			window.speechSynthesis.onvoiceschanged = function () {
    				mod.ValueLanguages(window.speechSynthesis.getVoices());
    			};
    		},
    		// LIFECYCLE
    		LifecycleModuleDidLoad() {
    			mod.SetupEverything();
    		}
    	};

    	mod.LifecycleModuleDidLoad();

    	$$self.$$.on_mount.push(function () {
    		if (KOMReviewDetailDeck === undefined && !('KOMReviewDetailDeck' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewDetailDeck']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailDeck'");
    		}

    		if (KOMReviewDetailDispatchBack === undefined && !('KOMReviewDetailDispatchBack' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewDetailDispatchBack']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailDispatchBack'");
    		}

    		if (KOMReviewDetailDispatchBrowse === undefined && !('KOMReviewDetailDispatchBrowse' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewDetailDispatchBrowse']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailDispatchBrowse'");
    		}

    		if (KOMReviewDetailDispatchUpdate === undefined && !('KOMReviewDetailDispatchUpdate' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewDetailDispatchUpdate']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailDispatchUpdate'");
    		}

    		if (KOMReviewDetailDispatchRecount === undefined && !('KOMReviewDetailDispatchRecount' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewDetailDispatchRecount']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailDispatchRecount'");
    		}

    		if (KOMReviewDetailDispatchPlay === undefined && !('KOMReviewDetailDispatchPlay' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewDetailDispatchPlay']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailDispatchPlay'");
    		}

    		if (KOMReviewDetailDispatchDiscard === undefined && !('KOMReviewDetailDispatchDiscard' in $$props || $$self.$$.bound[$$self.$$.props['KOMReviewDetailDispatchDiscard']])) {
    			console.warn("<Main> was created without expected prop 'KOMReviewDetailDispatchDiscard'");
    		}
    	});

    	const writable_props = [
    		'KOMReviewDetailDeck',
    		'KOMReviewDetailDispatchBack',
    		'KOMReviewDetailDispatchBrowse',
    		'KOMReviewDetailDispatchUpdate',
    		'KOMReviewDetailDispatchRecount',
    		'KOMReviewDetailDispatchPlay',
    		'KOMReviewDetailDispatchDiscard',
    		'KOMReviewDetail_DebugShowLauncherButton'
    	];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function input0_change_handler() {
    		KOMReviewDetailDeck.KOMDeckAudioIsEnabled = this.checked;
    		$$invalidate(0, KOMReviewDetailDeck);
    	}

    	function input1_change_handler() {
    		KOMReviewDetailDeck.KOMDeckFrontSpeechIsEnabled = this.checked;
    		$$invalidate(0, KOMReviewDetailDeck);
    	}

    	function input2_change_handler() {
    		KOMReviewDetailDeck.KOMDeckRearSpeechIsEnabled = this.checked;
    		$$invalidate(0, KOMReviewDetailDeck);
    	}

    	function input3_change_handler() {
    		KOMReviewDetailDeck.KOMDeckIsForwardOnly = this.checked;
    		$$invalidate(0, KOMReviewDetailDeck);
    	}

    	function input4_change_handler() {
    		KOMReviewDetailDeck.KOMDeckPairingIsEnabled = this.checked;
    		$$invalidate(0, KOMReviewDetailDeck);
    	}

    	function select_change_handler() {
    		KOMReviewDetailDeck.KOMDeckRetireCardsMonths = select_value(this);
    		$$invalidate(0, KOMReviewDetailDeck);
    	}

    	const click_handler = () => window.prompt(main_1('KOMReviewDetailDiscardPromptText')) === KOMReviewDetailDeck.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingTotal.toString() && KOMReviewDetailDispatchDiscard(KOMReviewDetailDeck);

    	$$self.$$set = $$props => {
    		if ('KOMReviewDetailDeck' in $$props) $$invalidate(0, KOMReviewDetailDeck = $$props.KOMReviewDetailDeck);
    		if ('KOMReviewDetailDispatchBack' in $$props) $$invalidate(1, KOMReviewDetailDispatchBack = $$props.KOMReviewDetailDispatchBack);
    		if ('KOMReviewDetailDispatchBrowse' in $$props) $$invalidate(2, KOMReviewDetailDispatchBrowse = $$props.KOMReviewDetailDispatchBrowse);
    		if ('KOMReviewDetailDispatchUpdate' in $$props) $$invalidate(6, KOMReviewDetailDispatchUpdate = $$props.KOMReviewDetailDispatchUpdate);
    		if ('KOMReviewDetailDispatchRecount' in $$props) $$invalidate(7, KOMReviewDetailDispatchRecount = $$props.KOMReviewDetailDispatchRecount);
    		if ('KOMReviewDetailDispatchPlay' in $$props) $$invalidate(8, KOMReviewDetailDispatchPlay = $$props.KOMReviewDetailDispatchPlay);
    		if ('KOMReviewDetailDispatchDiscard' in $$props) $$invalidate(3, KOMReviewDetailDispatchDiscard = $$props.KOMReviewDetailDispatchDiscard);
    		if ('KOMReviewDetail_DebugShowLauncherButton' in $$props) $$invalidate(4, KOMReviewDetail_DebugShowLauncherButton = $$props.KOMReviewDetail_DebugShowLauncherButton);
    	};

    	$$self.$capture_state = () => ({
    		KOMReviewDetailDeck,
    		KOMReviewDetailDispatchBack,
    		KOMReviewDetailDispatchBrowse,
    		KOMReviewDetailDispatchUpdate,
    		KOMReviewDetailDispatchRecount,
    		KOMReviewDetailDispatchPlay,
    		KOMReviewDetailDispatchDiscard,
    		KOMReviewDetail_DebugShowLauncherButton,
    		modPublic,
    		OLSKLocalized: main_1,
    		OLSK_SPEC_UI: main_1$2,
    		KOMReviewLogic: mod$7,
    		kMaxUnseenCards,
    		mod,
    		_OLSKSharedBack,
    		KOMReviewDetailLanguageCode: Main$9,
    		KOMReviewStats: Main$7
    	});

    	$$self.$inject_state = $$props => {
    		if ('KOMReviewDetailDeck' in $$props) $$invalidate(0, KOMReviewDetailDeck = $$props.KOMReviewDetailDeck);
    		if ('KOMReviewDetailDispatchBack' in $$props) $$invalidate(1, KOMReviewDetailDispatchBack = $$props.KOMReviewDetailDispatchBack);
    		if ('KOMReviewDetailDispatchBrowse' in $$props) $$invalidate(2, KOMReviewDetailDispatchBrowse = $$props.KOMReviewDetailDispatchBrowse);
    		if ('KOMReviewDetailDispatchUpdate' in $$props) $$invalidate(6, KOMReviewDetailDispatchUpdate = $$props.KOMReviewDetailDispatchUpdate);
    		if ('KOMReviewDetailDispatchRecount' in $$props) $$invalidate(7, KOMReviewDetailDispatchRecount = $$props.KOMReviewDetailDispatchRecount);
    		if ('KOMReviewDetailDispatchPlay' in $$props) $$invalidate(8, KOMReviewDetailDispatchPlay = $$props.KOMReviewDetailDispatchPlay);
    		if ('KOMReviewDetailDispatchDiscard' in $$props) $$invalidate(3, KOMReviewDetailDispatchDiscard = $$props.KOMReviewDetailDispatchDiscard);
    		if ('KOMReviewDetail_DebugShowLauncherButton' in $$props) $$invalidate(4, KOMReviewDetail_DebugShowLauncherButton = $$props.KOMReviewDetail_DebugShowLauncherButton);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMReviewDetailDeck,
    		KOMReviewDetailDispatchBack,
    		KOMReviewDetailDispatchBrowse,
    		KOMReviewDetailDispatchDiscard,
    		KOMReviewDetail_DebugShowLauncherButton,
    		mod,
    		KOMReviewDetailDispatchUpdate,
    		KOMReviewDetailDispatchRecount,
    		KOMReviewDetailDispatchPlay,
    		modPublic,
    		input0_change_handler,
    		input1_change_handler,
    		input2_change_handler,
    		input3_change_handler,
    		input4_change_handler,
    		select_change_handler,
    		click_handler
    	];
    }

    class Main$a extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
    			KOMReviewDetailDeck: 0,
    			KOMReviewDetailDispatchBack: 1,
    			KOMReviewDetailDispatchBrowse: 2,
    			KOMReviewDetailDispatchUpdate: 6,
    			KOMReviewDetailDispatchRecount: 7,
    			KOMReviewDetailDispatchPlay: 8,
    			KOMReviewDetailDispatchDiscard: 3,
    			KOMReviewDetail_DebugShowLauncherButton: 4,
    			modPublic: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get KOMReviewDetailDeck() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailDeck(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailDispatchBack() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailDispatchBack(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailDispatchBrowse() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailDispatchBrowse(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailDispatchUpdate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailDispatchUpdate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailDispatchRecount() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailDispatchRecount(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailDispatchPlay() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailDispatchPlay(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetailDispatchDiscard() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetailDispatchDiscard(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMReviewDetail_DebugShowLauncherButton() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMReviewDetail_DebugShowLauncherButton(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[9];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var _OLSKInputClear = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKInputClear\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <circle id=\"_OLSKInputClear-oval2\" stroke=\"rgb(170, 170, 170)\" stroke-width=\"1.5\" fill=\"rgb(170, 170, 170)\" cx=\"8\" cy=\"8\" r=\"5.5\" />\n    <path id=\"_OLSKInputClear-bezier\" stroke=\"rgb(255, 255, 255)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 6,6 L 10,10\" />\n    <path id=\"_OLSKInputClear-bezier2\" stroke=\"rgb(255, 255, 255)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 6,10 L 10,6\" />\n</svg>\n";

    /* node_modules/OLSKInputWrapper/main.svelte generated by Svelte v3.59.2 */
    const file$b = "node_modules/OLSKInputWrapper/main.svelte";

    // (14:0) {#if OLSKInputWrapperValue}
    function create_if_block$4(ctx) {
    	let button;
    	let div;
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKInputWrapperClearButtonImage");
    			add_location(div, file$b, 15, 2, 565);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "OLSKInputWrapperClearButton OLSKDecorTappable OLSKDecorButtonNoStyle OLSKToolbarButton svelte-1clh3fc");
    			attr_dev(button, "title", button_title_value = main_1('OLSKInputWrapperClearButtonText'));
    			add_location(button, file$b, 14, 1, 292);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = _OLSKInputClear;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button, "mousedown", mousedown_handler, false, false, false, false),
    					listen_dev(
    						button,
    						"click",
    						function () {
    							if (is_function(/*OLSKInputWrapperDispatchClear*/ ctx[1])) /*OLSKInputWrapperDispatchClear*/ ctx[1].apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(14:0) {#if OLSKInputWrapperValue}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let div;
    	let t;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
    	let if_block = /*OLSKInputWrapperValue*/ ctx[0] && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "OLSKInputWrapper svelte-1clh3fc");
    			add_location(div, file$b, 9, 0, 216);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			append_dev(div, t);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*OLSKInputWrapperValue*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$4(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const mousedown_handler = event => event.preventDefault();

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, ['default']);
    	let { OLSKInputWrapperValue } = $$props;
    	let { OLSKInputWrapperDispatchClear } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (OLSKInputWrapperValue === undefined && !('OLSKInputWrapperValue' in $$props || $$self.$$.bound[$$self.$$.props['OLSKInputWrapperValue']])) {
    			console.warn("<Main> was created without expected prop 'OLSKInputWrapperValue'");
    		}

    		if (OLSKInputWrapperDispatchClear === undefined && !('OLSKInputWrapperDispatchClear' in $$props || $$self.$$.bound[$$self.$$.props['OLSKInputWrapperDispatchClear']])) {
    			console.warn("<Main> was created without expected prop 'OLSKInputWrapperDispatchClear'");
    		}
    	});

    	const writable_props = ['OLSKInputWrapperValue', 'OLSKInputWrapperDispatchClear'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('OLSKInputWrapperValue' in $$props) $$invalidate(0, OLSKInputWrapperValue = $$props.OLSKInputWrapperValue);
    		if ('OLSKInputWrapperDispatchClear' in $$props) $$invalidate(1, OLSKInputWrapperDispatchClear = $$props.OLSKInputWrapperDispatchClear);
    		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		OLSKInputWrapperValue,
    		OLSKInputWrapperDispatchClear,
    		OLSKLocalized: main_1,
    		_OLSKInputClear
    	});

    	$$self.$inject_state = $$props => {
    		if ('OLSKInputWrapperValue' in $$props) $$invalidate(0, OLSKInputWrapperValue = $$props.OLSKInputWrapperValue);
    		if ('OLSKInputWrapperDispatchClear' in $$props) $$invalidate(1, OLSKInputWrapperDispatchClear = $$props.OLSKInputWrapperDispatchClear);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [OLSKInputWrapperValue, OLSKInputWrapperDispatchClear, $$scope, slots];
    }

    class Main$b extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			OLSKInputWrapperValue: 0,
    			OLSKInputWrapperDispatchClear: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get OLSKInputWrapperValue() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKInputWrapperValue(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKInputWrapperDispatchClear() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKInputWrapperDispatchClear(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const main$e = {

    	OLSKCollectionAPI (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKCollectionSortFunction !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params._OLSKCollectionKeyFunction !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKCollectionItems !== 'undefined') {
    			if (!Array.isArray(params.OLSKCollectionItems)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}
    		} else {
    			params.OLSKCollectionItems = [];
    		}

    		if (typeof params.OLSKCollectionDispatchChange !== 'undefined') {
    			if (typeof params.OLSKCollectionDispatchChange !== 'function') {
    				throw new Error('OLSKErrorInputNotValid');
    			}
    		}

    		const mod = {

    			ValueItemsAll (inputData) {
    				params.OLSKCollectionItems.splice(...[0, params.OLSKCollectionItems.length].concat(inputData));

    				params.OLSKCollectionDispatchChange && params.OLSKCollectionDispatchChange();
    			},

    		};

    		const api = {

    			// DATA
    		
    			OLSKCollectionDataItemsAll() {
    				return params.OLSKCollectionItems.slice();
    			},

    			// CONTROL

    			OLSKCollectionInsert (inputData) {
    				mod.ValueItemsAll([inputData].concat(params.OLSKCollectionItems));

    				return inputData;
    			},

    			OLSKCollectionUpdate (inputData) {
    				mod.ValueItemsAll(params.OLSKCollectionItems.map(function (e) {
    					return params._OLSKCollectionKeyFunction(e) === params._OLSKCollectionKeyFunction(inputData) ? inputData : e;
    				}));

    				return inputData;
    			},
    			
    			OLSKCollectionRemove (inputData) {
    				mod.ValueItemsAll(params.OLSKCollectionItems.filter(function (e) {
    					return params._OLSKCollectionKeyFunction(e) !== params._OLSKCollectionKeyFunction(inputData);
    				}));

    				return inputData;
    			},

    			OLSKCollectionSort () {
    				mod.ValueItemsAll(params.OLSKCollectionItems.sort(params.OLSKCollectionSortFunction));
    			},

    			_OLSKCollectionDebugReassign (inputData) {
    				params.OLSKCollectionItems = inputData;
    			},
    		
    		};
    		
    		return api;
    	},

    	OLSKCollectionConstrainIndex (param1, param2) {
    		if (!Array.isArray(param1)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (param2 < 0) {
    			return param1.length - 1;
    		}

    		if (param2 >= param1.length) {
    			return 0;
    		}

    		return param2;
    	},

    };

    var _OLSKSharedAndroidMore = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedAndroidMore\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <circle id=\"_OLSKSharedAndroidMore-oval\" stroke=\"none\" fill=\"rgb(0, 0, 0)\" cx=\"8\" cy=\"8\" r=\"1.5\" />\n    <circle id=\"_OLSKSharedAndroidMore-oval2\" stroke=\"none\" fill=\"rgb(0, 0, 0)\" cx=\"8\" cy=\"3.5\" r=\"1.5\" />\n    <circle id=\"_OLSKSharedAndroidMore-oval3\" stroke=\"none\" fill=\"rgb(0, 0, 0)\" cx=\"8\" cy=\"12.5\" r=\"1.5\" />\n</svg>\n";

    var _OLSKSharedApropos = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedApropos\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    \n    <text  fill=\"rgb(0, 0, 0)\" font-family=\"Georgia, Times, 'Times New Roman', serif\" font-size=\"17\" x=\"5.51\" y=\"-0\" text-anchor=\"middle\"><tspan x=\"8\" y=\"14\">i</tspan></text>\n</svg>\n";

    var _OLSKSharedArchive = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedArchive\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedArchive-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 2,14 L 14,14 14,5 2,5 2,14 Z M 2,14\" />\n    <path id=\"_OLSKSharedArchive-rectangle2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1,5 L 15,5 15,2 1,2 1,5 Z M 1,5\" />\n    <path id=\"_OLSKSharedArchive-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"rgb(255, 255, 255)\" d=\"M 5.38,8.95 L 10.62,8.95\" />\n</svg>\n";

    var _OLSKSharedBack$1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedBack\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedBack-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 11,1 L 4,8 11,15\" />\n</svg>\n";

    var _OLSKSharedClone = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedClone\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedClone-group2\" clip-path=\"url(#_OLSKSharedClone-clip)\">\n        <clipPath id=\"_OLSKSharedClone-clip\">\n            <path d=\"M 12,0.44 C 12.51,0.61 12.87,0.95 13.04,1.41 13.06,1.47 13.06,1.47 13.07,1.51 13.14,1.78 13.15,1.95 13.15,2.53 13.15,2.72 13.15,2.72 13.15,3.5 L 13.15,4.15 12.5,4.15 5.03,4.15 C 4.57,4.15 4.47,4.16 4.35,4.19 4.34,4.19 4.34,4.19 4.33,4.19 4.28,4.21 4.21,4.28 4.19,4.35 4.19,4.34 4.19,4.34 4.19,4.35 4.16,4.47 4.15,4.57 4.15,5.03 4.15,6.08 4.15,6.08 4.15,9.25 4.15,11.08 4.15,11.08 4.15,12.5 L 4.15,13.15 3.5,13.15 2.53,13.15 C 1.9,13.15 1.73,13.14 1.47,13.05 0.98,12.88 0.63,12.54 0.46,12.09 0.36,11.77 0.35,11.59 0.35,10.97 L 0.35,2.53 0.35,2.53 C 0.35,1.9 0.36,1.73 0.45,1.47 0.62,0.98 0.96,0.63 1.41,0.46 1.73,0.36 1.91,0.35 2.52,0.35 L 10.97,0.35 10.97,0.35 C 11.6,0.35 12,0.44 12,0.44 Z M 12,0.44\" />\n        </clipPath>\n        <rect id=\"_OLSKSharedClone-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" x=\"1\" y=\"1\" width=\"11.5\" height=\"11.5\" rx=\"1\" />\n    </g>\n    <rect id=\"_OLSKSharedClone-rectangle2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" x=\"3.5\" y=\"3.5\" width=\"11.5\" height=\"11.5\" rx=\"1\" />\n    <g id=\"_OLSKSharedClone-group\">\n        <path id=\"_OLSKSharedClone-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 9.5,6.5 L 9.5,12.5\" />\n        <path id=\"_OLSKSharedClone-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 6.5,9.5 L 12.5,9.5\" />\n    </g>\n</svg>\n";

    var _OLSKSharedCloud = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedCloud\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedCloud-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 9.44,3.25 C 8.04,3.25 7.01,4.06 6.52,5.03 L 6.53,5.03 C 6.44,5.21 6.22,5.28 6.05,5.19 5.44,4.89 4.72,4.92 4.15,5.26 3.58,5.61 3.15,6.24 3.15,7.21 L 3.15,7.21 C 3.15,7.38 3.03,7.53 2.86,7.56 1.78,7.75 1,8.83 1,9.91 1,11.21 2.02,12.25 3.69,12.25 L 12.49,12.25 C 13.88,12.25 15,11.13 15,9.73 15,8.5 14.13,7.48 12.98,7.25 L 12.97,7.25 C 12.79,7.21 12.66,7.04 12.68,6.86 12.86,5.08 11.46,3.25 9.44,3.25 Z M 9.44,3.25\" />\n</svg>\n";

    var _OLSKSharedCloudError = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedCloudError\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedCloudError-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 11.31,12 L 12.49,12 C 13.88,12 15,10.88 15,9.48 15,8.25 14.13,7.23 12.98,7 L 12.97,7 C 12.79,6.96 12.66,6.79 12.68,6.61 12.86,4.83 11.46,3 9.44,3 8.04,3 7.01,3.81 6.52,4.78 L 6.53,4.78 C 6.44,4.96 6.22,5.03 6.05,4.94 5.44,4.64 4.72,4.67 4.15,5.01 3.58,5.36 3.15,5.99 3.15,6.96 L 3.15,6.96 C 3.15,7.13 3.03,7.28 2.86,7.31 1.78,7.5 1,8.58 1,9.66 1,10.96 2.02,12 3.69,12 L 4.86,12\" />\n    <g id=\"_OLSKSharedCloudError-group\">\n    </g>\n    <path id=\"_OLSKSharedCloudError-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,8 L 8,11\" />\n    <path id=\"_OLSKSharedCloudError-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,13.5 L 8,13.5\" />\n</svg>\n";

    var _OLSKSharedCloudOffline = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedCloudOffline\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedCloudOffline-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 11.81,12 L 12.49,12 C 13.88,12 15,10.88 15,9.48 15,8.25 14.13,7.23 12.98,7 L 12.97,7 C 12.79,6.96 12.66,6.79 12.68,6.61 12.86,4.83 11.46,3 9.44,3 8.04,3 7.01,3.81 6.52,4.78 L 6.53,4.78 C 6.44,4.96 6.22,5.03 6.05,4.94 5.44,4.64 4.72,4.67 4.15,5.01 3.58,5.36 3.15,5.99 3.15,6.96 L 3.15,6.96 C 3.15,7.13 3.03,7.28 2.86,7.31 1.78,7.5 1,8.58 1,9.66 1,10.96 2.02,12 3.69,12 L 4.86,12\" />\n    <g id=\"_OLSKSharedCloudOffline-group\" transform=\"translate(8.3, 12.11) rotate(90)\" >\n        <path id=\"_OLSKSharedCloudOffline-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1.68,-1.68 L -1.68,1.68\" />\n        <path id=\"_OLSKSharedCloudOffline-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 3.35,-0 L 0,3.35\" transform=\"translate(-1.68, 1.68) rotate(-90)\"  />\n    </g>\n</svg>\n";

    var _OLSKSharedCreate = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedCreate\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedCreate-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,1 L 8,15\" />\n    <path id=\"_OLSKSharedCreate-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1,8 L 15,8\" />\n</svg>\n";

    var _OLSKSharedDiscard = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedDiscard\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedDiscard-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" d=\"M 4.53,6 L 13,6 13,13.47 C 13,13.91 13,14.13 12.93,14.33 L 12.93,14.37 C 12.83,14.63 12.63,14.83 12.37,14.93 12.13,15 11.91,15 11.47,15 L 4.53,15 C 4.09,15 3.87,15 3.67,14.93 L 3.63,14.93 C 3.37,14.83 3.17,14.63 3.07,14.37 3,14.13 3,13.91 3,13.47 L 3,6 Z M 4.53,6\" />\n    <path id=\"_OLSKSharedDiscard-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1,3.5 L 15,3.5\" />\n    <path id=\"_OLSKSharedDiscard-rectangle2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" d=\"M 8,1 L 8,1 C 9.75,1 9.75,1 9.75,1 L 9.75,1 C 10.44,1 11,1.56 11,2.25 11,2.25 11,2.25 11,2.25 11,2.25 11,2.25 11,2.25 L 11,2.25 C 11,2.25 11,2.25 11,2.25 L 11,3.5 5,3.5 5,2.25 C 5,1.56 5.56,1 6.25,1 6.25,1 6.25,1 6.25,1 L 8,1 Z M 8,1\" />\n    <path id=\"_OLSKSharedDiscard-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 5.5,5.5 L 5.5,15\" />\n    <path id=\"_OLSKSharedDiscard-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,6 L 8,15\" />\n    <path id=\"_OLSKSharedDiscard-bezier4\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 10.5,5.5 L 10.5,15\" />\n</svg>\n";

    var _OLSKSharedDismiss = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedDismiss\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedDismiss-group\" transform=\"translate(8, 8) rotate(-45)\" >\n        <path id=\"_OLSKSharedDismiss-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 0,-7 L 0,7\" />\n        <path id=\"_OLSKSharedDismiss-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M -7,0 L 7,0\" />\n    </g>\n</svg>\n";

    var _OLSKSharedEdit = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedEdit\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedEdit-group\">\n        <path id=\"_OLSKSharedEdit-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 13.12,10.17 L 13.12,12.43 C 13.12,13.05 13.12,13.37 13.03,13.65 L 13.01,13.7 C 12.88,14.07 12.58,14.36 12.2,14.49 11.86,14.6 11.54,14.6 10.9,14.6 L 3.72,14.6 C 3.08,14.6 2.76,14.6 2.47,14.5 L 2.42,14.49 C 2.04,14.36 1.75,14.07 1.61,13.7 1.5,13.37 1.5,13.05 1.5,12.43 L 1.5,5.42 C 1.5,4.79 1.5,4.48 1.6,4.2 L 1.61,4.14 C 1.75,3.78 2.04,3.49 2.42,3.35 2.76,3.25 3.08,3.25 3.72,3.25 L 8.01,3.25\" />\n        <path id=\"_OLSKSharedEdit-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1.09,-8.67 C 1.13,-8.55 1.13,-8.43 1.13,-8.21 L 1.58,0.46 C 1.58,0.53 1.58,0.61 1.58,0.73 1.58,1.5 0.89,2.54 0.21,2.54 -0.48,2.54 -1.16,1.5 -1.16,0.73 -1.16,0.63 -1.16,0.46 -1.16,0.46 L -1.61,-8.21 C -1.61,-8.43 -1.61,-8.55 -1.58,-8.65 -1.52,-8.81 -1.41,-8.91 -1.27,-8.96 -1.14,-9 0.29,-9 0.29,-9 0.53,-9 0.65,-9 0.76,-8.97 0.76,-8.97 1.04,-8.81 1.09,-8.67 Z M 1.09,-8.67\" transform=\"translate(7.76, 8.79) rotate(45)\"  />\n    </g>\n</svg>\n";

    var _OLSKSharediOSA2HS = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharediOSA2HS\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <rect id=\"_OLSKSharediOSA2HS-rectangle2\" stroke=\"rgb(0, 0, 0)\" fill=\"rgb(255, 255, 255)\" x=\"1\" y=\"1\" width=\"14\" height=\"14\" rx=\"1\" />\n    <g id=\"_OLSKSharediOSA2HS-group\">\n        <path id=\"_OLSKSharediOSA2HS-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,5 L 8,11\" />\n        <path id=\"_OLSKSharediOSA2HS-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 5,8 L 11,8\" />\n    </g>\n</svg>\n";

    var _OLSKSharediOSShare = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharediOSShare\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharediOSShare-bezier6\" stroke=\"rgb(0, 0, 0)\" stroke-linecap=\"round\" stroke-miterlimit=\"4\" fill=\"none\" d=\"M 10.84,5.96 L 12.54,5.96 C 13.18,5.96 13.69,6.46 13.69,7.09 L 13.69,13.98 C 13.69,14.61 13.18,15.11 12.54,15.11 L 3.85,15.11 C 3.21,15.11 2.69,14.61 2.69,13.98 L 2.69,7.09 C 2.69,6.46 3.21,5.96 3.85,5.96 L 5.5,5.96\" />\n    <path id=\"_OLSKSharediOSShare-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 4.94,3.56 L 8.19,0.5 11.44,3.56\" />\n    <path id=\"_OLSKSharediOSShare-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8.19,9.91 L 8.19,1.5\" />\n</svg>\n";

    var _OLSKSharedIconPlaceholder = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100\" height=\"100\"  xml:space=\"preserve\" id=\"_OLSKSharedIconPlaceholder\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <rect id=\"_OLSKSharedIconPlaceholder-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"2\" stroke-dasharray=\"10,2\" stroke-dashoffset=\"0\" fill=\"none\" x=\"5\" y=\"5\" width=\"90\" height=\"90\" rx=\"20\" />\n</svg>\n";

    var _OLSKSharedLanguage = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedLanguage\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <circle id=\"_OLSKSharedLanguage-oval\" stroke=\"rgb(0, 0, 0)\" fill=\"none\" cx=\"8\" cy=\"8\" r=\"6\" />\n    <path id=\"_OLSKSharedLanguage-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 2,8 L 14,8\" />\n    <path id=\"_OLSKSharedLanguage-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,14 L 8,2\" />\n    <path id=\"_OLSKSharedLanguage-bezier4\" stroke=\"rgb(0, 0, 0)\" stroke-linejoin=\"bevel\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 12.24,3.75 C 11.15,4.83 9.65,5.5 8,5.5 6.35,5.5 4.85,4.83 3.76,3.75 4.09,3.42 4.46,3.13 4.86,2.89 5.77,2.32 6.85,2 8,2 9.65,2 11.15,2.67 12.24,3.75 Z M 12.24,3.75\" />\n    <path id=\"_OLSKSharedLanguage-bezier5\" stroke=\"rgb(0, 0, 0)\" stroke-linejoin=\"bevel\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 12.24,12.25 C 11.15,13.33 9.65,14 8,14 6.35,14 4.85,13.33 3.76,12.25 4.09,11.92 4.46,11.63 4.86,11.39 5.77,10.82 6.85,10.5 8,10.5 9.65,10.5 11.15,11.17 12.24,12.25 Z M 12.24,12.25\" />\n    <ellipse id=\"_OLSKSharedLanguage-oval4\" stroke=\"rgb(0, 0, 0)\" fill=\"none\" cx=\"8\" cy=\"8\" rx=\"3\" ry=\"5.75\" />\n</svg>\n";

    var _OLSKSharedLauncher = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedLauncher\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedLauncher-group\" transform=\"scale(1.07, 1.07)\" >\n        <path id=\"_OLSKSharedLauncher-prompt\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8.25,2.5 L 13.25,7.5 8.25,12.5\" />\n        <g id=\"_OLSKSharedLauncher-linesSolid\">\n            <path id=\"_OLSKSharedLauncher-bezier5\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 2,5.5 L 8,5.5\" />\n            <path id=\"_OLSKSharedLauncher-bezier6\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 4.5,7.5 L 10,7.5\" />\n            <path id=\"_OLSKSharedLauncher-bezier7\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 2.5,9.5 L 7.5,9.5\" />\n        </g>\n    </g>\n</svg>\n";

    var _OLSKSharedLock = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedLock\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedLock-group\">\n        <rect id=\"_OLSKSharedLock-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" fill=\"none\" x=\"2.76\" y=\"7.56\" width=\"10.51\" height=\"6.69\" rx=\"1\" />\n        <path id=\"_OLSKSharedLock-rectangle2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,1.72 L 8,1.72 8,1.72 8,1.72 C 9.94,1.72 11.5,3.38 11.5,5.44 L 11.5,5.44 11.5,5.44 11.5,5.7 11.5,7.56 4.5,7.56 4.5,5.7 C 4.5,5.44 4.5,5.44 4.5,5.44 L 4.5,5.44 C 4.5,3.38 6.07,1.72 8,1.72 L 8,1.72 8,1.72 Z M 8,1.72\" />\n    </g>\n</svg>\n";

    var _OLSKSharedReload = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedReload\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedReload-oval2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 13,9 C 13,11.76 10.76,14 8,14 5.24,14 3,11.76 3,9 3,6.24 5.24,4 8,4\" />\n    <path id=\"_OLSKSharedReload-bezier8\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"rgb(0, 0, 0)\" d=\"M 8,2 L 8,6 11,4 8,2\" />\n</svg>\n";

    var _OLSKSharedStash = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedStash\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedStash-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 5.79,8.03 L 12.79,8.03\" />\n    <path id=\"_OLSKSharedStash-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 5.79,11.53 L 12.79,11.53\" />\n    <path id=\"_OLSKSharedStash-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 5.79,4.53 L 12.79,4.53\" />\n    <path id=\"_OLSKSharedStash-bezier4\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 3.29,8.03 L 3.29,8.03\" />\n    <path id=\"_OLSKSharedStash-bezier5\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 3.29,11.53 L 3.29,11.53\" />\n    <path id=\"_OLSKSharedStash-bezier6\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 3.29,4.53 L 3.29,4.53\" />\n</svg>\n";

    var _OLSKSharedStashSelected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedStashSelected\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedStashSelected-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 2,9 L 6,13 13,5\" />\n</svg>\n";

    var _OLSKSharedStorageDisconnect = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedStorageDisconnect\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedStorageDisconnect-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 9.44,3.25 C 8.04,3.25 7.01,4.06 6.52,5.03 L 6.53,5.03 C 6.44,5.21 6.22,5.28 6.05,5.19 5.44,4.89 4.72,4.92 4.15,5.26 3.58,5.61 3.15,6.24 3.15,7.21 L 3.15,7.21 C 3.15,7.38 3.03,7.53 2.86,7.56 1.78,7.75 1,8.83 1,9.91 1,11.21 2.02,12.25 3.69,12.25 L 12.49,12.25 C 13.88,12.25 15,11.13 15,9.73 15,8.5 14.13,7.48 12.98,7.25 L 12.97,7.25 C 12.79,7.21 12.66,7.04 12.68,6.86 12.86,5.08 11.46,3.25 9.44,3.25 Z M 9.44,3.25\" />\n    <path id=\"_OLSKSharedStorageDisconnect-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 12,1.5 L 4.5,14.5\" />\n</svg>\n";

    var _OLSKSharedSyncStart = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedSyncStart\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedSyncStart-group\" transform=\"\" >\n        <path id=\"_OLSKSharedSyncStart-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 13,6.5 L 10.5,6.5\" />\n        <path id=\"_OLSKSharedSyncStart-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 13,6.5 L 14,4.5\" />\n        <path id=\"_OLSKSharedSyncStart-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 4.86,8.83 L 2.83,8.83\" />\n        <path id=\"_OLSKSharedSyncStart-bezier5\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1.83,10.83 L 2.83,8.83\" />\n        <path id=\"_OLSKSharedSyncStart-oval\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 12.85,9.21 C 12.31,11.39 10.34,13 8,13 5.66,13 3.69,11.39 3.15,9.21\" />\n        <path id=\"_OLSKSharedSyncStart-oval3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 3.25,6.42 C 3.91,4.43 5.79,3 8,3 10.14,3 11.97,4.35 12.68,6.24\" />\n    </g>\n</svg>\n";

    var _OLSKSharedSyncStop = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedSyncStop\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedSyncStop-group\" transform=\"\" >\n        <path id=\"_OLSKSharedSyncStop-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 13,6.5 L 10.5,6.5\" />\n        <path id=\"_OLSKSharedSyncStop-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 13,6.5 L 14,4.5\" />\n        <path id=\"_OLSKSharedSyncStop-bezier4\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 4.86,8.83 L 2.83,8.83\" />\n        <path id=\"_OLSKSharedSyncStop-bezier5\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1.83,10.83 L 2.83,8.83\" />\n        <path id=\"_OLSKSharedSyncStop-oval\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 12.85,9.21 C 12.31,11.39 10.34,13 8,13 5.66,13 3.69,11.39 3.15,9.21\" />\n        <path id=\"_OLSKSharedSyncStop-oval3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 3.25,6.42 C 3.91,4.43 5.79,3 8,3 10.14,3 11.97,4.35 12.68,6.24\" />\n    </g>\n    <path id=\"_OLSKSharedSyncStop-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 11.62,1.66 L 3.96,13.91\" />\n</svg>\n";

    var _OLSKSharedUnarchive = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedUnarchive\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedUnarchive-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 2,14 L 14,14 14,5 2,5 2,14 Z M 2,14\" />\n    <path id=\"_OLSKSharedUnarchive-rectangle2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1,5 L 15,5 15,2 1,2 1,5 Z M 1,5\" />\n    <path id=\"_OLSKSharedUnarchive-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"rgb(255, 255, 255)\" d=\"M 5.38,8.95 L 10.62,8.95\" />\n    <path id=\"_OLSKSharedUnarchive-bezier4\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1,15 L 15,1\" />\n</svg>\n";

    var OLSKUIAssets = {

    	_OLSKInputClear,
    	_OLSKSharedAndroidMore,
    	_OLSKSharedApropos,
    	_OLSKSharedArchive,
    	_OLSKSharedBack: _OLSKSharedBack$1,
    	_OLSKSharedClone,
    	_OLSKSharedCloud,
    	_OLSKSharedCloudError,
    	_OLSKSharedCloudOffline,
    	_OLSKSharedCreate,
    	_OLSKSharedDiscard,
    	_OLSKSharedDismiss,
    	_OLSKSharedEdit,
    	_OLSKSharediOSA2HS,
    	_OLSKSharediOSShare,
    	_OLSKSharedIconPlaceholder,
    	_OLSKSharedLanguage,
    	_OLSKSharedLauncher,
    	_OLSKSharedLock,
    	_OLSKSharedReload,
    	_OLSKSharedStash,
    	_OLSKSharedStashSelected,
    	_OLSKSharedStorageDisconnect,
    	_OLSKSharedSyncStart,
    	_OLSKSharedSyncStop,
    	_OLSKSharedUnarchive,

    };

    /* node_modules/OLSKCollection/main.svelte generated by Svelte v3.59.2 */

    const { Object: Object_1$3 } = globals;
    const file$c = "node_modules/OLSKCollection/main.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[19] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    const get_OLSKCollectionItem_slot_changes = dirty => ({
    	OLSKCollectionItem: dirty & /*mod, OLSKCollectionItems*/ 65
    });

    const get_OLSKCollectionItem_slot_context = ctx => ({ OLSKCollectionItem: /*item*/ ctx[22] });
    const get_OLSKCollectionEmpty_slot_changes = dirty => ({});
    const get_OLSKCollectionEmpty_slot_context = ctx => ({});

    // (153:0) {#if !OLSKCollectionItems.length }
    function create_if_block_2$1(ctx) {
    	let div;
    	let current;
    	const OLSKCollectionEmpty_slot_template = /*#slots*/ ctx[16].OLSKCollectionEmpty;
    	const OLSKCollectionEmpty_slot = create_slot(OLSKCollectionEmpty_slot_template, ctx, /*$$scope*/ ctx[15], get_OLSKCollectionEmpty_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (OLSKCollectionEmpty_slot) OLSKCollectionEmpty_slot.c();
    			attr_dev(div, "class", "OLSKCollectionEmpty");
    			attr_dev(div, "aria-hidden", "true");
    			add_location(div, file$c, 153, 1, 3755);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (OLSKCollectionEmpty_slot) {
    				OLSKCollectionEmpty_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKCollectionEmpty_slot) {
    				if (OLSKCollectionEmpty_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
    					update_slot_base(
    						OLSKCollectionEmpty_slot,
    						OLSKCollectionEmpty_slot_template,
    						ctx,
    						/*$$scope*/ ctx[15],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
    						: get_slot_changes(OLSKCollectionEmpty_slot_template, /*$$scope*/ ctx[15], dirty, get_OLSKCollectionEmpty_slot_changes),
    						get_OLSKCollectionEmpty_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKCollectionEmpty_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKCollectionEmpty_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (OLSKCollectionEmpty_slot) OLSKCollectionEmpty_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(153:0) {#if !OLSKCollectionItems.length }",
    		ctx
    	});

    	return block;
    }

    // (162:1) {#if key }
    function create_if_block_1$3(ctx) {
    	let div;
    	let t_value = /*key*/ ctx[19] + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "OLSKCollectionChunkHeading OLSKStickyHeader");
    			add_location(div, file$c, 162, 2, 3970);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mod*/ 64 && t_value !== (t_value = /*key*/ ctx[19] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(162:1) {#if key }",
    		ctx
    	});

    	return block;
    }

    // (169:4) {#if modPublic._OLSKCollectionStashEnabled }
    function create_if_block$5(ctx) {
    	let div1;
    	let div0;
    	let raw_value = OLSKUIAssets._OLSKSharedStashSelected + "";

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "class", "OLSKCollectionItemStashStatusImage svelte-foe401");
    			add_location(div0, file$c, 170, 6, 4707);
    			attr_dev(div1, "class", "OLSKCollectionItemStashStatus svelte-foe401");
    			add_location(div1, file$c, 169, 5, 4657);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			div0.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(169:4) {#if modPublic._OLSKCollectionStashEnabled }",
    		ctx
    	});

    	return block;
    }

    // (167:2) {#each (key ? mod._ValueItemsChunked[key] : OLSKCollectionItems) as item }
    function create_each_block_1(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let div_class_value;
    	let div_aria_label_value;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*modPublic*/ ctx[1]._OLSKCollectionStashEnabled && create_if_block$5(ctx);
    	const OLSKCollectionItem_slot_template = /*#slots*/ ctx[16].OLSKCollectionItem;
    	const OLSKCollectionItem_slot = create_slot(OLSKCollectionItem_slot_template, ctx, /*$$scope*/ ctx[15], get_OLSKCollectionItem_slot_context);

    	function click_handler() {
    		return /*click_handler*/ ctx[17](/*item*/ ctx[22]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			t0 = space();
    			if (OLSKCollectionItem_slot) OLSKCollectionItem_slot.c();
    			t1 = space();
    			attr_dev(div, "class", div_class_value = "OLSKCollectionItem " + /*OLSKCollectionItemClass*/ ctx[5] + " svelte-foe401");
    			attr_dev(div, "aria-label", div_aria_label_value = /*OLSKCollectionItemAccessibilitySummaryFunction*/ ctx[2](/*item*/ ctx[22]));
    			attr_dev(div, "role", "button");
    			toggle_class(div, "OLSKCollectionItemStash", /*modPublic*/ ctx[1]._OLSKCollectionStashItems.includes(/*item*/ ctx[22]));
    			toggle_class(div, "OLSKCollectionItemLocus", /*item*/ ctx[22] === /*OLSKCollectionItemsLocus*/ ctx[4]);
    			add_location(div, file$c, 167, 3, 4169);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t0);

    			if (OLSKCollectionItem_slot) {
    				OLSKCollectionItem_slot.m(div, null);
    			}

    			append_dev(div, t1);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*modPublic*/ ctx[1]._OLSKCollectionStashEnabled) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$5(ctx);
    					if_block.c();
    					if_block.m(div, t0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (OLSKCollectionItem_slot) {
    				if (OLSKCollectionItem_slot.p && (!current || dirty & /*$$scope, mod, OLSKCollectionItems*/ 32833)) {
    					update_slot_base(
    						OLSKCollectionItem_slot,
    						OLSKCollectionItem_slot_template,
    						ctx,
    						/*$$scope*/ ctx[15],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
    						: get_slot_changes(OLSKCollectionItem_slot_template, /*$$scope*/ ctx[15], dirty, get_OLSKCollectionItem_slot_changes),
    						get_OLSKCollectionItem_slot_context
    					);
    				}
    			}

    			if (!current || dirty & /*OLSKCollectionItemClass*/ 32 && div_class_value !== (div_class_value = "OLSKCollectionItem " + /*OLSKCollectionItemClass*/ ctx[5] + " svelte-foe401")) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*OLSKCollectionItemAccessibilitySummaryFunction, mod, OLSKCollectionItems*/ 69 && div_aria_label_value !== (div_aria_label_value = /*OLSKCollectionItemAccessibilitySummaryFunction*/ ctx[2](/*item*/ ctx[22]))) {
    				attr_dev(div, "aria-label", div_aria_label_value);
    			}

    			if (!current || dirty & /*OLSKCollectionItemClass, modPublic, mod, undefined, OLSKCollectionItems*/ 99) {
    				toggle_class(div, "OLSKCollectionItemStash", /*modPublic*/ ctx[1]._OLSKCollectionStashItems.includes(/*item*/ ctx[22]));
    			}

    			if (!current || dirty & /*OLSKCollectionItemClass, mod, undefined, OLSKCollectionItems, OLSKCollectionItemsLocus*/ 113) {
    				toggle_class(div, "OLSKCollectionItemLocus", /*item*/ ctx[22] === /*OLSKCollectionItemsLocus*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKCollectionItem_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKCollectionItem_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			if (OLSKCollectionItem_slot) OLSKCollectionItem_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(167:2) {#each (key ? mod._ValueItemsChunked[key] : OLSKCollectionItems) as item }",
    		ctx
    	});

    	return block;
    }

    // (159:0) {#each (mod._ValueItemsChunks || [undefined]) as key }
    function create_each_block$4(ctx) {
    	let div1;
    	let t0;
    	let div0;
    	let t1;
    	let current;
    	let if_block = /*key*/ ctx[19] && create_if_block_1$3(ctx);

    	let each_value_1 = /*key*/ ctx[19]
    	? /*mod*/ ctx[6]._ValueItemsChunked[/*key*/ ctx[19]]
    	: /*OLSKCollectionItems*/ ctx[0];

    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t0 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			attr_dev(div0, "class", "OLSKCollectionChunkItems");
    			add_location(div0, file$c, 165, 1, 4050);
    			attr_dev(div1, "class", "OLSKCollectionChunk");
    			add_location(div1, file$c, 160, 0, 3922);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div0, null);
    				}
    			}

    			append_dev(div1, t1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*key*/ ctx[19]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$3(ctx);
    					if_block.c();
    					if_block.m(div1, t0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*OLSKCollectionItemClass, OLSKCollectionItemAccessibilitySummaryFunction, mod, undefined, OLSKCollectionItems, modPublic, OLSKCollectionItemsLocus, OLSKCollectionDispatchClick, $$scope, OLSKUIAssets*/ 32895) {
    				each_value_1 = /*key*/ ctx[19]
    				? /*mod*/ ctx[6]._ValueItemsChunked[/*key*/ ctx[19]]
    				: /*OLSKCollectionItems*/ ctx[0];

    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(159:0) {#each (mod._ValueItemsChunks || [undefined]) as key }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[16].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);
    	let if_block = !/*OLSKCollectionItems*/ ctx[0].length && create_if_block_2$1(ctx);
    	let each_value = /*mod*/ ctx[6]._ValueItemsChunks || [undefined];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "OLSKCollection");
    			add_location(div, file$c, 148, 0, 3674);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			append_dev(div, t0);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div, null);
    				}
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					window,
    					"keydown",
    					function () {
    						if (is_function(/*mod*/ ctx[6].InterfaceWindowDidKeydown)) /*mod*/ ctx[6].InterfaceWindowDidKeydown.apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[15],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, null),
    						null
    					);
    				}
    			}

    			if (!/*OLSKCollectionItems*/ ctx[0].length) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*OLSKCollectionItems*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_2$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, t1);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*mod, undefined, OLSKCollectionItems, OLSKCollectionItemClass, OLSKCollectionItemAccessibilitySummaryFunction, modPublic, OLSKCollectionItemsLocus, OLSKCollectionDispatchClick, $$scope, OLSKUIAssets*/ 32895) {
    				each_value = /*mod*/ ctx[6]._ValueItemsChunks || [undefined];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			transition_in(if_block);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			transition_out(if_block);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, ['default','OLSKCollectionEmpty','OLSKCollectionItem']);
    	let { OLSKCollectionItemAccessibilitySummaryFunction } = $$props;
    	let { OLSKCollectionSortFunction } = $$props;
    	let { OLSKCollectionChunkFunction = null } = $$props;
    	let { OLSKCollectionChunkKeySortFunction = null } = $$props;
    	let { _OLSKCollectionDispatchKey } = $$props;
    	let { OLSKCollectionDispatchClick } = $$props;
    	let { OLSKCollectionDispatchArrow = null } = $$props;
    	let { OLSKCollectionDispatchStash = null } = $$props;
    	let { OLSKCollectionItems = [] } = $$props;
    	let { OLSKCollectionItemsLocus = null } = $$props;
    	let { OLSKCollectionItemClass = '' } = $$props;
    	let { OLSKCollectionEnableLooping = false } = $$props;
    	let { OLSKCollectionIgnoreKeyboard = false } = $$props;

    	const modPublic = Object.assign(
    		main$e.OLSKCollectionAPI({
    			OLSKCollectionItems,
    			_OLSKCollectionKeyFunction: _OLSKCollectionDispatchKey,
    			OLSKCollectionSortFunction,
    			OLSKCollectionDispatchChange() {
    				$$invalidate(0, OLSKCollectionItems);
    				_OLSKCollectionItemsDidChange(OLSKCollectionItems);
    			}
    		}),
    		{
    			_OLSKCollectionStashItems: [],
    			_OLSKCollectionStashEnabled: false,
    			OLSKCollectionStashEnabled(inputData) {
    				if (typeof inputData === 'undefined') {
    					return modPublic._OLSKCollectionStashEnabled;
    				}

    				$$invalidate(1, modPublic._OLSKCollectionStashItems = [], modPublic);
    				return $$invalidate(1, modPublic._OLSKCollectionStashEnabled = inputData, modPublic);
    			},
    			_OLSKCollectionStashToggle(inputData) {
    				$$invalidate(
    					1,
    					modPublic._OLSKCollectionStashItems = modPublic._OLSKCollectionStashItems.includes(inputData)
    					? modPublic._OLSKCollectionStashItems.filter(function (e) {
    							return e !== inputData;
    						})
    					: modPublic._OLSKCollectionStashItems.concat(inputData),
    					modPublic
    				);

    				OLSKCollectionDispatchStash && OLSKCollectionDispatchStash(modPublic._OLSKCollectionStashItems.slice());
    			}
    		}
    	);

    	const _OLSKCollectionItemsDidChange = function (inputData) {
    		modPublic._OLSKCollectionDebugReassign(inputData);

    		if (!OLSKCollectionChunkFunction) {
    			return;
    		}

    		const order = JSON.stringify(OLSKCollectionItems.map(_OLSKCollectionDispatchKey));

    		if (order === mod._ValueOrder) {
    			return;
    		}

    		$$invalidate(6, mod._ValueOrder = order, mod);
    		$$invalidate(6, mod._ValueItemsChunked = OLSKCollectionChunkFunction(OLSKCollectionItems), mod);

    		$$invalidate(
    			6,
    			mod._ValueItemsChunks = (function (inputData) {
    				return OLSKCollectionChunkKeySortFunction
    				? inputData.sort(OLSKCollectionChunkKeySortFunction)
    				: inputData;
    			})(Object.keys(mod._ValueItemsChunked)),
    			mod
    		);
    	};

    	const mod = {
    		// VALUE
    		_ValueOrder: '',
    		// INTERFACE
    		InterfaceWindowDidKeydown(event) {
    			if (!OLSKCollectionDispatchArrow) {
    				return;
    			}

    			if (OLSKCollectionIgnoreKeyboard) {
    				return;
    			}

    			if (!OLSKCollectionItems.length) {
    				return;
    			}

    			const handlerFunctions = {
    				ArrowUp() {
    					(function () {
    						if (!OLSKCollectionEnableLooping && OLSKCollectionItems[0] === OLSKCollectionItemsLocus) {
    							return;
    						}

    						mod.ControlArrowIncrement(-1);
    					})();

    					return event.preventDefault();
    				},
    				ArrowDown() {
    					(function () {
    						if (!OLSKCollectionEnableLooping && OLSKCollectionItems.slice(-1).pop() === OLSKCollectionItemsLocus) {
    							return;
    						}

    						mod.ControlArrowIncrement(1);
    					})();

    					return event.preventDefault();
    				}
    			};

    			handlerFunctions[event.code] && handlerFunctions[event.code]();
    		},
    		// CONTROL
    		ControlArrowIncrement(inputData) {
    			OLSKCollectionDispatchArrow(OLSKCollectionItems[main$e.OLSKCollectionConstrainIndex(OLSKCollectionItems, OLSKCollectionItems.indexOf(OLSKCollectionItemsLocus) + inputData)]);
    		}
    	};

    	$$self.$$.on_mount.push(function () {
    		if (OLSKCollectionItemAccessibilitySummaryFunction === undefined && !('OLSKCollectionItemAccessibilitySummaryFunction' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCollectionItemAccessibilitySummaryFunction']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionItemAccessibilitySummaryFunction'");
    		}

    		if (OLSKCollectionSortFunction === undefined && !('OLSKCollectionSortFunction' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCollectionSortFunction']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionSortFunction'");
    		}

    		if (_OLSKCollectionDispatchKey === undefined && !('_OLSKCollectionDispatchKey' in $$props || $$self.$$.bound[$$self.$$.props['_OLSKCollectionDispatchKey']])) {
    			console.warn("<Main> was created without expected prop '_OLSKCollectionDispatchKey'");
    		}

    		if (OLSKCollectionDispatchClick === undefined && !('OLSKCollectionDispatchClick' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCollectionDispatchClick']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionDispatchClick'");
    		}
    	});

    	const writable_props = [
    		'OLSKCollectionItemAccessibilitySummaryFunction',
    		'OLSKCollectionSortFunction',
    		'OLSKCollectionChunkFunction',
    		'OLSKCollectionChunkKeySortFunction',
    		'_OLSKCollectionDispatchKey',
    		'OLSKCollectionDispatchClick',
    		'OLSKCollectionDispatchArrow',
    		'OLSKCollectionDispatchStash',
    		'OLSKCollectionItems',
    		'OLSKCollectionItemsLocus',
    		'OLSKCollectionItemClass',
    		'OLSKCollectionEnableLooping',
    		'OLSKCollectionIgnoreKeyboard'
    	];

    	Object_1$3.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const click_handler = item => modPublic._OLSKCollectionStashEnabled
    	? modPublic._OLSKCollectionStashToggle(item)
    	: OLSKCollectionDispatchClick(item);

    	$$self.$$set = $$props => {
    		if ('OLSKCollectionItemAccessibilitySummaryFunction' in $$props) $$invalidate(2, OLSKCollectionItemAccessibilitySummaryFunction = $$props.OLSKCollectionItemAccessibilitySummaryFunction);
    		if ('OLSKCollectionSortFunction' in $$props) $$invalidate(7, OLSKCollectionSortFunction = $$props.OLSKCollectionSortFunction);
    		if ('OLSKCollectionChunkFunction' in $$props) $$invalidate(8, OLSKCollectionChunkFunction = $$props.OLSKCollectionChunkFunction);
    		if ('OLSKCollectionChunkKeySortFunction' in $$props) $$invalidate(9, OLSKCollectionChunkKeySortFunction = $$props.OLSKCollectionChunkKeySortFunction);
    		if ('_OLSKCollectionDispatchKey' in $$props) $$invalidate(10, _OLSKCollectionDispatchKey = $$props._OLSKCollectionDispatchKey);
    		if ('OLSKCollectionDispatchClick' in $$props) $$invalidate(3, OLSKCollectionDispatchClick = $$props.OLSKCollectionDispatchClick);
    		if ('OLSKCollectionDispatchArrow' in $$props) $$invalidate(11, OLSKCollectionDispatchArrow = $$props.OLSKCollectionDispatchArrow);
    		if ('OLSKCollectionDispatchStash' in $$props) $$invalidate(12, OLSKCollectionDispatchStash = $$props.OLSKCollectionDispatchStash);
    		if ('OLSKCollectionItems' in $$props) $$invalidate(0, OLSKCollectionItems = $$props.OLSKCollectionItems);
    		if ('OLSKCollectionItemsLocus' in $$props) $$invalidate(4, OLSKCollectionItemsLocus = $$props.OLSKCollectionItemsLocus);
    		if ('OLSKCollectionItemClass' in $$props) $$invalidate(5, OLSKCollectionItemClass = $$props.OLSKCollectionItemClass);
    		if ('OLSKCollectionEnableLooping' in $$props) $$invalidate(13, OLSKCollectionEnableLooping = $$props.OLSKCollectionEnableLooping);
    		if ('OLSKCollectionIgnoreKeyboard' in $$props) $$invalidate(14, OLSKCollectionIgnoreKeyboard = $$props.OLSKCollectionIgnoreKeyboard);
    		if ('$$scope' in $$props) $$invalidate(15, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		OLSKCollectionItemAccessibilitySummaryFunction,
    		OLSKCollectionSortFunction,
    		OLSKCollectionChunkFunction,
    		OLSKCollectionChunkKeySortFunction,
    		_OLSKCollectionDispatchKey,
    		OLSKCollectionDispatchClick,
    		OLSKCollectionDispatchArrow,
    		OLSKCollectionDispatchStash,
    		OLSKCollectionItems,
    		OLSKCollectionItemsLocus,
    		OLSKCollectionItemClass,
    		OLSKCollectionEnableLooping,
    		OLSKCollectionIgnoreKeyboard,
    		OLSK_SPEC_UI: main_1$2,
    		OLSKCollectionLogic: main$e,
    		modPublic,
    		_OLSKCollectionItemsDidChange,
    		mod,
    		OLSKUIAssets
    	});

    	$$self.$inject_state = $$props => {
    		if ('OLSKCollectionItemAccessibilitySummaryFunction' in $$props) $$invalidate(2, OLSKCollectionItemAccessibilitySummaryFunction = $$props.OLSKCollectionItemAccessibilitySummaryFunction);
    		if ('OLSKCollectionSortFunction' in $$props) $$invalidate(7, OLSKCollectionSortFunction = $$props.OLSKCollectionSortFunction);
    		if ('OLSKCollectionChunkFunction' in $$props) $$invalidate(8, OLSKCollectionChunkFunction = $$props.OLSKCollectionChunkFunction);
    		if ('OLSKCollectionChunkKeySortFunction' in $$props) $$invalidate(9, OLSKCollectionChunkKeySortFunction = $$props.OLSKCollectionChunkKeySortFunction);
    		if ('_OLSKCollectionDispatchKey' in $$props) $$invalidate(10, _OLSKCollectionDispatchKey = $$props._OLSKCollectionDispatchKey);
    		if ('OLSKCollectionDispatchClick' in $$props) $$invalidate(3, OLSKCollectionDispatchClick = $$props.OLSKCollectionDispatchClick);
    		if ('OLSKCollectionDispatchArrow' in $$props) $$invalidate(11, OLSKCollectionDispatchArrow = $$props.OLSKCollectionDispatchArrow);
    		if ('OLSKCollectionDispatchStash' in $$props) $$invalidate(12, OLSKCollectionDispatchStash = $$props.OLSKCollectionDispatchStash);
    		if ('OLSKCollectionItems' in $$props) $$invalidate(0, OLSKCollectionItems = $$props.OLSKCollectionItems);
    		if ('OLSKCollectionItemsLocus' in $$props) $$invalidate(4, OLSKCollectionItemsLocus = $$props.OLSKCollectionItemsLocus);
    		if ('OLSKCollectionItemClass' in $$props) $$invalidate(5, OLSKCollectionItemClass = $$props.OLSKCollectionItemClass);
    		if ('OLSKCollectionEnableLooping' in $$props) $$invalidate(13, OLSKCollectionEnableLooping = $$props.OLSKCollectionEnableLooping);
    		if ('OLSKCollectionIgnoreKeyboard' in $$props) $$invalidate(14, OLSKCollectionIgnoreKeyboard = $$props.OLSKCollectionIgnoreKeyboard);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*OLSKCollectionItems*/ 1) {
    			$: {
    				_OLSKCollectionItemsDidChange(OLSKCollectionItems);
    			}
    		}
    	};

    	return [
    		OLSKCollectionItems,
    		modPublic,
    		OLSKCollectionItemAccessibilitySummaryFunction,
    		OLSKCollectionDispatchClick,
    		OLSKCollectionItemsLocus,
    		OLSKCollectionItemClass,
    		mod,
    		OLSKCollectionSortFunction,
    		OLSKCollectionChunkFunction,
    		OLSKCollectionChunkKeySortFunction,
    		_OLSKCollectionDispatchKey,
    		OLSKCollectionDispatchArrow,
    		OLSKCollectionDispatchStash,
    		OLSKCollectionEnableLooping,
    		OLSKCollectionIgnoreKeyboard,
    		$$scope,
    		slots,
    		click_handler
    	];
    }

    class Main$c extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
    			OLSKCollectionItemAccessibilitySummaryFunction: 2,
    			OLSKCollectionSortFunction: 7,
    			OLSKCollectionChunkFunction: 8,
    			OLSKCollectionChunkKeySortFunction: 9,
    			_OLSKCollectionDispatchKey: 10,
    			OLSKCollectionDispatchClick: 3,
    			OLSKCollectionDispatchArrow: 11,
    			OLSKCollectionDispatchStash: 12,
    			OLSKCollectionItems: 0,
    			OLSKCollectionItemsLocus: 4,
    			OLSKCollectionItemClass: 5,
    			OLSKCollectionEnableLooping: 13,
    			OLSKCollectionIgnoreKeyboard: 14,
    			modPublic: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get OLSKCollectionItemAccessibilitySummaryFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItemAccessibilitySummaryFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionSortFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionSortFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionChunkFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionChunkFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionChunkKeySortFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionChunkKeySortFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get _OLSKCollectionDispatchKey() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set _OLSKCollectionDispatchKey(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchClick() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchClick(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchArrow() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchArrow(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchStash() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchStash(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionItems() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItems(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionItemsLocus() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItemsLocus(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionItemClass() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItemClass(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionEnableLooping() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionEnableLooping(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionIgnoreKeyboard() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionIgnoreKeyboard(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[1];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKNarrow/main.svelte generated by Svelte v3.59.2 */
    const file$d = "node_modules/OLSKNarrow/main.svelte";
    const get_OLSKNarrowBodyTail_slot_changes = dirty => ({});
    const get_OLSKNarrowBodyTail_slot_context = ctx => ({});

    const get_OLSKCollectionItem_slot_changes$1 = dirty => ({
    	OLSKCollectionItem: dirty & /*item*/ 268435456
    });

    const get_OLSKCollectionItem_slot_context$1 = ctx => ({ OLSKCollectionItem: /*item*/ ctx[28] });
    const get_OLSKCollectionEmpty_slot_changes$1 = dirty => ({});
    const get_OLSKCollectionEmpty_slot_context$1 = ctx => ({});
    const get_OLSKNarrowToolbarTail_slot_changes = dirty => ({});
    const get_OLSKNarrowToolbarTail_slot_context = ctx => ({});
    const get_OLSKNarrowToolbarHead_slot_changes = dirty => ({});
    const get_OLSKNarrowToolbarHead_slot_context = ctx => ({});

    // (132:1) {:else}
    function create_else_block(ctx) {
    	let input;
    	let input_class_value;
    	let input_placeholder_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "class", input_class_value = "OLSKNarrowFilterField " + /*OLSKNarrowFilterFieldClass*/ ctx[15] + " OLSKDecorInput");
    			attr_dev(input, "placeholder", input_placeholder_value = /*OLSKNarrowFilterFieldPlaceholderText*/ ctx[16] || main_1('OLSKNarrowFilterFieldText'));
    			input.autofocus = /*OLSKNarrowFilterFieldAutofocus*/ ctx[18];
    			add_location(input, file$d, 132, 2, 3665);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*OLSKNarrowFilterText*/ ctx[0]);
    			if (/*OLSKNarrowFilterFieldAutofocus*/ ctx[18]) input.focus();

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler_1*/ ctx[25]),
    					listen_dev(
    						input,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[19].InterfaceFilterFieldDidInput)) /*mod*/ ctx[19].InterfaceFilterFieldDidInput.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*OLSKNarrowFilterFieldClass*/ 32768 && input_class_value !== (input_class_value = "OLSKNarrowFilterField " + /*OLSKNarrowFilterFieldClass*/ ctx[15] + " OLSKDecorInput")) {
    				attr_dev(input, "class", input_class_value);
    			}

    			if (dirty & /*OLSKNarrowFilterFieldPlaceholderText*/ 65536 && input_placeholder_value !== (input_placeholder_value = /*OLSKNarrowFilterFieldPlaceholderText*/ ctx[16] || main_1('OLSKNarrowFilterFieldText'))) {
    				attr_dev(input, "placeholder", input_placeholder_value);
    			}

    			if (dirty & /*OLSKNarrowFilterFieldAutofocus*/ 262144) {
    				prop_dev(input, "autofocus", /*OLSKNarrowFilterFieldAutofocus*/ ctx[18]);
    			}

    			if (dirty & /*OLSKNarrowFilterText*/ 1 && input.value !== /*OLSKNarrowFilterText*/ ctx[0]) {
    				set_input_value(input, /*OLSKNarrowFilterText*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(132:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (126:1) {#if OLSKNarrowFilterFieldClearButton }
    function create_if_block_2$2(ctx) {
    	let form;
    	let olskinputwrapper;
    	let current;
    	let mounted;
    	let dispose;

    	olskinputwrapper = new Main$b({
    			props: {
    				OLSKInputWrapperValue: /*OLSKNarrowFilterFieldClearButton*/ ctx[17]
    				? /*OLSKNarrowFilterText*/ ctx[0]
    				: '',
    				OLSKInputWrapperDispatchClear: /*mod*/ ctx[19].OLSKInputWrapperDispatchClear,
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			form = element("form");
    			create_component(olskinputwrapper.$$.fragment);
    			attr_dev(form, "class", "OLSKNarrowForm OLSKToolbarFlexible");
    			add_location(form, file$d, 126, 1, 3040);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			mount_component(olskinputwrapper, form, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					form,
    					"submit",
    					function () {
    						if (is_function(/*mod*/ ctx[19].InterfaceFormDidSubmit)) /*mod*/ ctx[19].InterfaceFormDidSubmit.apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const olskinputwrapper_changes = {};

    			if (dirty & /*OLSKNarrowFilterFieldClearButton, OLSKNarrowFilterText*/ 131073) olskinputwrapper_changes.OLSKInputWrapperValue = /*OLSKNarrowFilterFieldClearButton*/ ctx[17]
    			? /*OLSKNarrowFilterText*/ ctx[0]
    			: '';

    			if (dirty & /*mod*/ 524288) olskinputwrapper_changes.OLSKInputWrapperDispatchClear = /*mod*/ ctx[19].OLSKInputWrapperDispatchClear;

    			if (dirty & /*$$scope, OLSKNarrowFilterFieldClass, OLSKNarrowFilterFieldPlaceholderText, OLSKNarrowFilterFieldAutofocus, OLSKNarrowFilterText, mod*/ 135102465) {
    				olskinputwrapper_changes.$$scope = { dirty, ctx };
    			}

    			olskinputwrapper.$set(olskinputwrapper_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskinputwrapper.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskinputwrapper.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			destroy_component(olskinputwrapper);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(126:1) {#if OLSKNarrowFilterFieldClearButton }",
    		ctx
    	});

    	return block;
    }

    // (128:2) <OLSKInputWrapper OLSKInputWrapperValue={ OLSKNarrowFilterFieldClearButton ? OLSKNarrowFilterText : '' } OLSKInputWrapperDispatchClear={ mod.OLSKInputWrapperDispatchClear } >
    function create_default_slot(ctx) {
    	let input;
    	let input_class_value;
    	let input_placeholder_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "class", input_class_value = "OLSKNarrowFilterField " + /*OLSKNarrowFilterFieldClass*/ ctx[15] + " OLSKDecorInput");
    			attr_dev(input, "placeholder", input_placeholder_value = /*OLSKNarrowFilterFieldPlaceholderText*/ ctx[16] || main_1('OLSKNarrowFilterFieldText'));
    			input.autofocus = /*OLSKNarrowFilterFieldAutofocus*/ ctx[18];
    			add_location(input, file$d, 128, 3, 3311);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*OLSKNarrowFilterText*/ ctx[0]);
    			if (/*OLSKNarrowFilterFieldAutofocus*/ ctx[18]) input.focus();

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[24]),
    					listen_dev(
    						input,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[19].InterfaceFilterFieldDidInput)) /*mod*/ ctx[19].InterfaceFilterFieldDidInput.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*OLSKNarrowFilterFieldClass*/ 32768 && input_class_value !== (input_class_value = "OLSKNarrowFilterField " + /*OLSKNarrowFilterFieldClass*/ ctx[15] + " OLSKDecorInput")) {
    				attr_dev(input, "class", input_class_value);
    			}

    			if (dirty & /*OLSKNarrowFilterFieldPlaceholderText*/ 65536 && input_placeholder_value !== (input_placeholder_value = /*OLSKNarrowFilterFieldPlaceholderText*/ ctx[16] || main_1('OLSKNarrowFilterFieldText'))) {
    				attr_dev(input, "placeholder", input_placeholder_value);
    			}

    			if (dirty & /*OLSKNarrowFilterFieldAutofocus*/ 262144) {
    				prop_dev(input, "autofocus", /*OLSKNarrowFilterFieldAutofocus*/ ctx[18]);
    			}

    			if (dirty & /*OLSKNarrowFilterText*/ 1 && input.value !== /*OLSKNarrowFilterText*/ ctx[0]) {
    				set_input_value(input, /*OLSKNarrowFilterText*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(128:2) <OLSKInputWrapper OLSKInputWrapperValue={ OLSKNarrowFilterFieldClearButton ? OLSKNarrowFilterText : '' } OLSKInputWrapperDispatchClear={ mod.OLSKInputWrapperDispatchClear } >",
    		ctx
    	});

    	return block;
    }

    // (164:3) {#if $$slots.OLSKCollectionItem}
    function create_if_block_1$4(ctx) {
    	let current;
    	const OLSKCollectionItem_slot_template = /*#slots*/ ctx[23].OLSKCollectionItem;
    	const OLSKCollectionItem_slot = create_slot(OLSKCollectionItem_slot_template, ctx, /*$$scope*/ ctx[27], get_OLSKCollectionItem_slot_context$1);

    	const block = {
    		c: function create() {
    			if (OLSKCollectionItem_slot) OLSKCollectionItem_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (OLSKCollectionItem_slot) {
    				OLSKCollectionItem_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKCollectionItem_slot) {
    				if (OLSKCollectionItem_slot.p && (!current || dirty & /*$$scope, item*/ 402653184)) {
    					update_slot_base(
    						OLSKCollectionItem_slot,
    						OLSKCollectionItem_slot_template,
    						ctx,
    						/*$$scope*/ ctx[27],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[27])
    						: get_slot_changes(OLSKCollectionItem_slot_template, /*$$scope*/ ctx[27], dirty, get_OLSKCollectionItem_slot_changes$1),
    						get_OLSKCollectionItem_slot_context$1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKCollectionItem_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKCollectionItem_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (OLSKCollectionItem_slot) OLSKCollectionItem_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(164:3) {#if $$slots.OLSKCollectionItem}",
    		ctx
    	});

    	return block;
    }

    // (163:2) 
    function create_OLSKCollectionItem_slot(ctx) {
    	let div;
    	let current;
    	let if_block = /*$$slots*/ ctx[20].OLSKCollectionItem && create_if_block_1$4(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "slot", "OLSKCollectionItem");
    			add_location(div, file$d, 162, 2, 4950);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[20].OLSKCollectionItem) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 1048576) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKCollectionItem_slot.name,
    		type: "slot",
    		source: "(163:2) ",
    		ctx
    	});

    	return block;
    }

    // (169:3) {#if $$slots.OLSKCollectionEmpty}
    function create_if_block$6(ctx) {
    	let current;
    	const OLSKCollectionEmpty_slot_template = /*#slots*/ ctx[23].OLSKCollectionEmpty;
    	const OLSKCollectionEmpty_slot = create_slot(OLSKCollectionEmpty_slot_template, ctx, /*$$scope*/ ctx[27], get_OLSKCollectionEmpty_slot_context$1);

    	const block = {
    		c: function create() {
    			if (OLSKCollectionEmpty_slot) OLSKCollectionEmpty_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (OLSKCollectionEmpty_slot) {
    				OLSKCollectionEmpty_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKCollectionEmpty_slot) {
    				if (OLSKCollectionEmpty_slot.p && (!current || dirty & /*$$scope*/ 134217728)) {
    					update_slot_base(
    						OLSKCollectionEmpty_slot,
    						OLSKCollectionEmpty_slot_template,
    						ctx,
    						/*$$scope*/ ctx[27],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[27])
    						: get_slot_changes(OLSKCollectionEmpty_slot_template, /*$$scope*/ ctx[27], dirty, get_OLSKCollectionEmpty_slot_changes$1),
    						get_OLSKCollectionEmpty_slot_context$1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKCollectionEmpty_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKCollectionEmpty_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (OLSKCollectionEmpty_slot) OLSKCollectionEmpty_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(169:3) {#if $$slots.OLSKCollectionEmpty}",
    		ctx
    	});

    	return block;
    }

    // (168:2) 
    function create_OLSKCollectionEmpty_slot(ctx) {
    	let div;
    	let current;
    	let if_block = /*$$slots*/ ctx[20].OLSKCollectionEmpty && create_if_block$6(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "slot", "OLSKCollectionEmpty");
    			add_location(div, file$d, 167, 2, 5111);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[20].OLSKCollectionEmpty) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 1048576) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$6(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKCollectionEmpty_slot.name,
    		type: "slot",
    		source: "(168:2) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let div;
    	let header;
    	let t0;
    	let current_block_type_index;
    	let if_block;
    	let t1;
    	let t2;
    	let section;
    	let t3;
    	let olskcollection;
    	let t4;
    	let div_class_value;
    	let div_aria_hidden_value;
    	let current;
    	const OLSKNarrowToolbarHead_slot_template = /*#slots*/ ctx[23].OLSKNarrowToolbarHead;
    	const OLSKNarrowToolbarHead_slot = create_slot(OLSKNarrowToolbarHead_slot_template, ctx, /*$$scope*/ ctx[27], get_OLSKNarrowToolbarHead_slot_context);
    	const if_block_creators = [create_if_block_2$2, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*OLSKNarrowFilterFieldClearButton*/ ctx[17]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	const OLSKNarrowToolbarTail_slot_template = /*#slots*/ ctx[23].OLSKNarrowToolbarTail;
    	const OLSKNarrowToolbarTail_slot = create_slot(OLSKNarrowToolbarTail_slot_template, ctx, /*$$scope*/ ctx[27], get_OLSKNarrowToolbarTail_slot_context);
    	const default_slot_template = /*#slots*/ ctx[23].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[27], null);

    	let olskcollection_props = {
    		OLSKCollectionItems: /*OLSKCollectionItems*/ ctx[7],
    		OLSKCollectionItemsLocus: /*OLSKCollectionItemsLocus*/ ctx[8],
    		OLSKCollectionIgnoreKeyboard: !/*mod*/ ctx[19].DataIsFocused(),
    		OLSKCollectionItemClass: /*OLSKCollectionItemClass*/ ctx[6],
    		OLSKCollectionSortFunction: /*OLSKCollectionSortFunction*/ ctx[2],
    		_OLSKCollectionDispatchKey: /*_OLSKCollectionDispatchKey*/ ctx[3],
    		OLSKCollectionChunkFunction: /*OLSKCollectionChunkFunction*/ ctx[4],
    		OLSKCollectionChunkKeySortFunction: /*OLSKCollectionChunkKeySortFunction*/ ctx[5],
    		OLSKCollectionItemAccessibilitySummaryFunction: /*OLSKCollectionItemAccessibilitySummaryFunction*/ ctx[9],
    		OLSKCollectionDispatchClick: /*OLSKCollectionDispatchClick*/ ctx[10],
    		OLSKCollectionDispatchArrow: /*OLSKCollectionDispatchArrow*/ ctx[11],
    		OLSKCollectionDispatchStash: /*OLSKCollectionDispatchStash*/ ctx[12],
    		$$slots: {
    			OLSKCollectionEmpty: [
    				create_OLSKCollectionEmpty_slot,
    				({ OLSKCollectionItem: item }) => ({ 28: item }),
    				({ OLSKCollectionItem: item }) => item ? 268435456 : 0
    			],
    			OLSKCollectionItem: [
    				create_OLSKCollectionItem_slot,
    				({ OLSKCollectionItem: item }) => ({ 28: item }),
    				({ OLSKCollectionItem: item }) => item ? 268435456 : 0
    			]
    		},
    		$$scope: { ctx }
    	};

    	olskcollection = new Main$c({
    			props: olskcollection_props,
    			$$inline: true
    		});

    	/*olskcollection_binding*/ ctx[26](olskcollection);
    	const OLSKNarrowBodyTail_slot_template = /*#slots*/ ctx[23].OLSKNarrowBodyTail;
    	const OLSKNarrowBodyTail_slot = create_slot(OLSKNarrowBodyTail_slot_template, ctx, /*$$scope*/ ctx[27], get_OLSKNarrowBodyTail_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			header = element("header");
    			if (OLSKNarrowToolbarHead_slot) OLSKNarrowToolbarHead_slot.c();
    			t0 = space();
    			if_block.c();
    			t1 = space();
    			if (OLSKNarrowToolbarTail_slot) OLSKNarrowToolbarTail_slot.c();
    			t2 = space();
    			section = element("section");
    			if (default_slot) default_slot.c();
    			t3 = space();
    			create_component(olskcollection.$$.fragment);
    			t4 = space();
    			if (OLSKNarrowBodyTail_slot) OLSKNarrowBodyTail_slot.c();
    			attr_dev(header, "class", "OLSKNarrowToolbar OLSKMobileViewHeader OLSKToolbar OLSKCommonEdgeBottom");
    			add_location(header, file$d, 122, 0, 2863);
    			attr_dev(section, "class", "OLSKNarrowBody");
    			add_location(section, file$d, 138, 0, 4041);
    			attr_dev(div, "class", div_class_value = "OLSKNarrow OLSKViewportMaster OLSKCommonEdgeRight " + /*OLSKNarrowClass*/ ctx[14]);
    			attr_dev(div, "aria-hidden", div_aria_hidden_value = /*OLSKMobileViewInactive*/ ctx[13] ? true : null);
    			toggle_class(div, "OLSKMobileViewInactive", /*OLSKMobileViewInactive*/ ctx[13]);
    			toggle_class(div, "OLSKNarrowFocused", /*mod*/ ctx[19]._ValueFilterFieldFocused);
    			add_location(div, file$d, 120, 0, 2612);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, header);

    			if (OLSKNarrowToolbarHead_slot) {
    				OLSKNarrowToolbarHead_slot.m(header, null);
    			}

    			append_dev(header, t0);
    			if_blocks[current_block_type_index].m(header, null);
    			append_dev(header, t1);

    			if (OLSKNarrowToolbarTail_slot) {
    				OLSKNarrowToolbarTail_slot.m(header, null);
    			}

    			append_dev(div, t2);
    			append_dev(div, section);

    			if (default_slot) {
    				default_slot.m(section, null);
    			}

    			append_dev(section, t3);
    			mount_component(olskcollection, section, null);
    			append_dev(section, t4);

    			if (OLSKNarrowBodyTail_slot) {
    				OLSKNarrowBodyTail_slot.m(section, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (OLSKNarrowToolbarHead_slot) {
    				if (OLSKNarrowToolbarHead_slot.p && (!current || dirty & /*$$scope*/ 134217728)) {
    					update_slot_base(
    						OLSKNarrowToolbarHead_slot,
    						OLSKNarrowToolbarHead_slot_template,
    						ctx,
    						/*$$scope*/ ctx[27],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[27])
    						: get_slot_changes(OLSKNarrowToolbarHead_slot_template, /*$$scope*/ ctx[27], dirty, get_OLSKNarrowToolbarHead_slot_changes),
    						get_OLSKNarrowToolbarHead_slot_context
    					);
    				}
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(header, t1);
    			}

    			if (OLSKNarrowToolbarTail_slot) {
    				if (OLSKNarrowToolbarTail_slot.p && (!current || dirty & /*$$scope*/ 134217728)) {
    					update_slot_base(
    						OLSKNarrowToolbarTail_slot,
    						OLSKNarrowToolbarTail_slot_template,
    						ctx,
    						/*$$scope*/ ctx[27],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[27])
    						: get_slot_changes(OLSKNarrowToolbarTail_slot_template, /*$$scope*/ ctx[27], dirty, get_OLSKNarrowToolbarTail_slot_changes),
    						get_OLSKNarrowToolbarTail_slot_context
    					);
    				}
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 134217728)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[27],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[27])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[27], dirty, null),
    						null
    					);
    				}
    			}

    			const olskcollection_changes = {};
    			if (dirty & /*OLSKCollectionItems*/ 128) olskcollection_changes.OLSKCollectionItems = /*OLSKCollectionItems*/ ctx[7];
    			if (dirty & /*OLSKCollectionItemsLocus*/ 256) olskcollection_changes.OLSKCollectionItemsLocus = /*OLSKCollectionItemsLocus*/ ctx[8];
    			if (dirty & /*mod*/ 524288) olskcollection_changes.OLSKCollectionIgnoreKeyboard = !/*mod*/ ctx[19].DataIsFocused();
    			if (dirty & /*OLSKCollectionItemClass*/ 64) olskcollection_changes.OLSKCollectionItemClass = /*OLSKCollectionItemClass*/ ctx[6];
    			if (dirty & /*OLSKCollectionSortFunction*/ 4) olskcollection_changes.OLSKCollectionSortFunction = /*OLSKCollectionSortFunction*/ ctx[2];
    			if (dirty & /*_OLSKCollectionDispatchKey*/ 8) olskcollection_changes._OLSKCollectionDispatchKey = /*_OLSKCollectionDispatchKey*/ ctx[3];
    			if (dirty & /*OLSKCollectionChunkFunction*/ 16) olskcollection_changes.OLSKCollectionChunkFunction = /*OLSKCollectionChunkFunction*/ ctx[4];
    			if (dirty & /*OLSKCollectionChunkKeySortFunction*/ 32) olskcollection_changes.OLSKCollectionChunkKeySortFunction = /*OLSKCollectionChunkKeySortFunction*/ ctx[5];
    			if (dirty & /*OLSKCollectionItemAccessibilitySummaryFunction*/ 512) olskcollection_changes.OLSKCollectionItemAccessibilitySummaryFunction = /*OLSKCollectionItemAccessibilitySummaryFunction*/ ctx[9];
    			if (dirty & /*OLSKCollectionDispatchClick*/ 1024) olskcollection_changes.OLSKCollectionDispatchClick = /*OLSKCollectionDispatchClick*/ ctx[10];
    			if (dirty & /*OLSKCollectionDispatchArrow*/ 2048) olskcollection_changes.OLSKCollectionDispatchArrow = /*OLSKCollectionDispatchArrow*/ ctx[11];
    			if (dirty & /*OLSKCollectionDispatchStash*/ 4096) olskcollection_changes.OLSKCollectionDispatchStash = /*OLSKCollectionDispatchStash*/ ctx[12];

    			if (dirty & /*$$scope, $$slots, item*/ 403701760) {
    				olskcollection_changes.$$scope = { dirty, ctx };
    			}

    			olskcollection.$set(olskcollection_changes);

    			if (OLSKNarrowBodyTail_slot) {
    				if (OLSKNarrowBodyTail_slot.p && (!current || dirty & /*$$scope*/ 134217728)) {
    					update_slot_base(
    						OLSKNarrowBodyTail_slot,
    						OLSKNarrowBodyTail_slot_template,
    						ctx,
    						/*$$scope*/ ctx[27],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[27])
    						: get_slot_changes(OLSKNarrowBodyTail_slot_template, /*$$scope*/ ctx[27], dirty, get_OLSKNarrowBodyTail_slot_changes),
    						get_OLSKNarrowBodyTail_slot_context
    					);
    				}
    			}

    			if (!current || dirty & /*OLSKNarrowClass*/ 16384 && div_class_value !== (div_class_value = "OLSKNarrow OLSKViewportMaster OLSKCommonEdgeRight " + /*OLSKNarrowClass*/ ctx[14])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*OLSKMobileViewInactive*/ 8192 && div_aria_hidden_value !== (div_aria_hidden_value = /*OLSKMobileViewInactive*/ ctx[13] ? true : null)) {
    				attr_dev(div, "aria-hidden", div_aria_hidden_value);
    			}

    			if (!current || dirty & /*OLSKNarrowClass, OLSKMobileViewInactive*/ 24576) {
    				toggle_class(div, "OLSKMobileViewInactive", /*OLSKMobileViewInactive*/ ctx[13]);
    			}

    			if (!current || dirty & /*OLSKNarrowClass, mod*/ 540672) {
    				toggle_class(div, "OLSKNarrowFocused", /*mod*/ ctx[19]._ValueFilterFieldFocused);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKNarrowToolbarHead_slot, local);
    			transition_in(if_block);
    			transition_in(OLSKNarrowToolbarTail_slot, local);
    			transition_in(default_slot, local);
    			transition_in(olskcollection.$$.fragment, local);
    			transition_in(OLSKNarrowBodyTail_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKNarrowToolbarHead_slot, local);
    			transition_out(if_block);
    			transition_out(OLSKNarrowToolbarTail_slot, local);
    			transition_out(default_slot, local);
    			transition_out(olskcollection.$$.fragment, local);
    			transition_out(OLSKNarrowBodyTail_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (OLSKNarrowToolbarHead_slot) OLSKNarrowToolbarHead_slot.d(detaching);
    			if_blocks[current_block_type_index].d();
    			if (OLSKNarrowToolbarTail_slot) OLSKNarrowToolbarTail_slot.d(detaching);
    			if (default_slot) default_slot.d(detaching);
    			/*olskcollection_binding*/ ctx[26](null);
    			destroy_component(olskcollection);
    			if (OLSKNarrowBodyTail_slot) OLSKNarrowBodyTail_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;

    	validate_slots('Main', slots, [
    		'OLSKNarrowToolbarHead','OLSKNarrowToolbarTail','default','OLSKCollectionEmpty','OLSKCollectionItem','OLSKNarrowBodyTail'
    	]);

    	const $$slots = compute_slots(slots);
    	let { OLSKCollectionSortFunction } = $$props;
    	let { _OLSKCollectionDispatchKey } = $$props;
    	let { OLSKCollectionChunkFunction = null } = $$props;
    	let { OLSKCollectionChunkKeySortFunction = null } = $$props;
    	let { OLSKCollectionItemClass = '' } = $$props;
    	let { OLSKNarrowFilterText } = $$props;
    	let { OLSKCollectionItems } = $$props;
    	let { OLSKCollectionItemsLocus = null } = $$props;
    	let { OLSKCollectionItemAccessibilitySummaryFunction } = $$props;
    	let { OLSKCollectionDispatchClick } = $$props;
    	let { OLSKCollectionDispatchArrow } = $$props;
    	let { OLSKCollectionDispatchStash = null } = $$props;
    	let { OLSKNarrowDispatchFilter } = $$props;
    	let { OLSKNarrowDispatchSubmit = null } = $$props;
    	let { OLSKMobileViewInactive = false } = $$props;
    	let { OLSKNarrowClass = '' } = $$props;
    	let { OLSKNarrowFilterFieldClass = '' } = $$props;
    	let { OLSKNarrowFilterFieldPlaceholderText = '' } = $$props;
    	let { OLSKNarrowFilterFieldClearButton = true } = $$props;
    	let { OLSKNarrowFilterFieldAutofocus = false } = $$props;
    	const modPublic = {};

    	const mod = {
    		// VALUE
    		_ValueFilterFieldFocused: false,
    		// DATA
    		DataIsFocused() {
    			return document.activeElement === document.querySelector('.OLSKNarrowFilterField');
    		},
    		DataIsMobile() {
    			return window.innerWidth <= 760;
    		},
    		// INTERFACE
    		InterfaceFilterFieldDidInput(event) {
    			OLSKNarrowDispatchFilter(this.value);
    		},
    		InterfaceFormDidSubmit(event) {
    			event.preventDefault();
    			OLSKNarrowDispatchSubmit && OLSKNarrowDispatchSubmit();
    		},
    		// MESSAGE
    		OLSKInputWrapperDispatchClear() {
    			OLSKNarrowDispatchFilter('');
    		},
    		// SETUP
    		SetupEverything() {
    			mod.SetupFilterFieldEventListeners();
    		},
    		SetupFilterFieldEventListeners() {
    			document.querySelector('.OLSKNarrowFilterField').addEventListener('focus', function () {
    				$$invalidate(19, mod._ValueFilterFieldFocused = true, mod);
    			});

    			document.querySelector('.OLSKNarrowFilterField').addEventListener('blur', function () {
    				$$invalidate(19, mod._ValueFilterFieldFocused = false, mod);
    			});
    		},
    		// LIFECYCLE
    		LifecycleComponentDidMount() {
    			mod.SetupEverything();
    		},
    		LifecycleComponentDidUpdate() {
    			if (main_1$2()) {
    				return;
    			}

    			if (mod.DataIsMobile()) {
    				return;
    			}

    			const element = document.querySelector('.OLSKCollectionItemLocus');

    			if (!element) {
    				return;
    			}

    			element.scrollIntoView({ block: 'nearest', inline: 'nearest' });
    		}
    	};

    	onMount(mod.LifecycleComponentDidMount);
    	afterUpdate(mod.LifecycleComponentDidUpdate);

    	$$self.$$.on_mount.push(function () {
    		if (OLSKCollectionSortFunction === undefined && !('OLSKCollectionSortFunction' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCollectionSortFunction']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionSortFunction'");
    		}

    		if (_OLSKCollectionDispatchKey === undefined && !('_OLSKCollectionDispatchKey' in $$props || $$self.$$.bound[$$self.$$.props['_OLSKCollectionDispatchKey']])) {
    			console.warn("<Main> was created without expected prop '_OLSKCollectionDispatchKey'");
    		}

    		if (OLSKNarrowFilterText === undefined && !('OLSKNarrowFilterText' in $$props || $$self.$$.bound[$$self.$$.props['OLSKNarrowFilterText']])) {
    			console.warn("<Main> was created without expected prop 'OLSKNarrowFilterText'");
    		}

    		if (OLSKCollectionItems === undefined && !('OLSKCollectionItems' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCollectionItems']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionItems'");
    		}

    		if (OLSKCollectionItemAccessibilitySummaryFunction === undefined && !('OLSKCollectionItemAccessibilitySummaryFunction' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCollectionItemAccessibilitySummaryFunction']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionItemAccessibilitySummaryFunction'");
    		}

    		if (OLSKCollectionDispatchClick === undefined && !('OLSKCollectionDispatchClick' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCollectionDispatchClick']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionDispatchClick'");
    		}

    		if (OLSKCollectionDispatchArrow === undefined && !('OLSKCollectionDispatchArrow' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCollectionDispatchArrow']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionDispatchArrow'");
    		}

    		if (OLSKNarrowDispatchFilter === undefined && !('OLSKNarrowDispatchFilter' in $$props || $$self.$$.bound[$$self.$$.props['OLSKNarrowDispatchFilter']])) {
    			console.warn("<Main> was created without expected prop 'OLSKNarrowDispatchFilter'");
    		}
    	});

    	const writable_props = [
    		'OLSKCollectionSortFunction',
    		'_OLSKCollectionDispatchKey',
    		'OLSKCollectionChunkFunction',
    		'OLSKCollectionChunkKeySortFunction',
    		'OLSKCollectionItemClass',
    		'OLSKNarrowFilterText',
    		'OLSKCollectionItems',
    		'OLSKCollectionItemsLocus',
    		'OLSKCollectionItemAccessibilitySummaryFunction',
    		'OLSKCollectionDispatchClick',
    		'OLSKCollectionDispatchArrow',
    		'OLSKCollectionDispatchStash',
    		'OLSKNarrowDispatchFilter',
    		'OLSKNarrowDispatchSubmit',
    		'OLSKMobileViewInactive',
    		'OLSKNarrowClass',
    		'OLSKNarrowFilterFieldClass',
    		'OLSKNarrowFilterFieldPlaceholderText',
    		'OLSKNarrowFilterFieldClearButton',
    		'OLSKNarrowFilterFieldAutofocus'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		OLSKNarrowFilterText = this.value;
    		$$invalidate(0, OLSKNarrowFilterText);
    	}

    	function input_input_handler_1() {
    		OLSKNarrowFilterText = this.value;
    		$$invalidate(0, OLSKNarrowFilterText);
    	}

    	function olskcollection_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			modPublic._OLSKCollection = $$value;
    			$$invalidate(1, modPublic);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('OLSKCollectionSortFunction' in $$props) $$invalidate(2, OLSKCollectionSortFunction = $$props.OLSKCollectionSortFunction);
    		if ('_OLSKCollectionDispatchKey' in $$props) $$invalidate(3, _OLSKCollectionDispatchKey = $$props._OLSKCollectionDispatchKey);
    		if ('OLSKCollectionChunkFunction' in $$props) $$invalidate(4, OLSKCollectionChunkFunction = $$props.OLSKCollectionChunkFunction);
    		if ('OLSKCollectionChunkKeySortFunction' in $$props) $$invalidate(5, OLSKCollectionChunkKeySortFunction = $$props.OLSKCollectionChunkKeySortFunction);
    		if ('OLSKCollectionItemClass' in $$props) $$invalidate(6, OLSKCollectionItemClass = $$props.OLSKCollectionItemClass);
    		if ('OLSKNarrowFilterText' in $$props) $$invalidate(0, OLSKNarrowFilterText = $$props.OLSKNarrowFilterText);
    		if ('OLSKCollectionItems' in $$props) $$invalidate(7, OLSKCollectionItems = $$props.OLSKCollectionItems);
    		if ('OLSKCollectionItemsLocus' in $$props) $$invalidate(8, OLSKCollectionItemsLocus = $$props.OLSKCollectionItemsLocus);
    		if ('OLSKCollectionItemAccessibilitySummaryFunction' in $$props) $$invalidate(9, OLSKCollectionItemAccessibilitySummaryFunction = $$props.OLSKCollectionItemAccessibilitySummaryFunction);
    		if ('OLSKCollectionDispatchClick' in $$props) $$invalidate(10, OLSKCollectionDispatchClick = $$props.OLSKCollectionDispatchClick);
    		if ('OLSKCollectionDispatchArrow' in $$props) $$invalidate(11, OLSKCollectionDispatchArrow = $$props.OLSKCollectionDispatchArrow);
    		if ('OLSKCollectionDispatchStash' in $$props) $$invalidate(12, OLSKCollectionDispatchStash = $$props.OLSKCollectionDispatchStash);
    		if ('OLSKNarrowDispatchFilter' in $$props) $$invalidate(21, OLSKNarrowDispatchFilter = $$props.OLSKNarrowDispatchFilter);
    		if ('OLSKNarrowDispatchSubmit' in $$props) $$invalidate(22, OLSKNarrowDispatchSubmit = $$props.OLSKNarrowDispatchSubmit);
    		if ('OLSKMobileViewInactive' in $$props) $$invalidate(13, OLSKMobileViewInactive = $$props.OLSKMobileViewInactive);
    		if ('OLSKNarrowClass' in $$props) $$invalidate(14, OLSKNarrowClass = $$props.OLSKNarrowClass);
    		if ('OLSKNarrowFilterFieldClass' in $$props) $$invalidate(15, OLSKNarrowFilterFieldClass = $$props.OLSKNarrowFilterFieldClass);
    		if ('OLSKNarrowFilterFieldPlaceholderText' in $$props) $$invalidate(16, OLSKNarrowFilterFieldPlaceholderText = $$props.OLSKNarrowFilterFieldPlaceholderText);
    		if ('OLSKNarrowFilterFieldClearButton' in $$props) $$invalidate(17, OLSKNarrowFilterFieldClearButton = $$props.OLSKNarrowFilterFieldClearButton);
    		if ('OLSKNarrowFilterFieldAutofocus' in $$props) $$invalidate(18, OLSKNarrowFilterFieldAutofocus = $$props.OLSKNarrowFilterFieldAutofocus);
    		if ('$$scope' in $$props) $$invalidate(27, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		OLSKCollectionSortFunction,
    		_OLSKCollectionDispatchKey,
    		OLSKCollectionChunkFunction,
    		OLSKCollectionChunkKeySortFunction,
    		OLSKCollectionItemClass,
    		OLSKNarrowFilterText,
    		OLSKCollectionItems,
    		OLSKCollectionItemsLocus,
    		OLSKCollectionItemAccessibilitySummaryFunction,
    		OLSKCollectionDispatchClick,
    		OLSKCollectionDispatchArrow,
    		OLSKCollectionDispatchStash,
    		OLSKNarrowDispatchFilter,
    		OLSKNarrowDispatchSubmit,
    		OLSKMobileViewInactive,
    		OLSKNarrowClass,
    		OLSKNarrowFilterFieldClass,
    		OLSKNarrowFilterFieldPlaceholderText,
    		OLSKNarrowFilterFieldClearButton,
    		OLSKNarrowFilterFieldAutofocus,
    		OLSKLocalized: main_1,
    		OLSK_SPEC_UI: main_1$2,
    		modPublic,
    		mod,
    		onMount,
    		afterUpdate,
    		OLSKInputWrapper: Main$b,
    		OLSKCollection: Main$c
    	});

    	$$self.$inject_state = $$props => {
    		if ('OLSKCollectionSortFunction' in $$props) $$invalidate(2, OLSKCollectionSortFunction = $$props.OLSKCollectionSortFunction);
    		if ('_OLSKCollectionDispatchKey' in $$props) $$invalidate(3, _OLSKCollectionDispatchKey = $$props._OLSKCollectionDispatchKey);
    		if ('OLSKCollectionChunkFunction' in $$props) $$invalidate(4, OLSKCollectionChunkFunction = $$props.OLSKCollectionChunkFunction);
    		if ('OLSKCollectionChunkKeySortFunction' in $$props) $$invalidate(5, OLSKCollectionChunkKeySortFunction = $$props.OLSKCollectionChunkKeySortFunction);
    		if ('OLSKCollectionItemClass' in $$props) $$invalidate(6, OLSKCollectionItemClass = $$props.OLSKCollectionItemClass);
    		if ('OLSKNarrowFilterText' in $$props) $$invalidate(0, OLSKNarrowFilterText = $$props.OLSKNarrowFilterText);
    		if ('OLSKCollectionItems' in $$props) $$invalidate(7, OLSKCollectionItems = $$props.OLSKCollectionItems);
    		if ('OLSKCollectionItemsLocus' in $$props) $$invalidate(8, OLSKCollectionItemsLocus = $$props.OLSKCollectionItemsLocus);
    		if ('OLSKCollectionItemAccessibilitySummaryFunction' in $$props) $$invalidate(9, OLSKCollectionItemAccessibilitySummaryFunction = $$props.OLSKCollectionItemAccessibilitySummaryFunction);
    		if ('OLSKCollectionDispatchClick' in $$props) $$invalidate(10, OLSKCollectionDispatchClick = $$props.OLSKCollectionDispatchClick);
    		if ('OLSKCollectionDispatchArrow' in $$props) $$invalidate(11, OLSKCollectionDispatchArrow = $$props.OLSKCollectionDispatchArrow);
    		if ('OLSKCollectionDispatchStash' in $$props) $$invalidate(12, OLSKCollectionDispatchStash = $$props.OLSKCollectionDispatchStash);
    		if ('OLSKNarrowDispatchFilter' in $$props) $$invalidate(21, OLSKNarrowDispatchFilter = $$props.OLSKNarrowDispatchFilter);
    		if ('OLSKNarrowDispatchSubmit' in $$props) $$invalidate(22, OLSKNarrowDispatchSubmit = $$props.OLSKNarrowDispatchSubmit);
    		if ('OLSKMobileViewInactive' in $$props) $$invalidate(13, OLSKMobileViewInactive = $$props.OLSKMobileViewInactive);
    		if ('OLSKNarrowClass' in $$props) $$invalidate(14, OLSKNarrowClass = $$props.OLSKNarrowClass);
    		if ('OLSKNarrowFilterFieldClass' in $$props) $$invalidate(15, OLSKNarrowFilterFieldClass = $$props.OLSKNarrowFilterFieldClass);
    		if ('OLSKNarrowFilterFieldPlaceholderText' in $$props) $$invalidate(16, OLSKNarrowFilterFieldPlaceholderText = $$props.OLSKNarrowFilterFieldPlaceholderText);
    		if ('OLSKNarrowFilterFieldClearButton' in $$props) $$invalidate(17, OLSKNarrowFilterFieldClearButton = $$props.OLSKNarrowFilterFieldClearButton);
    		if ('OLSKNarrowFilterFieldAutofocus' in $$props) $$invalidate(18, OLSKNarrowFilterFieldAutofocus = $$props.OLSKNarrowFilterFieldAutofocus);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		OLSKNarrowFilterText,
    		modPublic,
    		OLSKCollectionSortFunction,
    		_OLSKCollectionDispatchKey,
    		OLSKCollectionChunkFunction,
    		OLSKCollectionChunkKeySortFunction,
    		OLSKCollectionItemClass,
    		OLSKCollectionItems,
    		OLSKCollectionItemsLocus,
    		OLSKCollectionItemAccessibilitySummaryFunction,
    		OLSKCollectionDispatchClick,
    		OLSKCollectionDispatchArrow,
    		OLSKCollectionDispatchStash,
    		OLSKMobileViewInactive,
    		OLSKNarrowClass,
    		OLSKNarrowFilterFieldClass,
    		OLSKNarrowFilterFieldPlaceholderText,
    		OLSKNarrowFilterFieldClearButton,
    		OLSKNarrowFilterFieldAutofocus,
    		mod,
    		$$slots,
    		OLSKNarrowDispatchFilter,
    		OLSKNarrowDispatchSubmit,
    		slots,
    		input_input_handler,
    		input_input_handler_1,
    		olskcollection_binding,
    		$$scope
    	];
    }

    class Main$d extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {
    			OLSKCollectionSortFunction: 2,
    			_OLSKCollectionDispatchKey: 3,
    			OLSKCollectionChunkFunction: 4,
    			OLSKCollectionChunkKeySortFunction: 5,
    			OLSKCollectionItemClass: 6,
    			OLSKNarrowFilterText: 0,
    			OLSKCollectionItems: 7,
    			OLSKCollectionItemsLocus: 8,
    			OLSKCollectionItemAccessibilitySummaryFunction: 9,
    			OLSKCollectionDispatchClick: 10,
    			OLSKCollectionDispatchArrow: 11,
    			OLSKCollectionDispatchStash: 12,
    			OLSKNarrowDispatchFilter: 21,
    			OLSKNarrowDispatchSubmit: 22,
    			OLSKMobileViewInactive: 13,
    			OLSKNarrowClass: 14,
    			OLSKNarrowFilterFieldClass: 15,
    			OLSKNarrowFilterFieldPlaceholderText: 16,
    			OLSKNarrowFilterFieldClearButton: 17,
    			OLSKNarrowFilterFieldAutofocus: 18,
    			modPublic: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get OLSKCollectionSortFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionSortFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get _OLSKCollectionDispatchKey() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set _OLSKCollectionDispatchKey(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionChunkFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionChunkFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionChunkKeySortFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionChunkKeySortFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionItemClass() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItemClass(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowFilterText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowFilterText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionItems() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItems(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionItemsLocus() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItemsLocus(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionItemAccessibilitySummaryFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItemAccessibilitySummaryFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchClick() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchClick(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchArrow() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchArrow(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchStash() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchStash(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowDispatchFilter() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowDispatchFilter(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowDispatchSubmit() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowDispatchSubmit(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMobileViewInactive() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMobileViewInactive(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowClass() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowClass(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowFilterFieldClass() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowFilterFieldClass(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowFilterFieldPlaceholderText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowFilterFieldPlaceholderText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowFilterFieldClearButton() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowFilterFieldClearButton(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowFilterFieldAutofocus() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowFilterFieldAutofocus(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[1];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKPlaceholder/main.svelte generated by Svelte v3.59.2 */
    const file$e = "node_modules/OLSKPlaceholder/main.svelte";

    function create_fragment$e(ctx) {
    	let div;
    	let raw_value = (/*OLSKPlaceholderHTML*/ ctx[0] || main_1('OLSKPlaceholderText')) + "";

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "OLSKPlaceholder OLSKDecorTextVisual svelte-1fqi4c");
    			add_location(div, file$e, 6, 0, 109);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = raw_value;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*OLSKPlaceholderHTML*/ 1 && raw_value !== (raw_value = (/*OLSKPlaceholderHTML*/ ctx[0] || main_1('OLSKPlaceholderText')) + "")) div.innerHTML = raw_value;		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { OLSKPlaceholderHTML = '' } = $$props;
    	const writable_props = ['OLSKPlaceholderHTML'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('OLSKPlaceholderHTML' in $$props) $$invalidate(0, OLSKPlaceholderHTML = $$props.OLSKPlaceholderHTML);
    	};

    	$$self.$capture_state = () => ({ OLSKPlaceholderHTML, OLSKLocalized: main_1 });

    	$$self.$inject_state = $$props => {
    		if ('OLSKPlaceholderHTML' in $$props) $$invalidate(0, OLSKPlaceholderHTML = $$props.OLSKPlaceholderHTML);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [OLSKPlaceholderHTML];
    }

    class Main$e extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { OLSKPlaceholderHTML: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get OLSKPlaceholderHTML() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKPlaceholderHTML(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKCatalog/main.svelte generated by Svelte v3.59.2 */

    const { window: window_1$1 } = globals;
    const file$f = "node_modules/OLSKCatalog/main.svelte";

    const get_OLSKCatalogDetailContent_slot_changes = dirty => ({
    	OLSKCatalogItemSelected: dirty & /*mod*/ 1024
    });

    const get_OLSKCatalogDetailContent_slot_context = ctx => ({
    	OLSKCatalogItemSelected: /*mod*/ ctx[10]._ValueItemSelected
    });

    const get_OLSKNarrowToolbarHead_slot_changes$1 = dirty => ({});
    const get_OLSKNarrowToolbarHead_slot_context$1 = ctx => ({});
    const get_OLSKNarrowToolbarTail_slot_changes$1 = dirty => ({});
    const get_OLSKNarrowToolbarTail_slot_context$1 = ctx => ({});

    const get_OLSKCollectionItem_slot_changes$2 = dirty => ({
    	OLSKCollectionItem: dirty & /*e*/ 1073741824
    });

    const get_OLSKCollectionItem_slot_context$2 = ctx => ({ OLSKCollectionItem: /*e*/ ctx[30] });
    const get_OLSKNarrowBodyTail_slot_changes$1 = dirty => ({});
    const get_OLSKNarrowBodyTail_slot_context$1 = ctx => ({});

    // (429:0) <OLSKNarrow  bind:this={ modPublic._OLSKNarrow }  OLSKCollectionSortFunction={ OLSKCatalogSortFunction }  _OLSKCollectionDispatchKey={ _OLSKCatalogDispatchKey }  OLSKCollectionChunkFunction={ OLSKCollectionChunkFunction }  OLSKCollectionChunkKeySortFunction={ OLSKCollectionChunkKeySortFunction }  OLSKCollectionItemClass={ OLSKCollectionItemClass }    OLSKCollectionItems={ mod._ValueItemsVisible }  OLSKCollectionItemsLocus={ mod._ValueItemSelected }   OLSKNarrowFilterText={ mod._ValueFilterText }  OLSKNarrowFilterFieldPlaceholderText={ OLSKNarrowFilterFieldPlaceholderText }   OLSKCollectionDispatchClick={ OLSKCollectionDispatchClick }  OLSKCollectionDispatchArrow={ OLSKCollectionDispatchArrow }  OLSKCollectionDispatchStash={ mod.OLSKCollectionDispatchStash }  OLSKNarrowDispatchFilter={ mod.OLSKNarrowDispatchFilter }  OLSKNarrowDispatchSubmit={ mod.OLSKNarrowDispatchSubmit }   let:OLSKCollectionItem={ e }   OLSKCollectionItemAccessibilitySummaryFunction={ OLSKCollectionItemAccessibilitySummaryFunction }    OLSKMobileViewInactive={ mod.OLSKMobileViewInactive }  >
    function create_default_slot$1(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[26].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[29], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 536870912)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[29],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[29])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[29], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(429:0) <OLSKNarrow  bind:this={ modPublic._OLSKNarrow }  OLSKCollectionSortFunction={ OLSKCatalogSortFunction }  _OLSKCollectionDispatchKey={ _OLSKCatalogDispatchKey }  OLSKCollectionChunkFunction={ OLSKCollectionChunkFunction }  OLSKCollectionChunkKeySortFunction={ OLSKCollectionChunkKeySortFunction }  OLSKCollectionItemClass={ OLSKCollectionItemClass }    OLSKCollectionItems={ mod._ValueItemsVisible }  OLSKCollectionItemsLocus={ mod._ValueItemSelected }   OLSKNarrowFilterText={ mod._ValueFilterText }  OLSKNarrowFilterFieldPlaceholderText={ OLSKNarrowFilterFieldPlaceholderText }   OLSKCollectionDispatchClick={ OLSKCollectionDispatchClick }  OLSKCollectionDispatchArrow={ OLSKCollectionDispatchArrow }  OLSKCollectionDispatchStash={ mod.OLSKCollectionDispatchStash }  OLSKNarrowDispatchFilter={ mod.OLSKNarrowDispatchFilter }  OLSKNarrowDispatchSubmit={ mod.OLSKNarrowDispatchSubmit }   let:OLSKCollectionItem={ e }   OLSKCollectionItemAccessibilitySummaryFunction={ OLSKCollectionItemAccessibilitySummaryFunction }    OLSKMobileViewInactive={ mod.OLSKMobileViewInactive }  >",
    		ctx
    	});

    	return block;
    }

    // (456:2) {#if $$slots.OLSKNarrowToolbarHead}
    function create_if_block_7(ctx) {
    	let current;
    	const OLSKNarrowToolbarHead_slot_template = /*#slots*/ ctx[26].OLSKNarrowToolbarHead;
    	const OLSKNarrowToolbarHead_slot = create_slot(OLSKNarrowToolbarHead_slot_template, ctx, /*$$scope*/ ctx[29], get_OLSKNarrowToolbarHead_slot_context$1);

    	const block = {
    		c: function create() {
    			if (OLSKNarrowToolbarHead_slot) OLSKNarrowToolbarHead_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (OLSKNarrowToolbarHead_slot) {
    				OLSKNarrowToolbarHead_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKNarrowToolbarHead_slot) {
    				if (OLSKNarrowToolbarHead_slot.p && (!current || dirty & /*$$scope*/ 536870912)) {
    					update_slot_base(
    						OLSKNarrowToolbarHead_slot,
    						OLSKNarrowToolbarHead_slot_template,
    						ctx,
    						/*$$scope*/ ctx[29],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[29])
    						: get_slot_changes(OLSKNarrowToolbarHead_slot_template, /*$$scope*/ ctx[29], dirty, get_OLSKNarrowToolbarHead_slot_changes$1),
    						get_OLSKNarrowToolbarHead_slot_context$1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKNarrowToolbarHead_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKNarrowToolbarHead_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (OLSKNarrowToolbarHead_slot) OLSKNarrowToolbarHead_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(456:2) {#if $$slots.OLSKNarrowToolbarHead}",
    		ctx
    	});

    	return block;
    }

    // (455:1) 
    function create_OLSKNarrowToolbarHead_slot(ctx) {
    	let div;
    	let current;
    	let if_block = /*$$slots*/ ctx[11].OLSKNarrowToolbarHead && create_if_block_7(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "slot", "OLSKNarrowToolbarHead");
    			add_location(div, file$f, 454, 1, 11187);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[11].OLSKNarrowToolbarHead) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 2048) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_7(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKNarrowToolbarHead_slot.name,
    		type: "slot",
    		source: "(455:1) ",
    		ctx
    	});

    	return block;
    }

    // (466:42) 
    function create_if_block_6(ctx) {
    	let current;
    	const OLSKNarrowToolbarTail_slot_template = /*#slots*/ ctx[26].OLSKNarrowToolbarTail;
    	const OLSKNarrowToolbarTail_slot = create_slot(OLSKNarrowToolbarTail_slot_template, ctx, /*$$scope*/ ctx[29], get_OLSKNarrowToolbarTail_slot_context$1);

    	const block = {
    		c: function create() {
    			if (OLSKNarrowToolbarTail_slot) OLSKNarrowToolbarTail_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (OLSKNarrowToolbarTail_slot) {
    				OLSKNarrowToolbarTail_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKNarrowToolbarTail_slot) {
    				if (OLSKNarrowToolbarTail_slot.p && (!current || dirty & /*$$scope*/ 536870912)) {
    					update_slot_base(
    						OLSKNarrowToolbarTail_slot,
    						OLSKNarrowToolbarTail_slot_template,
    						ctx,
    						/*$$scope*/ ctx[29],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[29])
    						: get_slot_changes(OLSKNarrowToolbarTail_slot_template, /*$$scope*/ ctx[29], dirty, get_OLSKNarrowToolbarTail_slot_changes$1),
    						get_OLSKNarrowToolbarTail_slot_context$1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKNarrowToolbarTail_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKNarrowToolbarTail_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (OLSKNarrowToolbarTail_slot) OLSKNarrowToolbarTail_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(466:42) ",
    		ctx
    	});

    	return block;
    }

    // (462:2) {#if mod._ValueStashEnabled }
    function create_if_block_5(ctx) {
    	let div;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			button = element("button");
    			button.textContent = "OK";
    			attr_dev(button, "class", "OLSKCatalogStashDoneButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton svelte-14fqf3h");
    			add_location(button, file$f, 463, 4, 11437);
    			attr_dev(div, "class", "OLSKToolbarElementGroup");
    			add_location(div, file$f, 462, 3, 11395);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[10].InterfaceStashDoneButtonDidClick)) /*mod*/ ctx[10].InterfaceStashDoneButtonDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(462:2) {#if mod._ValueStashEnabled }",
    		ctx
    	});

    	return block;
    }

    // (461:1) 
    function create_OLSKNarrowToolbarTail_slot(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block_5, create_if_block_6];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*mod*/ ctx[10]._ValueStashEnabled) return 0;
    		if (/*$$slots*/ ctx[11].OLSKNarrowToolbarTail) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "slot", "OLSKNarrowToolbarTail");
    			add_location(div, file$f, 460, 1, 11325);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKNarrowToolbarTail_slot.name,
    		type: "slot",
    		source: "(461:1) ",
    		ctx
    	});

    	return block;
    }

    // (474:2) {#if $$slots.OLSKCollectionItem}
    function create_if_block_4$1(ctx) {
    	let current;
    	const OLSKCollectionItem_slot_template = /*#slots*/ ctx[26].OLSKCollectionItem;
    	const OLSKCollectionItem_slot = create_slot(OLSKCollectionItem_slot_template, ctx, /*$$scope*/ ctx[29], get_OLSKCollectionItem_slot_context$2);

    	const block = {
    		c: function create() {
    			if (OLSKCollectionItem_slot) OLSKCollectionItem_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (OLSKCollectionItem_slot) {
    				OLSKCollectionItem_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKCollectionItem_slot) {
    				if (OLSKCollectionItem_slot.p && (!current || dirty & /*$$scope, e*/ 1610612736)) {
    					update_slot_base(
    						OLSKCollectionItem_slot,
    						OLSKCollectionItem_slot_template,
    						ctx,
    						/*$$scope*/ ctx[29],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[29])
    						: get_slot_changes(OLSKCollectionItem_slot_template, /*$$scope*/ ctx[29], dirty, get_OLSKCollectionItem_slot_changes$2),
    						get_OLSKCollectionItem_slot_context$2
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKCollectionItem_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKCollectionItem_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (OLSKCollectionItem_slot) OLSKCollectionItem_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(474:2) {#if $$slots.OLSKCollectionItem}",
    		ctx
    	});

    	return block;
    }

    // (473:1) 
    function create_OLSKCollectionItem_slot$1(ctx) {
    	let div;
    	let current;
    	let if_block = /*$$slots*/ ctx[11].OLSKCollectionItem && create_if_block_4$1(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "slot", "OLSKCollectionItem");
    			add_location(div, file$f, 472, 1, 11735);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[11].OLSKCollectionItem) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 2048) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_4$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKCollectionItem_slot$1.name,
    		type: "slot",
    		source: "(473:1) ",
    		ctx
    	});

    	return block;
    }

    // (479:1) 
    function create_OLSKCollectionEmpty_slot$1(ctx) {
    	let div;
    	let olskplaceholder;
    	let current;

    	olskplaceholder = new Main$e({
    			props: {
    				OLSKPlaceholderHTML: main_1('OLSKCatalogMasterPlaceholderText')
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(olskplaceholder.$$.fragment);
    			attr_dev(div, "slot", "OLSKCollectionEmpty");
    			add_location(div, file$f, 478, 1, 11889);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(olskplaceholder, div, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskplaceholder.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskplaceholder.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(olskplaceholder);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKCollectionEmpty_slot$1.name,
    		type: "slot",
    		source: "(479:1) ",
    		ctx
    	});

    	return block;
    }

    // (484:2) {#if $$slots.OLSKNarrowBodyTail}
    function create_if_block_3$1(ctx) {
    	let current;
    	const OLSKNarrowBodyTail_slot_template = /*#slots*/ ctx[26].OLSKNarrowBodyTail;
    	const OLSKNarrowBodyTail_slot = create_slot(OLSKNarrowBodyTail_slot_template, ctx, /*$$scope*/ ctx[29], get_OLSKNarrowBodyTail_slot_context$1);

    	const block = {
    		c: function create() {
    			if (OLSKNarrowBodyTail_slot) OLSKNarrowBodyTail_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (OLSKNarrowBodyTail_slot) {
    				OLSKNarrowBodyTail_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKNarrowBodyTail_slot) {
    				if (OLSKNarrowBodyTail_slot.p && (!current || dirty & /*$$scope*/ 536870912)) {
    					update_slot_base(
    						OLSKNarrowBodyTail_slot,
    						OLSKNarrowBodyTail_slot_template,
    						ctx,
    						/*$$scope*/ ctx[29],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[29])
    						: get_slot_changes(OLSKNarrowBodyTail_slot_template, /*$$scope*/ ctx[29], dirty, get_OLSKNarrowBodyTail_slot_changes$1),
    						get_OLSKNarrowBodyTail_slot_context$1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKNarrowBodyTail_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKNarrowBodyTail_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (OLSKNarrowBodyTail_slot) OLSKNarrowBodyTail_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(484:2) {#if $$slots.OLSKNarrowBodyTail}",
    		ctx
    	});

    	return block;
    }

    // (483:1) 
    function create_OLSKNarrowBodyTail_slot(ctx) {
    	let div;
    	let current;
    	let if_block = /*$$slots*/ ctx[11].OLSKNarrowBodyTail && create_if_block_3$1(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "slot", "OLSKNarrowBodyTail");
    			add_location(div, file$f, 482, 1, 12028);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[11].OLSKNarrowBodyTail) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 2048) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_3$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKNarrowBodyTail_slot.name,
    		type: "slot",
    		source: "(483:1) ",
    		ctx
    	});

    	return block;
    }

    // (491:1) {#if !mod._ValueItemSelected }
    function create_if_block_2$3(ctx) {
    	let olskplaceholder;
    	let current;

    	olskplaceholder = new Main$e({
    			props: {
    				OLSKPlaceholderHTML: !/*mod*/ ctx[10]._ValueStashEnabled
    				? ''
    				: main_1$1(main_1('OLSKCatalogStashPlaceholderTextFormat'), /*mod*/ ctx[10]._ValueStashCount)
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(olskplaceholder.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskplaceholder, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const olskplaceholder_changes = {};

    			if (dirty & /*mod*/ 1024) olskplaceholder_changes.OLSKPlaceholderHTML = !/*mod*/ ctx[10]._ValueStashEnabled
    			? ''
    			: main_1$1(main_1('OLSKCatalogStashPlaceholderTextFormat'), /*mod*/ ctx[10]._ValueStashCount);

    			olskplaceholder.$set(olskplaceholder_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskplaceholder.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskplaceholder.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskplaceholder, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(491:1) {#if !mod._ValueItemSelected }",
    		ctx
    	});

    	return block;
    }

    // (495:1) {#if mod._ValueItemSelected }
    function create_if_block$7(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*$$slots*/ ctx[11].OLSKCatalogDetailContent && create_if_block_1$5(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[11].OLSKCatalogDetailContent) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 2048) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$5(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(495:1) {#if mod._ValueItemSelected }",
    		ctx
    	});

    	return block;
    }

    // (496:2) {#if $$slots.OLSKCatalogDetailContent }
    function create_if_block_1$5(ctx) {
    	let div;
    	let mod_LifecycleDetailDidCreate_action;
    	let t;
    	let current;
    	let mounted;
    	let dispose;
    	const OLSKCatalogDetailContent_slot_template = /*#slots*/ ctx[26].OLSKCatalogDetailContent;
    	const OLSKCatalogDetailContent_slot = create_slot(OLSKCatalogDetailContent_slot_template, ctx, /*$$scope*/ ctx[29], get_OLSKCatalogDetailContent_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			if (OLSKCatalogDetailContent_slot) OLSKCatalogDetailContent_slot.c();
    			set_style(div, "display", "none");
    			add_location(div, file$f, 496, 3, 12625);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			/*div_binding*/ ctx[28](div);
    			insert_dev(target, t, anchor);

    			if (OLSKCatalogDetailContent_slot) {
    				OLSKCatalogDetailContent_slot.m(target, anchor);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(mod_LifecycleDetailDidCreate_action = /*mod*/ ctx[10].LifecycleDetailDidCreate(div));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKCatalogDetailContent_slot) {
    				if (OLSKCatalogDetailContent_slot.p && (!current || dirty & /*$$scope, mod*/ 536871936)) {
    					update_slot_base(
    						OLSKCatalogDetailContent_slot,
    						OLSKCatalogDetailContent_slot_template,
    						ctx,
    						/*$$scope*/ ctx[29],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[29])
    						: get_slot_changes(OLSKCatalogDetailContent_slot_template, /*$$scope*/ ctx[29], dirty, get_OLSKCatalogDetailContent_slot_changes),
    						get_OLSKCatalogDetailContent_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKCatalogDetailContent_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKCatalogDetailContent_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*div_binding*/ ctx[28](null);
    			if (detaching) detach_dev(t);
    			if (OLSKCatalogDetailContent_slot) OLSKCatalogDetailContent_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(496:2) {#if $$slots.OLSKCatalogDetailContent }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let div1;
    	let olsknarrow;
    	let t0;
    	let div0;
    	let t1;
    	let div0_aria_hidden_value;
    	let current;
    	let mounted;
    	let dispose;

    	let olsknarrow_props = {
    		OLSKCollectionSortFunction: /*OLSKCatalogSortFunction*/ ctx[4],
    		_OLSKCollectionDispatchKey: /*_OLSKCatalogDispatchKey*/ ctx[5],
    		OLSKCollectionChunkFunction: /*OLSKCollectionChunkFunction*/ ctx[6],
    		OLSKCollectionChunkKeySortFunction: /*OLSKCollectionChunkKeySortFunction*/ ctx[7],
    		OLSKCollectionItemClass: /*OLSKCollectionItemClass*/ ctx[2],
    		OLSKCollectionItems: /*mod*/ ctx[10]._ValueItemsVisible,
    		OLSKCollectionItemsLocus: /*mod*/ ctx[10]._ValueItemSelected,
    		OLSKNarrowFilterText: /*mod*/ ctx[10]._ValueFilterText,
    		OLSKNarrowFilterFieldPlaceholderText: /*OLSKNarrowFilterFieldPlaceholderText*/ ctx[3],
    		OLSKCollectionDispatchClick: /*OLSKCollectionDispatchClick*/ ctx[8],
    		OLSKCollectionDispatchArrow: /*OLSKCollectionDispatchArrow*/ ctx[9],
    		OLSKCollectionDispatchStash: /*mod*/ ctx[10].OLSKCollectionDispatchStash,
    		OLSKNarrowDispatchFilter: /*mod*/ ctx[10].OLSKNarrowDispatchFilter,
    		OLSKNarrowDispatchSubmit: /*mod*/ ctx[10].OLSKNarrowDispatchSubmit,
    		OLSKCollectionItemAccessibilitySummaryFunction: /*OLSKCollectionItemAccessibilitySummaryFunction*/ ctx[1],
    		OLSKMobileViewInactive: /*mod*/ ctx[10].OLSKMobileViewInactive,
    		$$slots: {
    			OLSKNarrowBodyTail: [
    				create_OLSKNarrowBodyTail_slot,
    				({ OLSKCollectionItem: e }) => ({ 30: e }),
    				({ OLSKCollectionItem: e }) => e ? 1073741824 : 0
    			],
    			OLSKCollectionEmpty: [
    				create_OLSKCollectionEmpty_slot$1,
    				({ OLSKCollectionItem: e }) => ({ 30: e }),
    				({ OLSKCollectionItem: e }) => e ? 1073741824 : 0
    			],
    			OLSKCollectionItem: [
    				create_OLSKCollectionItem_slot$1,
    				({ OLSKCollectionItem: e }) => ({ 30: e }),
    				({ OLSKCollectionItem: e }) => e ? 1073741824 : 0
    			],
    			OLSKNarrowToolbarTail: [
    				create_OLSKNarrowToolbarTail_slot,
    				({ OLSKCollectionItem: e }) => ({ 30: e }),
    				({ OLSKCollectionItem: e }) => e ? 1073741824 : 0
    			],
    			OLSKNarrowToolbarHead: [
    				create_OLSKNarrowToolbarHead_slot,
    				({ OLSKCollectionItem: e }) => ({ 30: e }),
    				({ OLSKCollectionItem: e }) => e ? 1073741824 : 0
    			],
    			default: [
    				create_default_slot$1,
    				({ OLSKCollectionItem: e }) => ({ 30: e }),
    				({ OLSKCollectionItem: e }) => e ? 1073741824 : 0
    			]
    		},
    		$$scope: { ctx }
    	};

    	olsknarrow = new Main$d({ props: olsknarrow_props, $$inline: true });
    	/*olsknarrow_binding*/ ctx[27](olsknarrow);
    	let if_block0 = !/*mod*/ ctx[10]._ValueItemSelected && create_if_block_2$3(ctx);
    	let if_block1 = /*mod*/ ctx[10]._ValueItemSelected && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(olsknarrow.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div0, "class", "OLSKCatalogDetail OLSKViewportDetail svelte-14fqf3h");
    			attr_dev(div0, "aria-hidden", div0_aria_hidden_value = !/*mod*/ ctx[10].OLSKMobileViewInactive ? true : null);
    			toggle_class(div0, "OLSKMobileViewInactive", !/*mod*/ ctx[10].OLSKMobileViewInactive);
    			add_location(div0, file$f, 489, 0, 12170);
    			attr_dev(div1, "class", "OLSKCatalog svelte-14fqf3h");
    			add_location(div1, file$f, 426, 0, 10082);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(olsknarrow, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t1);
    			if (if_block1) if_block1.m(div0, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					window_1$1,
    					"keydown",
    					function () {
    						if (is_function(/*mod*/ ctx[10].InterfaceWindowDidKeydown)) /*mod*/ ctx[10].InterfaceWindowDidKeydown.apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			const olsknarrow_changes = {};
    			if (dirty & /*OLSKCatalogSortFunction*/ 16) olsknarrow_changes.OLSKCollectionSortFunction = /*OLSKCatalogSortFunction*/ ctx[4];
    			if (dirty & /*_OLSKCatalogDispatchKey*/ 32) olsknarrow_changes._OLSKCollectionDispatchKey = /*_OLSKCatalogDispatchKey*/ ctx[5];
    			if (dirty & /*OLSKCollectionChunkFunction*/ 64) olsknarrow_changes.OLSKCollectionChunkFunction = /*OLSKCollectionChunkFunction*/ ctx[6];
    			if (dirty & /*OLSKCollectionChunkKeySortFunction*/ 128) olsknarrow_changes.OLSKCollectionChunkKeySortFunction = /*OLSKCollectionChunkKeySortFunction*/ ctx[7];
    			if (dirty & /*OLSKCollectionItemClass*/ 4) olsknarrow_changes.OLSKCollectionItemClass = /*OLSKCollectionItemClass*/ ctx[2];
    			if (dirty & /*mod*/ 1024) olsknarrow_changes.OLSKCollectionItems = /*mod*/ ctx[10]._ValueItemsVisible;
    			if (dirty & /*mod*/ 1024) olsknarrow_changes.OLSKCollectionItemsLocus = /*mod*/ ctx[10]._ValueItemSelected;
    			if (dirty & /*mod*/ 1024) olsknarrow_changes.OLSKNarrowFilterText = /*mod*/ ctx[10]._ValueFilterText;
    			if (dirty & /*OLSKNarrowFilterFieldPlaceholderText*/ 8) olsknarrow_changes.OLSKNarrowFilterFieldPlaceholderText = /*OLSKNarrowFilterFieldPlaceholderText*/ ctx[3];
    			if (dirty & /*OLSKCollectionDispatchClick*/ 256) olsknarrow_changes.OLSKCollectionDispatchClick = /*OLSKCollectionDispatchClick*/ ctx[8];
    			if (dirty & /*OLSKCollectionDispatchArrow*/ 512) olsknarrow_changes.OLSKCollectionDispatchArrow = /*OLSKCollectionDispatchArrow*/ ctx[9];
    			if (dirty & /*mod*/ 1024) olsknarrow_changes.OLSKCollectionDispatchStash = /*mod*/ ctx[10].OLSKCollectionDispatchStash;
    			if (dirty & /*mod*/ 1024) olsknarrow_changes.OLSKNarrowDispatchFilter = /*mod*/ ctx[10].OLSKNarrowDispatchFilter;
    			if (dirty & /*mod*/ 1024) olsknarrow_changes.OLSKNarrowDispatchSubmit = /*mod*/ ctx[10].OLSKNarrowDispatchSubmit;
    			if (dirty & /*OLSKCollectionItemAccessibilitySummaryFunction*/ 2) olsknarrow_changes.OLSKCollectionItemAccessibilitySummaryFunction = /*OLSKCollectionItemAccessibilitySummaryFunction*/ ctx[1];
    			if (dirty & /*mod*/ 1024) olsknarrow_changes.OLSKMobileViewInactive = /*mod*/ ctx[10].OLSKMobileViewInactive;

    			if (dirty & /*$$scope, $$slots, e, mod*/ 1610615808) {
    				olsknarrow_changes.$$scope = { dirty, ctx };
    			}

    			olsknarrow.$set(olsknarrow_changes);

    			if (!/*mod*/ ctx[10]._ValueItemSelected) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*mod*/ 1024) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_2$3(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div0, t1);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*mod*/ ctx[10]._ValueItemSelected) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*mod*/ 1024) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$7(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div0, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*mod*/ 1024 && div0_aria_hidden_value !== (div0_aria_hidden_value = !/*mod*/ ctx[10].OLSKMobileViewInactive ? true : null)) {
    				attr_dev(div0, "aria-hidden", div0_aria_hidden_value);
    			}

    			if (!current || dirty & /*mod*/ 1024) {
    				toggle_class(div0, "OLSKMobileViewInactive", !/*mod*/ ctx[10].OLSKMobileViewInactive);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olsknarrow.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olsknarrow.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			/*olsknarrow_binding*/ ctx[27](null);
    			destroy_component(olsknarrow);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;

    	validate_slots('Main', slots, [
    		'OLSKNarrowBodyTail','OLSKCollectionItem','OLSKNarrowToolbarTail','OLSKNarrowToolbarHead','default','OLSKCatalogDetailContent'
    	]);

    	const $$slots = compute_slots(slots);
    	let { OLSKCollectionItemAccessibilitySummaryFunction } = $$props;
    	let { OLSKCollectionItemClass = '' } = $$props;
    	let { OLSKNarrowFilterFieldPlaceholderText = '' } = $$props;
    	let { _OLSKCatalogArchiveField = null } = $$props;
    	let { OLSKCatalogSortFunction } = $$props;
    	let { OLSKCatalogIsMatch } = $$props;
    	let { OLSKCatalogExactSortFunction = null } = $$props;
    	let { _OLSKCatalogDispatchKey } = $$props;
    	let { OLSKCollectionChunkFunction = null } = $$props;
    	let { OLSKCollectionChunkKeySortFunction = null } = $$props;
    	let { OLSKCollectionDispatchClick } = $$props;
    	let { OLSKCollectionDispatchArrow } = $$props;
    	let { OLSKCollectionDispatchStash = null } = $$props;
    	let { OLSKCatalogDispatchDetailActivate = null } = $$props;
    	let { OLSKCatalogDispatchMasterShouldActivate = null } = $$props;
    	let { OLSKCatalogDispatchArchivedHide = null } = $$props;
    	let { OLSKCatalogDispatchArchivedShow = null } = $$props;
    	let { OLSKCatalogDispatchFilterSubmit = null } = $$props;
    	let { OLSKCatalogDispatchQuantity = null } = $$props;
    	let { OLSKCatalogDispatchEscapeOnEmpty = null } = $$props;
    	let { OLSKCatalogDispatchStash = null } = $$props;
    	let { OLSKCatalogItems = [] } = $$props;
    	let { OLSKCatalogDisableEscape = false } = $$props;

    	const modPublic = {
    		// VALUE
    		OLSKCatalogDisableEscape,
    		// DATA
    		_OLSKCatalogDataItemsAll() {
    			return mod._ValueItemsAll.slice();
    		},
    		OLSKCatalogDataItemSelected() {
    			return mod._ValueItemSelected;
    		},
    		_OLSKCatalogDataFilterText() {
    			return mod._ValueFilterText;
    		},
    		DataIsMobile() {
    			return window.innerWidth <= 760;
    		},
    		// CONTROL
    		OLSKCatalogInsert(inputData) {
    			mod.ValueItemsAll([inputData].concat(mod._ValueItemsAll), !mod._ValueItemSelected);
    			OLSKCatalogDispatchQuantity && OLSKCatalogDispatchQuantity(mod._ValueItemsAll.length);

    			if (inputData[_OLSKCatalogArchiveField]) {
    				OLSKCatalogDispatchArchivedHide();
    			}

    			return inputData;
    		},
    		_OLSKCatalogInsertAndSort(inputData) {
    			modPublic.OLSKCatalogInsert(inputData);
    			mod.ValueItemsAll([].concat(mod._ValueItemsAll), true);
    			return inputData;
    		},
    		OLSKCatalogSelect(inputData) {
    			return $$invalidate(10, mod._ValueItemSelected = inputData, mod);
    		},
    		OLSKCatalogUpdate(inputData) {
    			$$invalidate(
    				10,
    				mod._ValueItemsAll = mod._ValueItemsAll.map(function (e) {
    					return _OLSKCatalogDispatchKey(e) === _OLSKCatalogDispatchKey(inputData)
    					? inputData
    					: e;
    				}),
    				mod
    			);

    			$$invalidate(
    				10,
    				mod._ValueItemsVisible = mod._ValueItemsVisible.map(function (e) {
    					return _OLSKCatalogDispatchKey(e) === _OLSKCatalogDispatchKey(inputData)
    					? inputData
    					: e;
    				}),
    				mod
    			);

    			if (!mod._ValueItemSelected) {
    				mod.ValueItemsAll(mod._ValueItemsAll);
    			}

    			return inputData;
    		},
    		OLSKCatalogRemove(inputData) {
    			mod.ValueItemsAll(
    				mod._ValueItemsAll.filter(function (e) {
    					return _OLSKCatalogDispatchKey(e) !== _OLSKCatalogDispatchKey(inputData);
    				}),
    				!mod._ValueItemSelected
    			);

    			OLSKCatalogDispatchQuantity && OLSKCatalogDispatchQuantity(mod._ValueItemsAll.length);

    			if (!mod._ValueItemSelected) {
    				return;
    			}

    			if (_OLSKCatalogDispatchKey(inputData) !== _OLSKCatalogDispatchKey(mod._ValueItemSelected)) {
    				return;
    			}

    			modPublic.OLSKCatalogSelect(null);
    			modPublic.OLSKCatalogFocusMaster();
    			mod.ControlFocusMaster();
    		},
    		OLSKCatalogActivateDetail() {
    			if (mod.DataIsMobile()) {
    				return;
    			}

    			if (mod._OLSKCatalogDetail) {
    				return OLSKCatalogDispatchDetailActivate && OLSKCatalogDispatchDetailActivate();
    			}

    			$$invalidate(10, mod._ValueShouldActivate = true, mod);
    		},
    		OLSKCatalogFilterWithNoThrottle(inputData) {
    			mod.ControlFilterWithNoThrottle($$invalidate(10, mod._ValueFilterText = inputData, mod));
    		},
    		OLSKCatalogRevealArchive() {
    			$$invalidate(10, mod._ValueArchiveIsVisible = true, mod);
    			mod.ValueItemsVisible(mod._ValueItemsAll);
    			OLSKCatalogDispatchArchivedShow();
    		},
    		OLSKCatalogFocusDetail() {
    			$$invalidate(10, mod.OLSKMobileViewInactive = true, mod);
    		},
    		OLSKCatalogFocusMaster() {
    			$$invalidate(10, mod.OLSKMobileViewInactive = false, mod);

    			if (!mod.DataIsMobile()) {
    				return;
    			}

    			const element = document.querySelector('.OLSKCollectionItemLocus');

    			if (!element) {
    				return;
    			}

    			setTimeout(function () {
    				element.scrollIntoView({ block: 'center', inline: 'center' });
    			});
    		},
    		OLSKCatalogStashEnabled(inputData) {
    			if (typeof inputData === 'undefined') {
    				return mod._ValueStashEnabled;
    			}

    			const selected = mod._ValueItemSelected;

    			if (!modPublic._OLSKNarrow.modPublic._OLSKCollection.modPublic.OLSKCollectionStashEnabled($$invalidate(10, mod._ValueStashEnabled = inputData, mod)) || !selected) {
    				return $$invalidate(10, mod._ValueStashCount = 0, mod);
    			}

    			$$invalidate(10, mod._ValueItemSelected = null, mod);
    			modPublic._OLSKNarrow.modPublic._OLSKCollection.modPublic._OLSKCollectionStashToggle(selected);
    		}
    	};

    	const mod = {
    		OLSKMobileViewInactive: false,
    		// VALUE
    		_ValueItemsAll: [],
    		ValueItemsAll(inputData, shouldSort = true) {
    			mod.ValueArchiveCount(inputData);

    			mod.ValueItemsVisible(
    				$$invalidate(
    					10,
    					mod._ValueItemsAll = shouldSort
    					? inputData.sort(OLSKCatalogSortFunction)
    					: inputData,
    					mod
    				),
    				shouldSort
    			);
    		},
    		_ValueArchiveCount: 0,
    		_ValueArchiveIsVisible: false,
    		ValueArchiveCount(inputData) {
    			if (!_OLSKCatalogArchiveField) {
    				return;
    			}

    			$$invalidate(
    				10,
    				mod._ValueArchiveCount = inputData.filter(function (e) {
    					return e[_OLSKCatalogArchiveField];
    				}).length,
    				mod
    			);
    		},
    		_ValueItemsVisible: [],
    		ValueItemsVisible(inputData, shouldSort = true) {
    			const items = inputData.filter(function (e) {
    				if (!mod._ValueArchiveIsVisible && _OLSKCatalogArchiveField && e[_OLSKCatalogArchiveField]) {
    					return false;
    				}

    				return !mod._ValueFilterText || OLSKCatalogIsMatch(e, mod._ValueFilterText);
    			});

    			$$invalidate(10, mod._ValueItemsVisible = shouldSort ? items.sort(OLSKCatalogSortFunction) : items, mod);
    		},
    		_ValueItemSelected: null,
    		ValueItemSelected(inputData) {
    			$$invalidate(10, mod._ValueItemSelected = inputData, mod);

    			if (!inputData) {
    				$$invalidate(10, mod.OLSKMobileViewInactive = false, mod);
    			}
    		},
    		_ValueFilterText: '',
    		_ValueStashEnabled: false,
    		// DATA
    		DataIsMobile() {
    			return window.innerWidth <= 760;
    		},
    		// INTERFACE
    		InterfaceStashDoneButtonDidClick() {
    			OLSKCatalogDispatchStash && OLSKCatalogDispatchStash(modPublic._OLSKNarrow.modPublic._OLSKCollection.modPublic._OLSKCollectionStashItems);
    			modPublic.OLSKCatalogStashEnabled(false);
    		},
    		InterfaceWindowDidKeydown(event) {
    			if (document.querySelector('.LCHLauncher')) {
    				// #spec
    				return;
    			}

    			const handlerFunctions = {
    				Escape() {
    					if (modPublic.OLSKCatalogDisableEscape) {
    						return;
    					}

    					if (!mod._ValueFilterText && !mod._ValueItemSelected) {
    						OLSKCatalogDispatchEscapeOnEmpty && OLSKCatalogDispatchEscapeOnEmpty();
    					}

    					mod.ControlDeselect();
    				},
    				Tab() {
    					if (document.activeElement === document.querySelector('.OLSKNarrowFilterField') && mod._ValueItemSelected) {
    						return event.preventDefault(OLSKCatalogDispatchDetailActivate && OLSKCatalogDispatchDetailActivate());
    					}

    					if (event.shiftKey && document.activeElement !== document.querySelector('.OLSKNarrowFilterField') && OLSKCatalogDispatchMasterShouldActivate && OLSKCatalogDispatchMasterShouldActivate()) {
    						return event.preventDefault(mod.ControlFocusMaster());
    					}
    				}
    			};

    			handlerFunctions[event.key] && handlerFunctions[event.key]();
    		},
    		// CONTROL
    		ControlSelect(inputData) {
    			mod.ValueItemSelected(inputData);

    			if (!inputData) {
    				return !mod.DataIsMobile() && mod.ControlFocusMaster();
    			}
    		},
    		ControlFilterWithThrottle(inputData) {
    			$$invalidate(10, mod._ValueFilterText = inputData, mod);

    			OLSKThrottle.OLSKThrottleMappedTimeout(mod, '_ValueFilterThrottle', {
    				OLSKThrottleDuration: 200,
    				OLSKThrottleCallback() {
    					return mod.ControlFilterWithNoThrottle(mod._ValueFilterText);
    				}
    			});

    			if (main_1$2()) {
    				OLSKThrottle.OLSKThrottleSkip(mod._ValueFilterThrottle);
    			}
    		},
    		ControlFilterWithNoThrottle(inputData) {
    			if (mod._ValueArchiveCount) {
    				$$invalidate(10, mod._ValueArchiveIsVisible = !!inputData, mod)
    				? OLSKCatalogDispatchArchivedShow()
    				: OLSKCatalogDispatchArchivedHide();
    			}

    			mod.ValueItemsVisible(mod._ValueItemsAll);

    			if (!inputData) {
    				return mod.ControlSelect(null);
    			}

    			if (!mod._ValueItemsVisible.length) {
    				return mod.ControlSelect(null);
    			}

    			OLSKCatalogExactSortFunction && mod.ValueItemSelected(mod._ValueItemsVisible.slice().sort(function (a, b) {
    				return OLSKCatalogExactSortFunction(inputData, a, b);
    			}).shift());
    		},
    		ControlFocusMaster() {
    			$$invalidate(10, mod.OLSKMobileViewInactive = false, mod);

    			if (mod.DataIsMobile()) {
    				return;
    			}

    			document.querySelector('.OLSKNarrowFilterField').focus();
    		},
    		ControlFocusDetail() {
    			$$invalidate(10, mod.OLSKMobileViewInactive = true, mod);
    			setTimeout(mod.ControlFocusDetail);
    		},
    		ControlDeselect() {
    			mod.ValueArchiveCount(mod._ValueItemsAll);
    			mod._ValueItemsAll.sort(OLSKCatalogSortFunction);
    			mod.ControlFilterWithNoThrottle($$invalidate(10, mod._ValueFilterText = '', mod));

    			if (typeof main_1$2 !== 'undefined' && !main_1$2()) {
    				document.querySelector('.OLSKNarrowBody').scrollTo(0, 0);
    			}
    		},
    		// MESSAGE
    		OLSKNarrowDispatchFilter(inputData) {
    			mod.ControlFilterWithThrottle(inputData);
    		},
    		OLSKNarrowDispatchSubmit() {
    			mod._ValueFilterText && OLSKCatalogDispatchFilterSubmit && OLSKCatalogDispatchFilterSubmit(mod._ValueFilterText);
    		},
    		OLSKCollectionDispatchStash(inputData) {
    			$$invalidate(10, mod._ValueStashCount = inputData.length, mod);
    			OLSKCollectionDispatchStash && OLSKCollectionDispatchStash(inputData);
    		},
    		// SETUP
    		SetupEverything() {
    			mod.SetupFocus();
    			mod.SetupItems();
    		},
    		SetupFocus() {
    			setTimeout(mod.ControlFocusMaster);
    		},
    		SetupItems() {
    			mod.ValueItemsAll(OLSKCatalogItems);

    			if (mod._ValueArchiveCount) {
    				OLSKCatalogDispatchArchivedHide();
    			}
    		},
    		// LIFECYCLE
    		LifecycleModuleWillMount() {
    			mod.SetupEverything();
    		},
    		LifecycleDetailDidCreate() {
    			if (!mod._ValueShouldActivate) {
    				return;
    			}

    			delete mod._ValueShouldActivate;
    			OLSKCatalogDispatchDetailActivate && OLSKCatalogDispatchDetailActivate();
    		}
    	};

    	onMount(mod.LifecycleModuleWillMount);

    	$$self.$$.on_mount.push(function () {
    		if (OLSKCollectionItemAccessibilitySummaryFunction === undefined && !('OLSKCollectionItemAccessibilitySummaryFunction' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCollectionItemAccessibilitySummaryFunction']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionItemAccessibilitySummaryFunction'");
    		}

    		if (OLSKCatalogSortFunction === undefined && !('OLSKCatalogSortFunction' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCatalogSortFunction']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCatalogSortFunction'");
    		}

    		if (OLSKCatalogIsMatch === undefined && !('OLSKCatalogIsMatch' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCatalogIsMatch']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCatalogIsMatch'");
    		}

    		if (_OLSKCatalogDispatchKey === undefined && !('_OLSKCatalogDispatchKey' in $$props || $$self.$$.bound[$$self.$$.props['_OLSKCatalogDispatchKey']])) {
    			console.warn("<Main> was created without expected prop '_OLSKCatalogDispatchKey'");
    		}

    		if (OLSKCollectionDispatchClick === undefined && !('OLSKCollectionDispatchClick' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCollectionDispatchClick']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionDispatchClick'");
    		}

    		if (OLSKCollectionDispatchArrow === undefined && !('OLSKCollectionDispatchArrow' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCollectionDispatchArrow']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionDispatchArrow'");
    		}
    	});

    	const writable_props = [
    		'OLSKCollectionItemAccessibilitySummaryFunction',
    		'OLSKCollectionItemClass',
    		'OLSKNarrowFilterFieldPlaceholderText',
    		'_OLSKCatalogArchiveField',
    		'OLSKCatalogSortFunction',
    		'OLSKCatalogIsMatch',
    		'OLSKCatalogExactSortFunction',
    		'_OLSKCatalogDispatchKey',
    		'OLSKCollectionChunkFunction',
    		'OLSKCollectionChunkKeySortFunction',
    		'OLSKCollectionDispatchClick',
    		'OLSKCollectionDispatchArrow',
    		'OLSKCollectionDispatchStash',
    		'OLSKCatalogDispatchDetailActivate',
    		'OLSKCatalogDispatchMasterShouldActivate',
    		'OLSKCatalogDispatchArchivedHide',
    		'OLSKCatalogDispatchArchivedShow',
    		'OLSKCatalogDispatchFilterSubmit',
    		'OLSKCatalogDispatchQuantity',
    		'OLSKCatalogDispatchEscapeOnEmpty',
    		'OLSKCatalogDispatchStash',
    		'OLSKCatalogItems',
    		'OLSKCatalogDisableEscape'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function olsknarrow_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			modPublic._OLSKNarrow = $$value;
    			$$invalidate(0, modPublic);
    		});
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			mod._OLSKCatalogDetail = $$value;
    			$$invalidate(10, mod);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('OLSKCollectionItemAccessibilitySummaryFunction' in $$props) $$invalidate(1, OLSKCollectionItemAccessibilitySummaryFunction = $$props.OLSKCollectionItemAccessibilitySummaryFunction);
    		if ('OLSKCollectionItemClass' in $$props) $$invalidate(2, OLSKCollectionItemClass = $$props.OLSKCollectionItemClass);
    		if ('OLSKNarrowFilterFieldPlaceholderText' in $$props) $$invalidate(3, OLSKNarrowFilterFieldPlaceholderText = $$props.OLSKNarrowFilterFieldPlaceholderText);
    		if ('_OLSKCatalogArchiveField' in $$props) $$invalidate(12, _OLSKCatalogArchiveField = $$props._OLSKCatalogArchiveField);
    		if ('OLSKCatalogSortFunction' in $$props) $$invalidate(4, OLSKCatalogSortFunction = $$props.OLSKCatalogSortFunction);
    		if ('OLSKCatalogIsMatch' in $$props) $$invalidate(13, OLSKCatalogIsMatch = $$props.OLSKCatalogIsMatch);
    		if ('OLSKCatalogExactSortFunction' in $$props) $$invalidate(14, OLSKCatalogExactSortFunction = $$props.OLSKCatalogExactSortFunction);
    		if ('_OLSKCatalogDispatchKey' in $$props) $$invalidate(5, _OLSKCatalogDispatchKey = $$props._OLSKCatalogDispatchKey);
    		if ('OLSKCollectionChunkFunction' in $$props) $$invalidate(6, OLSKCollectionChunkFunction = $$props.OLSKCollectionChunkFunction);
    		if ('OLSKCollectionChunkKeySortFunction' in $$props) $$invalidate(7, OLSKCollectionChunkKeySortFunction = $$props.OLSKCollectionChunkKeySortFunction);
    		if ('OLSKCollectionDispatchClick' in $$props) $$invalidate(8, OLSKCollectionDispatchClick = $$props.OLSKCollectionDispatchClick);
    		if ('OLSKCollectionDispatchArrow' in $$props) $$invalidate(9, OLSKCollectionDispatchArrow = $$props.OLSKCollectionDispatchArrow);
    		if ('OLSKCollectionDispatchStash' in $$props) $$invalidate(15, OLSKCollectionDispatchStash = $$props.OLSKCollectionDispatchStash);
    		if ('OLSKCatalogDispatchDetailActivate' in $$props) $$invalidate(16, OLSKCatalogDispatchDetailActivate = $$props.OLSKCatalogDispatchDetailActivate);
    		if ('OLSKCatalogDispatchMasterShouldActivate' in $$props) $$invalidate(17, OLSKCatalogDispatchMasterShouldActivate = $$props.OLSKCatalogDispatchMasterShouldActivate);
    		if ('OLSKCatalogDispatchArchivedHide' in $$props) $$invalidate(18, OLSKCatalogDispatchArchivedHide = $$props.OLSKCatalogDispatchArchivedHide);
    		if ('OLSKCatalogDispatchArchivedShow' in $$props) $$invalidate(19, OLSKCatalogDispatchArchivedShow = $$props.OLSKCatalogDispatchArchivedShow);
    		if ('OLSKCatalogDispatchFilterSubmit' in $$props) $$invalidate(20, OLSKCatalogDispatchFilterSubmit = $$props.OLSKCatalogDispatchFilterSubmit);
    		if ('OLSKCatalogDispatchQuantity' in $$props) $$invalidate(21, OLSKCatalogDispatchQuantity = $$props.OLSKCatalogDispatchQuantity);
    		if ('OLSKCatalogDispatchEscapeOnEmpty' in $$props) $$invalidate(22, OLSKCatalogDispatchEscapeOnEmpty = $$props.OLSKCatalogDispatchEscapeOnEmpty);
    		if ('OLSKCatalogDispatchStash' in $$props) $$invalidate(23, OLSKCatalogDispatchStash = $$props.OLSKCatalogDispatchStash);
    		if ('OLSKCatalogItems' in $$props) $$invalidate(24, OLSKCatalogItems = $$props.OLSKCatalogItems);
    		if ('OLSKCatalogDisableEscape' in $$props) $$invalidate(25, OLSKCatalogDisableEscape = $$props.OLSKCatalogDisableEscape);
    		if ('$$scope' in $$props) $$invalidate(29, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		OLSKCollectionItemAccessibilitySummaryFunction,
    		OLSKCollectionItemClass,
    		OLSKNarrowFilterFieldPlaceholderText,
    		_OLSKCatalogArchiveField,
    		OLSKCatalogSortFunction,
    		OLSKCatalogIsMatch,
    		OLSKCatalogExactSortFunction,
    		_OLSKCatalogDispatchKey,
    		OLSKCollectionChunkFunction,
    		OLSKCollectionChunkKeySortFunction,
    		OLSKCollectionDispatchClick,
    		OLSKCollectionDispatchArrow,
    		OLSKCollectionDispatchStash,
    		OLSKCatalogDispatchDetailActivate,
    		OLSKCatalogDispatchMasterShouldActivate,
    		OLSKCatalogDispatchArchivedHide,
    		OLSKCatalogDispatchArchivedShow,
    		OLSKCatalogDispatchFilterSubmit,
    		OLSKCatalogDispatchQuantity,
    		OLSKCatalogDispatchEscapeOnEmpty,
    		OLSKCatalogDispatchStash,
    		OLSKCatalogItems,
    		OLSKCatalogDisableEscape,
    		OLSKLocalized: main_1,
    		OLSKFormatted: main_1$1,
    		OLSK_SPEC_UI: main_1$2,
    		OLSKThrottle,
    		modPublic,
    		mod,
    		onMount,
    		OLSKNarrow: Main$d,
    		OLSKPlaceholder: Main$e
    	});

    	$$self.$inject_state = $$props => {
    		if ('OLSKCollectionItemAccessibilitySummaryFunction' in $$props) $$invalidate(1, OLSKCollectionItemAccessibilitySummaryFunction = $$props.OLSKCollectionItemAccessibilitySummaryFunction);
    		if ('OLSKCollectionItemClass' in $$props) $$invalidate(2, OLSKCollectionItemClass = $$props.OLSKCollectionItemClass);
    		if ('OLSKNarrowFilterFieldPlaceholderText' in $$props) $$invalidate(3, OLSKNarrowFilterFieldPlaceholderText = $$props.OLSKNarrowFilterFieldPlaceholderText);
    		if ('_OLSKCatalogArchiveField' in $$props) $$invalidate(12, _OLSKCatalogArchiveField = $$props._OLSKCatalogArchiveField);
    		if ('OLSKCatalogSortFunction' in $$props) $$invalidate(4, OLSKCatalogSortFunction = $$props.OLSKCatalogSortFunction);
    		if ('OLSKCatalogIsMatch' in $$props) $$invalidate(13, OLSKCatalogIsMatch = $$props.OLSKCatalogIsMatch);
    		if ('OLSKCatalogExactSortFunction' in $$props) $$invalidate(14, OLSKCatalogExactSortFunction = $$props.OLSKCatalogExactSortFunction);
    		if ('_OLSKCatalogDispatchKey' in $$props) $$invalidate(5, _OLSKCatalogDispatchKey = $$props._OLSKCatalogDispatchKey);
    		if ('OLSKCollectionChunkFunction' in $$props) $$invalidate(6, OLSKCollectionChunkFunction = $$props.OLSKCollectionChunkFunction);
    		if ('OLSKCollectionChunkKeySortFunction' in $$props) $$invalidate(7, OLSKCollectionChunkKeySortFunction = $$props.OLSKCollectionChunkKeySortFunction);
    		if ('OLSKCollectionDispatchClick' in $$props) $$invalidate(8, OLSKCollectionDispatchClick = $$props.OLSKCollectionDispatchClick);
    		if ('OLSKCollectionDispatchArrow' in $$props) $$invalidate(9, OLSKCollectionDispatchArrow = $$props.OLSKCollectionDispatchArrow);
    		if ('OLSKCollectionDispatchStash' in $$props) $$invalidate(15, OLSKCollectionDispatchStash = $$props.OLSKCollectionDispatchStash);
    		if ('OLSKCatalogDispatchDetailActivate' in $$props) $$invalidate(16, OLSKCatalogDispatchDetailActivate = $$props.OLSKCatalogDispatchDetailActivate);
    		if ('OLSKCatalogDispatchMasterShouldActivate' in $$props) $$invalidate(17, OLSKCatalogDispatchMasterShouldActivate = $$props.OLSKCatalogDispatchMasterShouldActivate);
    		if ('OLSKCatalogDispatchArchivedHide' in $$props) $$invalidate(18, OLSKCatalogDispatchArchivedHide = $$props.OLSKCatalogDispatchArchivedHide);
    		if ('OLSKCatalogDispatchArchivedShow' in $$props) $$invalidate(19, OLSKCatalogDispatchArchivedShow = $$props.OLSKCatalogDispatchArchivedShow);
    		if ('OLSKCatalogDispatchFilterSubmit' in $$props) $$invalidate(20, OLSKCatalogDispatchFilterSubmit = $$props.OLSKCatalogDispatchFilterSubmit);
    		if ('OLSKCatalogDispatchQuantity' in $$props) $$invalidate(21, OLSKCatalogDispatchQuantity = $$props.OLSKCatalogDispatchQuantity);
    		if ('OLSKCatalogDispatchEscapeOnEmpty' in $$props) $$invalidate(22, OLSKCatalogDispatchEscapeOnEmpty = $$props.OLSKCatalogDispatchEscapeOnEmpty);
    		if ('OLSKCatalogDispatchStash' in $$props) $$invalidate(23, OLSKCatalogDispatchStash = $$props.OLSKCatalogDispatchStash);
    		if ('OLSKCatalogItems' in $$props) $$invalidate(24, OLSKCatalogItems = $$props.OLSKCatalogItems);
    		if ('OLSKCatalogDisableEscape' in $$props) $$invalidate(25, OLSKCatalogDisableEscape = $$props.OLSKCatalogDisableEscape);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		modPublic,
    		OLSKCollectionItemAccessibilitySummaryFunction,
    		OLSKCollectionItemClass,
    		OLSKNarrowFilterFieldPlaceholderText,
    		OLSKCatalogSortFunction,
    		_OLSKCatalogDispatchKey,
    		OLSKCollectionChunkFunction,
    		OLSKCollectionChunkKeySortFunction,
    		OLSKCollectionDispatchClick,
    		OLSKCollectionDispatchArrow,
    		mod,
    		$$slots,
    		_OLSKCatalogArchiveField,
    		OLSKCatalogIsMatch,
    		OLSKCatalogExactSortFunction,
    		OLSKCollectionDispatchStash,
    		OLSKCatalogDispatchDetailActivate,
    		OLSKCatalogDispatchMasterShouldActivate,
    		OLSKCatalogDispatchArchivedHide,
    		OLSKCatalogDispatchArchivedShow,
    		OLSKCatalogDispatchFilterSubmit,
    		OLSKCatalogDispatchQuantity,
    		OLSKCatalogDispatchEscapeOnEmpty,
    		OLSKCatalogDispatchStash,
    		OLSKCatalogItems,
    		OLSKCatalogDisableEscape,
    		slots,
    		olsknarrow_binding,
    		div_binding,
    		$$scope
    	];
    }

    class Main$f extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {
    			OLSKCollectionItemAccessibilitySummaryFunction: 1,
    			OLSKCollectionItemClass: 2,
    			OLSKNarrowFilterFieldPlaceholderText: 3,
    			_OLSKCatalogArchiveField: 12,
    			OLSKCatalogSortFunction: 4,
    			OLSKCatalogIsMatch: 13,
    			OLSKCatalogExactSortFunction: 14,
    			_OLSKCatalogDispatchKey: 5,
    			OLSKCollectionChunkFunction: 6,
    			OLSKCollectionChunkKeySortFunction: 7,
    			OLSKCollectionDispatchClick: 8,
    			OLSKCollectionDispatchArrow: 9,
    			OLSKCollectionDispatchStash: 15,
    			OLSKCatalogDispatchDetailActivate: 16,
    			OLSKCatalogDispatchMasterShouldActivate: 17,
    			OLSKCatalogDispatchArchivedHide: 18,
    			OLSKCatalogDispatchArchivedShow: 19,
    			OLSKCatalogDispatchFilterSubmit: 20,
    			OLSKCatalogDispatchQuantity: 21,
    			OLSKCatalogDispatchEscapeOnEmpty: 22,
    			OLSKCatalogDispatchStash: 23,
    			OLSKCatalogItems: 24,
    			OLSKCatalogDisableEscape: 25,
    			modPublic: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$f.name
    		});
    	}

    	get OLSKCollectionItemAccessibilitySummaryFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItemAccessibilitySummaryFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionItemClass() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItemClass(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowFilterFieldPlaceholderText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowFilterFieldPlaceholderText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get _OLSKCatalogArchiveField() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set _OLSKCatalogArchiveField(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogSortFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogSortFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogIsMatch() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogIsMatch(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogExactSortFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogExactSortFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get _OLSKCatalogDispatchKey() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set _OLSKCatalogDispatchKey(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionChunkFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionChunkFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionChunkKeySortFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionChunkKeySortFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchClick() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchClick(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchArrow() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchArrow(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchStash() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchStash(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDispatchDetailActivate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDispatchDetailActivate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDispatchMasterShouldActivate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDispatchMasterShouldActivate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDispatchArchivedHide() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDispatchArchivedHide(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDispatchArchivedShow() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDispatchArchivedShow(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDispatchFilterSubmit() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDispatchFilterSubmit(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDispatchQuantity() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDispatchQuantity(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDispatchEscapeOnEmpty() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDispatchEscapeOnEmpty(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDispatchStash() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDispatchStash(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogItems() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogItems(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDisableEscape() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDisableEscape(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[0];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/sub-browse/submodules/KOMBrowseListItem/main.svelte generated by Svelte v3.59.2 */
    const file$g = "os-app/sub-browse/submodules/KOMBrowseListItem/main.svelte";

    // (9:0) {#if KOMBrowseListItemObject.KOMCardIsRetired }
    function create_if_block$8(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = `${main_1('KOMBrowseListItemRetiredText')}`;
    			attr_dev(span, "class", "KOMBrowseListItemRetired");
    			add_location(span, file$g, 9, 1, 190);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(9:0) {#if KOMBrowseListItemObject.KOMCardIsRetired }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let div;
    	let t0;
    	let strong;
    	let t1_value = /*KOMBrowseListItemObject*/ ctx[0].KOMCardFrontText + "";
    	let t1;
    	let br0;
    	let t2;
    	let span0;
    	let t3_value = /*KOMBrowseListItemObject*/ ctx[0].KOMCardRearText + "";
    	let t3;
    	let br1;
    	let t4;
    	let span1;
    	let t5_value = (/*KOMBrowseListItemObject*/ ctx[0].KOMCardTags || []).join(', ') + "";
    	let t5;
    	let if_block = /*KOMBrowseListItemObject*/ ctx[0].KOMCardIsRetired && create_if_block$8(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			t0 = space();
    			strong = element("strong");
    			t1 = text(t1_value);
    			br0 = element("br");
    			t2 = space();
    			span0 = element("span");
    			t3 = text(t3_value);
    			br1 = element("br");
    			t4 = space();
    			span1 = element("span");
    			t5 = text(t5_value);
    			attr_dev(strong, "class", "KOMBrowseListItemFront svelte-f0nvg2");
    			add_location(strong, file$g, 12, 0, 293);
    			add_location(br0, file$g, 12, 92, 385);
    			attr_dev(span0, "class", "KOMBrowseListItemRear");
    			add_location(span0, file$g, 13, 0, 390);
    			add_location(br1, file$g, 13, 86, 476);
    			attr_dev(span1, "class", "KOMBrowseListItemTags svelte-f0nvg2");
    			add_location(span1, file$g, 14, 0, 481);
    			attr_dev(div, "class", "KOMBrowseListItem svelte-f0nvg2");
    			add_location(div, file$g, 6, 0, 108);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t0);
    			append_dev(div, strong);
    			append_dev(strong, t1);
    			append_dev(div, br0);
    			append_dev(div, t2);
    			append_dev(div, span0);
    			append_dev(span0, t3);
    			append_dev(div, br1);
    			append_dev(div, t4);
    			append_dev(div, span1);
    			append_dev(span1, t5);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*KOMBrowseListItemObject*/ ctx[0].KOMCardIsRetired) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$8(ctx);
    					if_block.c();
    					if_block.m(div, t0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*KOMBrowseListItemObject*/ 1 && t1_value !== (t1_value = /*KOMBrowseListItemObject*/ ctx[0].KOMCardFrontText + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*KOMBrowseListItemObject*/ 1 && t3_value !== (t3_value = /*KOMBrowseListItemObject*/ ctx[0].KOMCardRearText + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*KOMBrowseListItemObject*/ 1 && t5_value !== (t5_value = (/*KOMBrowseListItemObject*/ ctx[0].KOMCardTags || []).join(', ') + "")) set_data_dev(t5, t5_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMBrowseListItemObject } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (KOMBrowseListItemObject === undefined && !('KOMBrowseListItemObject' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseListItemObject']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseListItemObject'");
    		}
    	});

    	const writable_props = ['KOMBrowseListItemObject'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('KOMBrowseListItemObject' in $$props) $$invalidate(0, KOMBrowseListItemObject = $$props.KOMBrowseListItemObject);
    	};

    	$$self.$capture_state = () => ({ KOMBrowseListItemObject, OLSKLocalized: main_1 });

    	$$self.$inject_state = $$props => {
    		if ('KOMBrowseListItemObject' in $$props) $$invalidate(0, KOMBrowseListItemObject = $$props.KOMBrowseListItemObject);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [KOMBrowseListItemObject];
    }

    class Main$g extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, { KOMBrowseListItemObject: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$g.name
    		});
    	}

    	get KOMBrowseListItemObject() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseListItemObject(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var _OLSKSharedDiscard$1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedDiscard\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedDiscard-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" d=\"M 4.53,6 L 13,6 13,13.47 C 13,13.91 13,14.13 12.93,14.33 L 12.93,14.37 C 12.83,14.63 12.63,14.83 12.37,14.93 12.13,15 11.91,15 11.47,15 L 4.53,15 C 4.09,15 3.87,15 3.67,14.93 L 3.63,14.93 C 3.37,14.83 3.17,14.63 3.07,14.37 3,14.13 3,13.91 3,13.47 L 3,6 Z M 4.53,6\" />\n    <path id=\"_OLSKSharedDiscard-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1,3.5 L 15,3.5\" />\n    <path id=\"_OLSKSharedDiscard-rectangle2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" d=\"M 8,1 L 8,1 C 9.75,1 9.75,1 9.75,1 L 9.75,1 C 10.44,1 11,1.56 11,2.25 11,2.25 11,2.25 11,2.25 11,2.25 11,2.25 11,2.25 L 11,2.25 C 11,2.25 11,2.25 11,2.25 L 11,3.5 5,3.5 5,2.25 C 5,1.56 5.56,1 6.25,1 6.25,1 6.25,1 6.25,1 L 8,1 Z M 8,1\" />\n    <path id=\"_OLSKSharedDiscard-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 5.5,5.5 L 5.5,15\" />\n    <path id=\"_OLSKSharedDiscard-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,6 L 8,15\" />\n    <path id=\"_OLSKSharedDiscard-bezier4\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 10.5,5.5 L 10.5,15\" />\n</svg>\n";

    var _OLSKSharedClone$1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedClone\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedClone-group2\" clip-path=\"url(#_OLSKSharedClone-clip)\">\n        <clipPath id=\"_OLSKSharedClone-clip\">\n            <path d=\"M 12,0.44 C 12.51,0.61 12.87,0.95 13.04,1.41 13.06,1.47 13.06,1.47 13.07,1.51 13.14,1.78 13.15,1.95 13.15,2.53 13.15,2.72 13.15,2.72 13.15,3.5 L 13.15,4.15 12.5,4.15 5.03,4.15 C 4.57,4.15 4.47,4.16 4.35,4.19 4.34,4.19 4.34,4.19 4.33,4.19 4.28,4.21 4.21,4.28 4.19,4.35 4.19,4.34 4.19,4.34 4.19,4.35 4.16,4.47 4.15,4.57 4.15,5.03 4.15,6.08 4.15,6.08 4.15,9.25 4.15,11.08 4.15,11.08 4.15,12.5 L 4.15,13.15 3.5,13.15 2.53,13.15 C 1.9,13.15 1.73,13.14 1.47,13.05 0.98,12.88 0.63,12.54 0.46,12.09 0.36,11.77 0.35,11.59 0.35,10.97 L 0.35,2.53 0.35,2.53 C 0.35,1.9 0.36,1.73 0.45,1.47 0.62,0.98 0.96,0.63 1.41,0.46 1.73,0.36 1.91,0.35 2.52,0.35 L 10.97,0.35 10.97,0.35 C 11.6,0.35 12,0.44 12,0.44 Z M 12,0.44\" />\n        </clipPath>\n        <rect id=\"_OLSKSharedClone-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" x=\"1\" y=\"1\" width=\"11.5\" height=\"11.5\" rx=\"1\" />\n    </g>\n    <rect id=\"_OLSKSharedClone-rectangle2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" x=\"3.5\" y=\"3.5\" width=\"11.5\" height=\"11.5\" rx=\"1\" />\n    <g id=\"_OLSKSharedClone-group\">\n        <path id=\"_OLSKSharedClone-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 9.5,6.5 L 9.5,12.5\" />\n        <path id=\"_OLSKSharedClone-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 6.5,9.5 L 12.5,9.5\" />\n    </g>\n</svg>\n";

    /* eslint-disable */

    function pad2(n) {
      n |= 0;
      return n < 10 ? `0${n}` : `${Math.min(n, 99)}`;
    }

    function inlineWorker() {
      // TODO(Kagami): Cache compiled module in IndexedDB? It works in FF
      // and Edge, see: https://github.com/mdn/webassembly-examples/issues/4
      // Though gzipped WASM module currently weights ~70kb so it should be
      // perfectly cached by the browser itself.
      function fetchAndInstantiate(url, imports) {
        if (!WebAssembly.instantiateStreaming) return fetchAndInstantiateFallback(url, imports);
        const req = fetch(url, {credentials: "same-origin"});
        return WebAssembly.instantiateStreaming(req, imports).catch(err => {
          // https://github.com/Kagami/vmsg/issues/11
          if (err.message && err.message.indexOf("Argument 0 must be provided and must be a Response") > 0) {
            return fetchAndInstantiateFallback(url, imports);
          } else {
            throw err;
          }
        });
      }

      function fetchAndInstantiateFallback(url, imports) {
        return new Promise((resolve, reject) => {
          const req = new XMLHttpRequest();
          req.open("GET", url);
          req.responseType = "arraybuffer";
          req.onload = () => {
            resolve(WebAssembly.instantiate(req.response, imports));
          };
          req.onerror = reject;
          req.send();
        });
      }

      // Must be in sync with emcc settings!
      const TOTAL_STACK = 5 * 1024 * 1024;
      const TOTAL_MEMORY = 16 * 1024 * 1024;
      const WASM_PAGE_SIZE = 64 * 1024;
      let memory = null;
      let dynamicTop = TOTAL_STACK;
      // TODO(Kagami): Grow memory?
      function sbrk(increment) {
        const oldDynamicTop = dynamicTop;
        dynamicTop += increment;
        return oldDynamicTop;
      }
      // TODO(Kagami): LAME calls exit(-1) on internal error. Would be nice
      // to provide custom DEBUGF/ERRORF for easier debugging. Currenty
      // those functions do nothing.
      function exit(status) {
        postMessage({type: "internal-error", data: status});
      }

      let FFI = null;
      let ref = null;
      let pcm_l = null;
      function vmsg_init(rate) {
        ref = FFI.vmsg_init(rate);
        if (!ref) return false;
        const pcm_l_ref = new Uint32Array(memory.buffer, ref, 1)[0];
        pcm_l = new Float32Array(memory.buffer, pcm_l_ref);
        return true;
      }
      function vmsg_encode(data) {
        pcm_l.set(data);
        return FFI.vmsg_encode(ref, data.length) >= 0;
      }
      function vmsg_flush() {
        if (FFI.vmsg_flush(ref) < 0) return null;
        const mp3_ref = new Uint32Array(memory.buffer, ref + 4, 1)[0];
        const size = new Uint32Array(memory.buffer, ref + 8, 1)[0];
        const mp3 = new Uint8Array(memory.buffer, mp3_ref, size);
        const blob = new Blob([mp3], {type: "audio/mpeg"});
        FFI.vmsg_free(ref);
        ref = null;
        pcm_l = null;
        return blob;
      }

      // https://github.com/brion/min-wasm-fail
      function testSafariWebAssemblyBug() {
        const bin = new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,127,1,127,3,2,1,0,5,3,1,0,1,7,8,1,4,116,101,115,116,0,0,10,16,1,14,0,32,0,65,1,54,2,0,32,0,40,2,0,11]);
        const mod = new WebAssembly.Module(bin);
        const inst = new WebAssembly.Instance(mod, {});
        // test storing to and loading from a non-zero location via a parameter.
        // Safari on iOS 11.2.5 returns 0 unexpectedly at non-zero locations
        return (inst.exports.test(4) !== 0);
      }

      onmessage = (e) => {
        const msg = e.data;
        switch (msg.type) {
        case "init":
          const { wasmURL, shimURL } = msg.data;
          Promise.resolve().then(() => {
            if (self.WebAssembly && !testSafariWebAssemblyBug()) {
              delete self.WebAssembly;
            }
            if (!self.WebAssembly) {
              importScripts(shimURL);
            }
            memory = new WebAssembly.Memory({
              initial: TOTAL_MEMORY / WASM_PAGE_SIZE,
              maximum: TOTAL_MEMORY / WASM_PAGE_SIZE,
            });
            return {
              memory: memory,
              pow: Math.pow,
              exit: exit,
              powf: Math.pow,
              exp: Math.exp,
              sqrtf: Math.sqrt,
              cos: Math.cos,
              log: Math.log,
              sin: Math.sin,
              sbrk: sbrk,
            };
          }).then(Runtime => {
            return fetchAndInstantiate(wasmURL, {env: Runtime})
          }).then(wasm => {
            FFI = wasm.instance.exports;
            postMessage({type: "init", data: null});
          }).catch(err => {
            postMessage({type: "init-error", data: err.toString()});
          });
          break;
        case "start":
          if (!vmsg_init(msg.data)) return postMessage({type: "error", data: "vmsg_init"});
          break;
        case "data":
          if (!vmsg_encode(msg.data)) return postMessage({type: "error", data: "vmsg_encode"});
          break;
        case "stop":
          const blob = vmsg_flush();
          if (!blob) return postMessage({type: "error", data: "vmsg_flush"});
          postMessage({type: "stop", data: blob});
          break;
        }
      };
    }

    class Recorder {
      constructor(opts = {}, onStop = null) {
        // Can't use relative URL in blob worker, see:
        // https://stackoverflow.com/a/22582695
        this.wasmURL = new URL(opts.wasmURL || "/static/js/vmsg.wasm", location).href;
        this.shimURL = new URL(opts.shimURL || "/static/js/wasm-polyfill.js", location).href;
        this.onStop = onStop;
        this.pitch = opts.pitch || 0;
        this.stream = null;
        this.audioCtx = null;
        this.gainNode = null;
        this.pitchFX = null;
        this.encNode = null;
        this.worker = null;
        this.workerURL = null;
        this.blob = null;
        this.blobURL = null;
        this.resolve = null;
        this.reject = null;
        Object.seal(this);
      }

      close() {
        if (this.encNode) this.encNode.disconnect();
        if (this.encNode) this.encNode.onaudioprocess = null;
        if (this.stream) this.stopTracks();
        if (this.audioCtx) this.audioCtx.close();
        if (this.worker) {
          this.worker.terminate();
          this.worker = null;
        }
        if (this.workerURL) URL.revokeObjectURL(this.workerURL);
        if (this.blobURL) URL.revokeObjectURL(this.blobURL);
      }

      // Without pitch shift:
      //   [sourceNode] -> [gainNode] -> [encNode] -> [audioCtx.destination]
      //                                     |
      //                                     -> [worker]
      // With pitch shift:
      //   [sourceNode] -> [gainNode] -> [pitchFX] -> [encNode] -> [audioCtx.destination]
      //                                                  |
      //                                                  -> [worker]
      initAudio() {
        const getUserMedia = navigator.mediaDevices && navigator.mediaDevices.getUserMedia
          ? function(constraints) {
              return navigator.mediaDevices.getUserMedia(constraints);
            }
          : function(constraints) {
              const oldGetUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
              if (!oldGetUserMedia) {
                return Promise.reject(new Error("getUserMedia is not implemented in this browser"));
              }
              return new Promise(function(resolve, reject) {
                oldGetUserMedia.call(navigator, constraints, resolve, reject);
              });
            };

        return getUserMedia({audio: true}).then((stream) => {
          this.stream = stream;
          const audioCtx = this.audioCtx = new (window.AudioContext
            || window.webkitAudioContext)();

          const sourceNode = audioCtx.createMediaStreamSource(stream);
          const gainNode = this.gainNode = (audioCtx.createGain
            || audioCtx.createGainNode).call(audioCtx);
          gainNode.gain.value = 1;
          sourceNode.connect(gainNode);

          const pitchFX = this.pitchFX = new Jungle(audioCtx);
          pitchFX.setPitchOffset(this.pitch);

          const encNode = this.encNode = (audioCtx.createScriptProcessor
            || audioCtx.createJavaScriptNode).call(audioCtx, 0, 1, 1);
          pitchFX.output.connect(encNode);

          gainNode.connect(this.pitch === 0 ? encNode : pitchFX.input);
        });
      }

      initWorker() {
        if (this.worker) return Promise.resolve();
        // https://stackoverflow.com/a/19201292
        const blob = new Blob(
          ["(", inlineWorker.toString(), ")()"],
          {type: "application/javascript"});
        const workerURL = this.workerURL = URL.createObjectURL(blob);
        const worker = this.worker = new Worker(workerURL);
        const { wasmURL, shimURL } = this;
        worker.postMessage({type: "init", data: {wasmURL, shimURL}});
        return new Promise((resolve, reject) => {
          worker.onmessage = (e) => {
            const msg = e.data;
            switch (msg.type) {
            case "init":
              resolve();
              break;
            case "init-error":
              this.close();
              reject(new Error(msg.data));
              break;
            // TODO(Kagami): Error handling.
            case "error":
            case "internal-error":
              this.close();
              console.error("Worker error:", msg.data);
              if (this.reject) this.reject(msg.data);
              break;
            case "stop":
              this.blob = msg.data;
              this.blobURL = URL.createObjectURL(msg.data);
              if (this.onStop) this.onStop();
              if (this.resolve) this.resolve(this.blob);
              break;
            }
          };
        });
      }

      init() {
        return this.initAudio().then(this.initWorker.bind(this));
      }

      startRecording() {
        if (!this.stream) throw new Error("missing audio initialization");
        if (!this.worker) throw new Error("missing worker initialization");
        this.blob = null;
        if (this.blobURL) URL.revokeObjectURL(this.blobURL);
        this.blobURL = null;
        this.resolve = null;
        this.reject = null;
        this.worker.postMessage({type: "start", data: this.audioCtx.sampleRate});
        this.encNode.onaudioprocess = (e) => {
          const samples = e.inputBuffer.getChannelData(0);
          this.worker.postMessage({type: "data", data: samples});
        };
        this.encNode.connect(this.audioCtx.destination);
      }

      stopRecording() {
        if (!this.stream) throw new Error("missing audio initialization");
        if (!this.worker) throw new Error("missing worker initialization");
        this.encNode.disconnect();
        this.encNode.onaudioprocess = null;
        this.stopTracks();
        this.audioCtx.close();
        this.worker.postMessage({type: "stop", data: null});
        return new Promise((resolve, reject) => {
          this.resolve = resolve;
          this.reject = reject;
        });
      }

      stopTracks() {
        // Might be missed in Safari and old FF/Chrome per MDN.
        if (this.stream.getTracks) {
          // Hide browser's recording indicator.
          this.stream.getTracks().forEach((track) => track.stop());
        }
      }
    }

    class Form {
      constructor(opts = {}, resolve, reject) {
        this.recorder = new Recorder(opts, this.onStop.bind(this));
        this.resolve = resolve;
        this.reject = reject;
        this.backdrop = null;
        this.popup = null;
        this.recordBtn = null;
        this.stopBtn = null;
        this.timer = null;
        this.audio = null;
        this.saveBtn = null;
        this.tid = 0;
        this.start = 0;
        Object.seal(this);

        this.recorder.initAudio()
          .then(() => this.drawInit())
          .then(() => this.recorder.initWorker())
          .then(() => this.drawAll())
          .catch((err) => this.drawError(err));
      }

      drawInit() {
        if (this.backdrop) return;
        const backdrop = this.backdrop = document.createElement("div");
        backdrop.className = "vmsg-backdrop";
        backdrop.addEventListener("click", () => this.close(null));

        const popup = this.popup = document.createElement("div");
        popup.className = "vmsg-popup";
        popup.addEventListener("click", (e) => e.stopPropagation());

        const progress = document.createElement("div");
        progress.className = "vmsg-progress";
        for (let i = 0; i < 3; i++) {
          const progressDot = document.createElement("div");
          progressDot.className = "vmsg-progress-dot";
          progress.appendChild(progressDot);
        }
        popup.appendChild(progress);

        backdrop.appendChild(popup);
        document.body.appendChild(backdrop);
      }

      drawTime(msecs) {
        const secs = Math.round(msecs / 1000);
        this.timer.textContent = pad2(secs / 60) + ":" + pad2(secs % 60);
      }

      drawAll() {
        this.drawInit();
        this.clearAll();

        const recordRow = document.createElement("div");
        recordRow.className = "vmsg-record-row";
        this.popup.appendChild(recordRow);

        const recordBtn = this.recordBtn = document.createElement("button");
        recordBtn.className = "vmsg-button vmsg-record-button";
        recordBtn.textContent = "●";
        recordBtn.title = "Start Recording";
        recordBtn.addEventListener("click", () => this.startRecording());
        recordRow.appendChild(recordBtn);

        const stopBtn = this.stopBtn = document.createElement("button");
        stopBtn.className = "vmsg-button vmsg-stop-button";
        stopBtn.style.display = "none";
        stopBtn.textContent = "■";
        stopBtn.title = "Stop Recording";
        stopBtn.addEventListener("click", () => this.stopRecording());
        recordRow.appendChild(stopBtn);

        const audio = this.audio = new Audio();
        audio.autoplay = true;

        const timer = this.timer = document.createElement("span");
        timer.className = "vmsg-timer";
        timer.title = "Preview Recording";
        timer.addEventListener("click", () => {
          if (audio.paused) {
            if (this.recorder.blobURL) {
              audio.src = this.recorder.blobURL;
            }
          } else {
            audio.pause();
          }
        });
        this.drawTime(0);
        recordRow.appendChild(timer);

        const saveBtn = this.saveBtn = document.createElement("button");
        saveBtn.className = "vmsg-button vmsg-save-button";
        saveBtn.textContent = "✓";
        saveBtn.title = "Save Recording";
        saveBtn.disabled = true;
        saveBtn.addEventListener("click", () => this.close(this.recorder.blob));
        recordRow.appendChild(saveBtn);

        const gainWrapper = document.createElement("div");
        gainWrapper.className = "vmsg-slider-wrapper vmsg-gain-slider-wrapper";
        const gainSlider = document.createElement("input");
        gainSlider.className = "vmsg-slider vmsg-gain-slider";
        gainSlider.setAttribute("type", "range");
        gainSlider.min = 0;
        gainSlider.max = 2;
        gainSlider.step = 0.2;
        gainSlider.value = 1;
        gainSlider.onchange = () => {
          const gain = +gainSlider.value;
          this.recorder.gainNode.gain.value = gain;
        };
        gainWrapper.appendChild(gainSlider);
        this.popup.appendChild(gainWrapper);

        const pitchWrapper = document.createElement("div");
        pitchWrapper.className = "vmsg-slider-wrapper vmsg-pitch-slider-wrapper";
        const pitchSlider = document.createElement("input");
        pitchSlider.className = "vmsg-slider vmsg-pitch-slider";
        pitchSlider.setAttribute("type", "range");
        pitchSlider.min = -1;
        pitchSlider.max = 1;
        pitchSlider.step = 0.2;
        pitchSlider.value = this.recorder.pitch;
        pitchSlider.onchange = () => {
          const pitch = +pitchSlider.value;
          this.recorder.pitchFX.setPitchOffset(pitch);
          this.recorder.gainNode.disconnect();
          this.recorder.gainNode.connect(
            pitch === 0 ? this.recorder.encNode : this.recorder.pitchFX.input
          );
        };
        pitchWrapper.appendChild(pitchSlider);
        this.popup.appendChild(pitchWrapper);
        recordBtn.focus();
      }

      drawError(err) {
        console.error(err);
        this.drawInit();
        this.clearAll();
        const error = document.createElement("div");
        error.className = "vmsg-error";
        error.textContent = err.toString();
        this.popup.appendChild(error);
      }

      clearAll() {
        if (!this.popup) return;
        this.popup.innerHTML = "";
      }

      close(blob) {
        if (this.audio) this.audio.pause();
        if (this.tid) clearTimeout(this.tid);
        this.recorder.close();
        this.backdrop.remove();
        if (blob) {
          this.resolve(blob);
        } else {
          this.reject(new Error("No record made"));
        }
      }

      onStop() {
        this.recordBtn.style.display = "";
        this.stopBtn.style.display = "none";
        this.stopBtn.disabled = false;
        this.saveBtn.disabled = false;
      }

      startRecording() {
        this.audio.pause();
        this.start = Date.now();
        this.updateTime();
        this.recordBtn.style.display = "none";
        this.stopBtn.style.display = "";
        this.saveBtn.disabled = true;
        this.stopBtn.focus();
        this.recorder.startRecording();
      }

      stopRecording() {
        clearTimeout(this.tid);
        this.tid = 0;
        this.stopBtn.disabled = true;
        this.recordBtn.focus();
        this.recorder.stopRecording();
      }

      updateTime() {
        // NOTE(Kagami): We can do this in `onaudioprocess` but that would
        // run too often and create unnecessary DOM updates.
        this.drawTime(Date.now() - this.start);
        this.tid = setTimeout(() => this.updateTime(), 300);
      }
    }

    let shown = false;

    /**
     * Record a new voice message.
     *
     * @param {Object=} opts - Options
     * @param {string=} opts.wasmURL - URL of the module
     *                                 ("/static/js/vmsg.wasm" by default)
     * @param {string=} opts.shimURL - URL of the WebAssembly polyfill
     *                                 ("/static/js/wasm-polyfill.js" by default)
     * @param {number=} opts.pitch - Initial pitch shift ([-1, 1], 0 by default)
     * @return {Promise.<Blob>} A promise that contains recorded blob when fulfilled.
     */
    function record(opts) {
      return new Promise((resolve, reject) => {
        if (shown) throw new Error("Record form is already opened");
        shown = true;
        new Form(opts, resolve, reject);
      // Use `.finally` once it's available in Safari and Edge.
      }).then(result => {
        shown = false;
        return result;
      }, err => {
        shown = false;
        throw err;
      });
    }

    /**
     * All available public items.
     */
    var record$1 = { Recorder, Form, record };

    // Borrowed from and slightly modified:
    // https://github.com/cwilso/Audio-Input-Effects/blob/master/js/jungle.js

    // Copyright 2012, Google Inc.
    // All rights reserved.
    //
    // Redistribution and use in source and binary forms, with or without
    // modification, are permitted provided that the following conditions are
    // met:
    //
    //     * Redistributions of source code must retain the above copyright
    // notice, this list of conditions and the following disclaimer.
    //     * Redistributions in binary form must reproduce the above
    // copyright notice, this list of conditions and the following disclaimer
    // in the documentation and/or other materials provided with the
    // distribution.
    //     * Neither the name of Google Inc. nor the names of its
    // contributors may be used to endorse or promote products derived from
    // this software without specific prior written permission.
    //
    // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

    const delayTime = 0.100;
    const fadeTime = 0.050;
    const bufferTime = 0.100;

    function createFadeBuffer(context, activeTime, fadeTime) {
      var length1 = activeTime * context.sampleRate;
      var length2 = (activeTime - 2*fadeTime) * context.sampleRate;
      var length = length1 + length2;
      var buffer = context.createBuffer(1, length, context.sampleRate);
      var p = buffer.getChannelData(0);

      var fadeLength = fadeTime * context.sampleRate;

      var fadeIndex1 = fadeLength;
      var fadeIndex2 = length1 - fadeLength;

      // 1st part of cycle
      for (var i = 0; i < length1; ++i) {
        var value;

        if (i < fadeIndex1) {
            value = Math.sqrt(i / fadeLength);
        } else if (i >= fadeIndex2) {
            value = Math.sqrt(1 - (i - fadeIndex2) / fadeLength);
        } else {
            value = 1;
        }

        p[i] = value;
      }

      // 2nd part
      for (var i = length1; i < length; ++i) {
        p[i] = 0;
      }

      return buffer;
    }

    function createDelayTimeBuffer(context, activeTime, fadeTime, shiftUp) {
      var length1 = activeTime * context.sampleRate;
      var length2 = (activeTime - 2*fadeTime) * context.sampleRate;
      var length = length1 + length2;
      var buffer = context.createBuffer(1, length, context.sampleRate);
      var p = buffer.getChannelData(0);

      // 1st part of cycle
      for (var i = 0; i < length1; ++i) {
        if (shiftUp)
          // This line does shift-up transpose
          p[i] = (length1-i)/length;
        else
          // This line does shift-down transpose
          p[i] = i / length1;
      }

      // 2nd part
      for (var i = length1; i < length; ++i) {
        p[i] = 0;
      }

      return buffer;
    }

    function Jungle(context) {
      this.context = context;
      // Create nodes for the input and output of this "module".
      var input = (context.createGain || context.createGainNode).call(context);
      var output = (context.createGain || context.createGainNode).call(context);
      this.input = input;
      this.output = output;

      // Delay modulation.
      var mod1 = context.createBufferSource();
      var mod2 = context.createBufferSource();
      var mod3 = context.createBufferSource();
      var mod4 = context.createBufferSource();
      this.shiftDownBuffer = createDelayTimeBuffer(context, bufferTime, fadeTime, false);
      this.shiftUpBuffer = createDelayTimeBuffer(context, bufferTime, fadeTime, true);
      mod1.buffer = this.shiftDownBuffer;
      mod2.buffer = this.shiftDownBuffer;
      mod3.buffer = this.shiftUpBuffer;
      mod4.buffer = this.shiftUpBuffer;
      mod1.loop = true;
      mod2.loop = true;
      mod3.loop = true;
      mod4.loop = true;

      // for switching between oct-up and oct-down
      var mod1Gain = (context.createGain || context.createGainNode).call(context);
      var mod2Gain = (context.createGain || context.createGainNode).call(context);
      var mod3Gain = (context.createGain || context.createGainNode).call(context);
      mod3Gain.gain.value = 0;
      var mod4Gain = (context.createGain || context.createGainNode).call(context);
      mod4Gain.gain.value = 0;

      mod1.connect(mod1Gain);
      mod2.connect(mod2Gain);
      mod3.connect(mod3Gain);
      mod4.connect(mod4Gain);

      // Delay amount for changing pitch.
      var modGain1 = (context.createGain || context.createGainNode).call(context);
      var modGain2 = (context.createGain || context.createGainNode).call(context);

      var delay1 = (context.createDelay || context.createDelayNode).call(context);
      var delay2 = (context.createDelay || context.createDelayNode).call(context);
      mod1Gain.connect(modGain1);
      mod2Gain.connect(modGain2);
      mod3Gain.connect(modGain1);
      mod4Gain.connect(modGain2);
      modGain1.connect(delay1.delayTime);
      modGain2.connect(delay2.delayTime);

      // Crossfading.
      var fade1 = context.createBufferSource();
      var fade2 = context.createBufferSource();
      var fadeBuffer = createFadeBuffer(context, bufferTime, fadeTime);
      fade1.buffer = fadeBuffer;
      fade2.buffer = fadeBuffer;
      fade1.loop = true;
      fade2.loop = true;

      var mix1 = (context.createGain || context.createGainNode).call(context);
      var mix2 = (context.createGain || context.createGainNode).call(context);
      mix1.gain.value = 0;
      mix2.gain.value = 0;

      fade1.connect(mix1.gain);
      fade2.connect(mix2.gain);

      // Connect processing graph.
      input.connect(delay1);
      input.connect(delay2);
      delay1.connect(mix1);
      delay2.connect(mix2);
      mix1.connect(output);
      mix2.connect(output);

      // Start
      var t = context.currentTime + 0.050;
      var t2 = t + bufferTime - fadeTime;
      mod1.start(t);
      mod2.start(t2);
      mod3.start(t);
      mod4.start(t2);
      fade1.start(t);
      fade2.start(t2);

      this.mod1 = mod1;
      this.mod2 = mod2;
      this.mod1Gain = mod1Gain;
      this.mod2Gain = mod2Gain;
      this.mod3Gain = mod3Gain;
      this.mod4Gain = mod4Gain;
      this.modGain1 = modGain1;
      this.modGain2 = modGain2;
      this.fade1 = fade1;
      this.fade2 = fade2;
      this.mix1 = mix1;
      this.mix2 = mix2;
      this.delay1 = delay1;
      this.delay2 = delay2;

      this.setDelay(delayTime);
    }

    Jungle.prototype.setDelay = function(delayTime) {
      this.modGain1.gain.setTargetAtTime(0.5*delayTime, 0, 0.010);
      this.modGain2.gain.setTargetAtTime(0.5*delayTime, 0, 0.010);
    };

    Jungle.prototype.setPitchOffset = function(mult) {
      if (mult>0) { // pitch up
        this.mod1Gain.gain.value = 0;
        this.mod2Gain.gain.value = 0;
        this.mod3Gain.gain.value = 1;
        this.mod4Gain.gain.value = 1;
      } else { // pitch down
        this.mod1Gain.gain.value = 1;
        this.mod2Gain.gain.value = 1;
        this.mod3Gain.gain.value = 0;
        this.mod4Gain.gain.value = 0;
      }
      this.setDelay(delayTime*Math.abs(mult));
    };

    /* os-app/sub-browse/submodules/KOMBrowseInfoAudio/main.svelte generated by Svelte v3.59.2 */

    const { Object: Object_1$4, console: console_1 } = globals;
    const file$h = "os-app/sub-browse/submodules/KOMBrowseInfoAudio/main.svelte";

    // (205:0) {#if KOMBrowseInfoAudioAvailable }
    function create_if_block_2$4(ctx) {
    	let t0;
    	let t1;
    	let if_block2_anchor;
    	let if_block0 = !/*KOMBrowseInfoAudioItem*/ ctx[0][/*KOMBrowseInfoAudioItemProperty*/ ctx[2]] && create_if_block_5$1(ctx);
    	let if_block1 = /*mod*/ ctx[3]._ValueIsRecording && create_if_block_4$2(ctx);
    	let if_block2 = /*KOMBrowseInfoAudioItem*/ ctx[0][/*KOMBrowseInfoAudioItemProperty*/ ctx[2]] && create_if_block_3$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (!/*KOMBrowseInfoAudioItem*/ ctx[0][/*KOMBrowseInfoAudioItemProperty*/ ctx[2]]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_5$1(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*mod*/ ctx[3]._ValueIsRecording) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_4$2(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*KOMBrowseInfoAudioItem*/ ctx[0][/*KOMBrowseInfoAudioItemProperty*/ ctx[2]]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_3$2(ctx);
    					if_block2.c();
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(205:0) {#if KOMBrowseInfoAudioAvailable }",
    		ctx
    	});

    	return block;
    }

    // (207:1) {#if !KOMBrowseInfoAudioItem[KOMBrowseInfoAudioItemProperty] }
    function create_if_block_5$1(ctx) {
    	let button;
    	let t1;
    	let if_block_anchor;
    	let mounted;
    	let dispose;
    	let if_block = !/*mod*/ ctx[3]._ValueIsRecording && create_if_block_6$1(ctx);

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = `${main_1('KOMBrowseInfoAudioRecordButtonText')}`;
    			t1 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(button, "class", "KOMBrowseInfoAudioRecordButton");
    			add_location(button, file$h, 207, 2, 4484);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[3].InterfaceRecordButtonDidClick)) /*mod*/ ctx[3].InterfaceRecordButtonDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (!/*mod*/ ctx[3]._ValueIsRecording) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_6$1(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(207:1) {#if !KOMBrowseInfoAudioItem[KOMBrowseInfoAudioItemProperty] }",
    		ctx
    	});

    	return block;
    }

    // (210:2) {#if !mod._ValueIsRecording}
    function create_if_block_6$1(ctx) {
    	let input;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "class", "KOMBrowseInfoAudioUploadField");
    			attr_dev(input, "type", "file");
    			attr_dev(input, "accept", "audio/*");
    			add_location(input, file$h, 210, 3, 4678);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					input,
    					"change",
    					function () {
    						if (is_function(/*mod*/ ctx[3].InterfaceUploadFieldDidInput)) /*mod*/ ctx[3].InterfaceUploadFieldDidInput.apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(210:2) {#if !mod._ValueIsRecording}",
    		ctx
    	});

    	return block;
    }

    // (215:1) {#if mod._ValueIsRecording}
    function create_if_block_4$2(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = `${main_1('KOMBrowseInfoAudioRecordingAlertText')}`;
    			attr_dev(span, "class", "KOMBrowseInfoAudioRecordingAlert");
    			add_location(span, file$h, 215, 2, 4849);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(215:1) {#if mod._ValueIsRecording}",
    		ctx
    	});

    	return block;
    }

    // (219:1) {#if KOMBrowseInfoAudioItem[KOMBrowseInfoAudioItemProperty] }
    function create_if_block_3$2(ctx) {
    	let button0;
    	let t1;
    	let button1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button0 = element("button");
    			button0.textContent = `${main_1('KOMBrowseInfoAudioPlaybackButtonText')}`;
    			t1 = space();
    			button1 = element("button");
    			button1.textContent = `${main_1('KOMBrowseInfoAudioClearButtonText')}`;
    			attr_dev(button0, "class", "KOMBrowseInfoAudioPlaybackButton");
    			add_location(button0, file$h, 219, 2, 5034);
    			attr_dev(button1, "class", "KOMBrowseInfoAudioClearButton");
    			add_location(button1, file$h, 221, 2, 5202);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[3].InterfacePlaybackButtonDidClick)) /*mod*/ ctx[3].InterfacePlaybackButtonDidClick.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button1,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[3].InterfaceClearButtonDidClick)) /*mod*/ ctx[3].InterfaceClearButtonDidClick.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(button1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(219:1) {#if KOMBrowseInfoAudioItem[KOMBrowseInfoAudioItemProperty] }",
    		ctx
    	});

    	return block;
    }

    // (227:0) {#if !KOMBrowseInfoAudioAvailable }
    function create_if_block_1$6(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = `${main_1('KOMBrowseInfoAudioNotAvailableAlertText')}`;
    			attr_dev(span, "class", "KOMBrowseInfoAudioNotAvailableAlert");
    			add_location(span, file$h, 227, 1, 5410);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(227:0) {#if !KOMBrowseInfoAudioAvailable }",
    		ctx
    	});

    	return block;
    }

    // (231:0) {#if OLSK_SPEC_UI() }
    function create_if_block$9(ctx) {
    	let p;
    	let strong;
    	let t1;
    	let span;

    	const block = {
    		c: function create() {
    			p = element("p");
    			strong = element("strong");
    			strong.textContent = "KOMBrowseInfoAudioLog";
    			t1 = space();
    			span = element("span");
    			add_location(strong, file$h, 232, 2, 5564);
    			attr_dev(span, "id", "TestKOMBrowseInfoAudioLog");
    			add_location(span, file$h, 233, 2, 5605);
    			add_location(p, file$h, 231, 1, 5558);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, strong);
    			append_dev(p, t1);
    			append_dev(p, span);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(231:0) {#if OLSK_SPEC_UI() }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let show_if = main_1$2();
    	let if_block0 = /*KOMBrowseInfoAudioAvailable*/ ctx[1] && create_if_block_2$4(ctx);
    	let if_block1 = !/*KOMBrowseInfoAudioAvailable*/ ctx[1] && create_if_block_1$6(ctx);
    	let if_block2 = show_if && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(div, "class", "KOMBrowseInfoAudio");
    			add_location(div, file$h, 202, 0, 4348);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t0);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t1);
    			if (if_block2) if_block2.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*KOMBrowseInfoAudioAvailable*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$4(ctx);
    					if_block0.c();
    					if_block0.m(div, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (!/*KOMBrowseInfoAudioAvailable*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$6(ctx);
    					if_block1.c();
    					if_block1.m(div, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const kMaxLengthSeconds = 10;

    function instance$h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMBrowseInfoAudioAvailable } = $$props;
    	let { KOMBrowseInfoAudioItem } = $$props;
    	let { KOMBrowseInfoAudioItemProperty } = $$props;
    	let { KOMBrowseInfoAudioDispatchCapture } = $$props;
    	let { KOMBrowseInfoAudioDispatchFetch } = $$props;
    	let { KOMBrowseInfoAudioDispatchClear } = $$props;
    	let { DebugFakeChangeObject = null } = $$props;

    	const mod = {
    		// VALUE
    		_ValueIsRecording: false,
    		_ValueAudioID: undefined,
    		_ValueAudio: undefined,
    		_ValueAudioIsPlaying: false,
    		// DATA
    		DataFakeRecorder() {
    			return {
    				initAudio() {
    					
    				},
    				initWorker() {
    					
    				},
    				startRecording() {
    					
    				},
    				stopRecording() {
    					
    				}
    			};
    		},
    		DataFakeAudio(inputData) {
    			return {
    				play() {
    					
    				},
    				pause() {
    					
    				},
    				src: inputData
    			};
    		},
    		// INTERFACE
    		InterfaceRecordButtonDidClick() {
    			!mod._ValueIsRecording
    			? mod.ControlRecordStart()
    			: mod.ControlRecordStop();
    		},
    		InterfaceUploadFieldDidInput(event) {
    			mod.ControlUpload(event.target.files[0]);
    		},
    		InterfacePlaybackButtonDidClick() {
    			if (main_1$2() && DebugFakeChangeObject && mod._ValueAudioIsPlaying) {
    				$$invalidate(0, KOMBrowseInfoAudioItem = DebugFakeChangeObject);
    			}

    			mod.ControlSetAudio();

    			!mod._ValueAudioIsPlaying
    			? mod.ControlPlaybackStart()
    			: mod.ControlPlaybackStop();
    		},
    		InterfaceClearButtonDidClick() {
    			mod.ControlAudioClear();
    			KOMBrowseInfoAudioDispatchClear(KOMBrowseInfoAudioItemProperty);
    		},
    		// CONTROL
    		async ControlRecordStart() {
    			if (mod._ValueIsRecording) {
    				await mod.ControlRecordStop();
    			}

    			try {
    				await mod._ValueRecorder.initAudio();
    				await mod._ValueRecorder.initWorker();

    				if (main_1$2()) {
    					mod.DebugLog('record');
    				}

    				await mod._ValueRecorder.startRecording();
    				$$invalidate(3, mod._ValueIsRecording = true, mod);

    				setTimeout(
    					function () {
    						mod._ValueIsRecording && mod.ControlRecordStop();
    					},
    					1000 * kMaxLengthSeconds
    				);
    			} catch(e) {
    				console.error(e);
    			}
    		},
    		async ControlRecordStop() {
    			if (!mod._ValueIsRecording) {
    				return;
    			}

    			if (main_1$2()) {
    				mod.DebugLog('stop');
    			}

    			KOMBrowseInfoAudioDispatchCapture(KOMBrowseInfoAudioItemProperty, await mod._ValueRecorder.stopRecording());
    			$$invalidate(3, mod._ValueIsRecording = false, mod);
    		},
    		ControlUpload(inputData) {
    			Object.assign(new FileReader(), {
    				onload(event) {
    					console.log(inputData, event);
    					KOMBrowseInfoAudioDispatchCapture(KOMBrowseInfoAudioItemProperty, new Blob([event.target.result], { type: inputData.type }));
    				}
    			}).readAsArrayBuffer(inputData);
    		},
    		async ControlSetAudio() {
    			if (mod._ValueAudioID === KOMBrowseInfoAudioItem.KOMCardID) {
    				return;
    			}

    			if (mod._ValueAudioID) {
    				mod.ControlAudioClear();
    			}

    			$$invalidate(3, mod._ValueAudioID = KOMBrowseInfoAudioItem.KOMCardID, mod);
    		},
    		async ControlAudioClear() {
    			if (mod._ValueAudioIsPlaying) {
    				mod.ControlPlaybackStop();
    			}
    			delete mod._ValueAudio;
    			delete mod._ValueAudioID;

    			if (main_1$2()) {
    				mod.DebugLog('clear');
    			}
    		},
    		async ControlPlaybackStart() {
    			if (!mod._ValueAudio && main_1$2()) {
    				$$invalidate(3, mod._ValueAudio = mod.DataFakeAudio(await KOMBrowseInfoAudioDispatchFetch(KOMBrowseInfoAudioItemProperty) || KOMBrowseInfoAudioItem[KOMBrowseInfoAudioItemProperty]), mod);
    			}

    			if (!mod._ValueAudio) {
    				$$invalidate(
    					3,
    					mod._ValueAudio = Object.assign(new Audio(), {
    						src: URL.createObjectURL(await KOMBrowseInfoAudioDispatchFetch(KOMBrowseInfoAudioItemProperty)),
    						onended() {
    							$$invalidate(3, mod._ValueAudioIsPlaying = false, mod);
    						}
    					}),
    					mod
    				);
    			}

    			if (main_1$2()) {
    				mod.DebugLog('play:' + mod._ValueAudio.src);
    			}

    			$$invalidate(3, mod._ValueAudio.currentTime = 0, mod);
    			mod._ValueAudio.play();
    			$$invalidate(3, mod._ValueAudioIsPlaying = true, mod);
    		},
    		ControlPlaybackStop() {
    			if (main_1$2()) {
    				mod.DebugLog('stop');
    			}

    			mod._ValueAudio.pause();
    			$$invalidate(3, mod._ValueAudioIsPlaying = false, mod);
    		},
    		// SETUP
    		SetupEverything() {
    			mod.SetupRecorder();
    		},
    		SetupRecorder() {
    			$$invalidate(
    				3,
    				mod._ValueRecorder = main_1$2()
    				? mod.DataFakeRecorder()
    				: new record$1.Recorder({
    							wasmURL: '/_shared/__external/vmsg/vmsg.wasm'
    						}),
    				mod
    			);
    		},
    		// DEBUG
    		DebugLog(inputData) {
    			window.TestKOMBrowseInfoAudioLog.innerHTML = window.TestKOMBrowseInfoAudioLog.innerHTML
    			? window.TestKOMBrowseInfoAudioLog.innerHTML.split(',').concat(inputData).join(',')
    			: inputData;
    		}
    	};

    	mod.SetupEverything();

    	$$self.$$.on_mount.push(function () {
    		if (KOMBrowseInfoAudioAvailable === undefined && !('KOMBrowseInfoAudioAvailable' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoAudioAvailable']])) {
    			console_1.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioAvailable'");
    		}

    		if (KOMBrowseInfoAudioItem === undefined && !('KOMBrowseInfoAudioItem' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoAudioItem']])) {
    			console_1.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioItem'");
    		}

    		if (KOMBrowseInfoAudioItemProperty === undefined && !('KOMBrowseInfoAudioItemProperty' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoAudioItemProperty']])) {
    			console_1.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioItemProperty'");
    		}

    		if (KOMBrowseInfoAudioDispatchCapture === undefined && !('KOMBrowseInfoAudioDispatchCapture' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoAudioDispatchCapture']])) {
    			console_1.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioDispatchCapture'");
    		}

    		if (KOMBrowseInfoAudioDispatchFetch === undefined && !('KOMBrowseInfoAudioDispatchFetch' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoAudioDispatchFetch']])) {
    			console_1.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioDispatchFetch'");
    		}

    		if (KOMBrowseInfoAudioDispatchClear === undefined && !('KOMBrowseInfoAudioDispatchClear' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoAudioDispatchClear']])) {
    			console_1.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioDispatchClear'");
    		}
    	});

    	const writable_props = [
    		'KOMBrowseInfoAudioAvailable',
    		'KOMBrowseInfoAudioItem',
    		'KOMBrowseInfoAudioItemProperty',
    		'KOMBrowseInfoAudioDispatchCapture',
    		'KOMBrowseInfoAudioDispatchFetch',
    		'KOMBrowseInfoAudioDispatchClear',
    		'DebugFakeChangeObject'
    	];

    	Object_1$4.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('KOMBrowseInfoAudioAvailable' in $$props) $$invalidate(1, KOMBrowseInfoAudioAvailable = $$props.KOMBrowseInfoAudioAvailable);
    		if ('KOMBrowseInfoAudioItem' in $$props) $$invalidate(0, KOMBrowseInfoAudioItem = $$props.KOMBrowseInfoAudioItem);
    		if ('KOMBrowseInfoAudioItemProperty' in $$props) $$invalidate(2, KOMBrowseInfoAudioItemProperty = $$props.KOMBrowseInfoAudioItemProperty);
    		if ('KOMBrowseInfoAudioDispatchCapture' in $$props) $$invalidate(4, KOMBrowseInfoAudioDispatchCapture = $$props.KOMBrowseInfoAudioDispatchCapture);
    		if ('KOMBrowseInfoAudioDispatchFetch' in $$props) $$invalidate(5, KOMBrowseInfoAudioDispatchFetch = $$props.KOMBrowseInfoAudioDispatchFetch);
    		if ('KOMBrowseInfoAudioDispatchClear' in $$props) $$invalidate(6, KOMBrowseInfoAudioDispatchClear = $$props.KOMBrowseInfoAudioDispatchClear);
    		if ('DebugFakeChangeObject' in $$props) $$invalidate(7, DebugFakeChangeObject = $$props.DebugFakeChangeObject);
    	};

    	$$self.$capture_state = () => ({
    		KOMBrowseInfoAudioAvailable,
    		KOMBrowseInfoAudioItem,
    		KOMBrowseInfoAudioItemProperty,
    		KOMBrowseInfoAudioDispatchCapture,
    		KOMBrowseInfoAudioDispatchFetch,
    		KOMBrowseInfoAudioDispatchClear,
    		DebugFakeChangeObject,
    		kMaxLengthSeconds,
    		OLSKLocalized: main_1,
    		OLSK_SPEC_UI: main_1$2,
    		record: record$1,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ('KOMBrowseInfoAudioAvailable' in $$props) $$invalidate(1, KOMBrowseInfoAudioAvailable = $$props.KOMBrowseInfoAudioAvailable);
    		if ('KOMBrowseInfoAudioItem' in $$props) $$invalidate(0, KOMBrowseInfoAudioItem = $$props.KOMBrowseInfoAudioItem);
    		if ('KOMBrowseInfoAudioItemProperty' in $$props) $$invalidate(2, KOMBrowseInfoAudioItemProperty = $$props.KOMBrowseInfoAudioItemProperty);
    		if ('KOMBrowseInfoAudioDispatchCapture' in $$props) $$invalidate(4, KOMBrowseInfoAudioDispatchCapture = $$props.KOMBrowseInfoAudioDispatchCapture);
    		if ('KOMBrowseInfoAudioDispatchFetch' in $$props) $$invalidate(5, KOMBrowseInfoAudioDispatchFetch = $$props.KOMBrowseInfoAudioDispatchFetch);
    		if ('KOMBrowseInfoAudioDispatchClear' in $$props) $$invalidate(6, KOMBrowseInfoAudioDispatchClear = $$props.KOMBrowseInfoAudioDispatchClear);
    		if ('DebugFakeChangeObject' in $$props) $$invalidate(7, DebugFakeChangeObject = $$props.DebugFakeChangeObject);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMBrowseInfoAudioItem,
    		KOMBrowseInfoAudioAvailable,
    		KOMBrowseInfoAudioItemProperty,
    		mod,
    		KOMBrowseInfoAudioDispatchCapture,
    		KOMBrowseInfoAudioDispatchFetch,
    		KOMBrowseInfoAudioDispatchClear,
    		DebugFakeChangeObject
    	];
    }

    class Main$h extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {
    			KOMBrowseInfoAudioAvailable: 1,
    			KOMBrowseInfoAudioItem: 0,
    			KOMBrowseInfoAudioItemProperty: 2,
    			KOMBrowseInfoAudioDispatchCapture: 4,
    			KOMBrowseInfoAudioDispatchFetch: 5,
    			KOMBrowseInfoAudioDispatchClear: 6,
    			DebugFakeChangeObject: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$h.name
    		});
    	}

    	get KOMBrowseInfoAudioAvailable() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioAvailable(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoAudioItem() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioItem(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoAudioItemProperty() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioItemProperty(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoAudioDispatchCapture() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioDispatchCapture(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoAudioDispatchFetch() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioDispatchFetch(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoAudioDispatchClear() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioDispatchClear(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get DebugFakeChangeObject() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set DebugFakeChangeObject(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/sub-browse/submodules/KOMBrowseInfoTags/main.svelte generated by Svelte v3.59.2 */
    const file$i = "os-app/sub-browse/submodules/KOMBrowseInfoTags/main.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (32:1) {#each KOMBrowseInfoTagsItems as item }
    function create_each_block_1$1(ctx) {
    	let button;
    	let t_value = OLSKString.OLSKStringFormatted(main_1('KOMBrowseInfoTagsRemoveButtonTextFormat'), /*item*/ ctx[8]) + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[5](/*item*/ ctx[8]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text(t_value);
    			attr_dev(button, "class", "KOMBrowseInfoTagsRemoveButton");
    			add_location(button, file$i, 32, 2, 569);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*KOMBrowseInfoTagsItems*/ 1 && t_value !== (t_value = OLSKString.OLSKStringFormatted(main_1('KOMBrowseInfoTagsRemoveButtonTextFormat'), /*item*/ ctx[8]) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(32:1) {#each KOMBrowseInfoTagsItems as item }",
    		ctx
    	});

    	return block;
    }

    // (45:1) {#each KOMBrowseInfoTagsSuggestions as item }
    function create_each_block$5(ctx) {
    	let button;
    	let t_value = OLSKString.OLSKStringFormatted(main_1('KOMBrowseInfoTagsSuggestButtonTextFormat'), /*item*/ ctx[8]) + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[7](/*item*/ ctx[8]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text(t_value);
    			attr_dev(button, "class", "KOMBrowseInfoTagsSuggestButton");
    			add_location(button, file$i, 45, 2, 1268);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_1, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*KOMBrowseInfoTagsSuggestions*/ 2 && t_value !== (t_value = OLSKString.OLSKStringFormatted(main_1('KOMBrowseInfoTagsSuggestButtonTextFormat'), /*item*/ ctx[8]) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(45:1) {#each KOMBrowseInfoTagsSuggestions as item }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let div;
    	let p0;
    	let t0;
    	let form;
    	let p1;
    	let input;
    	let input_placeholder_value;
    	let t1;
    	let button;
    	let t2_value = main_1('KOMBrowseInfoTagsCreateButtonText') + "";
    	let t2;
    	let button_disabled_value;
    	let t3;
    	let p2;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*KOMBrowseInfoTagsItems*/ ctx[0];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	let each_value = /*KOMBrowseInfoTagsSuggestions*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			p0 = element("p");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t0 = space();
    			form = element("form");
    			p1 = element("p");
    			input = element("input");
    			t1 = space();
    			button = element("button");
    			t2 = text(t2_value);
    			t3 = space();
    			p2 = element("p");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			add_location(p0, file$i, 30, 0, 522);
    			attr_dev(input, "class", "KOMBrowseInfoTagsInputField");
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", input_placeholder_value = main_1('KOMBrowseInfoTagsInputFieldText'));
    			add_location(input, file$i, 38, 2, 881);
    			add_location(p1, file$i, 37, 1, 875);
    			attr_dev(button, "class", "KOMBrowseInfoTagsCreateButton");
    			attr_dev(button, "type", "submit");
    			button.disabled = button_disabled_value = !/*mod*/ ctx[4]._ValueNewTagName;
    			add_location(button, file$i, 40, 1, 1047);
    			attr_dev(form, "class", "KOMBrowseInfoTagsForm");
    			add_location(form, file$i, 36, 0, 796);
    			add_location(p2, file$i, 43, 0, 1215);
    			attr_dev(div, "class", "KOMBrowseInfoTags");
    			add_location(div, file$i, 28, 0, 489);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				if (each_blocks_1[i]) {
    					each_blocks_1[i].m(p0, null);
    				}
    			}

    			append_dev(div, t0);
    			append_dev(div, form);
    			append_dev(form, p1);
    			append_dev(p1, input);
    			set_input_value(input, /*mod*/ ctx[4]._ValueNewTagName);
    			append_dev(form, t1);
    			append_dev(form, button);
    			append_dev(button, t2);
    			append_dev(div, t3);
    			append_dev(div, p2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(p2, null);
    				}
    			}

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[6]),
    					listen_dev(
    						form,
    						"submit",
    						function () {
    							if (is_function(/*mod*/ ctx[4].InterfaceFormDidSubmit)) /*mod*/ ctx[4].InterfaceFormDidSubmit.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (dirty & /*KOMBrowseInfoTagsDispatchRemove, KOMBrowseInfoTagsItems, OLSKString, OLSKLocalized*/ 9) {
    				each_value_1 = /*KOMBrowseInfoTagsItems*/ ctx[0];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(p0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*mod*/ 16 && input.value !== /*mod*/ ctx[4]._ValueNewTagName) {
    				set_input_value(input, /*mod*/ ctx[4]._ValueNewTagName);
    			}

    			if (dirty & /*mod*/ 16 && button_disabled_value !== (button_disabled_value = !/*mod*/ ctx[4]._ValueNewTagName)) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}

    			if (dirty & /*KOMBrowseInfoTagsDispatchAdd, KOMBrowseInfoTagsSuggestions, OLSKString, OLSKLocalized*/ 6) {
    				each_value = /*KOMBrowseInfoTagsSuggestions*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(p2, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMBrowseInfoTagsItems } = $$props;
    	let { KOMBrowseInfoTagsSuggestions = [] } = $$props;
    	let { KOMBrowseInfoTagsDispatchAdd } = $$props;
    	let { KOMBrowseInfoTagsDispatchRemove } = $$props;

    	const mod = {
    		// VALUE
    		_ValueNewTagName: '',
    		// INTERFACE
    		InterfaceFormDidSubmit() {
    			KOMBrowseInfoTagsDispatchAdd(mod._ValueNewTagName);
    			$$invalidate(4, mod._ValueNewTagName = '', mod);
    			event.preventDefault();
    		}
    	};

    	$$self.$$.on_mount.push(function () {
    		if (KOMBrowseInfoTagsItems === undefined && !('KOMBrowseInfoTagsItems' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoTagsItems']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoTagsItems'");
    		}

    		if (KOMBrowseInfoTagsDispatchAdd === undefined && !('KOMBrowseInfoTagsDispatchAdd' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoTagsDispatchAdd']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoTagsDispatchAdd'");
    		}

    		if (KOMBrowseInfoTagsDispatchRemove === undefined && !('KOMBrowseInfoTagsDispatchRemove' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoTagsDispatchRemove']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoTagsDispatchRemove'");
    		}
    	});

    	const writable_props = [
    		'KOMBrowseInfoTagsItems',
    		'KOMBrowseInfoTagsSuggestions',
    		'KOMBrowseInfoTagsDispatchAdd',
    		'KOMBrowseInfoTagsDispatchRemove'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const click_handler = item => KOMBrowseInfoTagsDispatchRemove(item);

    	function input_input_handler() {
    		mod._ValueNewTagName = this.value;
    		$$invalidate(4, mod);
    	}

    	const click_handler_1 = item => KOMBrowseInfoTagsDispatchAdd(item);

    	$$self.$$set = $$props => {
    		if ('KOMBrowseInfoTagsItems' in $$props) $$invalidate(0, KOMBrowseInfoTagsItems = $$props.KOMBrowseInfoTagsItems);
    		if ('KOMBrowseInfoTagsSuggestions' in $$props) $$invalidate(1, KOMBrowseInfoTagsSuggestions = $$props.KOMBrowseInfoTagsSuggestions);
    		if ('KOMBrowseInfoTagsDispatchAdd' in $$props) $$invalidate(2, KOMBrowseInfoTagsDispatchAdd = $$props.KOMBrowseInfoTagsDispatchAdd);
    		if ('KOMBrowseInfoTagsDispatchRemove' in $$props) $$invalidate(3, KOMBrowseInfoTagsDispatchRemove = $$props.KOMBrowseInfoTagsDispatchRemove);
    	};

    	$$self.$capture_state = () => ({
    		KOMBrowseInfoTagsItems,
    		KOMBrowseInfoTagsSuggestions,
    		KOMBrowseInfoTagsDispatchAdd,
    		KOMBrowseInfoTagsDispatchRemove,
    		OLSKLocalized: main_1,
    		OLSKString,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ('KOMBrowseInfoTagsItems' in $$props) $$invalidate(0, KOMBrowseInfoTagsItems = $$props.KOMBrowseInfoTagsItems);
    		if ('KOMBrowseInfoTagsSuggestions' in $$props) $$invalidate(1, KOMBrowseInfoTagsSuggestions = $$props.KOMBrowseInfoTagsSuggestions);
    		if ('KOMBrowseInfoTagsDispatchAdd' in $$props) $$invalidate(2, KOMBrowseInfoTagsDispatchAdd = $$props.KOMBrowseInfoTagsDispatchAdd);
    		if ('KOMBrowseInfoTagsDispatchRemove' in $$props) $$invalidate(3, KOMBrowseInfoTagsDispatchRemove = $$props.KOMBrowseInfoTagsDispatchRemove);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMBrowseInfoTagsItems,
    		KOMBrowseInfoTagsSuggestions,
    		KOMBrowseInfoTagsDispatchAdd,
    		KOMBrowseInfoTagsDispatchRemove,
    		mod,
    		click_handler,
    		input_input_handler,
    		click_handler_1
    	];
    }

    class Main$i extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {
    			KOMBrowseInfoTagsItems: 0,
    			KOMBrowseInfoTagsSuggestions: 1,
    			KOMBrowseInfoTagsDispatchAdd: 2,
    			KOMBrowseInfoTagsDispatchRemove: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$i.name
    		});
    	}

    	get KOMBrowseInfoTagsItems() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoTagsItems(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoTagsSuggestions() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoTagsSuggestions(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoTagsDispatchAdd() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoTagsDispatchAdd(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoTagsDispatchRemove() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoTagsDispatchRemove(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/sub-browse/submodules/KOMBrowseInfo/main.svelte generated by Svelte v3.59.2 */

    const { Object: Object_1$5 } = globals;
    const file$j = "os-app/sub-browse/submodules/KOMBrowseInfo/main.svelte";

    // (179:0) {#if OLSK_SPEC_UI() && KOMBrowseInfo_DebugShowLauncherButton }
    function create_if_block$a(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			attr_dev(button, "class", "OLSKAppToolbarLauncherButton");
    			add_location(button, file$j, 179, 1, 7069);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*mod*/ ctx[13]._OLSKAppToolbarDispatchLauncher, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(179:0) {#if OLSK_SPEC_UI() && KOMBrowseInfo_DebugShowLauncherButton }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let div6;
    	let header;
    	let div1;
    	let button0;
    	let div0;
    	let button0_title_value;
    	let t0;
    	let div4;
    	let button1;
    	let div2;
    	let button1_title_value;
    	let t1;
    	let button2;
    	let div3;
    	let button2_title_value;
    	let t2;
    	let div5;
    	let p0;
    	let input0;
    	let input0_placeholder_value;
    	let t3;
    	let p1;
    	let button3;
    	let t4_value = main_1('KOMBrowseInfoFormFrontReadButtonText') + "";
    	let t4;
    	let button3_disabled_value;
    	let t5;
    	let kombrowseinfoaudio0;
    	let t6;
    	let p2;
    	let input1;
    	let input1_placeholder_value;
    	let t7;
    	let p3;
    	let button4;
    	let t8_value = main_1('KOMBrowseInfoFormRearReadButtonText') + "";
    	let t8;
    	let button4_disabled_value;
    	let t9;
    	let kombrowseinfoaudio1;
    	let t10;
    	let p4;
    	let input2;
    	let input2_placeholder_value;
    	let t11;
    	let hr;
    	let t12;
    	let p5;
    	let kombrowseinfotags;
    	let t13;
    	let show_if = main_1$2() && /*KOMBrowseInfo_DebugShowLauncherButton*/ ctx[12];
    	let if_block_anchor;
    	let current;
    	let mounted;
    	let dispose;

    	kombrowseinfoaudio0 = new Main$h({
    			props: {
    				KOMBrowseInfoAudioItem: /*KOMBrowseInfoItem*/ ctx[0],
    				KOMBrowseInfoAudioItemProperty: "KOMCardFrontAudio",
    				KOMBrowseInfoAudioAvailable: 'WebAssembly' in window,
    				KOMBrowseInfoAudioDispatchCapture: /*KOMBrowseInfoAudioDispatchCapture*/ ctx[9],
    				KOMBrowseInfoAudioDispatchFetch: /*KOMBrowseInfoAudioDispatchFetch*/ ctx[10],
    				KOMBrowseInfoAudioDispatchClear: /*KOMBrowseInfoAudioDispatchClear*/ ctx[11]
    			},
    			$$inline: true
    		});

    	kombrowseinfoaudio1 = new Main$h({
    			props: {
    				KOMBrowseInfoAudioItem: /*KOMBrowseInfoItem*/ ctx[0],
    				KOMBrowseInfoAudioItemProperty: "KOMCardRearAudio",
    				KOMBrowseInfoAudioAvailable: 'WebAssembly' in window,
    				KOMBrowseInfoAudioDispatchCapture: /*KOMBrowseInfoAudioDispatchCapture*/ ctx[9],
    				KOMBrowseInfoAudioDispatchFetch: /*KOMBrowseInfoAudioDispatchFetch*/ ctx[10],
    				KOMBrowseInfoAudioDispatchClear: /*KOMBrowseInfoAudioDispatchClear*/ ctx[11]
    			},
    			$$inline: true
    		});

    	kombrowseinfotags = new Main$i({
    			props: {
    				KOMBrowseInfoTagsItems: /*KOMBrowseInfoItem*/ ctx[0].KOMCardTags || [],
    				KOMBrowseInfoTagsSuggestions: /*KOMBrowseInfoTagsSuggestions*/ ctx[2],
    				KOMBrowseInfoTagsDispatchAdd: /*mod*/ ctx[13].KOMBrowseInfoTagsDispatchAdd,
    				KOMBrowseInfoTagsDispatchRemove: /*mod*/ ctx[13].KOMBrowseInfoTagsDispatchRemove
    			},
    			$$inline: true
    		});

    	let if_block = show_if && create_if_block$a(ctx);

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			header = element("header");
    			div1 = element("div");
    			button0 = element("button");
    			div0 = element("div");
    			t0 = space();
    			div4 = element("div");
    			button1 = element("button");
    			div2 = element("div");
    			t1 = space();
    			button2 = element("button");
    			div3 = element("div");
    			t2 = space();
    			div5 = element("div");
    			p0 = element("p");
    			input0 = element("input");
    			t3 = space();
    			p1 = element("p");
    			button3 = element("button");
    			t4 = text(t4_value);
    			t5 = space();
    			create_component(kombrowseinfoaudio0.$$.fragment);
    			t6 = space();
    			p2 = element("p");
    			input1 = element("input");
    			t7 = space();
    			p3 = element("p");
    			button4 = element("button");
    			t8 = text(t8_value);
    			t9 = space();
    			create_component(kombrowseinfoaudio1.$$.fragment);
    			t10 = space();
    			p4 = element("p");
    			input2 = element("input");
    			t11 = space();
    			hr = element("hr");
    			t12 = space();
    			p5 = element("p");
    			create_component(kombrowseinfotags.$$.fragment);
    			t13 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(div0, "class", "KOMBrowseInfoToolbarBackButtonImage");
    			add_location(div0, file$j, 106, 3, 3283);
    			attr_dev(button0, "class", "KOMBrowseInfoToolbarBackButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton OLSKVisibilityMobile");
    			attr_dev(button0, "title", button0_title_value = main_1('KOMBrowseInfoToolbarBackButtonText'));
    			add_location(button0, file$j, 105, 2, 3051);
    			attr_dev(div1, "class", "OLSKToolbarElementGroup");
    			add_location(div1, file$j, 104, 1, 3011);
    			attr_dev(div2, "class", "KOMBrowseInfoToolbarDiscardButtonImage");
    			add_location(div2, file$j, 112, 3, 3729);
    			attr_dev(button1, "class", "KOMBrowseInfoToolbarDiscardButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton");
    			attr_dev(button1, "title", button1_title_value = main_1('KOMBrowseInfoToolbarDiscardButtonText'));
    			add_location(button1, file$j, 111, 2, 3425);
    			attr_dev(div3, "class", "KOMBrowseInfoToolbarTemplateButtonImage");
    			add_location(div3, file$j, 118, 3, 4191);
    			attr_dev(button2, "class", "KOMBrowseInfoToolbarTemplateButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton");
    			attr_dev(button2, "title", button2_title_value = main_1('KOMBrowseInfoToolbarTemplateButtonText'));
    			attr_dev(button2, "accesskey", "t");
    			add_location(button2, file$j, 115, 2, 3832);
    			attr_dev(div4, "class", "OLSKToolbarElementGroup");
    			add_location(div4, file$j, 110, 1, 3385);
    			attr_dev(header, "class", "KOMBrowseInfoToolbar OLSKMobileViewHeader OLSKToolbar OLSKToolbarJustify OLSKCommonEdgeBottom ROCOStandardViewHead svelte-x0fuln");
    			add_location(header, file$j, 103, 0, 2878);
    			attr_dev(input0, "class", "KOMBrowseInfoFormFrontTextField");
    			attr_dev(input0, "placeholder", input0_placeholder_value = main_1('KOMBrowseInfoFormFrontTextFieldText'));
    			attr_dev(input0, "type", "text");
    			add_location(input0, file$j, 126, 1, 4393);
    			add_location(p0, file$j, 125, 0, 4388);
    			attr_dev(button3, "class", "KOMBrowseInfoFormFrontReadButton");
    			button3.disabled = button3_disabled_value = !/*KOMBrowseInfoSpeechAvailable*/ ctx[3] || !/*KOMBrowseInfoDeck*/ ctx[1].KOMDeckFrontLanguageCode;
    			add_location(button3, file$j, 130, 1, 4664);
    			attr_dev(p1, "class", "KOMBrowseInfoFormFrontAudio svelte-x0fuln");
    			add_location(p1, file$j, 129, 0, 4623);
    			attr_dev(input1, "class", "KOMBrowseInfoFormRearTextField");
    			attr_dev(input1, "placeholder", input1_placeholder_value = main_1('KOMBrowseInfoFormRearTextFieldText'));
    			attr_dev(input1, "type", "text");
    			add_location(input1, file$j, 143, 1, 5405);
    			add_location(p2, file$j, 142, 0, 5400);
    			attr_dev(button4, "class", "KOMBrowseInfoFormRearReadButton");
    			button4.disabled = button4_disabled_value = !/*KOMBrowseInfoSpeechAvailable*/ ctx[3] || !/*KOMBrowseInfoDeck*/ ctx[1].KOMDeckRearLanguageCode;
    			add_location(button4, file$j, 147, 1, 5672);
    			attr_dev(p3, "class", "KOMBrowseInfoFormRearAudio svelte-x0fuln");
    			add_location(p3, file$j, 146, 0, 5632);
    			attr_dev(input2, "class", "KOMBrowseInfoFormNotesField");
    			attr_dev(input2, "placeholder", input2_placeholder_value = main_1('KOMBrowseInfoFormNotesFieldText'));
    			attr_dev(input2, "type", "text");
    			add_location(input2, file$j, 160, 1, 6407);
    			add_location(p4, file$j, 159, 0, 6402);
    			attr_dev(hr, "role", "presentation");
    			add_location(hr, file$j, 163, 0, 6625);
    			attr_dev(p5, "class", "KOMBrowseInfoFormTags");
    			add_location(p5, file$j, 165, 0, 6653);
    			attr_dev(div5, "class", "KOMBrowseInfoForm OLSKDecor OLSKDecorBigForm ROCOStandardViewBody svelte-x0fuln");
    			add_location(div5, file$j, 123, 0, 4307);
    			attr_dev(div6, "class", "KOMBrowseInfo ROCOStandardView svelte-x0fuln");
    			add_location(div6, file$j, 101, 0, 2832);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, header);
    			append_dev(header, div1);
    			append_dev(div1, button0);
    			append_dev(button0, div0);
    			div0.innerHTML = _OLSKSharedBack;
    			append_dev(header, t0);
    			append_dev(header, div4);
    			append_dev(div4, button1);
    			append_dev(button1, div2);
    			div2.innerHTML = _OLSKSharedDiscard$1;
    			append_dev(div4, t1);
    			append_dev(div4, button2);
    			append_dev(button2, div3);
    			div3.innerHTML = _OLSKSharedClone$1;
    			append_dev(div6, t2);
    			append_dev(div6, div5);
    			append_dev(div5, p0);
    			append_dev(p0, input0);
    			set_input_value(input0, /*KOMBrowseInfoItem*/ ctx[0].KOMCardFrontText);
    			append_dev(div5, t3);
    			append_dev(div5, p1);
    			append_dev(p1, button3);
    			append_dev(button3, t4);
    			append_dev(p1, t5);
    			mount_component(kombrowseinfoaudio0, p1, null);
    			append_dev(div5, t6);
    			append_dev(div5, p2);
    			append_dev(p2, input1);
    			set_input_value(input1, /*KOMBrowseInfoItem*/ ctx[0].KOMCardRearText);
    			append_dev(div5, t7);
    			append_dev(div5, p3);
    			append_dev(p3, button4);
    			append_dev(button4, t8);
    			append_dev(p3, t9);
    			mount_component(kombrowseinfoaudio1, p3, null);
    			append_dev(div5, t10);
    			append_dev(div5, p4);
    			append_dev(p4, input2);
    			set_input_value(input2, /*KOMBrowseInfoItem*/ ctx[0].KOMCardNotes);
    			append_dev(div5, t11);
    			append_dev(div5, hr);
    			append_dev(div5, t12);
    			append_dev(div5, p5);
    			mount_component(kombrowseinfotags, p5, null);
    			insert_dev(target, t13, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*KOMBrowseInfoDispatchBack*/ ctx[4])) /*KOMBrowseInfoDispatchBack*/ ctx[4].apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(button1, "click", /*click_handler*/ ctx[16], false, false, false, false),
    					listen_dev(button2, "click", /*click_handler_1*/ ctx[17], false, false, false, false),
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[18]),
    					listen_dev(
    						input0,
    						"input",
    						function () {
    							if (is_function(/*KOMBrowseInfoDispatchUpdate*/ ctx[5])) /*KOMBrowseInfoDispatchUpdate*/ ctx[5].apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(button3, "click", /*click_handler_2*/ ctx[19], false, false, false, false),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[20]),
    					listen_dev(
    						input1,
    						"input",
    						function () {
    							if (is_function(/*KOMBrowseInfoDispatchUpdate*/ ctx[5])) /*KOMBrowseInfoDispatchUpdate*/ ctx[5].apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(button4, "click", /*click_handler_3*/ ctx[21], false, false, false, false),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[22]),
    					listen_dev(
    						input2,
    						"input",
    						function () {
    							if (is_function(/*KOMBrowseInfoDispatchUpdate*/ ctx[5])) /*KOMBrowseInfoDispatchUpdate*/ ctx[5].apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (dirty & /*KOMBrowseInfoItem*/ 1 && input0.value !== /*KOMBrowseInfoItem*/ ctx[0].KOMCardFrontText) {
    				set_input_value(input0, /*KOMBrowseInfoItem*/ ctx[0].KOMCardFrontText);
    			}

    			if (!current || dirty & /*KOMBrowseInfoSpeechAvailable, KOMBrowseInfoDeck*/ 10 && button3_disabled_value !== (button3_disabled_value = !/*KOMBrowseInfoSpeechAvailable*/ ctx[3] || !/*KOMBrowseInfoDeck*/ ctx[1].KOMDeckFrontLanguageCode)) {
    				prop_dev(button3, "disabled", button3_disabled_value);
    			}

    			const kombrowseinfoaudio0_changes = {};
    			if (dirty & /*KOMBrowseInfoItem*/ 1) kombrowseinfoaudio0_changes.KOMBrowseInfoAudioItem = /*KOMBrowseInfoItem*/ ctx[0];
    			if (dirty & /*KOMBrowseInfoAudioDispatchCapture*/ 512) kombrowseinfoaudio0_changes.KOMBrowseInfoAudioDispatchCapture = /*KOMBrowseInfoAudioDispatchCapture*/ ctx[9];
    			if (dirty & /*KOMBrowseInfoAudioDispatchFetch*/ 1024) kombrowseinfoaudio0_changes.KOMBrowseInfoAudioDispatchFetch = /*KOMBrowseInfoAudioDispatchFetch*/ ctx[10];
    			if (dirty & /*KOMBrowseInfoAudioDispatchClear*/ 2048) kombrowseinfoaudio0_changes.KOMBrowseInfoAudioDispatchClear = /*KOMBrowseInfoAudioDispatchClear*/ ctx[11];
    			kombrowseinfoaudio0.$set(kombrowseinfoaudio0_changes);

    			if (dirty & /*KOMBrowseInfoItem*/ 1 && input1.value !== /*KOMBrowseInfoItem*/ ctx[0].KOMCardRearText) {
    				set_input_value(input1, /*KOMBrowseInfoItem*/ ctx[0].KOMCardRearText);
    			}

    			if (!current || dirty & /*KOMBrowseInfoSpeechAvailable, KOMBrowseInfoDeck*/ 10 && button4_disabled_value !== (button4_disabled_value = !/*KOMBrowseInfoSpeechAvailable*/ ctx[3] || !/*KOMBrowseInfoDeck*/ ctx[1].KOMDeckRearLanguageCode)) {
    				prop_dev(button4, "disabled", button4_disabled_value);
    			}

    			const kombrowseinfoaudio1_changes = {};
    			if (dirty & /*KOMBrowseInfoItem*/ 1) kombrowseinfoaudio1_changes.KOMBrowseInfoAudioItem = /*KOMBrowseInfoItem*/ ctx[0];
    			if (dirty & /*KOMBrowseInfoAudioDispatchCapture*/ 512) kombrowseinfoaudio1_changes.KOMBrowseInfoAudioDispatchCapture = /*KOMBrowseInfoAudioDispatchCapture*/ ctx[9];
    			if (dirty & /*KOMBrowseInfoAudioDispatchFetch*/ 1024) kombrowseinfoaudio1_changes.KOMBrowseInfoAudioDispatchFetch = /*KOMBrowseInfoAudioDispatchFetch*/ ctx[10];
    			if (dirty & /*KOMBrowseInfoAudioDispatchClear*/ 2048) kombrowseinfoaudio1_changes.KOMBrowseInfoAudioDispatchClear = /*KOMBrowseInfoAudioDispatchClear*/ ctx[11];
    			kombrowseinfoaudio1.$set(kombrowseinfoaudio1_changes);

    			if (dirty & /*KOMBrowseInfoItem*/ 1 && input2.value !== /*KOMBrowseInfoItem*/ ctx[0].KOMCardNotes) {
    				set_input_value(input2, /*KOMBrowseInfoItem*/ ctx[0].KOMCardNotes);
    			}

    			const kombrowseinfotags_changes = {};
    			if (dirty & /*KOMBrowseInfoItem*/ 1) kombrowseinfotags_changes.KOMBrowseInfoTagsItems = /*KOMBrowseInfoItem*/ ctx[0].KOMCardTags || [];
    			if (dirty & /*KOMBrowseInfoTagsSuggestions*/ 4) kombrowseinfotags_changes.KOMBrowseInfoTagsSuggestions = /*KOMBrowseInfoTagsSuggestions*/ ctx[2];
    			kombrowseinfotags.$set(kombrowseinfotags_changes);
    			if (dirty & /*KOMBrowseInfo_DebugShowLauncherButton*/ 4096) show_if = main_1$2() && /*KOMBrowseInfo_DebugShowLauncherButton*/ ctx[12];

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$a(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kombrowseinfoaudio0.$$.fragment, local);
    			transition_in(kombrowseinfoaudio1.$$.fragment, local);
    			transition_in(kombrowseinfotags.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kombrowseinfoaudio0.$$.fragment, local);
    			transition_out(kombrowseinfoaudio1.$$.fragment, local);
    			transition_out(kombrowseinfotags.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			destroy_component(kombrowseinfoaudio0);
    			destroy_component(kombrowseinfoaudio1);
    			destroy_component(kombrowseinfotags);
    			if (detaching) detach_dev(t13);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMBrowseInfoItem } = $$props;
    	let { KOMBrowseInfoDeck } = $$props;
    	let { KOMBrowseInfoTagsSuggestions } = $$props;
    	let { KOMBrowseInfoSpeechAvailable } = $$props;
    	let { KOMBrowseInfoDispatchBack } = $$props;
    	let { KOMBrowseInfoDispatchUpdate } = $$props;
    	let { KOMBrowseInfoDispatchDiscard } = $$props;
    	let { KOMBrowseInfoDispatchTemplate } = $$props;
    	let { KOMBrowseInfoDispatchRead } = $$props;
    	let { KOMBrowseInfoAudioDispatchCapture } = $$props;
    	let { KOMBrowseInfoAudioDispatchFetch } = $$props;
    	let { KOMBrowseInfoAudioDispatchClear } = $$props;
    	let { KOMBrowseInfoDispatchDebug } = $$props;
    	let { KOMBrowseInfo_DebugShowLauncherButton = false } = $$props;

    	const modPublic = {
    		KOMBrowseInfoRecipes() {
    			return mod.DataBrowseInfoRecipes();
    		}
    	};

    	const mod = {
    		// DATA
    		DataBrowseInfoRecipes() {
    			const items = [
    				{
    					LCHRecipeSignature: 'KOMBrowseInfoLauncherItemToggleRetire',
    					LCHRecipeName: main_1('KOMBrowseInfoLauncherItemToggleRetireText'),
    					LCHRecipeCallback: function KOMBrowseInfoLauncherItemToggleRetire() {
    						if (KOMBrowseInfoItem.KOMCardIsRetired) {
    							delete KOMBrowseInfoItem.KOMCardIsRetired;
    						} else {
    							$$invalidate(0, KOMBrowseInfoItem.KOMCardIsRetired = true, KOMBrowseInfoItem);
    						}

    						KOMBrowseInfoDispatchUpdate();
    					}
    				},
    				{
    					LCHRecipeSignature: 'KOMBrowseInfoLauncherItemDebug',
    					LCHRecipeName: main_1('KOMBrowseInfoLauncherItemDebugText'),
    					LCHRecipeCallback: function KOMBrowseInfoLauncherItemDebug() {
    						KOMBrowseInfoDispatchDebug(KOMBrowseInfoItem);
    					}
    				}
    			];

    			if (main_1$2()) {
    				items.push({
    					LCHRecipeName: 'KOMBrowseInfoLauncherFakeItemProxy',
    					LCHRecipeCallback: function KOMBrowseInfoLauncherFakeItemProxy() {
    						
    					}
    				});
    			}

    			return items;
    		},
    		// MESSAGE
    		KOMBrowseInfoTagsDispatchAdd(inputData) {
    			if (!inputData.trim()) {
    				return;
    			}

    			if ((KOMBrowseInfoItem.KOMCardTags || []).includes(inputData)) {
    				return;
    			}

    			$$invalidate(0, KOMBrowseInfoItem.KOMCardTags = (KOMBrowseInfoItem.KOMCardTags || []).concat(inputData), KOMBrowseInfoItem);
    			KOMBrowseInfoDispatchUpdate();
    		},
    		KOMBrowseInfoTagsDispatchRemove(inputData) {
    			$$invalidate(
    				0,
    				KOMBrowseInfoItem.KOMCardTags = KOMBrowseInfoItem.KOMCardTags.filter(function (e) {
    					return e !== inputData;
    				}),
    				KOMBrowseInfoItem
    			);

    			KOMBrowseInfoDispatchUpdate();
    		},
    		_OLSKAppToolbarDispatchLauncher() {
    			window.Launchlet.LCHSingletonCreate({
    				LCHOptionRecipes: mod.DataBrowseInfoRecipes()
    			});
    		}
    	};

    	$$self.$$.on_mount.push(function () {
    		if (KOMBrowseInfoItem === undefined && !('KOMBrowseInfoItem' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoItem']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoItem'");
    		}

    		if (KOMBrowseInfoDeck === undefined && !('KOMBrowseInfoDeck' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoDeck']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoDeck'");
    		}

    		if (KOMBrowseInfoTagsSuggestions === undefined && !('KOMBrowseInfoTagsSuggestions' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoTagsSuggestions']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoTagsSuggestions'");
    		}

    		if (KOMBrowseInfoSpeechAvailable === undefined && !('KOMBrowseInfoSpeechAvailable' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoSpeechAvailable']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoSpeechAvailable'");
    		}

    		if (KOMBrowseInfoDispatchBack === undefined && !('KOMBrowseInfoDispatchBack' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoDispatchBack']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoDispatchBack'");
    		}

    		if (KOMBrowseInfoDispatchUpdate === undefined && !('KOMBrowseInfoDispatchUpdate' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoDispatchUpdate']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoDispatchUpdate'");
    		}

    		if (KOMBrowseInfoDispatchDiscard === undefined && !('KOMBrowseInfoDispatchDiscard' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoDispatchDiscard']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoDispatchDiscard'");
    		}

    		if (KOMBrowseInfoDispatchTemplate === undefined && !('KOMBrowseInfoDispatchTemplate' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoDispatchTemplate']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoDispatchTemplate'");
    		}

    		if (KOMBrowseInfoDispatchRead === undefined && !('KOMBrowseInfoDispatchRead' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoDispatchRead']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoDispatchRead'");
    		}

    		if (KOMBrowseInfoAudioDispatchCapture === undefined && !('KOMBrowseInfoAudioDispatchCapture' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoAudioDispatchCapture']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioDispatchCapture'");
    		}

    		if (KOMBrowseInfoAudioDispatchFetch === undefined && !('KOMBrowseInfoAudioDispatchFetch' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoAudioDispatchFetch']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioDispatchFetch'");
    		}

    		if (KOMBrowseInfoAudioDispatchClear === undefined && !('KOMBrowseInfoAudioDispatchClear' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoAudioDispatchClear']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoAudioDispatchClear'");
    		}

    		if (KOMBrowseInfoDispatchDebug === undefined && !('KOMBrowseInfoDispatchDebug' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoDispatchDebug']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoDispatchDebug'");
    		}
    	});

    	const writable_props = [
    		'KOMBrowseInfoItem',
    		'KOMBrowseInfoDeck',
    		'KOMBrowseInfoTagsSuggestions',
    		'KOMBrowseInfoSpeechAvailable',
    		'KOMBrowseInfoDispatchBack',
    		'KOMBrowseInfoDispatchUpdate',
    		'KOMBrowseInfoDispatchDiscard',
    		'KOMBrowseInfoDispatchTemplate',
    		'KOMBrowseInfoDispatchRead',
    		'KOMBrowseInfoAudioDispatchCapture',
    		'KOMBrowseInfoAudioDispatchFetch',
    		'KOMBrowseInfoAudioDispatchClear',
    		'KOMBrowseInfoDispatchDebug',
    		'KOMBrowseInfo_DebugShowLauncherButton'
    	];

    	Object_1$5.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => window.confirm(main_1('OLSKWordingConfirmText')) && KOMBrowseInfoDispatchDiscard(KOMBrowseInfoItem);

    	const click_handler_1 = () => KOMBrowseInfoDispatchTemplate(Object.fromEntries(Object.entries(KOMBrowseInfoItem).filter(function (e) {
    		return e[0] === 'KOMCardTags';
    	})));

    	function input0_input_handler() {
    		KOMBrowseInfoItem.KOMCardFrontText = this.value;
    		$$invalidate(0, KOMBrowseInfoItem);
    	}

    	const click_handler_2 = () => KOMBrowseInfoDispatchRead(KOMBrowseInfoItem.KOMCardFrontText, KOMBrowseInfoDeck.KOMDeckFrontLanguageCode);

    	function input1_input_handler() {
    		KOMBrowseInfoItem.KOMCardRearText = this.value;
    		$$invalidate(0, KOMBrowseInfoItem);
    	}

    	const click_handler_3 = () => KOMBrowseInfoDispatchRead(KOMBrowseInfoItem.KOMCardRearText, KOMBrowseInfoDeck.KOMDeckRearLanguageCode);

    	function input2_input_handler() {
    		KOMBrowseInfoItem.KOMCardNotes = this.value;
    		$$invalidate(0, KOMBrowseInfoItem);
    	}

    	$$self.$$set = $$props => {
    		if ('KOMBrowseInfoItem' in $$props) $$invalidate(0, KOMBrowseInfoItem = $$props.KOMBrowseInfoItem);
    		if ('KOMBrowseInfoDeck' in $$props) $$invalidate(1, KOMBrowseInfoDeck = $$props.KOMBrowseInfoDeck);
    		if ('KOMBrowseInfoTagsSuggestions' in $$props) $$invalidate(2, KOMBrowseInfoTagsSuggestions = $$props.KOMBrowseInfoTagsSuggestions);
    		if ('KOMBrowseInfoSpeechAvailable' in $$props) $$invalidate(3, KOMBrowseInfoSpeechAvailable = $$props.KOMBrowseInfoSpeechAvailable);
    		if ('KOMBrowseInfoDispatchBack' in $$props) $$invalidate(4, KOMBrowseInfoDispatchBack = $$props.KOMBrowseInfoDispatchBack);
    		if ('KOMBrowseInfoDispatchUpdate' in $$props) $$invalidate(5, KOMBrowseInfoDispatchUpdate = $$props.KOMBrowseInfoDispatchUpdate);
    		if ('KOMBrowseInfoDispatchDiscard' in $$props) $$invalidate(6, KOMBrowseInfoDispatchDiscard = $$props.KOMBrowseInfoDispatchDiscard);
    		if ('KOMBrowseInfoDispatchTemplate' in $$props) $$invalidate(7, KOMBrowseInfoDispatchTemplate = $$props.KOMBrowseInfoDispatchTemplate);
    		if ('KOMBrowseInfoDispatchRead' in $$props) $$invalidate(8, KOMBrowseInfoDispatchRead = $$props.KOMBrowseInfoDispatchRead);
    		if ('KOMBrowseInfoAudioDispatchCapture' in $$props) $$invalidate(9, KOMBrowseInfoAudioDispatchCapture = $$props.KOMBrowseInfoAudioDispatchCapture);
    		if ('KOMBrowseInfoAudioDispatchFetch' in $$props) $$invalidate(10, KOMBrowseInfoAudioDispatchFetch = $$props.KOMBrowseInfoAudioDispatchFetch);
    		if ('KOMBrowseInfoAudioDispatchClear' in $$props) $$invalidate(11, KOMBrowseInfoAudioDispatchClear = $$props.KOMBrowseInfoAudioDispatchClear);
    		if ('KOMBrowseInfoDispatchDebug' in $$props) $$invalidate(14, KOMBrowseInfoDispatchDebug = $$props.KOMBrowseInfoDispatchDebug);
    		if ('KOMBrowseInfo_DebugShowLauncherButton' in $$props) $$invalidate(12, KOMBrowseInfo_DebugShowLauncherButton = $$props.KOMBrowseInfo_DebugShowLauncherButton);
    	};

    	$$self.$capture_state = () => ({
    		KOMBrowseInfoItem,
    		KOMBrowseInfoDeck,
    		KOMBrowseInfoTagsSuggestions,
    		KOMBrowseInfoSpeechAvailable,
    		KOMBrowseInfoDispatchBack,
    		KOMBrowseInfoDispatchUpdate,
    		KOMBrowseInfoDispatchDiscard,
    		KOMBrowseInfoDispatchTemplate,
    		KOMBrowseInfoDispatchRead,
    		KOMBrowseInfoAudioDispatchCapture,
    		KOMBrowseInfoAudioDispatchFetch,
    		KOMBrowseInfoAudioDispatchClear,
    		KOMBrowseInfoDispatchDebug,
    		KOMBrowseInfo_DebugShowLauncherButton,
    		modPublic,
    		OLSKLocalized: main_1,
    		OLSK_SPEC_UI: main_1$2,
    		mod,
    		_OLSKSharedBack,
    		_OLSKSharedDiscard: _OLSKSharedDiscard$1,
    		_OLSKSharedClone: _OLSKSharedClone$1,
    		KOMBrowseInfoAudio: Main$h,
    		KOMBrowseInfoTags: Main$i
    	});

    	$$self.$inject_state = $$props => {
    		if ('KOMBrowseInfoItem' in $$props) $$invalidate(0, KOMBrowseInfoItem = $$props.KOMBrowseInfoItem);
    		if ('KOMBrowseInfoDeck' in $$props) $$invalidate(1, KOMBrowseInfoDeck = $$props.KOMBrowseInfoDeck);
    		if ('KOMBrowseInfoTagsSuggestions' in $$props) $$invalidate(2, KOMBrowseInfoTagsSuggestions = $$props.KOMBrowseInfoTagsSuggestions);
    		if ('KOMBrowseInfoSpeechAvailable' in $$props) $$invalidate(3, KOMBrowseInfoSpeechAvailable = $$props.KOMBrowseInfoSpeechAvailable);
    		if ('KOMBrowseInfoDispatchBack' in $$props) $$invalidate(4, KOMBrowseInfoDispatchBack = $$props.KOMBrowseInfoDispatchBack);
    		if ('KOMBrowseInfoDispatchUpdate' in $$props) $$invalidate(5, KOMBrowseInfoDispatchUpdate = $$props.KOMBrowseInfoDispatchUpdate);
    		if ('KOMBrowseInfoDispatchDiscard' in $$props) $$invalidate(6, KOMBrowseInfoDispatchDiscard = $$props.KOMBrowseInfoDispatchDiscard);
    		if ('KOMBrowseInfoDispatchTemplate' in $$props) $$invalidate(7, KOMBrowseInfoDispatchTemplate = $$props.KOMBrowseInfoDispatchTemplate);
    		if ('KOMBrowseInfoDispatchRead' in $$props) $$invalidate(8, KOMBrowseInfoDispatchRead = $$props.KOMBrowseInfoDispatchRead);
    		if ('KOMBrowseInfoAudioDispatchCapture' in $$props) $$invalidate(9, KOMBrowseInfoAudioDispatchCapture = $$props.KOMBrowseInfoAudioDispatchCapture);
    		if ('KOMBrowseInfoAudioDispatchFetch' in $$props) $$invalidate(10, KOMBrowseInfoAudioDispatchFetch = $$props.KOMBrowseInfoAudioDispatchFetch);
    		if ('KOMBrowseInfoAudioDispatchClear' in $$props) $$invalidate(11, KOMBrowseInfoAudioDispatchClear = $$props.KOMBrowseInfoAudioDispatchClear);
    		if ('KOMBrowseInfoDispatchDebug' in $$props) $$invalidate(14, KOMBrowseInfoDispatchDebug = $$props.KOMBrowseInfoDispatchDebug);
    		if ('KOMBrowseInfo_DebugShowLauncherButton' in $$props) $$invalidate(12, KOMBrowseInfo_DebugShowLauncherButton = $$props.KOMBrowseInfo_DebugShowLauncherButton);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMBrowseInfoItem,
    		KOMBrowseInfoDeck,
    		KOMBrowseInfoTagsSuggestions,
    		KOMBrowseInfoSpeechAvailable,
    		KOMBrowseInfoDispatchBack,
    		KOMBrowseInfoDispatchUpdate,
    		KOMBrowseInfoDispatchDiscard,
    		KOMBrowseInfoDispatchTemplate,
    		KOMBrowseInfoDispatchRead,
    		KOMBrowseInfoAudioDispatchCapture,
    		KOMBrowseInfoAudioDispatchFetch,
    		KOMBrowseInfoAudioDispatchClear,
    		KOMBrowseInfo_DebugShowLauncherButton,
    		mod,
    		KOMBrowseInfoDispatchDebug,
    		modPublic,
    		click_handler,
    		click_handler_1,
    		input0_input_handler,
    		click_handler_2,
    		input1_input_handler,
    		click_handler_3,
    		input2_input_handler
    	];
    }

    class Main$j extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {
    			KOMBrowseInfoItem: 0,
    			KOMBrowseInfoDeck: 1,
    			KOMBrowseInfoTagsSuggestions: 2,
    			KOMBrowseInfoSpeechAvailable: 3,
    			KOMBrowseInfoDispatchBack: 4,
    			KOMBrowseInfoDispatchUpdate: 5,
    			KOMBrowseInfoDispatchDiscard: 6,
    			KOMBrowseInfoDispatchTemplate: 7,
    			KOMBrowseInfoDispatchRead: 8,
    			KOMBrowseInfoAudioDispatchCapture: 9,
    			KOMBrowseInfoAudioDispatchFetch: 10,
    			KOMBrowseInfoAudioDispatchClear: 11,
    			KOMBrowseInfoDispatchDebug: 14,
    			KOMBrowseInfo_DebugShowLauncherButton: 12,
    			modPublic: 15
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$j.name
    		});
    	}

    	get KOMBrowseInfoItem() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoItem(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoDeck() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoDeck(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoTagsSuggestions() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoTagsSuggestions(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoSpeechAvailable() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoSpeechAvailable(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoDispatchBack() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoDispatchBack(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoDispatchUpdate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoDispatchUpdate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoDispatchDiscard() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoDispatchDiscard(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoDispatchTemplate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoDispatchTemplate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoDispatchRead() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoDispatchRead(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoAudioDispatchCapture() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioDispatchCapture(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoAudioDispatchFetch() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioDispatchFetch(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoAudioDispatchClear() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoAudioDispatchClear(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoDispatchDebug() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoDispatchDebug(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfo_DebugShowLauncherButton() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfo_DebugShowLauncherButton(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[15];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/sub-browse/main.svelte generated by Svelte v3.59.2 */

    const { Object: Object_1$6 } = globals;
    const file$k = "os-app/sub-browse/main.svelte";

    // (384:1) 
    function create_OLSKNarrowToolbarHead_slot$1(ctx) {
    	let div1;
    	let button;
    	let div0;
    	let raw_value = OLSKUIAssets._OLSKSharedBack + "";
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			button = element("button");
    			div0 = element("div");
    			attr_dev(div0, "class", "KOMBrowseCloseButtonImage");
    			add_location(div0, file$k, 385, 3, 11698);
    			attr_dev(button, "class", "KOMBrowseCloseButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton");
    			attr_dev(button, "title", button_title_value = main_1('KOMBrowseCloseButtonText'));
    			add_location(button, file$k, 384, 2, 11510);
    			attr_dev(div1, "class", "OLSKToolbarElementGroup");
    			attr_dev(div1, "slot", "OLSKNarrowToolbarHead");
    			add_location(div1, file$k, 383, 1, 11441);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, button);
    			append_dev(button, div0);
    			div0.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*KOMBrowseDispatchClose*/ ctx[1])) /*KOMBrowseDispatchClose*/ ctx[1].apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKNarrowToolbarHead_slot$1.name,
    		type: "slot",
    		source: "(384:1) ",
    		ctx
    	});

    	return block;
    }

    // (390:1) 
    function create_OLSKNarrowToolbarTail_slot$1(ctx) {
    	let div1;
    	let button;
    	let div0;
    	let raw_value = OLSKUIAssets._OLSKSharedCreate + "";
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			button = element("button");
    			div0 = element("div");
    			attr_dev(div0, "class", "KOMBrowseCreateButtonImage");
    			add_location(div0, file$k, 391, 3, 12087);
    			attr_dev(button, "class", "KOMBrowseCreateButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton svelte-1tlty6r");
    			attr_dev(button, "title", button_title_value = main_1('KOMBrowseCreateButtonText'));
    			attr_dev(button, "accesskey", "n");
    			add_location(button, file$k, 390, 2, 11872);
    			attr_dev(div1, "class", "OLSKToolbarElementGroup");
    			attr_dev(div1, "slot", "OLSKNarrowToolbarTail");
    			add_location(div1, file$k, 389, 1, 11803);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, button);
    			append_dev(button, div0);
    			div0.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[5].InterfaceCreateButtonDidClick)) /*mod*/ ctx[5].InterfaceCreateButtonDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKNarrowToolbarTail_slot$1.name,
    		type: "slot",
    		source: "(390:1) ",
    		ctx
    	});

    	return block;
    }

    // (398:1) 
    function create_OLSKCollectionItem_slot$2(ctx) {
    	let div;
    	let kombrowselistitem;
    	let current;

    	kombrowselistitem = new Main$g({
    			props: {
    				KOMBrowseListItemObject: /*OLSKCollectionItem*/ ctx[13]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(kombrowselistitem.$$.fragment);
    			attr_dev(div, "slot", "OLSKCollectionItem");
    			add_location(div, file$k, 397, 1, 12216);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(kombrowselistitem, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const kombrowselistitem_changes = {};
    			if (dirty & /*OLSKCollectionItem*/ 8192) kombrowselistitem_changes.KOMBrowseListItemObject = /*OLSKCollectionItem*/ ctx[13];
    			kombrowselistitem.$set(kombrowselistitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kombrowselistitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kombrowselistitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(kombrowselistitem);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKCollectionItem_slot$2.name,
    		type: "slot",
    		source: "(398:1) ",
    		ctx
    	});

    	return block;
    }

    // (404:1) 
    function create_OLSKCatalogDetailContent_slot(ctx) {
    	let div;
    	let kombrowseinfo;
    	let current;

    	let kombrowseinfo_props = {
    		KOMBrowseInfoItem: /*OLSKCatalogItemSelected*/ ctx[14],
    		KOMBrowseInfoDeck: /*KOMBrowseDeckSelected*/ ctx[0],
    		KOMBrowseInfoTagsSuggestions: /*mod*/ ctx[5]._ValueTagsAll,
    		KOMBrowseInfoSpeechAvailable: /*KOMBrowseInfoSpeechAvailable*/ ctx[2],
    		KOMBrowseInfoDispatchBack: /*mod*/ ctx[5].KOMBrowseInfoDispatchBack,
    		KOMBrowseInfoDispatchDiscard: /*mod*/ ctx[5].KOMBrowseInfoDispatchDiscard,
    		KOMBrowseInfoDispatchUpdate: /*mod*/ ctx[5].KOMBrowseInfoDispatchUpdate,
    		KOMBrowseInfoDispatchTemplate: /*mod*/ ctx[5].KOMBrowseInfoDispatchTemplate,
    		KOMBrowseInfoDispatchRead: /*KOMBrowseInfoDispatchRead*/ ctx[3],
    		KOMBrowseInfoAudioDispatchCapture: /*mod*/ ctx[5].KOMBrowseInfoAudioDispatchCapture,
    		KOMBrowseInfoAudioDispatchFetch: /*mod*/ ctx[5].KOMBrowseInfoAudioDispatchFetch,
    		KOMBrowseInfoAudioDispatchClear: /*mod*/ ctx[5].KOMBrowseInfoAudioDispatchClear,
    		KOMBrowseInfoDispatchDebug: /*mod*/ ctx[5].KOMBrowseInfoDispatchDebug
    	};

    	kombrowseinfo = new Main$j({
    			props: kombrowseinfo_props,
    			$$inline: true
    		});

    	/*kombrowseinfo_binding*/ ctx[11](kombrowseinfo);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(kombrowseinfo.$$.fragment);
    			attr_dev(div, "class", "KOMBrowseDetailContainer");
    			attr_dev(div, "slot", "OLSKCatalogDetailContent");
    			add_location(div, file$k, 403, 1, 12348);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(kombrowseinfo, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const kombrowseinfo_changes = {};
    			if (dirty & /*OLSKCatalogItemSelected*/ 16384) kombrowseinfo_changes.KOMBrowseInfoItem = /*OLSKCatalogItemSelected*/ ctx[14];
    			if (dirty & /*KOMBrowseDeckSelected*/ 1) kombrowseinfo_changes.KOMBrowseInfoDeck = /*KOMBrowseDeckSelected*/ ctx[0];
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoTagsSuggestions = /*mod*/ ctx[5]._ValueTagsAll;
    			if (dirty & /*KOMBrowseInfoSpeechAvailable*/ 4) kombrowseinfo_changes.KOMBrowseInfoSpeechAvailable = /*KOMBrowseInfoSpeechAvailable*/ ctx[2];
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoDispatchBack = /*mod*/ ctx[5].KOMBrowseInfoDispatchBack;
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoDispatchDiscard = /*mod*/ ctx[5].KOMBrowseInfoDispatchDiscard;
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoDispatchUpdate = /*mod*/ ctx[5].KOMBrowseInfoDispatchUpdate;
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoDispatchTemplate = /*mod*/ ctx[5].KOMBrowseInfoDispatchTemplate;
    			if (dirty & /*KOMBrowseInfoDispatchRead*/ 8) kombrowseinfo_changes.KOMBrowseInfoDispatchRead = /*KOMBrowseInfoDispatchRead*/ ctx[3];
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoAudioDispatchCapture = /*mod*/ ctx[5].KOMBrowseInfoAudioDispatchCapture;
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoAudioDispatchFetch = /*mod*/ ctx[5].KOMBrowseInfoAudioDispatchFetch;
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoAudioDispatchClear = /*mod*/ ctx[5].KOMBrowseInfoAudioDispatchClear;
    			if (dirty & /*mod*/ 32) kombrowseinfo_changes.KOMBrowseInfoDispatchDebug = /*mod*/ ctx[5].KOMBrowseInfoDispatchDebug;
    			kombrowseinfo.$set(kombrowseinfo_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kombrowseinfo.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kombrowseinfo.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*kombrowseinfo_binding*/ ctx[11](null);
    			destroy_component(kombrowseinfo);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKCatalogDetailContent_slot.name,
    		type: "slot",
    		source: "(404:1) ",
    		ctx
    	});

    	return block;
    }

    // (425:0) {#if OLSK_SPEC_UI() && KOMBrowse_DEBUG }
    function create_if_block$b(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			attr_dev(button, "class", "OLSKAppToolbarLauncherButton");
    			add_location(button, file$k, 425, 2, 13412);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[5]._OLSKAppToolbarDispatchLauncher)) /*mod*/ ctx[5]._OLSKAppToolbarDispatchLauncher.apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(425:0) {#if OLSK_SPEC_UI() && KOMBrowse_DEBUG }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let olskcatalog;
    	let t;
    	let show_if = main_1$2() && /*KOMBrowse_DEBUG*/ ctx[4];
    	let if_block_anchor;
    	let current;

    	let olskcatalog_props = {
    		OLSKCollectionItemAccessibilitySummaryFunction: /*mod*/ ctx[5].OLSKCollectionItemAccessibilitySummaryFunction,
    		OLSKCollectionItemClass: 'OLSKCommonEdgeBottom',
    		OLSKCatalogSortFunction: mod$8.KOMBrowseSortFunction,
    		OLSKCatalogIsMatch: mod$8.KOMBrowseIsMatch,
    		OLSKCatalogExactSortFunction: mod$8.KOMBrowseExactSortFunction,
    		_OLSKCatalogDispatchKey: /*mod*/ ctx[5]._OLSKCatalogDispatchKey,
    		OLSKCollectionDispatchClick: /*mod*/ ctx[5].OLSKCollectionDispatchClick,
    		OLSKCollectionDispatchArrow: /*mod*/ ctx[5].OLSKCollectionDispatchArrow,
    		OLSKCatalogDispatchDetailActivate: /*mod*/ ctx[5].OLSKCatalogDispatchDetailActivate,
    		OLSKCatalogDispatchMasterShouldActivate: /*mod*/ ctx[5].OLSKCatalogDispatchMasterShouldActivate,
    		OLSKCatalogDispatchFilterSubmit: /*mod*/ ctx[5].OLSKCatalogDispatchFilterSubmit,
    		OLSKCatalogDispatchQuantity: /*mod*/ ctx[5].OLSKCatalogDispatchQuantity,
    		OLSKCatalogDispatchEscapeOnEmpty: /*KOMBrowseDispatchClose*/ ctx[1],
    		$$slots: {
    			OLSKCatalogDetailContent: [
    				create_OLSKCatalogDetailContent_slot,
    				({ OLSKCatalogItemSelected, OLSKCollectionItem }) => ({
    					14: OLSKCatalogItemSelected,
    					13: OLSKCollectionItem
    				}),
    				({ OLSKCatalogItemSelected, OLSKCollectionItem }) => (OLSKCatalogItemSelected ? 16384 : 0) | (OLSKCollectionItem ? 8192 : 0)
    			],
    			OLSKCollectionItem: [
    				create_OLSKCollectionItem_slot$2,
    				({ OLSKCollectionItem }) => ({ 13: OLSKCollectionItem }),
    				({ OLSKCollectionItem }) => OLSKCollectionItem ? 8192 : 0
    			],
    			OLSKNarrowToolbarTail: [
    				create_OLSKNarrowToolbarTail_slot$1,
    				({ OLSKCollectionItem }) => ({ 13: OLSKCollectionItem }),
    				({ OLSKCollectionItem }) => OLSKCollectionItem ? 8192 : 0
    			],
    			OLSKNarrowToolbarHead: [
    				create_OLSKNarrowToolbarHead_slot$1,
    				({ OLSKCollectionItem }) => ({ 13: OLSKCollectionItem }),
    				({ OLSKCollectionItem }) => OLSKCollectionItem ? 8192 : 0
    			]
    		},
    		$$scope: { ctx }
    	};

    	olskcatalog = new Main$f({ props: olskcatalog_props, $$inline: true });
    	/*olskcatalog_binding*/ ctx[12](olskcatalog);
    	let if_block = show_if && create_if_block$b(ctx);

    	const block = {
    		c: function create() {
    			create_component(olskcatalog.$$.fragment);
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskcatalog, target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const olskcatalog_changes = {};
    			if (dirty & /*mod*/ 32) olskcatalog_changes.OLSKCollectionItemAccessibilitySummaryFunction = /*mod*/ ctx[5].OLSKCollectionItemAccessibilitySummaryFunction;
    			if (dirty & /*mod*/ 32) olskcatalog_changes._OLSKCatalogDispatchKey = /*mod*/ ctx[5]._OLSKCatalogDispatchKey;
    			if (dirty & /*mod*/ 32) olskcatalog_changes.OLSKCollectionDispatchClick = /*mod*/ ctx[5].OLSKCollectionDispatchClick;
    			if (dirty & /*mod*/ 32) olskcatalog_changes.OLSKCollectionDispatchArrow = /*mod*/ ctx[5].OLSKCollectionDispatchArrow;
    			if (dirty & /*mod*/ 32) olskcatalog_changes.OLSKCatalogDispatchDetailActivate = /*mod*/ ctx[5].OLSKCatalogDispatchDetailActivate;
    			if (dirty & /*mod*/ 32) olskcatalog_changes.OLSKCatalogDispatchMasterShouldActivate = /*mod*/ ctx[5].OLSKCatalogDispatchMasterShouldActivate;
    			if (dirty & /*mod*/ 32) olskcatalog_changes.OLSKCatalogDispatchFilterSubmit = /*mod*/ ctx[5].OLSKCatalogDispatchFilterSubmit;
    			if (dirty & /*mod*/ 32) olskcatalog_changes.OLSKCatalogDispatchQuantity = /*mod*/ ctx[5].OLSKCatalogDispatchQuantity;
    			if (dirty & /*KOMBrowseDispatchClose*/ 2) olskcatalog_changes.OLSKCatalogDispatchEscapeOnEmpty = /*KOMBrowseDispatchClose*/ ctx[1];

    			if (dirty & /*$$scope, OLSKCatalogItemSelected, KOMBrowseDeckSelected, mod, KOMBrowseInfoSpeechAvailable, KOMBrowseInfoDispatchRead, OLSKCollectionItem, KOMBrowseDispatchClose*/ 57391) {
    				olskcatalog_changes.$$scope = { dirty, ctx };
    			}

    			olskcatalog.$set(olskcatalog_changes);
    			if (dirty & /*KOMBrowse_DEBUG*/ 16) show_if = main_1$2() && /*KOMBrowse_DEBUG*/ ctx[4];

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$b(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskcatalog.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskcatalog.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*olskcatalog_binding*/ ctx[12](null);
    			destroy_component(olskcatalog, detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMBrowseStorageClient } = $$props;
    	let { KOMBrowseDeckSelected } = $$props;
    	let { KOMBrowseDeckCards } = $$props;
    	let { KOMBrowseDispatchCreate } = $$props;
    	let { KOMBrowseDispatchDiscard } = $$props;
    	let { KOMBrowseDispatchClose } = $$props;
    	let { KOMBrowseInfoSpeechAvailable } = $$props;
    	let { KOMBrowseInfoDispatchRead } = $$props;
    	let { KOMBrowse_DEBUG = false } = $$props;

    	const modPublic = {
    		KOMBrowseSyncCreateCard() {
    			mod.SyncCreateCard(...arguments);
    		},
    		KOMBrowseSyncUpdateCard() {
    			mod.SyncUpdateCard(...arguments);
    		},
    		KOMBrowseSyncDeleteCard() {
    			mod.SyncDeleteCard(...arguments);
    		},
    		KOMBrowseRecipes() {
    			return mod.DataBrowseRecipes();
    		}
    	};

    	const mod = {
    		// VALUE
    		_ValueTagsAll: [],
    		_ValueCardUpdateThrottleMap: {},
    		// DATA
    		DataCardObjectTemplate(inputData = '') {
    			return {
    				KOMCardFrontText: inputData,
    				KOMCardRearText: '',
    				KOMCardNotes: ''
    			};
    		},
    		DataBrowseRecipes() {
    			const items = [
    				{
    					LCHRecipeSignature: 'KOMBrowseLauncherItemImportCardsFromSSV',
    					LCHRecipeName: main_1('KOMBrowseLauncherItemImportCardsFromSSVText'),
    					LCHRecipeCallback: function KOMBrowseLauncherItemImportCardsFromSSV() {
    						return mod.ControlImportCardsFromSSV();
    					}
    				}
    			];

    			if (mod._OLSKCatalog.modPublic._OLSKCatalogDataItemsAll().filter(function (e) {
    				return e.KOMCardIsRetired;
    			}).length) {
    				items.push(...[
    					{
    						LCHRecipeSignature: 'KOMBrowseLauncherItemDiscardRetiredCards',
    						LCHRecipeName: main_1('KOMBrowseLauncherItemDiscardRetiredCardsText'),
    						LCHRecipeCallback: function KOMBrowseLauncherItemDiscardRetiredCards() {
    							return mod.ControlDiscardRetiredCards();
    						}
    					}
    				]);
    			}

    			if (main_1$2()) {
    				items.push(...[
    					{
    						LCHRecipeName: 'FakeSyncCreateCard',
    						LCHRecipeCallback: async function FakeSyncCreateCard() {
    							return mod.SyncCreateCard(await KOMBrowseStorageClient.App.KOMCard.KOMCardCreate(mod.DataCardObjectTemplate('FakeSyncCreateCard'), KOMBrowseDeckSelected));
    						}
    					},
    					{
    						LCHRecipeName: 'FakeSyncUpdateCard',
    						LCHRecipeCallback: async function FakeSyncUpdateCard() {
    							return mod.SyncUpdateCard(await KOMBrowseStorageClient.App.KOMCard.KOMCardUpdate(Object.assign(
    								mod._OLSKCatalog.modPublic._OLSKCatalogDataItemsAll().filter(function (e) {
    									return e.KOMCardFrontText.match('FakeSync');
    								}).pop(),
    								{ KOMCardFrontText: 'FakeSyncUpdateCard' }
    							)));
    						}
    					},
    					{
    						LCHRecipeName: 'FakeSyncDeleteCard',
    						LCHRecipeCallback: async function FakeSyncDeleteCard() {
    							return mod.SyncDeleteCard(await KOMBrowseStorageClient.App.KOMCard.KOMCardDelete(mod._OLSKCatalog.modPublic._OLSKCatalogDataItemsAll().filter(function (e) {
    								return e.KOMCardFrontText.match('FakeSync');
    							}).pop()));
    						}
    					},
    					{
    						LCHRecipeName: 'FakeSyncConflictCard',
    						LCHRecipeCallback: async function FakeSyncConflictCard() {
    							const item = mod._OLSKCatalog.modPublic._OLSKCatalogDataItemsAll().filter(function (e) {
    								return e.KOMCardFrontText.match('FakeSyncConflictCard');
    							}).pop();

    							return mod.SyncConflictCard({
    								origin: 'conflict',
    								oldValue: JSON.parse(JSON.stringify(await KOMBrowseStorageClient.App.KOMCard.KOMCardUpdate(Object.assign({}, item, {
    									KOMCardFrontText: item.KOMCardFrontText + '-local'
    								})))),
    								newValue: JSON.parse(JSON.stringify(Object.assign({}, item, {
    									KOMCardFrontText: item.KOMCardFrontText + '-remote'
    								})))
    							});
    						}
    					}
    				]);
    			}

    			if (mod._KOMBrowseInfo) {
    				items.push(...mod._KOMBrowseInfo.modPublic.KOMBrowseInfoRecipes());
    			}

    			return items;
    		},
    		// INTERFACE	
    		InterfaceCreateButtonDidClick() {
    			mod.ControlCardCreate(KOMBrowseDeckSelected);
    		},
    		// CONTROL
    		async ControlCardCreate(param1, param2 = {}) {
    			const item = await KOMBrowseStorageClient.App.KOMCard.KOMCardCreate(Object.assign(mod.DataCardObjectTemplate(), param2), param1);
    			mod.ControlCardActivate(mod._OLSKCatalog.modPublic.OLSKCatalogInsert(item));
    			KOMBrowseDispatchCreate(item);
    		},
    		ControlCardUpdate(inputData) {
    			OLSKThrottle.OLSKThrottleMappedTimeout(mod._ValueCardUpdateThrottleMap, inputData.KOMCardID, {
    				OLSKThrottleDuration: main_1$2() ? 0 : 500,
    				OLSKThrottleCallback() {
    					return KOMBrowseStorageClient.App.KOMCard.KOMCardUpdate(inputData);
    				}
    			});
    		},
    		async ControlCardAudioCapture(property, data, card) {
    			await KOMBrowseStorageClient.App.KOMCard.KOMCardAudioCapture(
    				card,
    				property === 'KOMCardFrontAudio'
    				? KOMCard.KOMCardSideFront()
    				: KOMCard.KOMCardSideRear(),
    				data
    			);

    			await mod.ControlCardUpdate(card);
    		},
    		async ControlCardAudioClear(param1, param2) {
    			await KOMBrowseStorageClient.App.KOMCard.KOMCardAudioClear(param2, param1 === 'KOMCardFrontAudio'
    			? KOMCard.KOMCardSideFront()
    			: KOMCard.KOMCardSideRear());

    			await mod.ControlCardUpdate(param2);
    		},
    		async ControlCardDiscard(inputData) {
    			mod._OLSKCatalog.modPublic.OLSKCatalogRemove(inputData);
    			KOMBrowseDispatchDiscard(await KOMBrowseStorageClient.App.KOMCard.KOMCardDelete(inputData));
    		},
    		ControlImportCardsFromSSV() {
    			mod$8.KOMBrowseCardsFromSSV(window.prompt() || '').forEach(function (e) {
    				mod.ControlCardCreate(KOMBrowseDeckSelected, e);
    			});
    		},
    		ControlDiscardRetiredCards() {
    			if (window.prompt(main_1('KOMBrowseLauncherItemDiscardRetiredCardsPromptText')) !== KOMBrowseDeckSelected.$KOMReviewChartCompositionCollectionData.KOMSpacingGroupingRetired.toString()) {
    				return;
    			}

    			return mod._OLSKCatalog.modPublic._OLSKCatalogDataItemsAll().filter(function (e) {
    				return e.KOMCardIsRetired;
    			}).map(function (e) {
    				return mod.ControlCardDiscard(e);
    			});
    		},
    		ControlFocusMaster() {
    			document.querySelector('.OLSKNarrowFilterField').focus();
    		},
    		ControlFocusDetail() {
    			document.querySelector('.KOMBrowseInfoFormFrontTextField').focus();
    		},
    		ControlCardActivate(inputData) {
    			mod._OLSKCatalog.modPublic.OLSKCatalogSelect(inputData);
    			mod._OLSKCatalog.modPublic.OLSKCatalogFocusDetail();
    			setTimeout(mod.ControlFocusDetail);
    		},
    		// MESSAGE
    		OLSKCollectionItemAccessibilitySummaryFunction(inputData) {
    			mod$8.KOMBrowseAccessibilitySummary(inputData, main_1);
    		},
    		_OLSKCatalogDispatchKey(inputData) {
    			return inputData.KOMCardID;
    		},
    		OLSKCollectionDispatchClick(inputData) {
    			mod.ControlCardActivate(inputData);
    		},
    		OLSKCollectionDispatchArrow(inputData) {
    			mod._OLSKCatalog.modPublic.OLSKCatalogSelect(inputData);
    		},
    		OLSKCatalogDispatchDetailActivate() {
    			document.querySelector('.KOMBrowseInfoFormFrontTextField').focus();
    		},
    		OLSKCatalogDispatchMasterShouldActivate() {
    			return document.activeElement === document.querySelector('.KOMBrowseInfoFormFrontTextField');
    		},
    		OLSKCatalogDispatchQuantity(inputData) {
    			mod.ReactTags();
    		},
    		KOMBrowseInfoDispatchBack() {
    			mod._OLSKCatalog.modPublic.OLSKCatalogFocusMaster();
    		},
    		KOMBrowseInfoDispatchDiscard() {
    			mod.ControlCardDiscard(mod._OLSKCatalog.modPublic.OLSKCatalogDataItemSelected());
    		},
    		KOMBrowseInfoDispatchTemplate(inputData) {
    			mod.ControlCardCreate(KOMBrowseDeckSelected, inputData);
    		},
    		KOMBrowseInfoDispatchUpdate() {
    			mod.ControlCardUpdate(mod._OLSKCatalog.modPublic.OLSKCatalogUpdate(mod._OLSKCatalog.modPublic.OLSKCatalogDataItemSelected()));
    			mod.ReactTags();
    		},
    		async KOMBrowseInfoAudioDispatchCapture(property, data) {
    			await mod.ControlCardAudioCapture(property, data, mod._OLSKCatalog.modPublic.OLSKCatalogDataItemSelected());
    			mod._OLSKCatalog.modPublic.OLSKCatalogSelect(mod._OLSKCatalog.modPublic.OLSKCatalogDataItemSelected()); // #purge-svelte-force-update
    		},
    		async KOMBrowseInfoAudioDispatchClear(inputData) {
    			await mod.ControlCardAudioClear(inputData, mod._OLSKCatalog.modPublic.OLSKCatalogDataItemSelected());
    			mod._OLSKCatalog.modPublic.OLSKCatalogSelect(mod._OLSKCatalog.modPublic.OLSKCatalogDataItemSelected()); // #purge-svelte-force-update
    		},
    		KOMBrowseInfoAudioDispatchFetch(inputData) {
    			return KOMBrowseStorageClient.App.KOMCard.KOMCardAudioFetch(mod._OLSKCatalog.modPublic.OLSKCatalogDataItemSelected(), inputData);
    		},
    		KOMBrowseInfoDispatchDebug(inputData) {
    			const url = `https://inspektor.5apps.com/?path=kommit%2F${encodeURIComponent(KOMCard.KOMCardFolderPath(inputData, KOMBrowseDeckSelected))}`;

    			if (main_1$2()) {
    				window.FakeWindowOpen = url;
    				return;
    			}

    			window.open(url);
    		},
    		_OLSKAppToolbarDispatchLauncher() {
    			window.Launchlet.LCHSingletonCreate({
    				LCHOptionRecipes: mod.DataBrowseRecipes()
    			});
    		},
    		SyncCreateCard(inputData) {
    			mod._OLSKCatalog.modPublic.OLSKCatalogInsert(inputData);
    			KOMBrowseDispatchCreate(inputData);
    		},
    		SyncUpdateCard(inputData) {
    			mod._OLSKCatalog.modPublic.OLSKCatalogUpdate(inputData);
    		},
    		SyncDeleteCard(inputData) {
    			mod._OLSKCatalog.modPublic.OLSKCatalogRemove(inputData);
    			KOMBrowseDispatchDiscard(inputData);
    		},
    		SyncConflictCard(inputData) {
    			return setTimeout(
    				async function () {
    					mod._OLSKCatalog.modPublic.OLSKCatalogUpdate(await KOMBrowseStorageClient.App.KOMCard.KOMCardUpdate(main$3.OLSKRemoteStoragePostJSONParse(main$3.OLSKRemoteStorageChangeDelegateConflictSelectRecent(inputData))));
    				},
    				main_1$2() ? 0 : 500
    			);
    		},
    		// REACT
    		ReactTags() {
    			$$invalidate(
    				5,
    				mod._ValueTagsAll = mod._OLSKCatalog.modPublic._OLSKCatalogDataItemsAll().reduce(
    					function (coll, item) {
    						return coll.concat((item.KOMCardTags || []).filter(function (e) {
    							return !coll.includes(e);
    						}));
    					},
    					[]
    				).sort(),
    				mod
    			);
    		},
    		// SETUP
    		SetupEverything() {
    			mod.SetupCatalog();
    			mod.SetupFocus();
    		},
    		SetupCatalog() {
    			KOMBrowseDeckCards.map(mod._OLSKCatalog.modPublic.OLSKCatalogInsert);
    		},
    		SetupFocus() {
    			setTimeout(function () {
    				mod.ControlFocusMaster();
    			});
    		},
    		// LIFECYCLE
    		LifecycleModuleWillMount() {
    			mod.SetupEverything();
    		}
    	};

    	onMount(mod.LifecycleModuleWillMount);

    	$$self.$$.on_mount.push(function () {
    		if (KOMBrowseStorageClient === undefined && !('KOMBrowseStorageClient' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseStorageClient']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseStorageClient'");
    		}

    		if (KOMBrowseDeckSelected === undefined && !('KOMBrowseDeckSelected' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseDeckSelected']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseDeckSelected'");
    		}

    		if (KOMBrowseDeckCards === undefined && !('KOMBrowseDeckCards' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseDeckCards']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseDeckCards'");
    		}

    		if (KOMBrowseDispatchCreate === undefined && !('KOMBrowseDispatchCreate' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseDispatchCreate']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseDispatchCreate'");
    		}

    		if (KOMBrowseDispatchDiscard === undefined && !('KOMBrowseDispatchDiscard' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseDispatchDiscard']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseDispatchDiscard'");
    		}

    		if (KOMBrowseDispatchClose === undefined && !('KOMBrowseDispatchClose' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseDispatchClose']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseDispatchClose'");
    		}

    		if (KOMBrowseInfoSpeechAvailable === undefined && !('KOMBrowseInfoSpeechAvailable' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoSpeechAvailable']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoSpeechAvailable'");
    		}

    		if (KOMBrowseInfoDispatchRead === undefined && !('KOMBrowseInfoDispatchRead' in $$props || $$self.$$.bound[$$self.$$.props['KOMBrowseInfoDispatchRead']])) {
    			console.warn("<Main> was created without expected prop 'KOMBrowseInfoDispatchRead'");
    		}
    	});

    	const writable_props = [
    		'KOMBrowseStorageClient',
    		'KOMBrowseDeckSelected',
    		'KOMBrowseDeckCards',
    		'KOMBrowseDispatchCreate',
    		'KOMBrowseDispatchDiscard',
    		'KOMBrowseDispatchClose',
    		'KOMBrowseInfoSpeechAvailable',
    		'KOMBrowseInfoDispatchRead',
    		'KOMBrowse_DEBUG'
    	];

    	Object_1$6.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function kombrowseinfo_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			mod._KOMBrowseInfo = $$value;
    			$$invalidate(5, mod);
    		});
    	}

    	function olskcatalog_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			mod._OLSKCatalog = $$value;
    			$$invalidate(5, mod);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('KOMBrowseStorageClient' in $$props) $$invalidate(6, KOMBrowseStorageClient = $$props.KOMBrowseStorageClient);
    		if ('KOMBrowseDeckSelected' in $$props) $$invalidate(0, KOMBrowseDeckSelected = $$props.KOMBrowseDeckSelected);
    		if ('KOMBrowseDeckCards' in $$props) $$invalidate(7, KOMBrowseDeckCards = $$props.KOMBrowseDeckCards);
    		if ('KOMBrowseDispatchCreate' in $$props) $$invalidate(8, KOMBrowseDispatchCreate = $$props.KOMBrowseDispatchCreate);
    		if ('KOMBrowseDispatchDiscard' in $$props) $$invalidate(9, KOMBrowseDispatchDiscard = $$props.KOMBrowseDispatchDiscard);
    		if ('KOMBrowseDispatchClose' in $$props) $$invalidate(1, KOMBrowseDispatchClose = $$props.KOMBrowseDispatchClose);
    		if ('KOMBrowseInfoSpeechAvailable' in $$props) $$invalidate(2, KOMBrowseInfoSpeechAvailable = $$props.KOMBrowseInfoSpeechAvailable);
    		if ('KOMBrowseInfoDispatchRead' in $$props) $$invalidate(3, KOMBrowseInfoDispatchRead = $$props.KOMBrowseInfoDispatchRead);
    		if ('KOMBrowse_DEBUG' in $$props) $$invalidate(4, KOMBrowse_DEBUG = $$props.KOMBrowse_DEBUG);
    	};

    	$$self.$capture_state = () => ({
    		KOMBrowseStorageClient,
    		KOMBrowseDeckSelected,
    		KOMBrowseDeckCards,
    		KOMBrowseDispatchCreate,
    		KOMBrowseDispatchDiscard,
    		KOMBrowseDispatchClose,
    		KOMBrowseInfoSpeechAvailable,
    		KOMBrowseInfoDispatchRead,
    		KOMBrowse_DEBUG,
    		modPublic,
    		OLSKLocalized: main_1,
    		OLSK_SPEC_UI: main_1$2,
    		OLSKThrottle,
    		OLSKRemoteStorage: main$3,
    		KOMBrowseLogic: mod$8,
    		KOMCard,
    		mod,
    		onMount,
    		OLSKCatalog: Main$f,
    		KOMBrowseListItem: Main$g,
    		KOMBrowseInfo: Main$j,
    		OLSKUIAssets
    	});

    	$$self.$inject_state = $$props => {
    		if ('KOMBrowseStorageClient' in $$props) $$invalidate(6, KOMBrowseStorageClient = $$props.KOMBrowseStorageClient);
    		if ('KOMBrowseDeckSelected' in $$props) $$invalidate(0, KOMBrowseDeckSelected = $$props.KOMBrowseDeckSelected);
    		if ('KOMBrowseDeckCards' in $$props) $$invalidate(7, KOMBrowseDeckCards = $$props.KOMBrowseDeckCards);
    		if ('KOMBrowseDispatchCreate' in $$props) $$invalidate(8, KOMBrowseDispatchCreate = $$props.KOMBrowseDispatchCreate);
    		if ('KOMBrowseDispatchDiscard' in $$props) $$invalidate(9, KOMBrowseDispatchDiscard = $$props.KOMBrowseDispatchDiscard);
    		if ('KOMBrowseDispatchClose' in $$props) $$invalidate(1, KOMBrowseDispatchClose = $$props.KOMBrowseDispatchClose);
    		if ('KOMBrowseInfoSpeechAvailable' in $$props) $$invalidate(2, KOMBrowseInfoSpeechAvailable = $$props.KOMBrowseInfoSpeechAvailable);
    		if ('KOMBrowseInfoDispatchRead' in $$props) $$invalidate(3, KOMBrowseInfoDispatchRead = $$props.KOMBrowseInfoDispatchRead);
    		if ('KOMBrowse_DEBUG' in $$props) $$invalidate(4, KOMBrowse_DEBUG = $$props.KOMBrowse_DEBUG);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMBrowseDeckSelected,
    		KOMBrowseDispatchClose,
    		KOMBrowseInfoSpeechAvailable,
    		KOMBrowseInfoDispatchRead,
    		KOMBrowse_DEBUG,
    		mod,
    		KOMBrowseStorageClient,
    		KOMBrowseDeckCards,
    		KOMBrowseDispatchCreate,
    		KOMBrowseDispatchDiscard,
    		modPublic,
    		kombrowseinfo_binding,
    		olskcatalog_binding
    	];
    }

    class Main$k extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$k, create_fragment$k, safe_not_equal, {
    			KOMBrowseStorageClient: 6,
    			KOMBrowseDeckSelected: 0,
    			KOMBrowseDeckCards: 7,
    			KOMBrowseDispatchCreate: 8,
    			KOMBrowseDispatchDiscard: 9,
    			KOMBrowseDispatchClose: 1,
    			KOMBrowseInfoSpeechAvailable: 2,
    			KOMBrowseInfoDispatchRead: 3,
    			KOMBrowse_DEBUG: 4,
    			modPublic: 10
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$k.name
    		});
    	}

    	get KOMBrowseStorageClient() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseStorageClient(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseDeckSelected() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseDeckSelected(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseDeckCards() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseDeckCards(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseDispatchCreate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseDispatchCreate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseDispatchDiscard() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseDispatchDiscard(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseDispatchClose() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseDispatchClose(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoSpeechAvailable() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoSpeechAvailable(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowseInfoDispatchRead() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowseInfoDispatchRead(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMBrowse_DEBUG() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMBrowse_DEBUG(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[10];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/sub-play/main.svelte generated by Svelte v3.59.2 */

    const { Object: Object_1$7, window: window_1$2 } = globals;
    const file$l = "os-app/sub-play/main.svelte";

    // (414:0) {#if mod._ValueState.KOMPlayStateCurrent }
    function create_if_block$c(ctx) {
    	let div1;
    	let div0;
    	let t0_value = /*mod*/ ctx[3].DataQuestion() + "";
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let show_if_1 = /*mod*/ ctx[3].DataQuestionShouldSound() || /*mod*/ ctx[3]._ValueIsFlipped && /*mod*/ ctx[3].DataAnswerShouldSound();
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let show_if = main_1$2();
    	let if_block7_anchor;
    	let mounted;
    	let dispose;
    	let if_block0 = /*mod*/ ctx[3]._ValueState.KOMPlayStateCurrentPair && create_if_block_11(ctx);
    	let if_block1 = /*mod*/ ctx[3]._ValueIsFlipped && create_if_block_9(ctx);
    	let if_block2 = /*mod*/ ctx[3]._ValueIsFlipped && !/*mod*/ ctx[3]._ValueState.KOMPlayStateCurrentPair && create_if_block_8(ctx);
    	let if_block3 = show_if_1 && create_if_block_5$2(ctx);
    	let if_block4 = !/*mod*/ ctx[3]._ValueIsFlipped && create_if_block_4$3(ctx);
    	let if_block5 = /*mod*/ ctx[3]._ValueIsFlipped && /*KOMPlayExtraResponseButtons*/ ctx[2] && create_if_block_3$3(ctx);
    	let if_block6 = /*mod*/ ctx[3]._ValueIsFlipped && !/*KOMPlayExtraResponseButtons*/ ctx[2] && create_if_block_2$5(ctx);
    	let if_block7 = show_if && create_if_block_1$7(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			t4 = space();
    			if (if_block3) if_block3.c();
    			t5 = space();
    			if (if_block4) if_block4.c();
    			t6 = space();
    			if (if_block5) if_block5.c();
    			t7 = space();
    			if (if_block6) if_block6.c();
    			t8 = space();
    			if (if_block7) if_block7.c();
    			if_block7_anchor = empty();
    			attr_dev(div0, "class", "KOMPlayCardQuestion svelte-tydqr2");
    			add_location(div0, file$l, 416, 2, 11296);
    			attr_dev(div1, "class", "KOMPlayCard OLSKDecorTappable svelte-tydqr2");
    			add_location(div1, file$l, 414, 1, 11210);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, t0);
    			append_dev(div1, t1);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div1, t2);
    			if (if_block1) if_block1.m(div1, null);
    			append_dev(div1, t3);
    			if (if_block2) if_block2.m(div1, null);
    			insert_dev(target, t4, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t6, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, t7, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, t8, anchor);
    			if (if_block7) if_block7.m(target, anchor);
    			insert_dev(target, if_block7_anchor, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					div1,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[3].InterfaceCardDidClick)) /*mod*/ ctx[3].InterfaceCardDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*mod*/ 8 && t0_value !== (t0_value = /*mod*/ ctx[3].DataQuestion() + "")) set_data_dev(t0, t0_value);

    			if (/*mod*/ ctx[3]._ValueState.KOMPlayStateCurrentPair) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_11(ctx);
    					if_block0.c();
    					if_block0.m(div1, t2);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*mod*/ ctx[3]._ValueIsFlipped) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_9(ctx);
    					if_block1.c();
    					if_block1.m(div1, t3);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*mod*/ ctx[3]._ValueIsFlipped && !/*mod*/ ctx[3]._ValueState.KOMPlayStateCurrentPair) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_8(ctx);
    					if_block2.c();
    					if_block2.m(div1, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (dirty & /*mod*/ 8) show_if_1 = /*mod*/ ctx[3].DataQuestionShouldSound() || /*mod*/ ctx[3]._ValueIsFlipped && /*mod*/ ctx[3].DataAnswerShouldSound();

    			if (show_if_1) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_5$2(ctx);
    					if_block3.c();
    					if_block3.m(t5.parentNode, t5);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (!/*mod*/ ctx[3]._ValueIsFlipped) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_4$3(ctx);
    					if_block4.c();
    					if_block4.m(t6.parentNode, t6);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*mod*/ ctx[3]._ValueIsFlipped && /*KOMPlayExtraResponseButtons*/ ctx[2]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_3$3(ctx);
    					if_block5.c();
    					if_block5.m(t7.parentNode, t7);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*mod*/ ctx[3]._ValueIsFlipped && !/*KOMPlayExtraResponseButtons*/ ctx[2]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_2$5(ctx);
    					if_block6.c();
    					if_block6.m(t8.parentNode, t8);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (show_if) if_block7.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (detaching) detach_dev(t4);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t6);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(t7);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(t8);
    			if (if_block7) if_block7.d(detaching);
    			if (detaching) detach_dev(if_block7_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(414:0) {#if mod._ValueState.KOMPlayStateCurrent }",
    		ctx
    	});

    	return block;
    }

    // (419:2) {#if mod._ValueState.KOMPlayStateCurrentPair }
    function create_if_block_11(ctx) {
    	let div;
    	let t_value = /*mod*/ ctx[3].DataPairQuestion() + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "KOMPlayCardQuestionPair svelte-tydqr2");
    			add_location(div, file$l, 419, 3, 11413);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mod*/ 8 && t_value !== (t_value = /*mod*/ ctx[3].DataPairQuestion() + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(419:2) {#if mod._ValueState.KOMPlayStateCurrentPair }",
    		ctx
    	});

    	return block;
    }

    // (423:2) {#if mod._ValueIsFlipped}
    function create_if_block_9(ctx) {
    	let div;
    	let t0_value = /*mod*/ ctx[3].DataAnswer() + "";
    	let t0;
    	let t1;
    	let if_block_anchor;
    	let if_block = /*mod*/ ctx[3]._ValueState.KOMPlayStateCurrentPair && create_if_block_10(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(div, "class", "KOMPlayCardAnswer svelte-tydqr2");
    			add_location(div, file$l, 423, 3, 11523);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mod*/ 8 && t0_value !== (t0_value = /*mod*/ ctx[3].DataAnswer() + "")) set_data_dev(t0, t0_value);

    			if (/*mod*/ ctx[3]._ValueState.KOMPlayStateCurrentPair) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_10(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(423:2) {#if mod._ValueIsFlipped}",
    		ctx
    	});

    	return block;
    }

    // (426:3) {#if mod._ValueState.KOMPlayStateCurrentPair }
    function create_if_block_10(ctx) {
    	let div;
    	let t_value = /*mod*/ ctx[3].DataPairAnswer() + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "KOMPlayCardAnswerPair svelte-tydqr2");
    			add_location(div, file$l, 426, 4, 11636);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mod*/ 8 && t_value !== (t_value = /*mod*/ ctx[3].DataPairAnswer() + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(426:3) {#if mod._ValueState.KOMPlayStateCurrentPair }",
    		ctx
    	});

    	return block;
    }

    // (432:2) {#if mod._ValueIsFlipped && !mod._ValueState.KOMPlayStateCurrentPair }
    function create_if_block_8(ctx) {
    	let div;
    	let t_value = /*mod*/ ctx[3]._ValueState.KOMPlayStateCurrent.$KOMSpacingCard.KOMCardNotes + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "KOMPlayCardNotes svelte-tydqr2");
    			add_location(div, file$l, 432, 3, 11800);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mod*/ 8 && t_value !== (t_value = /*mod*/ ctx[3]._ValueState.KOMPlayStateCurrent.$KOMSpacingCard.KOMCardNotes + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(432:2) {#if mod._ValueIsFlipped && !mod._ValueState.KOMPlayStateCurrentPair }",
    		ctx
    	});

    	return block;
    }

    // (438:1) {#if mod.DataQuestionShouldSound() || (mod._ValueIsFlipped && mod.DataAnswerShouldSound()) }
    function create_if_block_5$2(ctx) {
    	let div;
    	let show_if_1 = /*mod*/ ctx[3].DataQuestionShouldSound();
    	let t;
    	let show_if = /*mod*/ ctx[3]._ValueIsFlipped && /*mod*/ ctx[3].DataAnswerShouldSound();
    	let if_block0 = show_if_1 && create_if_block_7$1(ctx);
    	let if_block1 = show_if && create_if_block_6$2(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div, "class", "KOMPlayHear svelte-tydqr2");
    			add_location(div, file$l, 438, 2, 12022);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t);
    			if (if_block1) if_block1.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mod*/ 8) show_if_1 = /*mod*/ ctx[3].DataQuestionShouldSound();

    			if (show_if_1) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_7$1(ctx);
    					if_block0.c();
    					if_block0.m(div, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*mod*/ 8) show_if = /*mod*/ ctx[3]._ValueIsFlipped && /*mod*/ ctx[3].DataAnswerShouldSound();

    			if (show_if) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_6$2(ctx);
    					if_block1.c();
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(438:1) {#if mod.DataQuestionShouldSound() || (mod._ValueIsFlipped && mod.DataAnswerShouldSound()) }",
    		ctx
    	});

    	return block;
    }

    // (440:3) {#if mod.DataQuestionShouldSound()}
    function create_if_block_7$1(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = `${main_1('KOMPlayHearQuestionButtonText')}`;
    			attr_dev(button, "class", "KOMPlayHearQuestionButton OLSKDecorButtonNoStyle OLSKDecorTappable svelte-tydqr2");
    			add_location(button, file$l, 440, 4, 12091);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[3].InterfaceHearQuestionButtonDidClick)) /*mod*/ ctx[3].InterfaceHearQuestionButtonDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(440:3) {#if mod.DataQuestionShouldSound()}",
    		ctx
    	});

    	return block;
    }

    // (444:3) {#if mod._ValueIsFlipped && mod.DataAnswerShouldSound() }
    function create_if_block_6$2(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = `${main_1('KOMPlayHearAnswerButtonText')}`;
    			attr_dev(button, "class", "KOMPlayHearAnswerButton OLSKDecorButtonNoStyle OLSKDecorTappable svelte-tydqr2");
    			add_location(button, file$l, 444, 4, 12362);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[3].InterfaceHearAnswerButtonDidClick)) /*mod*/ ctx[3].InterfaceHearAnswerButtonDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$2.name,
    		type: "if",
    		source: "(444:3) {#if mod._ValueIsFlipped && mod.DataAnswerShouldSound() }",
    		ctx
    	});

    	return block;
    }

    // (450:1) {#if !mod._ValueIsFlipped}
    function create_if_block_4$3(ctx) {
    	let button;
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			span = element("span");
    			span.textContent = `${main_1('KOMPlayFlipButtonText')}`;
    			attr_dev(span, "class", "OLSKDecorPress svelte-tydqr2");
    			add_location(span, file$l, 450, 122, 12728);
    			attr_dev(button, "class", "KOMPlayFlipButton OLSKDecorButtonNoStyle OLSKDecorTappable svelte-tydqr2");
    			add_location(button, file$l, 450, 2, 12608);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, span);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[3].InterfaceFlipButtonDidClick)) /*mod*/ ctx[3].InterfaceFlipButtonDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$3.name,
    		type: "if",
    		source: "(450:1) {#if !mod._ValueIsFlipped}",
    		ctx
    	});

    	return block;
    }

    // (454:1) {#if mod._ValueIsFlipped && KOMPlayExtraResponseButtons}
    function create_if_block_3$3(ctx) {
    	let button0;
    	let span0;
    	let t1;
    	let div;
    	let button1;
    	let span1;
    	let t3;
    	let button2;
    	let span2;
    	let t5;
    	let button3;
    	let span3;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button0 = element("button");
    			span0 = element("span");
    			span0.textContent = `${main_1('KOMPlayResponseButtonAgainText')}`;
    			t1 = space();
    			div = element("div");
    			button1 = element("button");
    			span1 = element("span");
    			span1.textContent = `${main_1('KOMPlayResponseButtonHardText')}`;
    			t3 = space();
    			button2 = element("button");
    			span2 = element("span");
    			span2.textContent = `${main_1('KOMPlayResponseButtonGoodText')}`;
    			t5 = space();
    			button3 = element("button");
    			span3 = element("span");
    			span3.textContent = `${main_1('KOMPlayResponseButtonEasyText')}`;
    			attr_dev(span0, "class", "OLSKDecorPress svelte-tydqr2");
    			add_location(span0, file$l, 454, 140, 13022);
    			attr_dev(button0, "class", "KOMPlayResponseButtonAgain OLSKDecorButtonNoStyle OLSKDecorTappable svelte-tydqr2");
    			add_location(button0, file$l, 454, 2, 12884);
    			attr_dev(span1, "class", "OLSKDecorPress svelte-tydqr2");
    			add_location(span1, file$l, 457, 139, 13298);
    			attr_dev(button1, "class", "KOMPlayResponseButtonHard OLSKDecorButtonNoStyle OLSKDecorTappable svelte-tydqr2");
    			add_location(button1, file$l, 457, 3, 13162);
    			attr_dev(span2, "class", "OLSKDecorPress svelte-tydqr2");
    			add_location(span2, file$l, 459, 139, 13534);
    			attr_dev(button2, "class", "KOMPlayResponseButtonGood OLSKDecorButtonNoStyle OLSKDecorTappable svelte-tydqr2");
    			add_location(button2, file$l, 459, 3, 13398);
    			attr_dev(span3, "class", "OLSKDecorPress svelte-tydqr2");
    			add_location(span3, file$l, 461, 139, 13770);
    			attr_dev(button3, "class", "KOMPlayResponseButtonEasy OLSKDecorButtonNoStyle OLSKDecorTappable svelte-tydqr2");
    			add_location(button3, file$l, 461, 3, 13634);
    			attr_dev(div, "class", "KOMPlayResponseCorrect svelte-tydqr2");
    			add_location(div, file$l, 456, 2, 13122);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button0, anchor);
    			append_dev(button0, span0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, button1);
    			append_dev(button1, span1);
    			append_dev(div, t3);
    			append_dev(div, button2);
    			append_dev(button2, span2);
    			append_dev(div, t5);
    			append_dev(div, button3);
    			append_dev(button3, span3);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[3].InterfaceResponseButtonDidClickAgain)) /*mod*/ ctx[3].InterfaceResponseButtonDidClickAgain.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button1,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[3].InterfaceResponseButtonDidClickHard)) /*mod*/ ctx[3].InterfaceResponseButtonDidClickHard.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button2,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[3].InterfaceResponseButtonDidClickGood)) /*mod*/ ctx[3].InterfaceResponseButtonDidClickGood.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button3,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[3].InterfaceResponseButtonDidClickEasy)) /*mod*/ ctx[3].InterfaceResponseButtonDidClickEasy.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(454:1) {#if mod._ValueIsFlipped && KOMPlayExtraResponseButtons}",
    		ctx
    	});

    	return block;
    }

    // (466:1) {#if mod._ValueIsFlipped && !KOMPlayExtraResponseButtons}
    function create_if_block_2$5(ctx) {
    	let div;
    	let button0;
    	let span0;
    	let t1;
    	let button1;
    	let span1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			button0 = element("button");
    			span0 = element("span");
    			span0.textContent = `${main_1('KOMPlayResponseButtonResetText')}`;
    			t1 = space();
    			button1 = element("button");
    			span1 = element("span");
    			span1.textContent = `${main_1('KOMPlayResponseButtonNextText')}`;
    			attr_dev(span0, "class", "OLSKDecorPress svelte-tydqr2");
    			add_location(span0, file$l, 467, 141, 14121);
    			attr_dev(button0, "class", "KOMPlayResponseButtonReset OLSKDecorButtonNoStyle OLSKDecorTappable svelte-tydqr2");
    			add_location(button0, file$l, 467, 3, 13983);
    			attr_dev(span1, "class", "OLSKDecorPress svelte-tydqr2");
    			add_location(span1, file$l, 469, 139, 14358);
    			attr_dev(button1, "class", "KOMPlayResponseButtonNext OLSKDecorButtonNoStyle OLSKDecorTappable svelte-tydqr2");
    			add_location(button1, file$l, 469, 3, 14222);
    			attr_dev(div, "class", "KOMPlayResponseSimple svelte-tydqr2");
    			add_location(div, file$l, 466, 2, 13944);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button0);
    			append_dev(button0, span0);
    			append_dev(div, t1);
    			append_dev(div, button1);
    			append_dev(button1, span1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[3].InterfaceResponseButtonDidClickAgain)) /*mod*/ ctx[3].InterfaceResponseButtonDidClickAgain.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button1,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[3].InterfaceResponseButtonDidClickGood)) /*mod*/ ctx[3].InterfaceResponseButtonDidClickGood.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(466:1) {#if mod._ValueIsFlipped && !KOMPlayExtraResponseButtons}",
    		ctx
    	});

    	return block;
    }

    // (474:1) {#if OLSK_SPEC_UI()}
    function create_if_block_1$7(ctx) {
    	let div0;
    	let t0_value = /*mod*/ ctx[3]._ValueState.KOMPlayStateQueue.length + "";
    	let t0;
    	let t1;
    	let div1;
    	let t2_value = /*mod*/ ctx[3]._ValueState.KOMPlayStateWait.length + "";
    	let t2;
    	let t3;
    	let div2;

    	let t4_value = (/*mod*/ ctx[3]._ValueState.KOMPlayStateCurrent.KOMSpacingDrawDate
    	? main$5.OLSKMomentPerceptionDay(/*mod*/ ctx[3]._ValueState.KOMPlayStateCurrent.KOMSpacingDrawDate)
    	: 'undefined') + "";

    	let t4;
    	let t5;
    	let div3;
    	let t6_value = JSON.stringify(/*mod*/ ctx[3]._ValueState.KOMPlayStateChronicle.KOMChronicleDidDrawMultipleTimes) + "";
    	let t6;
    	let t7;
    	let div4;

    	let t8_value = (/*mod*/ ctx[3]._ValueState.KOMPlayStateCurrent.KOMSpacingFlipDate
    	? main$5.OLSKMomentPerceptionDay(/*mod*/ ctx[3]._ValueState.KOMPlayStateCurrent.KOMSpacingFlipDate)
    	: 'undefined') + "";

    	let t8;
    	let t9;
    	let div5;
    	let t10_value = JSON.stringify(/*mod*/ ctx[3]._ValueState.KOMPlayStateChronicle.KOMChronicleDidFlipMultipleTimes) + "";
    	let t10;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			div1 = element("div");
    			t2 = text(t2_value);
    			t3 = space();
    			div2 = element("div");
    			t4 = text(t4_value);
    			t5 = space();
    			div3 = element("div");
    			t6 = text(t6_value);
    			t7 = space();
    			div4 = element("div");
    			t8 = text(t8_value);
    			t9 = space();
    			div5 = element("div");
    			t10 = text(t10_value);
    			attr_dev(div0, "id", "TestKOMPlayStateQueueCount");
    			add_location(div0, file$l, 474, 2, 14495);
    			attr_dev(div1, "id", "TestKOMPlayStateWaitCount");
    			add_location(div1, file$l, 475, 2, 14585);
    			attr_dev(div2, "id", "TestKOMSpacingDrawDate");
    			add_location(div2, file$l, 476, 2, 14673);
    			attr_dev(div3, "id", "TestKOMChronicleDidDrawMultipleTimes");
    			add_location(div3, file$l, 477, 2, 14880);
    			attr_dev(div4, "id", "TestKOMSpacingFlipDate");
    			add_location(div4, file$l, 478, 2, 15026);
    			attr_dev(div5, "id", "TestKOMChronicleDidFlipMultipleTimes");
    			add_location(div5, file$l, 479, 2, 15233);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, t4);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, t6);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, t8);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, t10);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mod*/ 8 && t0_value !== (t0_value = /*mod*/ ctx[3]._ValueState.KOMPlayStateQueue.length + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*mod*/ 8 && t2_value !== (t2_value = /*mod*/ ctx[3]._ValueState.KOMPlayStateWait.length + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*mod*/ 8 && t4_value !== (t4_value = (/*mod*/ ctx[3]._ValueState.KOMPlayStateCurrent.KOMSpacingDrawDate
    			? main$5.OLSKMomentPerceptionDay(/*mod*/ ctx[3]._ValueState.KOMPlayStateCurrent.KOMSpacingDrawDate)
    			: 'undefined') + "")) set_data_dev(t4, t4_value);

    			if (dirty & /*mod*/ 8 && t6_value !== (t6_value = JSON.stringify(/*mod*/ ctx[3]._ValueState.KOMPlayStateChronicle.KOMChronicleDidDrawMultipleTimes) + "")) set_data_dev(t6, t6_value);

    			if (dirty & /*mod*/ 8 && t8_value !== (t8_value = (/*mod*/ ctx[3]._ValueState.KOMPlayStateCurrent.KOMSpacingFlipDate
    			? main$5.OLSKMomentPerceptionDay(/*mod*/ ctx[3]._ValueState.KOMPlayStateCurrent.KOMSpacingFlipDate)
    			: 'undefined') + "")) set_data_dev(t8, t8_value);

    			if (dirty & /*mod*/ 8 && t10_value !== (t10_value = JSON.stringify(/*mod*/ ctx[3]._ValueState.KOMPlayStateChronicle.KOMChronicleDidFlipMultipleTimes) + "")) set_data_dev(t10, t10_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(474:1) {#if OLSK_SPEC_UI()}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let div3;
    	let header;
    	let div0;
    	let t0;
    	let div1;
    	let button0;
    	let t1_value = main_1('KOMPlayToolbarUndoButtonText') + "";
    	let t1;
    	let button0_disabled_value;
    	let t2;
    	let button1;
    	let t4;
    	let div2;
    	let mounted;
    	let dispose;
    	let if_block = /*mod*/ ctx[3]._ValueState.KOMPlayStateCurrent && create_if_block$c(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			header = element("header");
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			button0 = element("button");
    			t1 = text(t1_value);
    			t2 = space();
    			button1 = element("button");
    			button1.textContent = `${main_1('KOMPlayToolbarDoneButtonText')}`;
    			t4 = space();
    			div2 = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", "OLSKToolbarElementGroup");
    			add_location(div0, file$l, 401, 1, 10531);
    			attr_dev(button0, "class", "KOMPlayToolbarUndoButton OLSKDecorButtonNoStyle OLSKDecorTappable");

    			button0.disabled = button0_disabled_value = /*mod*/ ctx[3]._ValueState.KOMPlayStateHistory.length
    			? null
    			: true;

    			add_location(button0, file$l, 405, 2, 10619);
    			attr_dev(button1, "class", "KOMPlayToolbarDoneButton OLSKDecorButtonNoStyle OLSKDecorTappable");
    			add_location(button1, file$l, 407, 2, 10880);
    			attr_dev(div1, "class", "OLSKToolbarElementGroup");
    			add_location(div1, file$l, 404, 1, 10579);
    			attr_dev(header, "class", "KOMPlayToolbar OLSKToolbar OLSKToolbarJustify OLSKCommonEdgeBottom");
    			add_location(header, file$l, 400, 0, 10446);
    			attr_dev(div2, "class", "KOMPlayBody svelte-tydqr2");
    			toggle_class(div2, "KOMPlayExtraResponseButtons", /*KOMPlayExtraResponseButtons*/ ctx[2]);
    			add_location(div2, file$l, 411, 0, 11073);
    			attr_dev(div3, "class", "KOMPlay svelte-tydqr2");
    			toggle_class(div3, "KOMPlayPairing", /*KOMPlayDeck*/ ctx[0].KOMDeckPairingIsEnabled);
    			add_location(div3, file$l, 398, 0, 10362);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, header);
    			append_dev(header, div0);
    			append_dev(header, t0);
    			append_dev(header, div1);
    			append_dev(div1, button0);
    			append_dev(button0, t1);
    			append_dev(div1, t2);
    			append_dev(div1, button1);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			if (if_block) if_block.m(div2, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						window_1$2,
    						"keydown",
    						function () {
    							if (is_function(/*mod*/ ctx[3].InterfaceWindowDidKeydown)) /*mod*/ ctx[3].InterfaceWindowDidKeydown.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[3].InterfaceUndoButtonDidClick)) /*mod*/ ctx[3].InterfaceUndoButtonDidClick.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button1,
    						"click",
    						function () {
    							if (is_function(/*KOMPlayDispatchDone*/ ctx[1])) /*KOMPlayDispatchDone*/ ctx[1].apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (dirty & /*mod*/ 8 && button0_disabled_value !== (button0_disabled_value = /*mod*/ ctx[3]._ValueState.KOMPlayStateHistory.length
    			? null
    			: true)) {
    				prop_dev(button0, "disabled", button0_disabled_value);
    			}

    			if (/*mod*/ ctx[3]._ValueState.KOMPlayStateCurrent) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$c(ctx);
    					if_block.c();
    					if_block.m(div2, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*KOMPlayExtraResponseButtons*/ 4) {
    				toggle_class(div2, "KOMPlayExtraResponseButtons", /*KOMPlayExtraResponseButtons*/ ctx[2]);
    			}

    			if (dirty & /*KOMPlayDeck*/ 1) {
    				toggle_class(div3, "KOMPlayPairing", /*KOMPlayDeck*/ ctx[0].KOMDeckPairingIsEnabled);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { KOMPlaySpacings } = $$props;
    	let { KOMPlayDeck } = $$props;
    	let { KOMPlayDispatchDone } = $$props;
    	let { KOMPlayDispatchUpdate } = $$props;
    	let { KOMPlayDispatchSpeechRead } = $$props;
    	let { KOMPlayDispatchSpeechStop } = $$props;
    	let { KOMPlayDispatchFetch } = $$props;
    	let { KOMPlayExtraResponseButtons = true } = $$props;

    	const mod = {
    		// VALUE
    		_ValueIsFlipped: false,
    		_ValueState: mod$4.KOMPlayStateDraw({
    			KOMPlayStatePairingIsEnabled: KOMPlayDeck.KOMDeckPairingIsEnabled,
    			KOMPlayStateQueue: KOMPlaySpacings,
    			KOMPlayStateWait: [],
    			KOMPlayStateHistory: [],
    			KOMPlayStateShouldRandomizeDueDates: true
    		}),
    		_ValueSpeechAvailable: 'speechSynthesis' in window,
    		_ValueAudioCache: {},
    		_ValueAudioPlaying: undefined,
    		// DATA
    		DataQuestion() {
    			return mod._ValueState.KOMPlayStateCurrent.$KOMSpacingCard[KOMSpacing.KOMSpacingIsBackward(mod._ValueState.KOMPlayStateCurrent)
    			? 'KOMCardRearText'
    			: 'KOMCardFrontText'];
    		},
    		DataPairQuestion() {
    			return mod._ValueState.KOMPlayStateCurrentPair.$KOMSpacingCard[KOMSpacing.KOMSpacingIsBackward(mod._ValueState.KOMPlayStateCurrentPair)
    			? 'KOMCardRearText'
    			: 'KOMCardFrontText'];
    		},
    		DataAnswer() {
    			return mod._ValueState.KOMPlayStateCurrent.$KOMSpacingCard[!KOMSpacing.KOMSpacingIsBackward(mod._ValueState.KOMPlayStateCurrent)
    			? 'KOMCardRearText'
    			: 'KOMCardFrontText'];
    		},
    		DataPairAnswer() {
    			return mod._ValueState.KOMPlayStateCurrentPair.$KOMSpacingCard[!KOMSpacing.KOMSpacingIsBackward(mod._ValueState.KOMPlayStateCurrentPair)
    			? 'KOMCardRearText'
    			: 'KOMCardFrontText'];
    		},
    		DataQuestionShouldSound() {
    			return mod._DataQuestionFrontShouldSound() || mod._DataQuestionRearShouldSound();
    		},
    		_DataQuestionFrontShouldSound() {
    			if (KOMSpacing.KOMSpacingIsBackward(mod._ValueState.KOMPlayStateCurrent)) {
    				return false;
    			}

    			if (mod.DataFrontHasAudio()) {
    				return true;
    			}

    			return KOMPlayDeck.KOMDeckFrontSpeechIsEnabled;
    		},
    		_DataQuestionRearShouldSound() {
    			if (!KOMSpacing.KOMSpacingIsBackward(mod._ValueState.KOMPlayStateCurrent)) {
    				return false;
    			}

    			if (mod.DataRearHasAudio()) {
    				return true;
    			}

    			return KOMPlayDeck.KOMDeckRearSpeechIsEnabled;
    		},
    		DataAnswerShouldSound() {
    			return mod._DataAnswerFrontShouldSound() || mod._DataAnswerRearShouldSound();
    		},
    		_DataAnswerFrontShouldSound() {
    			if (!KOMSpacing.KOMSpacingIsBackward(mod._ValueState.KOMPlayStateCurrent)) {
    				return false;
    			}

    			if (mod.DataFrontHasAudio()) {
    				return true;
    			}

    			return KOMPlayDeck.KOMDeckFrontSpeechIsEnabled;
    		},
    		_DataAnswerRearShouldSound() {
    			if (KOMSpacing.KOMSpacingIsBackward(mod._ValueState.KOMPlayStateCurrent)) {
    				return false;
    			}

    			if (mod.DataRearHasAudio()) {
    				return true;
    			}

    			return KOMPlayDeck.KOMDeckRearSpeechIsEnabled;
    		},
    		DataFrontHasAudio() {
    			return KOMPlayDeck.KOMDeckAudioIsEnabled && mod._ValueState.KOMPlayStateCurrent.$KOMSpacingCard.KOMCardFrontAudio;
    		},
    		DataRearHasAudio() {
    			return KOMPlayDeck.KOMDeckAudioIsEnabled && mod._ValueState.KOMPlayStateCurrent.$KOMSpacingCard.KOMCardRearAudio;
    		},
    		DataFakeAudio(inputData) {
    			return {
    				play() {
    					
    				},
    				pause() {
    					
    				},
    				src: inputData
    			};
    		},
    		// INTERFACE
    		InterfaceUndoButtonDidClick() {
    			mod.ControlUndo();
    		},
    		InterfaceHearQuestionButtonDidClick() {
    			mod.ControlQuestionRead();
    		},
    		InterfaceHearAnswerButtonDidClick() {
    			mod.ControlAnswerRead();
    		},
    		InterfaceWindowDidKeydown(event) {
    			if (document.querySelector('.LCHLauncher')) {
    				// #spec
    				return;
    			}

    			const handlersForCode = {
    				Escape() {
    					KOMPlayDispatchDone();
    				},
    				Space() {
    					mod.ControlProgress();
    				},
    				Digit1() {
    					mod._ValueIsFlipped && mod.ControlRespond(mod$4.KOMPlayResponseTypeAgain());
    				},
    				Digit2() {
    					mod._ValueIsFlipped && mod.ControlRespond(mod$4.KOMPlayResponseTypeHard());
    				},
    				Digit3() {
    					mod._ValueIsFlipped && mod.ControlRespond(mod$4.KOMPlayResponseTypeGood());
    				},
    				Digit4() {
    					mod._ValueIsFlipped && mod.ControlRespond(mod$4.KOMPlayResponseTypeEasy());
    				}
    			};

    			if (handlersForCode[event.code]) {
    				return handlersForCode[event.code]();
    			}

    			const handlersForKey = {
    				q() {
    					if (!mod.DataQuestionShouldSound()) {
    						return;
    					}

    					mod.InterfaceHearQuestionButtonDidClick();
    				},
    				a() {
    					if (!mod.DataAnswerShouldSound()) {
    						return;
    					}

    					mod.InterfaceHearAnswerButtonDidClick();
    				},
    				x() {
    					mod._ValueIsFlipped && mod.ControlRespond(mod$4.KOMPlayResponseTypeAgain());
    				}
    			};

    			handlersForKey[event.key] && handlersForKey[event.key]();
    		},
    		InterfaceCardDidClick() {
    			mod.ControlProgress();
    		},
    		InterfaceFlipButtonDidClick() {
    			mod.ControlFlip();
    		},
    		InterfaceResponseButtonDidClickAgain() {
    			mod.ControlRespond(mod$4.KOMPlayResponseTypeAgain());
    		},
    		InterfaceResponseButtonDidClickHard() {
    			mod.ControlRespond(mod$4.KOMPlayResponseTypeHard());
    		},
    		InterfaceResponseButtonDidClickGood() {
    			mod.ControlRespond(mod$4.KOMPlayResponseTypeGood());
    		},
    		InterfaceResponseButtonDidClickEasy() {
    			mod.ControlRespond(mod$4.KOMPlayResponseTypeEasy());
    		},
    		// CONTROL
    		ControlQuestionRead() {
    			if (mod.DataFrontHasAudio() && !KOMSpacing.KOMSpacingIsBackward(mod._ValueState.KOMPlayStateCurrent)) {
    				return mod.ControlAudioStart('KOMCardFrontAudio');
    			}

    			if (mod.DataRearHasAudio() && KOMSpacing.KOMSpacingIsBackward(mod._ValueState.KOMPlayStateCurrent)) {
    				return mod.ControlAudioStart('KOMCardRearAudio');
    			}

    			mod.ControlReadStart(
    				mod.DataQuestion() + (mod._ValueState.KOMPlayStateCurrentPair
    				? '\n' + mod.DataPairQuestion()
    				: ''),
    				!KOMSpacing.KOMSpacingIsBackward(mod._ValueState.KOMPlayStateCurrent)
    				? KOMPlayDeck.KOMDeckFrontLanguageCode
    				: KOMPlayDeck.KOMDeckRearLanguageCode
    			);
    		},
    		ControlAnswerRead() {
    			if (mod.DataFrontHasAudio() && KOMSpacing.KOMSpacingIsBackward(mod._ValueState.KOMPlayStateCurrent)) {
    				return mod.ControlAudioStart('KOMCardFrontAudio');
    			}

    			if (mod.DataRearHasAudio() && !KOMSpacing.KOMSpacingIsBackward(mod._ValueState.KOMPlayStateCurrent)) {
    				return mod.ControlAudioStart('KOMCardRearAudio');
    			}

    			mod.ControlReadStart(
    				mod.DataAnswer() + (mod._ValueState.KOMPlayStateCurrentPair
    				? '\n' + mod.DataPairAnswer()
    				: ''),
    				KOMSpacing.KOMSpacingIsBackward(mod._ValueState.KOMPlayStateCurrent)
    				? KOMPlayDeck.KOMDeckFrontLanguageCode
    				: KOMPlayDeck.KOMDeckRearLanguageCode
    			);
    		},
    		ControlReadStart(ParamText, ParamLanguage) {
    			if (main_1$2()) {
    				mod.DebugAudioLog(`read:${ParamLanguage}:${ParamText}`);
    			}

    			KOMPlayDispatchSpeechRead({ ParamLanguage, ParamText });
    		},
    		ControlReadStop() {
    			if (main_1$2()) {
    				mod.DebugAudioLog(mod._ValueAudioPlaying ? 'stop:audio' : 'stop');
    			}

    			if (mod._ValueAudioIsPlaying) {
    				for (let key in mod._ValueAudioCache) {
    					mod._ValueAudioCache[key].pause();
    				}

    				delete mod._ValueAudioPlaying;
    			}
    			KOMPlayDispatchSpeechStop();
    		},
    		async ControlAudioStart(inputData) {
    			if (!mod._ValueAudioCache[inputData] && main_1$2()) {
    				mod.DebugAudioLog('fetch');
    				$$invalidate(3, mod._ValueAudioCache[inputData] = mod.DataFakeAudio(await KOMPlayDispatchFetch(mod._ValueState.KOMPlayStateCurrent.$KOMSpacingCard, inputData)), mod);
    			}

    			if (!mod._ValueAudioCache[inputData]) {
    				$$invalidate(3, mod._ValueAudioCache[inputData] = new Audio(), mod).src = URL.createObjectURL(await KOMPlayDispatchFetch(mod._ValueState.KOMPlayStateCurrent.$KOMSpacingCard, inputData));
    			}

    			if (main_1$2()) {
    				mod.DebugAudioLog('play:' + inputData);
    			}

    			$$invalidate(3, mod._ValueAudioCache[inputData].currentTime = 0, mod);
    			mod._ValueAudioCache[inputData].play();
    			$$invalidate(3, mod._ValueAudioPlaying = true, mod);
    		},
    		ControlFlush() {
    			if (main_1$2()) {
    				mod.DebugAudioLog('flush');
    			}

    			$$invalidate(3, mod._ValueAudioCache = {}, mod);
    		},
    		ControlProgress() {
    			if (mod._ValueIsFlipped) {
    				return mod.ControlRespond(mod$4.KOMPlayResponseTypeGood());
    			}

    			mod.ControlFlip();
    		},
    		ControlUndo() {
    			mod$4.KOMPlayStateUndo(mod._ValueState);

    			if (mod.DataFrontHasAudio() || mod.DataRearHasAudio()) {
    				mod.ControlFlush();
    			}

    			mod.ReactCardChange();
    		},
    		ControlFlip() {
    			$$invalidate(3, mod._ValueIsFlipped = true, mod);
    			mod$4.KOMPlayStateFlip(mod._ValueState);

    			[mod._ValueState.KOMPlayStateCurrent].concat(mod._ValueState.KOMPlayStateCurrentPair
    			? mod._ValueState.KOMPlayStateCurrentPair
    			: []).map(KOMPlayDispatchUpdate);

    			if (mod.DataQuestionShouldSound()) {
    				mod.ControlReadStop();
    			}

    			if (mod.DataAnswerShouldSound()) {
    				mod.ControlAnswerRead();
    			}
    		},
    		ControlRespond(inputData) {
    			if (mod.DataAnswerShouldSound()) {
    				mod.ControlReadStop();
    			}

    			if (mod.DataFrontHasAudio() || mod.DataRearHasAudio()) {
    				mod.ControlFlush();
    			}

    			const items = [mod._ValueState.KOMPlayStateCurrent].concat(mod._ValueState.KOMPlayStateCurrentPair
    			? mod._ValueState.KOMPlayStateCurrentPair
    			: []);

    			mod$4.KOMPlayRespond(mod._ValueState, Object.assign(mod._ValueState.KOMPlayStateChronicle, {
    				KOMChronicleResponseDate: new Date(),
    				KOMChronicleResponseType: inputData
    			}));

    			mod$4.KOMPlayStateDraw(mod._ValueState);
    			items.map(KOMPlayDispatchUpdate);

    			if (!mod._ValueState.KOMPlayStateCurrent) {
    				return KOMPlayDispatchDone();
    			}

    			mod.ReactCardChange();
    		},
    		// REACT
    		ReactCardChange() {
    			$$invalidate(3, mod); // #purge-svelte-force-update
    			$$invalidate(3, mod._ValueIsFlipped = false, mod);

    			[mod._ValueState.KOMPlayStateCurrent].concat(mod._ValueState.KOMPlayStateCurrentPair
    			? mod._ValueState.KOMPlayStateCurrentPair
    			: []).map(KOMPlayDispatchUpdate);

    			if (mod.DataQuestionShouldSound()) {
    				mod.ControlQuestionRead();
    			}
    		},
    		// DEBUG
    		DebugAudioLog(inputData) {
    			window.TestKOMPlayAudioLog.innerHTML = window.TestKOMPlayAudioLog.innerHTML
    			? window.TestKOMPlayAudioLog.innerHTML.split(',').concat(inputData).join(',')
    			: inputData;
    		},
    		// SETUP
    		SetupEverything() {
    			setTimeout(mod.ReactCardChange, 200);
    		},
    		// LIFECYCLE
    		LifecycleModuleWillMount() {
    			mod.SetupEverything();
    		}
    	};

    	main_1$2()
    	? mod.LifecycleModuleWillMount()
    	: onMount(mod.LifecycleModuleWillMount);

    	$$self.$$.on_mount.push(function () {
    		if (KOMPlaySpacings === undefined && !('KOMPlaySpacings' in $$props || $$self.$$.bound[$$self.$$.props['KOMPlaySpacings']])) {
    			console.warn("<Main> was created without expected prop 'KOMPlaySpacings'");
    		}

    		if (KOMPlayDeck === undefined && !('KOMPlayDeck' in $$props || $$self.$$.bound[$$self.$$.props['KOMPlayDeck']])) {
    			console.warn("<Main> was created without expected prop 'KOMPlayDeck'");
    		}

    		if (KOMPlayDispatchDone === undefined && !('KOMPlayDispatchDone' in $$props || $$self.$$.bound[$$self.$$.props['KOMPlayDispatchDone']])) {
    			console.warn("<Main> was created without expected prop 'KOMPlayDispatchDone'");
    		}

    		if (KOMPlayDispatchUpdate === undefined && !('KOMPlayDispatchUpdate' in $$props || $$self.$$.bound[$$self.$$.props['KOMPlayDispatchUpdate']])) {
    			console.warn("<Main> was created without expected prop 'KOMPlayDispatchUpdate'");
    		}

    		if (KOMPlayDispatchSpeechRead === undefined && !('KOMPlayDispatchSpeechRead' in $$props || $$self.$$.bound[$$self.$$.props['KOMPlayDispatchSpeechRead']])) {
    			console.warn("<Main> was created without expected prop 'KOMPlayDispatchSpeechRead'");
    		}

    		if (KOMPlayDispatchSpeechStop === undefined && !('KOMPlayDispatchSpeechStop' in $$props || $$self.$$.bound[$$self.$$.props['KOMPlayDispatchSpeechStop']])) {
    			console.warn("<Main> was created without expected prop 'KOMPlayDispatchSpeechStop'");
    		}

    		if (KOMPlayDispatchFetch === undefined && !('KOMPlayDispatchFetch' in $$props || $$self.$$.bound[$$self.$$.props['KOMPlayDispatchFetch']])) {
    			console.warn("<Main> was created without expected prop 'KOMPlayDispatchFetch'");
    		}
    	});

    	const writable_props = [
    		'KOMPlaySpacings',
    		'KOMPlayDeck',
    		'KOMPlayDispatchDone',
    		'KOMPlayDispatchUpdate',
    		'KOMPlayDispatchSpeechRead',
    		'KOMPlayDispatchSpeechStop',
    		'KOMPlayDispatchFetch',
    		'KOMPlayExtraResponseButtons'
    	];

    	Object_1$7.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('KOMPlaySpacings' in $$props) $$invalidate(4, KOMPlaySpacings = $$props.KOMPlaySpacings);
    		if ('KOMPlayDeck' in $$props) $$invalidate(0, KOMPlayDeck = $$props.KOMPlayDeck);
    		if ('KOMPlayDispatchDone' in $$props) $$invalidate(1, KOMPlayDispatchDone = $$props.KOMPlayDispatchDone);
    		if ('KOMPlayDispatchUpdate' in $$props) $$invalidate(5, KOMPlayDispatchUpdate = $$props.KOMPlayDispatchUpdate);
    		if ('KOMPlayDispatchSpeechRead' in $$props) $$invalidate(6, KOMPlayDispatchSpeechRead = $$props.KOMPlayDispatchSpeechRead);
    		if ('KOMPlayDispatchSpeechStop' in $$props) $$invalidate(7, KOMPlayDispatchSpeechStop = $$props.KOMPlayDispatchSpeechStop);
    		if ('KOMPlayDispatchFetch' in $$props) $$invalidate(8, KOMPlayDispatchFetch = $$props.KOMPlayDispatchFetch);
    		if ('KOMPlayExtraResponseButtons' in $$props) $$invalidate(2, KOMPlayExtraResponseButtons = $$props.KOMPlayExtraResponseButtons);
    	};

    	$$self.$capture_state = () => ({
    		KOMPlaySpacings,
    		KOMPlayDeck,
    		KOMPlayDispatchDone,
    		KOMPlayDispatchUpdate,
    		KOMPlayDispatchSpeechRead,
    		KOMPlayDispatchSpeechStop,
    		KOMPlayDispatchFetch,
    		KOMPlayExtraResponseButtons,
    		OLSKLocalized: main_1,
    		OLSK_SPEC_UI: main_1$2,
    		KOMPlayLogic: mod$4,
    		KOMSpacing,
    		OLSKMoment: main$5,
    		mod,
    		onMount
    	});

    	$$self.$inject_state = $$props => {
    		if ('KOMPlaySpacings' in $$props) $$invalidate(4, KOMPlaySpacings = $$props.KOMPlaySpacings);
    		if ('KOMPlayDeck' in $$props) $$invalidate(0, KOMPlayDeck = $$props.KOMPlayDeck);
    		if ('KOMPlayDispatchDone' in $$props) $$invalidate(1, KOMPlayDispatchDone = $$props.KOMPlayDispatchDone);
    		if ('KOMPlayDispatchUpdate' in $$props) $$invalidate(5, KOMPlayDispatchUpdate = $$props.KOMPlayDispatchUpdate);
    		if ('KOMPlayDispatchSpeechRead' in $$props) $$invalidate(6, KOMPlayDispatchSpeechRead = $$props.KOMPlayDispatchSpeechRead);
    		if ('KOMPlayDispatchSpeechStop' in $$props) $$invalidate(7, KOMPlayDispatchSpeechStop = $$props.KOMPlayDispatchSpeechStop);
    		if ('KOMPlayDispatchFetch' in $$props) $$invalidate(8, KOMPlayDispatchFetch = $$props.KOMPlayDispatchFetch);
    		if ('KOMPlayExtraResponseButtons' in $$props) $$invalidate(2, KOMPlayExtraResponseButtons = $$props.KOMPlayExtraResponseButtons);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		KOMPlayDeck,
    		KOMPlayDispatchDone,
    		KOMPlayExtraResponseButtons,
    		mod,
    		KOMPlaySpacings,
    		KOMPlayDispatchUpdate,
    		KOMPlayDispatchSpeechRead,
    		KOMPlayDispatchSpeechStop,
    		KOMPlayDispatchFetch
    	];
    }

    class Main$l extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {
    			KOMPlaySpacings: 4,
    			KOMPlayDeck: 0,
    			KOMPlayDispatchDone: 1,
    			KOMPlayDispatchUpdate: 5,
    			KOMPlayDispatchSpeechRead: 6,
    			KOMPlayDispatchSpeechStop: 7,
    			KOMPlayDispatchFetch: 8,
    			KOMPlayExtraResponseButtons: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$l.name
    		});
    	}

    	get KOMPlaySpacings() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMPlaySpacings(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMPlayDeck() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMPlayDeck(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMPlayDispatchDone() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMPlayDispatchDone(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMPlayDispatchUpdate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMPlayDispatchUpdate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMPlayDispatchSpeechRead() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMPlayDispatchSpeechRead(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMPlayDispatchSpeechStop() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMPlayDispatchSpeechStop(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMPlayDispatchFetch() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMPlayDispatchFetch(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get KOMPlayExtraResponseButtons() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set KOMPlayExtraResponseButtons(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKReloadButton/main.svelte generated by Svelte v3.59.2 */
    const file$m = "node_modules/OLSKReloadButton/main.svelte";

    function create_fragment$m(ctx) {
    	let button;
    	let div;
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKReloadButtonImage");
    			add_location(div, file$m, 7, 1, 329);
    			attr_dev(button, "class", "OLSKReloadButton OLSKToolbarButton OLSKDecorTappable OLSKDecorButtonNoStyle");
    			attr_dev(button, "title", button_title_value = main_1('OLSKReloadButtonText'));
    			add_location(button, file$m, 6, 0, 143);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = _OLSKSharedReload;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[0], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => window.location.reload();
    	$$self.$capture_state = () => ({ OLSKLocalized: main_1, _OLSKSharedReload });
    	return [click_handler];
    }

    class Main$m extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$m.name
    		});
    	}
    }

    /* node_modules/OLSKAppToolbar/main.svelte generated by Svelte v3.59.2 */
    const file$n = "node_modules/OLSKAppToolbar/main.svelte";

    // (55:1) {:else}
    function create_else_block$1(ctx) {
    	let olskreloadbutton;
    	let current;
    	olskreloadbutton = new Main$m({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(olskreloadbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskreloadbutton, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskreloadbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskreloadbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskreloadbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(55:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (51:1) {#if OLSKAppToolbarDispatchApropos }
    function create_if_block_10$1(ctx) {
    	let button;
    	let div;
    	let raw_value = OLSKUIAssets._OLSKSharedApropos + "";
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKAppToolbarAproposButtonImage svelte-1i8pgw");
    			add_location(div, file$n, 52, 3, 1560);
    			attr_dev(button, "class", "OLSKAppToolbarAproposButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton svelte-1i8pgw");
    			attr_dev(button, "title", button_title_value = main_1('OLSKAppToolbarAproposButtonText'));
    			add_location(button, file$n, 51, 2, 1351);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKAppToolbarDispatchApropos*/ ctx[8])) /*OLSKAppToolbarDispatchApropos*/ ctx[8].apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$1.name,
    		type: "if",
    		source: "(51:1) {#if OLSKAppToolbarDispatchApropos }",
    		ctx
    	});

    	return block;
    }

    // (59:1) {#if OLSKAppToolbarDispatchTongue }
    function create_if_block_9$1(ctx) {
    	let button;
    	let div;
    	let raw_value = OLSKUIAssets._OLSKSharedLanguage + "";
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKAppToolbarLanguageButtonImage svelte-1i8pgw");
    			add_location(div, file$n, 60, 3, 1954);
    			attr_dev(button, "class", "OLSKAppToolbarLanguageButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton svelte-1i8pgw");
    			attr_dev(button, "title", button_title_value = main_1('OLSKAppToolbarLanguageButtonText'));
    			add_location(button, file$n, 59, 2, 1744);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKAppToolbarDispatchTongue*/ ctx[9])) /*OLSKAppToolbarDispatchTongue*/ ctx[9].apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$1.name,
    		type: "if",
    		source: "(59:1) {#if OLSKAppToolbarDispatchTongue }",
    		ctx
    	});

    	return block;
    }

    // (65:1) {#if OLSKAppToolbarGuideURL}
    function create_if_block_8$1(ctx) {
    	let a;
    	let t_value = main_1('OLSKAppToolbarGuideLinkText') + "";
    	let t;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = text(t_value);
    			attr_dev(a, "class", "OLSKAppToolbarGuideLink svelte-1i8pgw");
    			attr_dev(a, "href", /*OLSKAppToolbarGuideURL*/ ctx[0]);
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "rel", "noreferrer");
    			add_location(a, file$n, 65, 2, 2101);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*OLSKAppToolbarGuideURL*/ 1) {
    				attr_dev(a, "href", /*OLSKAppToolbarGuideURL*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$1.name,
    		type: "if",
    		source: "(65:1) {#if OLSKAppToolbarGuideURL}",
    		ctx
    	});

    	return block;
    }

    // (72:2) {#if OLSKAppToolbarDispatchFund && !OLSKAppToolbarFundShowProgress }
    function create_if_block_6$3(ctx) {
    	let button;
    	let t1;
    	let if_block_anchor;
    	let mounted;
    	let dispose;
    	let if_block = /*OLSKAppToolbarFundLimitText*/ ctx[2] !== '' && create_if_block_7$2(ctx);

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = `${main_1('OLSKAppToolbarFundButtonText')}`;
    			t1 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(button, "class", "OLSKAppToolbarFundButton OLSKDecorPress svelte-1i8pgw");
    			add_location(button, file$n, 72, 3, 2415);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKAppToolbarDispatchFund*/ ctx[10])) /*OLSKAppToolbarDispatchFund*/ ctx[10].apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*OLSKAppToolbarFundLimitText*/ ctx[2] !== '') {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_7$2(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$3.name,
    		type: "if",
    		source: "(72:2) {#if OLSKAppToolbarDispatchFund && !OLSKAppToolbarFundShowProgress }",
    		ctx
    	});

    	return block;
    }

    // (75:3) {#if OLSKAppToolbarFundLimitText !== '' }
    function create_if_block_7$2(ctx) {
    	let button;
    	let t_value = /*OLSKAppToolbarFundLimitText*/ ctx[2].toString() + "";
    	let t;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text(t_value);
    			attr_dev(button, "class", "OLSKAppToolbarFundLimit OLSKDecorButtonNoStyle svelte-1i8pgw");
    			button.disabled = true;
    			add_location(button, file$n, 76, 4, 2686);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*OLSKAppToolbarFundLimitText*/ 4 && t_value !== (t_value = /*OLSKAppToolbarFundLimitText*/ ctx[2].toString() + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$2.name,
    		type: "if",
    		source: "(75:3) {#if OLSKAppToolbarFundLimitText !== '' }",
    		ctx
    	});

    	return block;
    }

    // (81:2) {#if OLSKAppToolbarFundShowProgress }
    function create_if_block_5$3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "…";
    			attr_dev(div, "class", "OLSKAppToolbarFundProgress svelte-1i8pgw");
    			add_location(div, file$n, 81, 3, 2871);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$3.name,
    		type: "if",
    		source: "(81:2) {#if OLSKAppToolbarFundShowProgress }",
    		ctx
    	});

    	return block;
    }

    // (86:1) {#if OLSKAppToolbarDispatchClub }
    function create_if_block_3$4(ctx) {
    	let button;
    	let t1;
    	let if_block_anchor;
    	let mounted;
    	let dispose;
    	let if_block = /*OLSKAppToolbarClubLimitText*/ ctx[3] !== '' && create_if_block_4$4(ctx);

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = `${main_1('OLSKAppToolbarClubButtonText')}`;
    			t1 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(button, "class", "OLSKAppToolbarClubButton OLSKDecorPress svelte-1i8pgw");
    			add_location(button, file$n, 86, 2, 2973);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKAppToolbarDispatchClub*/ ctx[11])) /*OLSKAppToolbarDispatchClub*/ ctx[11].apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*OLSKAppToolbarClubLimitText*/ ctx[3] !== '') {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_4$4(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$4.name,
    		type: "if",
    		source: "(86:1) {#if OLSKAppToolbarDispatchClub }",
    		ctx
    	});

    	return block;
    }

    // (89:2) {#if OLSKAppToolbarClubLimitText !== '' }
    function create_if_block_4$4(ctx) {
    	let button;
    	let t_value = /*OLSKAppToolbarClubLimitText*/ ctx[3].toString() + "";
    	let t;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text(t_value);
    			attr_dev(button, "class", "OLSKAppToolbarClubLimit OLSKDecorButtonNoStyle svelte-1i8pgw");
    			button.disabled = true;
    			add_location(button, file$n, 90, 3, 3241);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*OLSKAppToolbarClubLimitText*/ 8 && t_value !== (t_value = /*OLSKAppToolbarClubLimitText*/ ctx[3].toString() + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$4.name,
    		type: "if",
    		source: "(89:2) {#if OLSKAppToolbarClubLimitText !== '' }",
    		ctx
    	});

    	return block;
    }

    // (99:1) {#if OLSKAppToolbarErrorText }
    function create_if_block_2$6(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*OLSKAppToolbarErrorText*/ ctx[4]);
    			attr_dev(div, "class", "OLSKAppToolbarError OLSKDecorBlink svelte-1i8pgw");
    			add_location(div, file$n, 99, 2, 3476);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*OLSKAppToolbarErrorText*/ 16) set_data_dev(t, /*OLSKAppToolbarErrorText*/ ctx[4]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$6.name,
    		type: "if",
    		source: "(99:1) {#if OLSKAppToolbarErrorText }",
    		ctx
    	});

    	return block;
    }

    // (103:1) {#if OLSKAppToolbarDispatchCloud }
    function create_if_block_1$8(ctx) {
    	let div0;

    	let t0_value = (!/*OLSKAppToolbarCloudConnected*/ ctx[5]
    	? ''
    	: /*OLSKAppToolbarCloudError*/ ctx[7]
    		? main_1('OLSKAppToolbarCloudStatusError')
    		: /*OLSKAppToolbarCloudOffline*/ ctx[6]
    			? main_1('OLSKAppToolbarCloudStatusOffline')
    			: main_1('OLSKAppToolbarCloudStatusOnline')) + "";

    	let t0;
    	let t1;
    	let button;
    	let div1;

    	let raw_value = (/*OLSKAppToolbarCloudError*/ ctx[7]
    	? OLSKUIAssets._OLSKSharedCloudError
    	: /*OLSKAppToolbarCloudOffline*/ ctx[6]
    		? OLSKUIAssets._OLSKSharedCloudOffline
    		: OLSKUIAssets._OLSKSharedCloud) + "";

    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			button = element("button");
    			div1 = element("div");
    			attr_dev(div0, "class", "OLSKAppToolbarCloudStatus svelte-1i8pgw");
    			add_location(div0, file$n, 103, 2, 3604);
    			attr_dev(div1, "class", "OLSKAppToolbarCloudButtonImage svelte-1i8pgw");
    			add_location(div1, file$n, 106, 3, 4107);
    			attr_dev(button, "class", "OLSKAppToolbarCloudButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton svelte-1i8pgw");
    			attr_dev(button, "title", button_title_value = main_1('OLSKAppToolbarCloudButtonText'));
    			add_location(button, file$n, 105, 2, 3904);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button, anchor);
    			append_dev(button, div1);
    			div1.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKAppToolbarDispatchCloud*/ ctx[12])) /*OLSKAppToolbarDispatchCloud*/ ctx[12].apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*OLSKAppToolbarCloudConnected, OLSKAppToolbarCloudError, OLSKAppToolbarCloudOffline*/ 224 && t0_value !== (t0_value = (!/*OLSKAppToolbarCloudConnected*/ ctx[5]
    			? ''
    			: /*OLSKAppToolbarCloudError*/ ctx[7]
    				? main_1('OLSKAppToolbarCloudStatusError')
    				: /*OLSKAppToolbarCloudOffline*/ ctx[6]
    					? main_1('OLSKAppToolbarCloudStatusOffline')
    					: main_1('OLSKAppToolbarCloudStatusOnline')) + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*OLSKAppToolbarCloudError, OLSKAppToolbarCloudOffline*/ 192 && raw_value !== (raw_value = (/*OLSKAppToolbarCloudError*/ ctx[7]
    			? OLSKUIAssets._OLSKSharedCloudError
    			: /*OLSKAppToolbarCloudOffline*/ ctx[6]
    				? OLSKUIAssets._OLSKSharedCloudOffline
    				: OLSKUIAssets._OLSKSharedCloud) + "")) div1.innerHTML = raw_value;		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(103:1) {#if OLSKAppToolbarDispatchCloud }",
    		ctx
    	});

    	return block;
    }

    // (111:1) {#if OLSKAppToolbarDispatchLauncher }
    function create_if_block$d(ctx) {
    	let button;
    	let div;
    	let raw_value = OLSKUIAssets._OLSKSharedLauncher + "";
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKAppToolbarLauncherButtonImage svelte-1i8pgw");
    			add_location(div, file$n, 112, 3, 4603);
    			attr_dev(button, "class", "OLSKAppToolbarLauncherButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton svelte-1i8pgw");
    			attr_dev(button, "title", button_title_value = main_1('OLSKAppToolbarLauncherButtonText'));
    			add_location(button, file$n, 111, 2, 4391);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKAppToolbarDispatchLauncher*/ ctx[13])) /*OLSKAppToolbarDispatchLauncher*/ ctx[13].apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(111:1) {#if OLSKAppToolbarDispatchLauncher }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let div4;
    	let div0;
    	let current_block_type_index;
    	let if_block0;
    	let t0;
    	let t1;
    	let t2;
    	let div2;
    	let div1;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let div3;
    	let t7;
    	let t8;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_10$1, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*OLSKAppToolbarDispatchApropos*/ ctx[8]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block1 = /*OLSKAppToolbarDispatchTongue*/ ctx[9] && create_if_block_9$1(ctx);
    	let if_block2 = /*OLSKAppToolbarGuideURL*/ ctx[0] && create_if_block_8$1(ctx);
    	let if_block3 = /*OLSKAppToolbarDispatchFund*/ ctx[10] && !/*OLSKAppToolbarFundShowProgress*/ ctx[1] && create_if_block_6$3(ctx);
    	let if_block4 = /*OLSKAppToolbarFundShowProgress*/ ctx[1] && create_if_block_5$3(ctx);
    	let if_block5 = /*OLSKAppToolbarDispatchClub*/ ctx[11] && create_if_block_3$4(ctx);
    	const default_slot_template = /*#slots*/ ctx[16].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);
    	let if_block6 = /*OLSKAppToolbarErrorText*/ ctx[4] && create_if_block_2$6(ctx);
    	let if_block7 = /*OLSKAppToolbarDispatchCloud*/ ctx[12] && create_if_block_1$8(ctx);
    	let if_block8 = /*OLSKAppToolbarDispatchLauncher*/ ctx[13] && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");
    			if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			div2 = element("div");
    			div1 = element("div");
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			if (if_block5) if_block5.c();
    			t5 = space();
    			if (default_slot) default_slot.c();
    			t6 = space();
    			div3 = element("div");
    			if (if_block6) if_block6.c();
    			t7 = space();
    			if (if_block7) if_block7.c();
    			t8 = space();
    			if (if_block8) if_block8.c();
    			attr_dev(div0, "class", "OLSKToolbarElementGroup svelte-1i8pgw");
    			add_location(div0, file$n, 49, 0, 1273);
    			attr_dev(div1, "class", "OLSKAppToolbarFund svelte-1i8pgw");
    			add_location(div1, file$n, 70, 1, 2308);
    			attr_dev(div2, "class", "OLSKToolbarElementGroup svelte-1i8pgw");
    			add_location(div2, file$n, 69, 0, 2269);
    			attr_dev(div3, "class", "OLSKToolbarElementGroup svelte-1i8pgw");
    			add_location(div3, file$n, 97, 0, 3404);
    			attr_dev(div4, "class", "OLSKAppToolbar OLSKToolbar OLSKToolbarJustify OLSKCommonEdgeTop svelte-1i8pgw");
    			add_location(div4, file$n, 47, 0, 1194);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			if_blocks[current_block_type_index].m(div0, null);
    			append_dev(div0, t0);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(div0, t1);
    			if (if_block2) if_block2.m(div0, null);
    			append_dev(div4, t2);
    			append_dev(div4, div2);
    			append_dev(div2, div1);
    			if (if_block3) if_block3.m(div1, null);
    			append_dev(div1, t3);
    			if (if_block4) if_block4.m(div1, null);
    			append_dev(div2, t4);
    			if (if_block5) if_block5.m(div2, null);
    			append_dev(div2, t5);

    			if (default_slot) {
    				default_slot.m(div2, null);
    			}

    			append_dev(div4, t6);
    			append_dev(div4, div3);
    			if (if_block6) if_block6.m(div3, null);
    			append_dev(div3, t7);
    			if (if_block7) if_block7.m(div3, null);
    			append_dev(div3, t8);
    			if (if_block8) if_block8.m(div3, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(window, "keydown", /*mod*/ ctx[14].InterfaceWindowDidKeydown, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(div0, t0);
    			}

    			if (/*OLSKAppToolbarDispatchTongue*/ ctx[9]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_9$1(ctx);
    					if_block1.c();
    					if_block1.m(div0, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*OLSKAppToolbarGuideURL*/ ctx[0]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_8$1(ctx);
    					if_block2.c();
    					if_block2.m(div0, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*OLSKAppToolbarDispatchFund*/ ctx[10] && !/*OLSKAppToolbarFundShowProgress*/ ctx[1]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_6$3(ctx);
    					if_block3.c();
    					if_block3.m(div1, t3);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*OLSKAppToolbarFundShowProgress*/ ctx[1]) {
    				if (if_block4) ; else {
    					if_block4 = create_if_block_5$3(ctx);
    					if_block4.c();
    					if_block4.m(div1, null);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*OLSKAppToolbarDispatchClub*/ ctx[11]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_3$4(ctx);
    					if_block5.c();
    					if_block5.m(div2, t5);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[15],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*OLSKAppToolbarErrorText*/ ctx[4]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_2$6(ctx);
    					if_block6.c();
    					if_block6.m(div3, t7);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*OLSKAppToolbarDispatchCloud*/ ctx[12]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_1$8(ctx);
    					if_block7.c();
    					if_block7.m(div3, t8);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (/*OLSKAppToolbarDispatchLauncher*/ ctx[13]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block$d(ctx);
    					if_block8.c();
    					if_block8.m(div3, null);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			if_blocks[current_block_type_index].d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if (if_block5) if_block5.d();
    			if (default_slot) default_slot.d(detaching);
    			if (if_block6) if_block6.d();
    			if (if_block7) if_block7.d();
    			if (if_block8) if_block8.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, ['default']);
    	let { OLSKAppToolbarGuideURL = '' } = $$props;
    	let { OLSKAppToolbarFundShowProgress = false } = $$props;
    	let { OLSKAppToolbarFundLimitText = '' } = $$props;
    	let { OLSKAppToolbarClubLimitText = '' } = $$props;
    	let { OLSKAppToolbarErrorText = '' } = $$props;
    	let { OLSKAppToolbarCloudConnected = false } = $$props;
    	let { OLSKAppToolbarCloudOffline = false } = $$props;
    	let { OLSKAppToolbarCloudError = false } = $$props;
    	let { OLSKAppToolbarDispatchApropos = null } = $$props;
    	let { OLSKAppToolbarDispatchTongue = null } = $$props;
    	let { OLSKAppToolbarDispatchFund = null } = $$props;
    	let { OLSKAppToolbarDispatchClub = null } = $$props;
    	let { OLSKAppToolbarDispatchCloud = null } = $$props;
    	let { OLSKAppToolbarDispatchLauncher = null } = $$props;

    	const mod = {
    		// INTERFACE
    		InterfaceWindowDidKeydown(event) {
    			const handlerFunctions = {
    				Space() {
    					if (!event.altKey) {
    						return;
    					}

    					OLSKAppToolbarDispatchLauncher();
    					return event.preventDefault();
    				}
    			};

    			handlerFunctions[event.code] && handlerFunctions[event.code]();
    		}
    	};

    	const writable_props = [
    		'OLSKAppToolbarGuideURL',
    		'OLSKAppToolbarFundShowProgress',
    		'OLSKAppToolbarFundLimitText',
    		'OLSKAppToolbarClubLimitText',
    		'OLSKAppToolbarErrorText',
    		'OLSKAppToolbarCloudConnected',
    		'OLSKAppToolbarCloudOffline',
    		'OLSKAppToolbarCloudError',
    		'OLSKAppToolbarDispatchApropos',
    		'OLSKAppToolbarDispatchTongue',
    		'OLSKAppToolbarDispatchFund',
    		'OLSKAppToolbarDispatchClub',
    		'OLSKAppToolbarDispatchCloud',
    		'OLSKAppToolbarDispatchLauncher'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('OLSKAppToolbarGuideURL' in $$props) $$invalidate(0, OLSKAppToolbarGuideURL = $$props.OLSKAppToolbarGuideURL);
    		if ('OLSKAppToolbarFundShowProgress' in $$props) $$invalidate(1, OLSKAppToolbarFundShowProgress = $$props.OLSKAppToolbarFundShowProgress);
    		if ('OLSKAppToolbarFundLimitText' in $$props) $$invalidate(2, OLSKAppToolbarFundLimitText = $$props.OLSKAppToolbarFundLimitText);
    		if ('OLSKAppToolbarClubLimitText' in $$props) $$invalidate(3, OLSKAppToolbarClubLimitText = $$props.OLSKAppToolbarClubLimitText);
    		if ('OLSKAppToolbarErrorText' in $$props) $$invalidate(4, OLSKAppToolbarErrorText = $$props.OLSKAppToolbarErrorText);
    		if ('OLSKAppToolbarCloudConnected' in $$props) $$invalidate(5, OLSKAppToolbarCloudConnected = $$props.OLSKAppToolbarCloudConnected);
    		if ('OLSKAppToolbarCloudOffline' in $$props) $$invalidate(6, OLSKAppToolbarCloudOffline = $$props.OLSKAppToolbarCloudOffline);
    		if ('OLSKAppToolbarCloudError' in $$props) $$invalidate(7, OLSKAppToolbarCloudError = $$props.OLSKAppToolbarCloudError);
    		if ('OLSKAppToolbarDispatchApropos' in $$props) $$invalidate(8, OLSKAppToolbarDispatchApropos = $$props.OLSKAppToolbarDispatchApropos);
    		if ('OLSKAppToolbarDispatchTongue' in $$props) $$invalidate(9, OLSKAppToolbarDispatchTongue = $$props.OLSKAppToolbarDispatchTongue);
    		if ('OLSKAppToolbarDispatchFund' in $$props) $$invalidate(10, OLSKAppToolbarDispatchFund = $$props.OLSKAppToolbarDispatchFund);
    		if ('OLSKAppToolbarDispatchClub' in $$props) $$invalidate(11, OLSKAppToolbarDispatchClub = $$props.OLSKAppToolbarDispatchClub);
    		if ('OLSKAppToolbarDispatchCloud' in $$props) $$invalidate(12, OLSKAppToolbarDispatchCloud = $$props.OLSKAppToolbarDispatchCloud);
    		if ('OLSKAppToolbarDispatchLauncher' in $$props) $$invalidate(13, OLSKAppToolbarDispatchLauncher = $$props.OLSKAppToolbarDispatchLauncher);
    		if ('$$scope' in $$props) $$invalidate(15, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		OLSKAppToolbarGuideURL,
    		OLSKAppToolbarFundShowProgress,
    		OLSKAppToolbarFundLimitText,
    		OLSKAppToolbarClubLimitText,
    		OLSKAppToolbarErrorText,
    		OLSKAppToolbarCloudConnected,
    		OLSKAppToolbarCloudOffline,
    		OLSKAppToolbarCloudError,
    		OLSKAppToolbarDispatchApropos,
    		OLSKAppToolbarDispatchTongue,
    		OLSKAppToolbarDispatchFund,
    		OLSKAppToolbarDispatchClub,
    		OLSKAppToolbarDispatchCloud,
    		OLSKAppToolbarDispatchLauncher,
    		OLSKLocalized: main_1,
    		mod,
    		OLSKReloadButton: Main$m,
    		OLSKUIAssets
    	});

    	$$self.$inject_state = $$props => {
    		if ('OLSKAppToolbarGuideURL' in $$props) $$invalidate(0, OLSKAppToolbarGuideURL = $$props.OLSKAppToolbarGuideURL);
    		if ('OLSKAppToolbarFundShowProgress' in $$props) $$invalidate(1, OLSKAppToolbarFundShowProgress = $$props.OLSKAppToolbarFundShowProgress);
    		if ('OLSKAppToolbarFundLimitText' in $$props) $$invalidate(2, OLSKAppToolbarFundLimitText = $$props.OLSKAppToolbarFundLimitText);
    		if ('OLSKAppToolbarClubLimitText' in $$props) $$invalidate(3, OLSKAppToolbarClubLimitText = $$props.OLSKAppToolbarClubLimitText);
    		if ('OLSKAppToolbarErrorText' in $$props) $$invalidate(4, OLSKAppToolbarErrorText = $$props.OLSKAppToolbarErrorText);
    		if ('OLSKAppToolbarCloudConnected' in $$props) $$invalidate(5, OLSKAppToolbarCloudConnected = $$props.OLSKAppToolbarCloudConnected);
    		if ('OLSKAppToolbarCloudOffline' in $$props) $$invalidate(6, OLSKAppToolbarCloudOffline = $$props.OLSKAppToolbarCloudOffline);
    		if ('OLSKAppToolbarCloudError' in $$props) $$invalidate(7, OLSKAppToolbarCloudError = $$props.OLSKAppToolbarCloudError);
    		if ('OLSKAppToolbarDispatchApropos' in $$props) $$invalidate(8, OLSKAppToolbarDispatchApropos = $$props.OLSKAppToolbarDispatchApropos);
    		if ('OLSKAppToolbarDispatchTongue' in $$props) $$invalidate(9, OLSKAppToolbarDispatchTongue = $$props.OLSKAppToolbarDispatchTongue);
    		if ('OLSKAppToolbarDispatchFund' in $$props) $$invalidate(10, OLSKAppToolbarDispatchFund = $$props.OLSKAppToolbarDispatchFund);
    		if ('OLSKAppToolbarDispatchClub' in $$props) $$invalidate(11, OLSKAppToolbarDispatchClub = $$props.OLSKAppToolbarDispatchClub);
    		if ('OLSKAppToolbarDispatchCloud' in $$props) $$invalidate(12, OLSKAppToolbarDispatchCloud = $$props.OLSKAppToolbarDispatchCloud);
    		if ('OLSKAppToolbarDispatchLauncher' in $$props) $$invalidate(13, OLSKAppToolbarDispatchLauncher = $$props.OLSKAppToolbarDispatchLauncher);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		OLSKAppToolbarGuideURL,
    		OLSKAppToolbarFundShowProgress,
    		OLSKAppToolbarFundLimitText,
    		OLSKAppToolbarClubLimitText,
    		OLSKAppToolbarErrorText,
    		OLSKAppToolbarCloudConnected,
    		OLSKAppToolbarCloudOffline,
    		OLSKAppToolbarCloudError,
    		OLSKAppToolbarDispatchApropos,
    		OLSKAppToolbarDispatchTongue,
    		OLSKAppToolbarDispatchFund,
    		OLSKAppToolbarDispatchClub,
    		OLSKAppToolbarDispatchCloud,
    		OLSKAppToolbarDispatchLauncher,
    		mod,
    		$$scope,
    		slots
    	];
    }

    class Main$n extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$n, create_fragment$n, safe_not_equal, {
    			OLSKAppToolbarGuideURL: 0,
    			OLSKAppToolbarFundShowProgress: 1,
    			OLSKAppToolbarFundLimitText: 2,
    			OLSKAppToolbarClubLimitText: 3,
    			OLSKAppToolbarErrorText: 4,
    			OLSKAppToolbarCloudConnected: 5,
    			OLSKAppToolbarCloudOffline: 6,
    			OLSKAppToolbarCloudError: 7,
    			OLSKAppToolbarDispatchApropos: 8,
    			OLSKAppToolbarDispatchTongue: 9,
    			OLSKAppToolbarDispatchFund: 10,
    			OLSKAppToolbarDispatchClub: 11,
    			OLSKAppToolbarDispatchCloud: 12,
    			OLSKAppToolbarDispatchLauncher: 13
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$n.name
    		});
    	}

    	get OLSKAppToolbarGuideURL() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarGuideURL(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarFundShowProgress() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarFundShowProgress(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarFundLimitText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarFundLimitText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarClubLimitText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarClubLimitText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarErrorText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarErrorText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarCloudConnected() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarCloudConnected(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarCloudOffline() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarCloudOffline(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarCloudError() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarCloudError(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarDispatchApropos() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarDispatchApropos(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarDispatchTongue() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarDispatchTongue(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarDispatchFund() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarDispatchFund(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarDispatchClub() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarDispatchClub(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarDispatchCloud() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarDispatchCloud(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarDispatchLauncher() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarDispatchLauncher(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/_shared/__external/OLSKServiceWorker/main.svelte generated by Svelte v3.59.2 */

    const { console: console_1$1 } = globals;
    const file$o = "os-app/_shared/__external/OLSKServiceWorker/main.svelte";

    // (104:0) {#if mod._ValueUpdateAlertIsVisible }
    function create_if_block$e(ctx) {
    	let div;
    	let span;
    	let t1;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			span.textContent = `${main_1('OLSKServiceWorkerUpdateAlertLabelText')}`;
    			t1 = space();
    			button = element("button");
    			button.textContent = `${main_1('OLSKServiceWorkerUpdateAlertReloadButtonText')}`;
    			attr_dev(span, "class", "OLSKServiceWorkerUpdateAlertLabel svelte-o3rgu5");
    			add_location(span, file$o, 105, 1, 2509);
    			attr_dev(button, "class", "OLSKServiceWorkerUpdateAlertReloadButton OLSKDecorPress OLSKDecorPressCall svelte-o3rgu5");
    			add_location(button, file$o, 106, 1, 2624);
    			attr_dev(div, "class", "OLSKServiceWorkerUpdateAlert svelte-o3rgu5");
    			add_location(div, file$o, 104, 0, 2407);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(div, t1);
    			append_dev(div, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[0].InterfaceReloadButtonDidClick)) /*mod*/ ctx[0].InterfaceReloadButtonDidClick.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(div, "click", /*click_handler*/ ctx[5], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(104:0) {#if mod._ValueUpdateAlertIsVisible }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$o(ctx) {
    	let if_block_anchor;
    	let if_block = /*mod*/ ctx[0]._ValueUpdateAlertIsVisible && create_if_block$e(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*mod*/ ctx[0]._ValueUpdateAlertIsVisible) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$e(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { OLSKServiceWorkerRegistrationRoute } = $$props;
    	let { DebugFakeUpdateAlertVisible = false } = $$props;
    	let { DebugEnableLogging = true } = $$props;
    	let { DebugAllowLocalhost = false } = $$props;

    	const mod = {
    		// VALUE
    		_ValueRegistration: undefined,
    		_ValueNextWorker: undefined,
    		_ValueUpdateAlertIsVisible: DebugFakeUpdateAlertVisible,
    		// INTERFACE
    		InterfaceReloadButtonDidClick() {
    			mod.ControlSkipWaiting();
    		},
    		// CONTROL
    		ControlSkipWaiting() {
    			mod._ValueNextWorker.postMessage('OLSKServiceWorker_SkipWaiting');
    		},
    		// MESSAGE
    		MessageUpdateFound(event) {
    			DebugEnableLogging && console.log('updatefound', event);
    			$$invalidate(0, mod._ValueNextWorker = mod._ValueRegistration.installing, mod);
    			mod._ValueNextWorker.addEventListener('statechange', mod.MessageNextWorkerStateChange);
    		},
    		MessageNextWorkerStateChange(event) {
    			DebugEnableLogging && console.log('statechange', mod._ValueNextWorker.state, event, navigator.serviceWorker.controller);

    			if (mod._ValueNextWorker.state !== 'installed') {
    				return;
    			}

    			if (!navigator.serviceWorker.controller) {
    				return;
    			}

    			$$invalidate(0, mod._ValueUpdateAlertIsVisible = true, mod);
    		},
    		MessageControllerChange(event) {
    			DebugEnableLogging && console.log('controllerchange', event);
    			window.location.reload();
    		},
    		// SETUP
    		async SetupEverything() {
    			if (!navigator.serviceWorker) {
    				return DebugEnableLogging && console.info('Service worker not available');
    			}

    			if (!OLSKServiceWorkerRegistrationRoute) {
    				return DebugEnableLogging && console.info('Missing registration route');
    			}

    			if (document.location.hostname === 'localhost' && !DebugAllowLocalhost) {
    				return DebugEnableLogging && console.info('OLSKServiceWorker: Skipping on localhost');
    			}
    			await mod.SetupRegistration();
    			mod.SetupControllerChange();
    		},
    		async SetupRegistration() {
    			$$invalidate(0, mod._ValueRegistration = await navigator.serviceWorker.register(OLSKServiceWorkerRegistrationRoute), mod);
    			DebugEnableLogging && console.info('Service Worker Registered');
    			mod._ValueRegistration.addEventListener('updatefound', mod.MessageUpdateFound);
    		},
    		SetupControllerChange() {
    			navigator.serviceWorker.addEventListener('controllerchange', mod.MessageControllerChange);
    		},
    		// LIFECYCLE
    		LifecycleModuleDidMount() {
    			mod.SetupEverything();
    		}
    	};

    	mod.LifecycleModuleDidMount();

    	$$self.$$.on_mount.push(function () {
    		if (OLSKServiceWorkerRegistrationRoute === undefined && !('OLSKServiceWorkerRegistrationRoute' in $$props || $$self.$$.bound[$$self.$$.props['OLSKServiceWorkerRegistrationRoute']])) {
    			console_1$1.warn("<Main> was created without expected prop 'OLSKServiceWorkerRegistrationRoute'");
    		}
    	});

    	const writable_props = [
    		'OLSKServiceWorkerRegistrationRoute',
    		'DebugFakeUpdateAlertVisible',
    		'DebugEnableLogging',
    		'DebugAllowLocalhost'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => $$invalidate(0, mod._ValueUpdateAlertIsVisible = false, mod);

    	$$self.$$set = $$props => {
    		if ('OLSKServiceWorkerRegistrationRoute' in $$props) $$invalidate(1, OLSKServiceWorkerRegistrationRoute = $$props.OLSKServiceWorkerRegistrationRoute);
    		if ('DebugFakeUpdateAlertVisible' in $$props) $$invalidate(2, DebugFakeUpdateAlertVisible = $$props.DebugFakeUpdateAlertVisible);
    		if ('DebugEnableLogging' in $$props) $$invalidate(3, DebugEnableLogging = $$props.DebugEnableLogging);
    		if ('DebugAllowLocalhost' in $$props) $$invalidate(4, DebugAllowLocalhost = $$props.DebugAllowLocalhost);
    	};

    	$$self.$capture_state = () => ({
    		OLSKServiceWorkerRegistrationRoute,
    		DebugFakeUpdateAlertVisible,
    		DebugEnableLogging,
    		DebugAllowLocalhost,
    		OLSKLocalized: main_1,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ('OLSKServiceWorkerRegistrationRoute' in $$props) $$invalidate(1, OLSKServiceWorkerRegistrationRoute = $$props.OLSKServiceWorkerRegistrationRoute);
    		if ('DebugFakeUpdateAlertVisible' in $$props) $$invalidate(2, DebugFakeUpdateAlertVisible = $$props.DebugFakeUpdateAlertVisible);
    		if ('DebugEnableLogging' in $$props) $$invalidate(3, DebugEnableLogging = $$props.DebugEnableLogging);
    		if ('DebugAllowLocalhost' in $$props) $$invalidate(4, DebugAllowLocalhost = $$props.DebugAllowLocalhost);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		mod,
    		OLSKServiceWorkerRegistrationRoute,
    		DebugFakeUpdateAlertVisible,
    		DebugEnableLogging,
    		DebugAllowLocalhost,
    		click_handler
    	];
    }

    class Main$o extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$o, create_fragment$o, safe_not_equal, {
    			OLSKServiceWorkerRegistrationRoute: 1,
    			DebugFakeUpdateAlertVisible: 2,
    			DebugEnableLogging: 3,
    			DebugAllowLocalhost: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$o.name
    		});
    	}

    	get OLSKServiceWorkerRegistrationRoute() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKServiceWorkerRegistrationRoute(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get DebugFakeUpdateAlertVisible() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set DebugFakeUpdateAlertVisible(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get DebugEnableLogging() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set DebugEnableLogging(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get DebugAllowLocalhost() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set DebugAllowLocalhost(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var uiLogic = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKInstallDismissPreferenceKey () {
    		return 'OLSK_INSTALL_DID_DISMISS';
    	},

    	OLSKInstallSetup (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamMod !== 'object' || params.ParamMod === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if ((params.window || window).innerWidth > 760) {
    			return;
    		}

    		if (!(params.window || window).navigator) {
    			return;
    		}

    		if ((params.window || window).navigator.standalone) {
    			return;
    		}

    		if ((params.window || window).localStorage.getItem(mod.OLSKInstallDismissPreferenceKey())) {
    			return;
    		}

    		params.ParamMod._ValueOLSKInstallAlertVisible = true;
    	},
    	
    };

    Object.assign(exports, mod);
    });

    /* node_modules/OLSKInstall/main.svelte generated by Svelte v3.59.2 */
    const file$p = "node_modules/OLSKInstall/main.svelte";

    // (46:0) {#if mod._ValueOLSKInstallAlertVisible }
    function create_if_block$f(ctx) {
    	let div3;
    	let div1;
    	let button;
    	let div0;
    	let raw0_value = OLSKUIAssets._OLSKSharedDismiss + "";
    	let button_title_value;
    	let t0;
    	let div2;
    	let strong;
    	let t2;
    	let span;
    	let raw1_value = main_1$1(main_1('OLSKInstallAlertBlurbHTMLFormat'), OLSKUIAssets._OLSKSharediOSShare, OLSKUIAssets._OLSKSharediOSA2HS) + "";
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div1 = element("div");
    			button = element("button");
    			div0 = element("div");
    			t0 = space();
    			div2 = element("div");
    			strong = element("strong");
    			strong.textContent = `${main_1('OLSKInstallAlertHeadingText')}`;
    			t2 = space();
    			span = element("span");
    			attr_dev(div0, "class", "OLSKInstallAlertDismissButtonImage svelte-1fnd8qa");
    			add_location(div0, file$p, 50, 2, 1067);
    			attr_dev(button, "class", "OLSKInstallAlertDismissButton OLSKDecorButtonNoStyle OLSKDecorTappable svelte-1fnd8qa");
    			attr_dev(button, "title", button_title_value = main_1('OLSKInstallAlertDismissButtonText'));
    			add_location(button, file$p, 49, 1, 868);
    			attr_dev(div1, "class", "OLSKInstallAlertDismiss svelte-1fnd8qa");
    			add_location(div1, file$p, 48, 0, 829);
    			attr_dev(strong, "class", "OLSKInstallAlertHeading");
    			add_location(strong, file$p, 55, 1, 1217);
    			attr_dev(span, "class", "OLSKInstallAlertBlurb svelte-1fnd8qa");
    			add_location(span, file$p, 56, 1, 1316);
    			attr_dev(div2, "class", "OLSKInstallAlertMain");
    			add_location(div2, file$p, 54, 0, 1181);
    			attr_dev(div3, "class", "OLSKInstallAlert svelte-1fnd8qa");
    			add_location(div3, file$p, 46, 0, 797);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div1);
    			append_dev(div1, button);
    			append_dev(button, div0);
    			div0.innerHTML = raw0_value;
    			append_dev(div3, t0);
    			append_dev(div3, div2);
    			append_dev(div2, strong);
    			append_dev(div2, t2);
    			append_dev(div2, span);
    			span.innerHTML = raw1_value;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[0].InterfaceDismissButtonDidClick)) /*mod*/ ctx[0].InterfaceDismissButtonDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(46:0) {#if mod._ValueOLSKInstallAlertVisible }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$p(ctx) {
    	let div;
    	let if_block = /*mod*/ ctx[0]._ValueOLSKInstallAlertVisible && create_if_block$f(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "OLSKInstall");
    			add_location(div, file$p, 43, 0, 729);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*mod*/ ctx[0]._ValueOLSKInstallAlertVisible) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$f(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { DebugFakeAlertVisible = false } = $$props;

    	const mod = {
    		// VALUE
    		_ValueOLSKInstallAlertVisible: DebugFakeAlertVisible,
    		// INTERFACE
    		InterfaceDismissButtonDidClick() {
    			mod.ControlDismiss();
    		},
    		// CONTROL
    		ControlDismiss() {
    			window.localStorage.setItem(uiLogic.OLSKInstallDismissPreferenceKey(), true);
    			$$invalidate(0, mod._ValueOLSKInstallAlertVisible = false, mod);
    		},
    		// LIFECYCLE
    		LifecycleModuleDidLoad() {
    			uiLogic.OLSKInstallSetup({ ParamMod: mod });
    		}
    	};

    	mod.LifecycleModuleDidLoad();
    	const writable_props = ['DebugFakeAlertVisible'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('DebugFakeAlertVisible' in $$props) $$invalidate(1, DebugFakeAlertVisible = $$props.DebugFakeAlertVisible);
    	};

    	$$self.$capture_state = () => ({
    		DebugFakeAlertVisible,
    		OLSKLocalized: main_1,
    		OLSKFormatted: main_1$1,
    		OLSKInstallLogic: uiLogic,
    		mod,
    		OLSKUIAssets
    	});

    	$$self.$inject_state = $$props => {
    		if ('DebugFakeAlertVisible' in $$props) $$invalidate(1, DebugFakeAlertVisible = $$props.DebugFakeAlertVisible);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [mod, DebugFakeAlertVisible];
    }

    class Main$p extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$p, safe_not_equal, { DebugFakeAlertVisible: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$p.name
    		});
    	}

    	get DebugFakeAlertVisible() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set DebugFakeAlertVisible(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKCloud/submodules/OLSKCloudForm/main.svelte generated by Svelte v3.59.2 */
    const file$q = "node_modules/OLSKCloud/submodules/OLSKCloudForm/main.svelte";

    function create_fragment$q(ctx) {
    	let form;
    	let input;
    	let t0;
    	let button;
    	let t1_value = main_1('OLSKCloudFormConnectButtonText') + "";
    	let t1;
    	let button_disabled_value;
    	let t2;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			form = element("form");
    			input = element("input");
    			t0 = space();
    			button = element("button");
    			t1 = text(t1_value);
    			t2 = space();
    			a = element("a");
    			a.textContent = `${main_1('OLSKCloudFormRegisterLinkText')}`;
    			attr_dev(input, "class", "OLSKCloudFormAddressField OLSKDecorInput svelte-1907px6");
    			attr_dev(input, "type", "email");
    			input.autofocus = true;
    			input.required = true;
    			attr_dev(input, "placeholder", "example@5apps.com");
    			add_location(input, file$q, 24, 0, 376);
    			attr_dev(button, "class", "OLSKCloudFormConnectButton svelte-1907px6");
    			button.disabled = button_disabled_value = /*mod*/ ctx[0]._ValueAddress.length ? null : true;
    			add_location(button, file$q, 26, 0, 533);
    			attr_dev(a, "class", "OLSKCloudFormRegisterLink svelte-1907px6");
    			attr_dev(a, "href", "https://5apps.com/users/sign_up?site=storage");
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$q, 28, 0, 730);
    			attr_dev(form, "class", "OLSKCloudForm OLSKDecor svelte-1907px6");
    			add_location(form, file$q, 22, 0, 294);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, input);
    			set_input_value(input, /*mod*/ ctx[0]._ValueAddress);
    			append_dev(form, t0);
    			append_dev(form, button);
    			append_dev(button, t1);
    			append_dev(form, t2);
    			append_dev(form, a);
    			input.focus();

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[2]),
    					listen_dev(
    						button,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[0].InterfaceFormDidSubmit)) /*mod*/ ctx[0].InterfaceFormDidSubmit.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						form,
    						"submit",
    						function () {
    							if (is_function(/*mod*/ ctx[0].InterfaceFormDidSubmit)) /*mod*/ ctx[0].InterfaceFormDidSubmit.apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (dirty & /*mod*/ 1 && input.value !== /*mod*/ ctx[0]._ValueAddress) {
    				set_input_value(input, /*mod*/ ctx[0]._ValueAddress);
    			}

    			if (dirty & /*mod*/ 1 && button_disabled_value !== (button_disabled_value = /*mod*/ ctx[0]._ValueAddress.length ? null : true)) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { OLSKCloudFormDispatchSubmit } = $$props;

    	const mod = {
    		// VALUE
    		_ValueAddress: '',
    		// INTERFACE
    		InterfaceFormDidSubmit(event) {
    			event.preventDefault();
    			OLSKCloudFormDispatchSubmit(mod._ValueAddress);
    		}
    	};

    	$$self.$$.on_mount.push(function () {
    		if (OLSKCloudFormDispatchSubmit === undefined && !('OLSKCloudFormDispatchSubmit' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCloudFormDispatchSubmit']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCloudFormDispatchSubmit'");
    		}
    	});

    	const writable_props = ['OLSKCloudFormDispatchSubmit'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		mod._ValueAddress = this.value;
    		$$invalidate(0, mod);
    	}

    	$$self.$$set = $$props => {
    		if ('OLSKCloudFormDispatchSubmit' in $$props) $$invalidate(1, OLSKCloudFormDispatchSubmit = $$props.OLSKCloudFormDispatchSubmit);
    	};

    	$$self.$capture_state = () => ({
    		OLSKCloudFormDispatchSubmit,
    		OLSKLocalized: main_1,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ('OLSKCloudFormDispatchSubmit' in $$props) $$invalidate(1, OLSKCloudFormDispatchSubmit = $$props.OLSKCloudFormDispatchSubmit);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [mod, OLSKCloudFormDispatchSubmit, input_input_handler];
    }

    class Main$q extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, { OLSKCloudFormDispatchSubmit: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$q.name
    		});
    	}

    	get OLSKCloudFormDispatchSubmit() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCloudFormDispatchSubmit(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKCloud/submodules/OLSKCloudStatus/main.svelte generated by Svelte v3.59.2 */
    const file$r = "node_modules/OLSKCloud/submodules/OLSKCloudStatus/main.svelte";

    // (17:0) {#if !OLSKCloudStatusIsSyncing }
    function create_if_block_1$9(ctx) {
    	let button;
    	let div;
    	let raw_value = OLSKUIAssets._OLSKSharedSyncStart + "";
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKCloudStatusSyncStartButtonImage");
    			add_location(div, file$r, 18, 2, 690);
    			attr_dev(button, "class", "OLSKCloudStatusSyncStartButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton");
    			attr_dev(button, "title", button_title_value = main_1('OLSKCloudStatusSyncStartButtonText'));
    			add_location(button, file$r, 17, 1, 473);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKCloudStatusDispatchSyncStart*/ ctx[2])) /*OLSKCloudStatusDispatchSyncStart*/ ctx[2].apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$9.name,
    		type: "if",
    		source: "(17:0) {#if !OLSKCloudStatusIsSyncing }",
    		ctx
    	});

    	return block;
    }

    // (23:0) {#if OLSKCloudStatusIsSyncing }
    function create_if_block$g(ctx) {
    	let button;
    	let div;
    	let raw_value = OLSKUIAssets._OLSKSharedSyncStop + "";
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKCloudStatusSyncStopButtonImage");
    			add_location(div, file$r, 24, 2, 1053);
    			attr_dev(button, "class", "OLSKCloudStatusSyncStopButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton");
    			attr_dev(button, "title", button_title_value = main_1('OLSKCloudStatusSyncStopButtonText'));
    			add_location(button, file$r, 23, 1, 839);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKCloudStatusDispatchSyncStop*/ ctx[3])) /*OLSKCloudStatusDispatchSyncStop*/ ctx[3].apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(23:0) {#if OLSKCloudStatusIsSyncing }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$r(ctx) {
    	let div1;
    	let strong;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let button;
    	let div0;
    	let raw_value = OLSKUIAssets._OLSKSharedStorageDisconnect + "";
    	let button_title_value;
    	let mounted;
    	let dispose;
    	let if_block0 = !/*OLSKCloudStatusIsSyncing*/ ctx[1] && create_if_block_1$9(ctx);
    	let if_block1 = /*OLSKCloudStatusIsSyncing*/ ctx[1] && create_if_block$g(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			strong = element("strong");
    			t0 = text(/*OLSKCloudStatusIdentityText*/ ctx[0]);
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			button = element("button");
    			div0 = element("div");
    			attr_dev(strong, "class", "OLSKCloudStatusIdentity");
    			add_location(strong, file$r, 14, 0, 357);
    			attr_dev(div0, "class", "OLSKCloudStatusDisconnectButtonImage");
    			add_location(div0, file$r, 29, 1, 1467);
    			attr_dev(button, "class", "OLSKCloudStatusDisconnectButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton");
    			attr_dev(button, "title", button_title_value = main_1('OLSKCloudStatusDisconnectButtonText'));
    			add_location(button, file$r, 28, 0, 1167);
    			attr_dev(div1, "class", "OLSKCloudStatus svelte-10ewvcb");
    			add_location(div1, file$r, 12, 0, 326);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, strong);
    			append_dev(strong, t0);
    			append_dev(div1, t1);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div1, t2);
    			if (if_block1) if_block1.m(div1, null);
    			append_dev(div1, t3);
    			append_dev(div1, button);
    			append_dev(button, div0);
    			div0.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[5], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*OLSKCloudStatusIdentityText*/ 1) set_data_dev(t0, /*OLSKCloudStatusIdentityText*/ ctx[0]);

    			if (!/*OLSKCloudStatusIsSyncing*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$9(ctx);
    					if_block0.c();
    					if_block0.m(div1, t2);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*OLSKCloudStatusIsSyncing*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$g(ctx);
    					if_block1.c();
    					if_block1.m(div1, t3);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { OLSKCloudStatusIdentityText } = $$props;
    	let { OLSKCloudStatusIsSyncing } = $$props;
    	let { OLSKCloudStatusDispatchSyncStart } = $$props;
    	let { OLSKCloudStatusDispatchSyncStop } = $$props;
    	let { OLSKCloudStatusDispatchDisconnect } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (OLSKCloudStatusIdentityText === undefined && !('OLSKCloudStatusIdentityText' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCloudStatusIdentityText']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCloudStatusIdentityText'");
    		}

    		if (OLSKCloudStatusIsSyncing === undefined && !('OLSKCloudStatusIsSyncing' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCloudStatusIsSyncing']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCloudStatusIsSyncing'");
    		}

    		if (OLSKCloudStatusDispatchSyncStart === undefined && !('OLSKCloudStatusDispatchSyncStart' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCloudStatusDispatchSyncStart']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCloudStatusDispatchSyncStart'");
    		}

    		if (OLSKCloudStatusDispatchSyncStop === undefined && !('OLSKCloudStatusDispatchSyncStop' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCloudStatusDispatchSyncStop']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCloudStatusDispatchSyncStop'");
    		}

    		if (OLSKCloudStatusDispatchDisconnect === undefined && !('OLSKCloudStatusDispatchDisconnect' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCloudStatusDispatchDisconnect']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCloudStatusDispatchDisconnect'");
    		}
    	});

    	const writable_props = [
    		'OLSKCloudStatusIdentityText',
    		'OLSKCloudStatusIsSyncing',
    		'OLSKCloudStatusDispatchSyncStart',
    		'OLSKCloudStatusDispatchSyncStop',
    		'OLSKCloudStatusDispatchDisconnect'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => window.confirm(main_1('OLSKCloudStatusDisconnectConfirmText')) && OLSKCloudStatusDispatchDisconnect();

    	$$self.$$set = $$props => {
    		if ('OLSKCloudStatusIdentityText' in $$props) $$invalidate(0, OLSKCloudStatusIdentityText = $$props.OLSKCloudStatusIdentityText);
    		if ('OLSKCloudStatusIsSyncing' in $$props) $$invalidate(1, OLSKCloudStatusIsSyncing = $$props.OLSKCloudStatusIsSyncing);
    		if ('OLSKCloudStatusDispatchSyncStart' in $$props) $$invalidate(2, OLSKCloudStatusDispatchSyncStart = $$props.OLSKCloudStatusDispatchSyncStart);
    		if ('OLSKCloudStatusDispatchSyncStop' in $$props) $$invalidate(3, OLSKCloudStatusDispatchSyncStop = $$props.OLSKCloudStatusDispatchSyncStop);
    		if ('OLSKCloudStatusDispatchDisconnect' in $$props) $$invalidate(4, OLSKCloudStatusDispatchDisconnect = $$props.OLSKCloudStatusDispatchDisconnect);
    	};

    	$$self.$capture_state = () => ({
    		OLSKCloudStatusIdentityText,
    		OLSKCloudStatusIsSyncing,
    		OLSKCloudStatusDispatchSyncStart,
    		OLSKCloudStatusDispatchSyncStop,
    		OLSKCloudStatusDispatchDisconnect,
    		OLSKLocalized: main_1,
    		OLSKUIAssets
    	});

    	$$self.$inject_state = $$props => {
    		if ('OLSKCloudStatusIdentityText' in $$props) $$invalidate(0, OLSKCloudStatusIdentityText = $$props.OLSKCloudStatusIdentityText);
    		if ('OLSKCloudStatusIsSyncing' in $$props) $$invalidate(1, OLSKCloudStatusIsSyncing = $$props.OLSKCloudStatusIsSyncing);
    		if ('OLSKCloudStatusDispatchSyncStart' in $$props) $$invalidate(2, OLSKCloudStatusDispatchSyncStart = $$props.OLSKCloudStatusDispatchSyncStart);
    		if ('OLSKCloudStatusDispatchSyncStop' in $$props) $$invalidate(3, OLSKCloudStatusDispatchSyncStop = $$props.OLSKCloudStatusDispatchSyncStop);
    		if ('OLSKCloudStatusDispatchDisconnect' in $$props) $$invalidate(4, OLSKCloudStatusDispatchDisconnect = $$props.OLSKCloudStatusDispatchDisconnect);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		OLSKCloudStatusIdentityText,
    		OLSKCloudStatusIsSyncing,
    		OLSKCloudStatusDispatchSyncStart,
    		OLSKCloudStatusDispatchSyncStop,
    		OLSKCloudStatusDispatchDisconnect,
    		click_handler
    	];
    }

    class Main$r extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$r, create_fragment$r, safe_not_equal, {
    			OLSKCloudStatusIdentityText: 0,
    			OLSKCloudStatusIsSyncing: 1,
    			OLSKCloudStatusDispatchSyncStart: 2,
    			OLSKCloudStatusDispatchSyncStop: 3,
    			OLSKCloudStatusDispatchDisconnect: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$r.name
    		});
    	}

    	get OLSKCloudStatusIdentityText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCloudStatusIdentityText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCloudStatusIsSyncing() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCloudStatusIsSyncing(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCloudStatusDispatchSyncStart() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCloudStatusDispatchSyncStart(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCloudStatusDispatchSyncStop() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCloudStatusDispatchSyncStop(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCloudStatusDispatchDisconnect() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCloudStatusDispatchDisconnect(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKCloud/main.svelte generated by Svelte v3.59.2 */
    const file$s = "node_modules/OLSKCloud/main.svelte";

    // (13:0) {#if $$props.OLSKCloudErrorText }
    function create_if_block_2$7(ctx) {
    	let p;
    	let t0;
    	let t1;
    	let show_if = /*OLSKCloudErrorText*/ ctx[0].match('Unauthorized');
    	let if_block_anchor;
    	let if_block = show_if && create_if_block_3$5(ctx);

    	const block = {
    		c: function create() {
    			p = element("p");
    			t0 = text(/*OLSKCloudErrorText*/ ctx[0]);
    			t1 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(p, "class", "OLSKCloudError svelte-kyilmw");
    			add_location(p, file$s, 13, 1, 344);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t0);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*OLSKCloudErrorText*/ 1) set_data_dev(t0, /*OLSKCloudErrorText*/ ctx[0]);
    			if (dirty & /*OLSKCloudErrorText*/ 1) show_if = /*OLSKCloudErrorText*/ ctx[0].match('Unauthorized');

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_3$5(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$7.name,
    		type: "if",
    		source: "(13:0) {#if $$props.OLSKCloudErrorText }",
    		ctx
    	});

    	return block;
    }

    // (16:1) {#if OLSKCloudErrorText.match('Unauthorized') }
    function create_if_block_3$5(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = `${main_1('OLSKCloudRenewButtonText')}`;
    			attr_dev(button, "class", "OLSKCloudRenewButton");
    			add_location(button, file$s, 16, 2, 449);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKCloudDispatchRenew*/ ctx[1])) /*OLSKCloudDispatchRenew*/ ctx[1].apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$5.name,
    		type: "if",
    		source: "(16:1) {#if OLSKCloudErrorText.match('Unauthorized') }",
    		ctx
    	});

    	return block;
    }

    // (21:0) {#if !$$props.OLSKCloudStatusIdentityText }
    function create_if_block_1$a(ctx) {
    	let olskcloudform;
    	let current;

    	olskcloudform = new Main$q({
    			props: {
    				OLSKCloudFormDispatchSubmit: /*$$props*/ ctx[2].OLSKCloudFormDispatchSubmit
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(olskcloudform.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskcloudform, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const olskcloudform_changes = {};
    			if (dirty & /*$$props*/ 4) olskcloudform_changes.OLSKCloudFormDispatchSubmit = /*$$props*/ ctx[2].OLSKCloudFormDispatchSubmit;
    			olskcloudform.$set(olskcloudform_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskcloudform.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskcloudform.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskcloudform, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$a.name,
    		type: "if",
    		source: "(21:0) {#if !$$props.OLSKCloudStatusIdentityText }",
    		ctx
    	});

    	return block;
    }

    // (27:0) {#if $$props.OLSKCloudStatusIdentityText }
    function create_if_block$h(ctx) {
    	let olskcloudstatus;
    	let current;

    	olskcloudstatus = new Main$r({
    			props: {
    				OLSKCloudStatusIdentityText: /*$$props*/ ctx[2].OLSKCloudStatusIdentityText,
    				OLSKCloudStatusIsSyncing: /*$$props*/ ctx[2].OLSKCloudStatusIsSyncing,
    				OLSKCloudStatusDispatchSyncStart: /*$$props*/ ctx[2].OLSKCloudStatusDispatchSyncStart,
    				OLSKCloudStatusDispatchSyncStop: /*$$props*/ ctx[2].OLSKCloudStatusDispatchSyncStop,
    				OLSKCloudStatusDispatchDisconnect: /*$$props*/ ctx[2].OLSKCloudStatusDispatchDisconnect
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(olskcloudstatus.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskcloudstatus, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const olskcloudstatus_changes = {};
    			if (dirty & /*$$props*/ 4) olskcloudstatus_changes.OLSKCloudStatusIdentityText = /*$$props*/ ctx[2].OLSKCloudStatusIdentityText;
    			if (dirty & /*$$props*/ 4) olskcloudstatus_changes.OLSKCloudStatusIsSyncing = /*$$props*/ ctx[2].OLSKCloudStatusIsSyncing;
    			if (dirty & /*$$props*/ 4) olskcloudstatus_changes.OLSKCloudStatusDispatchSyncStart = /*$$props*/ ctx[2].OLSKCloudStatusDispatchSyncStart;
    			if (dirty & /*$$props*/ 4) olskcloudstatus_changes.OLSKCloudStatusDispatchSyncStop = /*$$props*/ ctx[2].OLSKCloudStatusDispatchSyncStop;
    			if (dirty & /*$$props*/ 4) olskcloudstatus_changes.OLSKCloudStatusDispatchDisconnect = /*$$props*/ ctx[2].OLSKCloudStatusDispatchDisconnect;
    			olskcloudstatus.$set(olskcloudstatus_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskcloudstatus.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskcloudstatus.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskcloudstatus, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$h.name,
    		type: "if",
    		source: "(27:0) {#if $$props.OLSKCloudStatusIdentityText }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$s(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let current;
    	let if_block0 = /*$$props*/ ctx[2].OLSKCloudErrorText && create_if_block_2$7(ctx);
    	let if_block1 = !/*$$props*/ ctx[2].OLSKCloudStatusIdentityText && create_if_block_1$a(ctx);
    	let if_block2 = /*$$props*/ ctx[2].OLSKCloudStatusIdentityText && create_if_block$h(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(div, "class", "OLSKCloud svelte-kyilmw");
    			add_location(div, file$s, 10, 0, 284);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t0);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t1);
    			if (if_block2) if_block2.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$$props*/ ctx[2].OLSKCloudErrorText) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$7(ctx);
    					if_block0.c();
    					if_block0.m(div, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (!/*$$props*/ ctx[2].OLSKCloudStatusIdentityText) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*$$props*/ 4) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$a(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*$$props*/ ctx[2].OLSKCloudStatusIdentityText) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*$$props*/ 4) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$h(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { OLSKCloudErrorText = null } = $$props;
    	let { OLSKCloudDispatchRenew } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (OLSKCloudDispatchRenew === undefined && !('OLSKCloudDispatchRenew' in $$props || $$self.$$.bound[$$self.$$.props['OLSKCloudDispatchRenew']])) {
    			console.warn("<Main> was created without expected prop 'OLSKCloudDispatchRenew'");
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(2, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('OLSKCloudErrorText' in $$new_props) $$invalidate(0, OLSKCloudErrorText = $$new_props.OLSKCloudErrorText);
    		if ('OLSKCloudDispatchRenew' in $$new_props) $$invalidate(1, OLSKCloudDispatchRenew = $$new_props.OLSKCloudDispatchRenew);
    	};

    	$$self.$capture_state = () => ({
    		OLSKCloudErrorText,
    		OLSKCloudDispatchRenew,
    		OLSKLocalized: main_1,
    		OLSKCloudForm: Main$q,
    		OLSKCloudStatus: Main$r
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(2, $$props = assign(assign({}, $$props), $$new_props));
    		if ('OLSKCloudErrorText' in $$props) $$invalidate(0, OLSKCloudErrorText = $$new_props.OLSKCloudErrorText);
    		if ('OLSKCloudDispatchRenew' in $$props) $$invalidate(1, OLSKCloudDispatchRenew = $$new_props.OLSKCloudDispatchRenew);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [OLSKCloudErrorText, OLSKCloudDispatchRenew, $$props];
    }

    class Main$s extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$s, create_fragment$s, safe_not_equal, {
    			OLSKCloudErrorText: 0,
    			OLSKCloudDispatchRenew: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$s.name
    		});
    	}

    	get OLSKCloudErrorText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCloudErrorText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCloudDispatchRenew() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCloudDispatchRenew(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKPointer/main.svelte generated by Svelte v3.59.2 */

    const file$t = "node_modules/OLSKPointer/main.svelte";

    function create_fragment$t(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "OLSKPointer svelte-1lkaohs");
    			set_style(div, "--OLSKPointerSize", /*OLSKPointerSize*/ ctx[0] + "px");
    			set_style(div, "--OLSKPointerStroke", /*OLSKPointerStroke*/ ctx[1] + "px");
    			add_location(div, file$t, 5, 0, 87);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*OLSKPointerSize*/ 1) {
    				set_style(div, "--OLSKPointerSize", /*OLSKPointerSize*/ ctx[0] + "px");
    			}

    			if (dirty & /*OLSKPointerStroke*/ 2) {
    				set_style(div, "--OLSKPointerStroke", /*OLSKPointerStroke*/ ctx[1] + "px");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { OLSKPointerSize = 20 } = $$props;
    	let { OLSKPointerStroke = 2 } = $$props;
    	const writable_props = ['OLSKPointerSize', 'OLSKPointerStroke'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('OLSKPointerSize' in $$props) $$invalidate(0, OLSKPointerSize = $$props.OLSKPointerSize);
    		if ('OLSKPointerStroke' in $$props) $$invalidate(1, OLSKPointerStroke = $$props.OLSKPointerStroke);
    	};

    	$$self.$capture_state = () => ({ OLSKPointerSize, OLSKPointerStroke });

    	$$self.$inject_state = $$props => {
    		if ('OLSKPointerSize' in $$props) $$invalidate(0, OLSKPointerSize = $$props.OLSKPointerSize);
    		if ('OLSKPointerStroke' in $$props) $$invalidate(1, OLSKPointerStroke = $$props.OLSKPointerStroke);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [OLSKPointerSize, OLSKPointerStroke];
    }

    class Main$t extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$t, create_fragment$t, safe_not_equal, { OLSKPointerSize: 0, OLSKPointerStroke: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$t.name
    		});
    	}

    	get OLSKPointerSize() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKPointerSize(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKPointerStroke() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKPointerStroke(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function e$1(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}function t(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var o=0,n=new Array(t);o<t;o++)n[o]=e[o];return n}var n,i,a,r,s,l=(n=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'],i=function(){function o(e){var n=e.targetModal,i=e.triggers,a=void 0===i?[]:i,r=e.onShow,s=void 0===r?function(){}:r,l=e.onClose,c=void 0===l?function(){}:l,d=e.openTrigger,u=void 0===d?"data-micromodal-trigger":d,f=e.closeTrigger,h=void 0===f?"data-micromodal-close":f,v=e.openClass,g=void 0===v?"is-open":v,m=e.disableScroll,b=void 0!==m&&m,y=e.disableFocus,p=void 0!==y&&y,w=e.awaitCloseAnimation,E=void 0!==w&&w,k=e.awaitOpenAnimation,M=void 0!==k&&k,A=e.debugMode,C=void 0!==A&&A;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),this.modal="string"==typeof n?document.getElementById(n):n,this.config={debugMode:C,disableScroll:b,openTrigger:u,closeTrigger:h,openClass:g,onShow:s,onClose:c,awaitCloseAnimation:E,awaitOpenAnimation:M,disableFocus:p},a.length>0&&this.registerTriggers.apply(this,t(a)),this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this);}var i,a;return i=o,(a=[{key:"registerTriggers",value:function(){for(var e=this,t=arguments.length,o=new Array(t),n=0;n<t;n++)o[n]=arguments[n];o.filter(Boolean).forEach((function(t){t.addEventListener("click",(function(t){return e.showModal(t)}));}));}},{key:"showModal",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(this.activeElement=document.activeElement,this.modal.setAttribute("aria-hidden","false"),this.modal.classList.add(this.config.openClass),this.scrollBehaviour("disable"),this.addEventListeners(),this.config.awaitOpenAnimation){var o=function t(){e.modal.removeEventListener("animationend",t,!1),e.setFocusToFirstNode();};this.modal.addEventListener("animationend",o,!1);}else this.setFocusToFirstNode();this.config.onShow(this.modal,this.activeElement,t);}},{key:"closeModal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.modal;if(this.modal.setAttribute("aria-hidden","true"),this.removeEventListeners(),this.scrollBehaviour("enable"),this.activeElement&&this.activeElement.focus&&this.activeElement.focus(),this.config.onClose(this.modal,this.activeElement,e),this.config.awaitCloseAnimation){var o=this.config.openClass;this.modal.addEventListener("animationend",(function e(){t.classList.remove(o),t.removeEventListener("animationend",e,!1);}),!1);}else t.classList.remove(this.config.openClass);}},{key:"closeModalByIdOrElement",value:function(e){this.modal="string"==typeof e?document.getElementById(e):e,this.modal&&this.closeModal();}},{key:"scrollBehaviour",value:function(e){if(this.config.disableScroll){var t=document.querySelector("body");switch(e){case"enable":Object.assign(t.style,{overflow:""});break;case"disable":Object.assign(t.style,{overflow:"hidden"});}}}},{key:"addEventListeners",value:function(){this.modal.addEventListener("touchstart",this.onClick),this.modal.addEventListener("click",this.onClick),document.addEventListener("keydown",this.onKeydown);}},{key:"removeEventListeners",value:function(){this.modal.removeEventListener("touchstart",this.onClick),this.modal.removeEventListener("click",this.onClick),document.removeEventListener("keydown",this.onKeydown);}},{key:"onClick",value:function(e){(e.target.hasAttribute(this.config.closeTrigger)||e.target.parentNode.hasAttribute(this.config.closeTrigger))&&(e.preventDefault(),e.stopPropagation(),this.closeModal(e));}},{key:"onKeydown",value:function(e){27===e.keyCode&&this.closeModal(e),9===e.keyCode&&this.retainFocus(e);}},{key:"getFocusableNodes",value:function(){var e=this.modal.querySelectorAll(n);return Array.apply(void 0,t(e))}},{key:"setFocusToFirstNode",value:function(){var e=this;if(!this.config.disableFocus){var t=this.getFocusableNodes();if(0!==t.length){var o=t.filter((function(t){return !t.hasAttribute(e.config.closeTrigger)}));o.length>0&&o[0].focus(),0===o.length&&t[0].focus();}}}},{key:"retainFocus",value:function(e){var t=this.getFocusableNodes();if(0!==t.length)if(t=t.filter((function(e){return null!==e.offsetParent})),this.modal.contains(document.activeElement)){var o=t.indexOf(document.activeElement);e.shiftKey&&0===o&&(t[t.length-1].focus(),e.preventDefault()),!e.shiftKey&&t.length>0&&o===t.length-1&&(t[0].focus(),e.preventDefault());}else t[0].focus();}}])&&e$1(i.prototype,a),o}(),a=null,r=function(e){if("string"==typeof id?!document.getElementById(e):!e)return console.warn("MicroModal: ❗Seems like you have missed %c'".concat(e,"'"),"background-color: #f8f9fa;color: #50596c;font-weight: bold;","ID somewhere in your code. Refer example below to resolve it."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<div class="modal" id="'.concat(e,'"></div>')),!1},s=function(e,t){if(function(e){e.length<=0&&(console.warn("MicroModal: ❗Please specify at least one %c'micromodal-trigger'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","data attribute."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<a href="#" data-micromodal-trigger="my-modal"></a>'));}(e),!t)return !0;for(var o in t)r(o);return !0},{init:function(e){var o=Object.assign({},{openTrigger:"data-micromodal-trigger"},e),n=t(document.querySelectorAll("[".concat(o.openTrigger,"]"))),r=function(e,t){var o=[];return e.forEach((function(e){var n=e.attributes[t].value;void 0===o[n]&&(o[n]=[]),o[n].push(e);})),o}(n,o.openTrigger);if(!0!==o.debugMode||!1!==s(n,r))for(var l in r){var c=r[l];o.targetModal=l,o.triggers=t(c),a=new i(o);}},show:function(e,t){var o=t||{};o.targetModal=e,!0===o.debugMode&&!1===r(e)||(a&&a.removeEventListeners(),(a=new i(o)).showModal());},close:function(e){e?a.closeModalByIdOrElement(e):a.closeModal();}});"undefined"!=typeof window&&(window.MicroModal=l);

    /* node_modules/OLSKStandardView/main.svelte generated by Svelte v3.59.2 */

    const file$u = "node_modules/OLSKStandardView/main.svelte";
    const get_OLSKStandardViewTail_slot_changes = dirty => ({});
    const get_OLSKStandardViewTail_slot_context = ctx => ({});
    const get_OLSKStandardViewHead_slot_changes = dirty => ({});
    const get_OLSKStandardViewHead_slot_context = ctx => ({});

    // (2:1) {#if $$slots.OLSKStandardViewHead}
    function create_if_block_2$8(ctx) {
    	let div;
    	let current;
    	const OLSKStandardViewHead_slot_template = /*#slots*/ ctx[2].OLSKStandardViewHead;
    	const OLSKStandardViewHead_slot = create_slot(OLSKStandardViewHead_slot_template, ctx, /*$$scope*/ ctx[1], get_OLSKStandardViewHead_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (OLSKStandardViewHead_slot) OLSKStandardViewHead_slot.c();
    			attr_dev(div, "class", "OLSKStandardViewHead OLSKDecorFixedHeader svelte-hvaqwn");
    			add_location(div, file$u, 2, 2, 84);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (OLSKStandardViewHead_slot) {
    				OLSKStandardViewHead_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKStandardViewHead_slot) {
    				if (OLSKStandardViewHead_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						OLSKStandardViewHead_slot,
    						OLSKStandardViewHead_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(OLSKStandardViewHead_slot_template, /*$$scope*/ ctx[1], dirty, get_OLSKStandardViewHead_slot_changes),
    						get_OLSKStandardViewHead_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKStandardViewHead_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKStandardViewHead_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (OLSKStandardViewHead_slot) OLSKStandardViewHead_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$8.name,
    		type: "if",
    		source: "(2:1) {#if $$slots.OLSKStandardViewHead}",
    		ctx
    	});

    	return block;
    }

    // (8:1) {#if $$slots.default }
    function create_if_block_1$b(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "OLSKStandardViewBody OLSKDecorFixedSecondary svelte-hvaqwn");
    			add_location(div, file$u, 8, 2, 229);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$b.name,
    		type: "if",
    		source: "(8:1) {#if $$slots.default }",
    		ctx
    	});

    	return block;
    }

    // (14:1) {#if $$slots.OLSKStandardViewTail}
    function create_if_block$i(ctx) {
    	let div;
    	let current;
    	const OLSKStandardViewTail_slot_template = /*#slots*/ ctx[2].OLSKStandardViewTail;
    	const OLSKStandardViewTail_slot = create_slot(OLSKStandardViewTail_slot_template, ctx, /*$$scope*/ ctx[1], get_OLSKStandardViewTail_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (OLSKStandardViewTail_slot) OLSKStandardViewTail_slot.c();
    			attr_dev(div, "class", "OLSKStandardViewTail");
    			add_location(div, file$u, 14, 2, 360);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (OLSKStandardViewTail_slot) {
    				OLSKStandardViewTail_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKStandardViewTail_slot) {
    				if (OLSKStandardViewTail_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						OLSKStandardViewTail_slot,
    						OLSKStandardViewTail_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(OLSKStandardViewTail_slot_template, /*$$scope*/ ctx[1], dirty, get_OLSKStandardViewTail_slot_changes),
    						get_OLSKStandardViewTail_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKStandardViewTail_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKStandardViewTail_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (OLSKStandardViewTail_slot) OLSKStandardViewTail_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$i.name,
    		type: "if",
    		source: "(14:1) {#if $$slots.OLSKStandardViewTail}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$u(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let current;
    	let if_block0 = /*$$slots*/ ctx[0].OLSKStandardViewHead && create_if_block_2$8(ctx);
    	let if_block1 = /*$$slots*/ ctx[0].default && create_if_block_1$b(ctx);
    	let if_block2 = /*$$slots*/ ctx[0].OLSKStandardViewTail && create_if_block$i(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(div, "class", "OLSKStandardView OLSKDecorFixed svelte-hvaqwn");
    			add_location(div, file$u, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t0);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t1);
    			if (if_block2) if_block2.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$$slots*/ ctx[0].OLSKStandardViewHead) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_2$8(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*$$slots*/ ctx[0].default) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$b(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*$$slots*/ ctx[0].OLSKStandardViewTail) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 1) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$i(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, ['OLSKStandardViewHead','default','OLSKStandardViewTail']);
    	const $$slots = compute_slots(slots);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	return [$$slots, $$scope, slots];
    }

    class Main$u extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$u, create_fragment$u, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$u.name
    		});
    	}
    }

    /* node_modules/OLSKModalView/main.svelte generated by Svelte v3.59.2 */
    const file$v = "node_modules/OLSKModalView/main.svelte";
    const get_OLSKStandardViewTail_slot_changes$1 = dirty => ({});
    const get_OLSKStandardViewTail_slot_context$1 = ctx => ({});

    // (84:0) {#if mod._ValueIsVisible }
    function create_if_block$j(ctx) {
    	let div2;
    	let div1;
    	let div0;
    	let olskstandardview;
    	let div0_aria_labelledby_value;
    	let div2_id_value;
    	let current;

    	olskstandardview = new Main$u({
    			props: {
    				$$slots: {
    					OLSKStandardViewTail: [create_OLSKStandardViewTail_slot],
    					OLSKStandardViewHead: [create_OLSKStandardViewHead_slot],
    					default: [create_default_slot$2]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			create_component(olskstandardview.$$.fragment);
    			attr_dev(div0, "class", "OLSKModalViewContainer svelte-16rd7qp");
    			attr_dev(div0, "role", "dialog");
    			attr_dev(div0, "aria-modal", "true");
    			attr_dev(div0, "aria-labelledby", div0_aria_labelledby_value = /*mod*/ ctx[3]._DataRandomTitleID);
    			add_location(div0, file$v, 87, 2, 1723);
    			attr_dev(div1, "class", "OLSKModalViewOverlay svelte-16rd7qp");
    			attr_dev(div1, "tabindex", "-1");
    			attr_dev(div1, "data-micromodal-close", "");
    			add_location(div1, file$v, 86, 1, 1650);
    			attr_dev(div2, "class", "OLSKModalView svelte-16rd7qp");
    			attr_dev(div2, "id", div2_id_value = /*mod*/ ctx[3]._DataRandomID);
    			attr_dev(div2, "aria-hidden", "true");
    			toggle_class(div2, "OLSKModalViewCapped", /*OLSKModalViewIsCapped*/ ctx[2]);
    			add_location(div2, file$v, 85, 0, 1525);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			mount_component(olskstandardview, div0, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const olskstandardview_changes = {};

    			if (dirty & /*$$scope, $$slots, mod, OLSKModalViewCloseText, OLSKModalViewTitleText*/ 283) {
    				olskstandardview_changes.$$scope = { dirty, ctx };
    			}

    			olskstandardview.$set(olskstandardview_changes);

    			if (!current || dirty & /*mod*/ 8 && div0_aria_labelledby_value !== (div0_aria_labelledby_value = /*mod*/ ctx[3]._DataRandomTitleID)) {
    				attr_dev(div0, "aria-labelledby", div0_aria_labelledby_value);
    			}

    			if (!current || dirty & /*mod*/ 8 && div2_id_value !== (div2_id_value = /*mod*/ ctx[3]._DataRandomID)) {
    				attr_dev(div2, "id", div2_id_value);
    			}

    			if (!current || dirty & /*OLSKModalViewIsCapped*/ 4) {
    				toggle_class(div2, "OLSKModalViewCapped", /*OLSKModalViewIsCapped*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskstandardview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskstandardview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(olskstandardview);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$j.name,
    		type: "if",
    		source: "(84:0) {#if mod._ValueIsVisible }",
    		ctx
    	});

    	return block;
    }

    // (89:3) <OLSKStandardView>
    function create_default_slot$2(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(89:3) <OLSKStandardView>",
    		ctx
    	});

    	return block;
    }

    // (90:4) 
    function create_OLSKStandardViewHead_slot(ctx) {
    	let div3;
    	let div0;
    	let t1;
    	let div1;
    	let span;
    	let t2;
    	let span_id_value;
    	let t3;
    	let div2;
    	let button;
    	let t4_value = (/*OLSKModalViewCloseText*/ ctx[1] || main_1('OLSKModalViewCloseButtonText')) + "";
    	let t4;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			div0.textContent = " ";
    			t1 = space();
    			div1 = element("div");
    			span = element("span");
    			t2 = text(/*OLSKModalViewTitleText*/ ctx[0]);
    			t3 = space();
    			div2 = element("div");
    			button = element("button");
    			t4 = text(t4_value);
    			attr_dev(div0, "class", "OLSKToolbarElementGroup");
    			add_location(div0, file$v, 90, 5, 1978);
    			attr_dev(span, "class", "OLSKModalViewTitle svelte-16rd7qp");
    			attr_dev(span, "id", span_id_value = /*mod*/ ctx[3]._DataRandomTitleID);
    			add_location(span, file$v, 93, 6, 2078);
    			attr_dev(div1, "class", "OLSKToolbarElementGroup");
    			add_location(div1, file$v, 92, 5, 2034);
    			attr_dev(button, "class", "OLSKModalViewCloseButton OLSKDecorButtonNoStyle OLSKDecorTappable");
    			add_location(button, file$v, 97, 6, 2237);
    			attr_dev(div2, "class", "OLSKToolbarElementGroup");
    			add_location(div2, file$v, 96, 5, 2193);
    			attr_dev(div3, "class", "OLSKModalViewHead OLSKToolbar OLSKCommonEdgeBottom OLSKToolbarJustify svelte-16rd7qp");
    			attr_dev(div3, "slot", "OLSKStandardViewHead");
    			add_location(div3, file$v, 89, 4, 1861);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div3, t1);
    			append_dev(div3, div1);
    			append_dev(div1, span);
    			append_dev(span, t2);
    			append_dev(div3, t3);
    			append_dev(div3, div2);
    			append_dev(div2, button);
    			append_dev(button, t4);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[3].ControlClose)) /*mod*/ ctx[3].ControlClose.apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*OLSKModalViewTitleText*/ 1) set_data_dev(t2, /*OLSKModalViewTitleText*/ ctx[0]);

    			if (dirty & /*mod*/ 8 && span_id_value !== (span_id_value = /*mod*/ ctx[3]._DataRandomTitleID)) {
    				attr_dev(span, "id", span_id_value);
    			}

    			if (dirty & /*OLSKModalViewCloseText*/ 2 && t4_value !== (t4_value = (/*OLSKModalViewCloseText*/ ctx[1] || main_1('OLSKModalViewCloseButtonText')) + "")) set_data_dev(t4, t4_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKStandardViewHead_slot.name,
    		type: "slot",
    		source: "(90:4) ",
    		ctx
    	});

    	return block;
    }

    // (104:110) {#if $$slots.OLSKStandardViewTail}
    function create_if_block_1$c(ctx) {
    	let current;
    	const OLSKStandardViewTail_slot_template = /*#slots*/ ctx[7].OLSKStandardViewTail;
    	const OLSKStandardViewTail_slot = create_slot(OLSKStandardViewTail_slot_template, ctx, /*$$scope*/ ctx[8], get_OLSKStandardViewTail_slot_context$1);

    	const block = {
    		c: function create() {
    			if (OLSKStandardViewTail_slot) OLSKStandardViewTail_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (OLSKStandardViewTail_slot) {
    				OLSKStandardViewTail_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKStandardViewTail_slot) {
    				if (OLSKStandardViewTail_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						OLSKStandardViewTail_slot,
    						OLSKStandardViewTail_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(OLSKStandardViewTail_slot_template, /*$$scope*/ ctx[8], dirty, get_OLSKStandardViewTail_slot_changes$1),
    						get_OLSKStandardViewTail_slot_context$1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKStandardViewTail_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKStandardViewTail_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (OLSKStandardViewTail_slot) OLSKStandardViewTail_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$c.name,
    		type: "if",
    		source: "(104:110) {#if $$slots.OLSKStandardViewTail}",
    		ctx
    	});

    	return block;
    }

    // (104:4) 
    function create_OLSKStandardViewTail_slot(ctx) {
    	let div;
    	let current;
    	let if_block = /*$$slots*/ ctx[4].OLSKStandardViewTail && create_if_block_1$c(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "slot", "OLSKStandardViewTail");
    			toggle_class(div, "OLSKStandardViewTailHotfixHidden", !/*$$slots*/ ctx[4].OLSKStandardViewTail);
    			add_location(div, file$v, 103, 4, 2481);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[4].OLSKStandardViewTail) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 16) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$c(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*$$slots*/ 16) {
    				toggle_class(div, "OLSKStandardViewTailHotfixHidden", !/*$$slots*/ ctx[4].OLSKStandardViewTail);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKStandardViewTail_slot.name,
    		type: "slot",
    		source: "(104:4) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$v(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*mod*/ ctx[3]._ValueIsVisible && create_if_block$j(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*mod*/ ctx[3]._ValueIsVisible) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*mod*/ 8) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$j(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, ['OLSKStandardViewTail','default']);
    	const $$slots = compute_slots(slots);
    	let { OLSKModalViewTitleText } = $$props;
    	let { OLSKModalViewCloseText = '' } = $$props;
    	let { OLSKModalViewIsCapped = false } = $$props;
    	let { OLSKModalViewDidClose = null } = $$props;

    	const modPublic = {
    		_OLSKModalViewIsVisible() {
    			return mod._ValueIsVisible;
    		},
    		OLSKModalViewShow() {
    			mod.ControlShow();
    		},
    		OLSKModalViewClose() {
    			mod.ControlClose();
    		}
    	};

    	const mod = {
    		// VALUE
    		_ValueIsVisible: false,
    		_ValueUpdateCallback: null,
    		// DATA
    		_DataRandomID: 'OLSKModalView_' + Math.random().toString().slice(2),
    		_DataRandomTitleID: 'OLSKModalViewTitle_' + Math.random().toString().slice(2),
    		// CONTROL
    		ControlShow() {
    			$$invalidate(
    				3,
    				mod._ValueUpdateCallback = function () {
    					l.show(mod._DataRandomID, {
    						openClass: 'OLSKModalViewOpen',
    						awaitOpenAnimation: true,
    						awaitCloseAnimation: true,
    						onClose() {
    							setTimeout(
    								function () {
    									$$invalidate(3, mod._ValueIsVisible = false, mod);
    								},
    								600
    							);

    							OLSKModalViewDidClose && OLSKModalViewDidClose();
    						}
    					});
    				},
    				mod
    			);

    			$$invalidate(3, mod._ValueIsVisible = true, mod);
    		},
    		ControlClose() {
    			l.close(mod._DataRandomID);
    		},
    		// LIFECYCLE
    		LifecycleModuleDidUpdate() {
    			if (!mod._ValueUpdateCallback) {
    				return;
    			}

    			mod._ValueUpdateCallback();
    			delete mod._ValueUpdateCallback;
    		}
    	};

    	afterUpdate(mod.LifecycleModuleDidUpdate);

    	$$self.$$.on_mount.push(function () {
    		if (OLSKModalViewTitleText === undefined && !('OLSKModalViewTitleText' in $$props || $$self.$$.bound[$$self.$$.props['OLSKModalViewTitleText']])) {
    			console.warn("<Main> was created without expected prop 'OLSKModalViewTitleText'");
    		}
    	});

    	const writable_props = [
    		'OLSKModalViewTitleText',
    		'OLSKModalViewCloseText',
    		'OLSKModalViewIsCapped',
    		'OLSKModalViewDidClose'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('OLSKModalViewTitleText' in $$props) $$invalidate(0, OLSKModalViewTitleText = $$props.OLSKModalViewTitleText);
    		if ('OLSKModalViewCloseText' in $$props) $$invalidate(1, OLSKModalViewCloseText = $$props.OLSKModalViewCloseText);
    		if ('OLSKModalViewIsCapped' in $$props) $$invalidate(2, OLSKModalViewIsCapped = $$props.OLSKModalViewIsCapped);
    		if ('OLSKModalViewDidClose' in $$props) $$invalidate(5, OLSKModalViewDidClose = $$props.OLSKModalViewDidClose);
    		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		OLSKModalViewTitleText,
    		OLSKModalViewCloseText,
    		OLSKModalViewIsCapped,
    		OLSKModalViewDidClose,
    		modPublic,
    		OLSKLocalized: main_1,
    		MicroModal: l,
    		mod,
    		afterUpdate,
    		OLSKStandardView: Main$u
    	});

    	$$self.$inject_state = $$props => {
    		if ('OLSKModalViewTitleText' in $$props) $$invalidate(0, OLSKModalViewTitleText = $$props.OLSKModalViewTitleText);
    		if ('OLSKModalViewCloseText' in $$props) $$invalidate(1, OLSKModalViewCloseText = $$props.OLSKModalViewCloseText);
    		if ('OLSKModalViewIsCapped' in $$props) $$invalidate(2, OLSKModalViewIsCapped = $$props.OLSKModalViewIsCapped);
    		if ('OLSKModalViewDidClose' in $$props) $$invalidate(5, OLSKModalViewDidClose = $$props.OLSKModalViewDidClose);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		OLSKModalViewTitleText,
    		OLSKModalViewCloseText,
    		OLSKModalViewIsCapped,
    		mod,
    		$$slots,
    		OLSKModalViewDidClose,
    		modPublic,
    		slots,
    		$$scope
    	];
    }

    class Main$v extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$v, create_fragment$v, safe_not_equal, {
    			OLSKModalViewTitleText: 0,
    			OLSKModalViewCloseText: 1,
    			OLSKModalViewIsCapped: 2,
    			OLSKModalViewDidClose: 5,
    			modPublic: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$v.name
    		});
    	}

    	get OLSKModalViewTitleText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKModalViewTitleText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKModalViewCloseText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKModalViewCloseText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKModalViewIsCapped() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKModalViewIsCapped(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKModalViewDidClose() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKModalViewDidClose(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[6];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKWebView/main.svelte generated by Svelte v3.59.2 */

    const { Object: Object_1$8 } = globals;
    const file$w = "node_modules/OLSKWebView/main.svelte";

    // (28:0) <OLSKModalView bind:this={ mod._OLSKModalView } OLSKModalViewTitleText={ OLSKModalViewTitleText }>
    function create_default_slot$3(ctx) {
    	let div;
    	let iframe;
    	let iframe_data_src_value;
    	let iframe_src_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			iframe = element("iframe");
    			attr_dev(iframe, "class", "OLSKWebViewFrame svelte-1dgazwi");

    			attr_dev(iframe, "data-src", iframe_data_src_value = /*DEBUG_OLSKWebViewDataSource*/ ctx[2]
    			? /*OLSKWebViewURL*/ ctx[1]
    			: '');

    			if (!src_url_equal(iframe.src, iframe_src_value = /*DEBUG_OLSKWebViewDataSource*/ ctx[2]
    			? ''
    			: /*OLSKWebViewURL*/ ctx[1])) attr_dev(iframe, "src", iframe_src_value);

    			attr_dev(iframe, "title", /*OLSKModalViewTitleText*/ ctx[0]);
    			attr_dev(iframe, "frameborder", "0");
    			add_location(iframe, file$w, 29, 2, 607);
    			attr_dev(div, "class", "OLSKWebView");
    			add_location(div, file$w, 28, 1, 579);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, iframe);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*DEBUG_OLSKWebViewDataSource, OLSKWebViewURL*/ 6 && iframe_data_src_value !== (iframe_data_src_value = /*DEBUG_OLSKWebViewDataSource*/ ctx[2]
    			? /*OLSKWebViewURL*/ ctx[1]
    			: '')) {
    				attr_dev(iframe, "data-src", iframe_data_src_value);
    			}

    			if (dirty & /*DEBUG_OLSKWebViewDataSource, OLSKWebViewURL*/ 6 && !src_url_equal(iframe.src, iframe_src_value = /*DEBUG_OLSKWebViewDataSource*/ ctx[2]
    			? ''
    			: /*OLSKWebViewURL*/ ctx[1])) {
    				attr_dev(iframe, "src", iframe_src_value);
    			}

    			if (dirty & /*OLSKModalViewTitleText*/ 1) {
    				attr_dev(iframe, "title", /*OLSKModalViewTitleText*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(28:0) <OLSKModalView bind:this={ mod._OLSKModalView } OLSKModalViewTitleText={ OLSKModalViewTitleText }>",
    		ctx
    	});

    	return block;
    }

    // (33:1) 
    function create_OLSKStandardViewTail_slot$1(ctx) {
    	let div1;
    	let div0;
    	let a;
    	let t_value = main_1('OLSKWebViewWindowButtonText') + "";
    	let t;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			a = element("a");
    			t = text(t_value);
    			attr_dev(a, "class", "OLSKWebViewWindowButton svelte-1dgazwi");
    			attr_dev(a, "href", /*OLSKWebViewURL*/ ctx[1]);
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$w, 34, 3, 961);
    			attr_dev(div0, "class", "OLSKToolbarElementGroup");
    			add_location(div0, file$w, 33, 2, 920);
    			attr_dev(div1, "class", "OLSKWebViewTail OLSKToolbar OLSKCommonEdgeTop svelte-1dgazwi");
    			attr_dev(div1, "slot", "OLSKStandardViewTail");
    			add_location(div1, file$w, 32, 1, 830);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, a);
    			append_dev(a, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*OLSKWebViewURL*/ 2) {
    				attr_dev(a, "href", /*OLSKWebViewURL*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKStandardViewTail_slot$1.name,
    		type: "slot",
    		source: "(33:1) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$w(ctx) {
    	let olskmodalview;
    	let current;

    	let olskmodalview_props = {
    		OLSKModalViewTitleText: /*OLSKModalViewTitleText*/ ctx[0],
    		$$slots: {
    			OLSKStandardViewTail: [create_OLSKStandardViewTail_slot$1],
    			default: [create_default_slot$3]
    		},
    		$$scope: { ctx }
    	};

    	olskmodalview = new Main$v({
    			props: olskmodalview_props,
    			$$inline: true
    		});

    	/*olskmodalview_binding*/ ctx[5](olskmodalview);

    	const block = {
    		c: function create() {
    			create_component(olskmodalview.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskmodalview, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const olskmodalview_changes = {};
    			if (dirty & /*OLSKModalViewTitleText*/ 1) olskmodalview_changes.OLSKModalViewTitleText = /*OLSKModalViewTitleText*/ ctx[0];

    			if (dirty & /*$$scope, OLSKWebViewURL, DEBUG_OLSKWebViewDataSource, OLSKModalViewTitleText*/ 71) {
    				olskmodalview_changes.$$scope = { dirty, ctx };
    			}

    			olskmodalview.$set(olskmodalview_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskmodalview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskmodalview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*olskmodalview_binding*/ ctx[5](null);
    			destroy_component(olskmodalview, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$w($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { OLSKModalViewTitleText } = $$props;
    	let { OLSKWebViewURL } = $$props;
    	let { DEBUG_OLSKWebViewDataSource = false } = $$props;
    	const modPublic = {};

    	const mod = {
    		_OLSKModalView: null,
    		// LIFECYCLE
    		LifecycleModuleDidMount() {
    			Object.assign(modPublic, mod._OLSKModalView.modPublic);
    		}
    	};

    	onMount(mod.LifecycleModuleDidMount);

    	$$self.$$.on_mount.push(function () {
    		if (OLSKModalViewTitleText === undefined && !('OLSKModalViewTitleText' in $$props || $$self.$$.bound[$$self.$$.props['OLSKModalViewTitleText']])) {
    			console.warn("<Main> was created without expected prop 'OLSKModalViewTitleText'");
    		}

    		if (OLSKWebViewURL === undefined && !('OLSKWebViewURL' in $$props || $$self.$$.bound[$$self.$$.props['OLSKWebViewURL']])) {
    			console.warn("<Main> was created without expected prop 'OLSKWebViewURL'");
    		}
    	});

    	const writable_props = ['OLSKModalViewTitleText', 'OLSKWebViewURL', 'DEBUG_OLSKWebViewDataSource'];

    	Object_1$8.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function olskmodalview_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			mod._OLSKModalView = $$value;
    			$$invalidate(3, mod);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('OLSKModalViewTitleText' in $$props) $$invalidate(0, OLSKModalViewTitleText = $$props.OLSKModalViewTitleText);
    		if ('OLSKWebViewURL' in $$props) $$invalidate(1, OLSKWebViewURL = $$props.OLSKWebViewURL);
    		if ('DEBUG_OLSKWebViewDataSource' in $$props) $$invalidate(2, DEBUG_OLSKWebViewDataSource = $$props.DEBUG_OLSKWebViewDataSource);
    	};

    	$$self.$capture_state = () => ({
    		OLSKModalViewTitleText,
    		OLSKWebViewURL,
    		DEBUG_OLSKWebViewDataSource,
    		modPublic,
    		OLSKLocalized: main_1,
    		mod,
    		onMount,
    		OLSKModalView: Main$v
    	});

    	$$self.$inject_state = $$props => {
    		if ('OLSKModalViewTitleText' in $$props) $$invalidate(0, OLSKModalViewTitleText = $$props.OLSKModalViewTitleText);
    		if ('OLSKWebViewURL' in $$props) $$invalidate(1, OLSKWebViewURL = $$props.OLSKWebViewURL);
    		if ('DEBUG_OLSKWebViewDataSource' in $$props) $$invalidate(2, DEBUG_OLSKWebViewDataSource = $$props.DEBUG_OLSKWebViewDataSource);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		OLSKModalViewTitleText,
    		OLSKWebViewURL,
    		DEBUG_OLSKWebViewDataSource,
    		mod,
    		modPublic,
    		olskmodalview_binding
    	];
    }

    class Main$w extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$w, create_fragment$w, safe_not_equal, {
    			OLSKModalViewTitleText: 0,
    			OLSKWebViewURL: 1,
    			DEBUG_OLSKWebViewDataSource: 2,
    			modPublic: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$w.name
    		});
    	}

    	get OLSKModalViewTitleText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKModalViewTitleText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKWebViewURL() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKWebViewURL(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get DEBUG_OLSKWebViewDataSource() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set DEBUG_OLSKWebViewDataSource(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[4];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKApropos/main.svelte generated by Svelte v3.59.2 */
    const file$x = "node_modules/OLSKApropos/main.svelte";

    // (25:0) {#if OLSKAproposFeedbackValue }
    function create_if_block_1$d(ctx) {
    	let a;
    	let t_value = main_1('OLSKAproposFeedbackButtonText') + "";
    	let t;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = text(t_value);
    			attr_dev(a, "class", "OLSKAproposFeedbackButton svelte-1koztnt");
    			attr_dev(a, "href", /*OLSKAproposFeedbackValue*/ ctx[0]);
    			add_location(a, file$x, 25, 1, 462);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*OLSKAproposFeedbackValue*/ 1) {
    				attr_dev(a, "href", /*OLSKAproposFeedbackValue*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$d.name,
    		type: "if",
    		source: "(25:0) {#if OLSKAproposFeedbackValue }",
    		ctx
    	});

    	return block;
    }

    // (29:0) {#if OLSKAproposShareData }
    function create_if_block$k(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = `${main_1('OLSKAproposShareButtonText')}`;
    			attr_dev(button, "class", "OLSKAproposShareButton OLSKDecorButtonNoStyle OLSKDecorTappable svelte-1koztnt");
    			add_location(button, file$x, 29, 1, 624);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*mod*/ ctx[2].InterfaceShareButtonDidClick, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$k.name,
    		type: "if",
    		source: "(29:0) {#if OLSKAproposShareData }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$x(ctx) {
    	let div;
    	let t;
    	let if_block0 = /*OLSKAproposFeedbackValue*/ ctx[0] && create_if_block_1$d(ctx);
    	let if_block1 = /*OLSKAproposShareData*/ ctx[1] && create_if_block$k(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div, "class", "OLSKApropos svelte-1koztnt");
    			add_location(div, file$x, 22, 0, 402);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t);
    			if (if_block1) if_block1.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*OLSKAproposFeedbackValue*/ ctx[0]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$d(ctx);
    					if_block0.c();
    					if_block0.m(div, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*OLSKAproposShareData*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$k(ctx);
    					if_block1.c();
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$x($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let { OLSKAproposFeedbackValue = null } = $$props;
    	let { OLSKAproposShareData = null } = $$props;

    	const mod = {
    		// INTERFACE
    		InterfaceShareButtonDidClick() {
    			if (main_1$2()) {
    				return window.alert(JSON.stringify(OLSKAproposShareData));
    			}

    			navigator.share(OLSKAproposShareData);
    		}
    	};

    	const writable_props = ['OLSKAproposFeedbackValue', 'OLSKAproposShareData'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('OLSKAproposFeedbackValue' in $$props) $$invalidate(0, OLSKAproposFeedbackValue = $$props.OLSKAproposFeedbackValue);
    		if ('OLSKAproposShareData' in $$props) $$invalidate(1, OLSKAproposShareData = $$props.OLSKAproposShareData);
    	};

    	$$self.$capture_state = () => ({
    		OLSKAproposFeedbackValue,
    		OLSKAproposShareData,
    		OLSKLocalized: main_1,
    		OLSK_SPEC_UI: main_1$2,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ('OLSKAproposFeedbackValue' in $$props) $$invalidate(0, OLSKAproposFeedbackValue = $$props.OLSKAproposFeedbackValue);
    		if ('OLSKAproposShareData' in $$props) $$invalidate(1, OLSKAproposShareData = $$props.OLSKAproposShareData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [OLSKAproposFeedbackValue, OLSKAproposShareData, mod];
    }

    class Main$x extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$x, create_fragment$x, safe_not_equal, {
    			OLSKAproposFeedbackValue: 0,
    			OLSKAproposShareData: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$x.name
    		});
    	}

    	get OLSKAproposFeedbackValue() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAproposFeedbackValue(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAproposShareData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAproposShareData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-review/main.svelte generated by Svelte v3.59.2 */

    const { Object: Object_1$9, console: console_1$2 } = globals;
    const file$y = "os-app/open-review/main.svelte";

    // (1155:1) {#if !mod._ValueDeckSelected }
    function create_if_block_7$3(ctx) {
    	let komreviewmaster;
    	let current;

    	let komreviewmaster_props = {
    		KOMReviewMasterItems: /*mod*/ ctx[0]._ValueDecksAll,
    		KOMReviewMasterDispatchCreate: /*mod*/ ctx[0].KOMReviewMasterDispatchCreate,
    		KOMReviewMasterDispatchSelect: /*mod*/ ctx[0].KOMReviewMasterDispatchSelect,
    		KOMReviewMasterDispatchToggleExcludeTripleQuestionMark: /*mod*/ ctx[0].KOMReviewMasterDispatchToggleExcludeTripleQuestionMark,
    		KOMReviewMasterDispatchToggleDeckFiguresCaching: /*mod*/ ctx[0].KOMReviewMasterDispatchToggleDeckFiguresCaching
    	};

    	komreviewmaster = new Main$8({
    			props: komreviewmaster_props,
    			$$inline: true
    		});

    	/*komreviewmaster_binding*/ ctx[2](komreviewmaster);

    	const block = {
    		c: function create() {
    			create_component(komreviewmaster.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(komreviewmaster, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komreviewmaster_changes = {};
    			if (dirty & /*mod*/ 1) komreviewmaster_changes.KOMReviewMasterItems = /*mod*/ ctx[0]._ValueDecksAll;
    			if (dirty & /*mod*/ 1) komreviewmaster_changes.KOMReviewMasterDispatchCreate = /*mod*/ ctx[0].KOMReviewMasterDispatchCreate;
    			if (dirty & /*mod*/ 1) komreviewmaster_changes.KOMReviewMasterDispatchSelect = /*mod*/ ctx[0].KOMReviewMasterDispatchSelect;
    			if (dirty & /*mod*/ 1) komreviewmaster_changes.KOMReviewMasterDispatchToggleExcludeTripleQuestionMark = /*mod*/ ctx[0].KOMReviewMasterDispatchToggleExcludeTripleQuestionMark;
    			if (dirty & /*mod*/ 1) komreviewmaster_changes.KOMReviewMasterDispatchToggleDeckFiguresCaching = /*mod*/ ctx[0].KOMReviewMasterDispatchToggleDeckFiguresCaching;
    			komreviewmaster.$set(komreviewmaster_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewmaster.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewmaster.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*komreviewmaster_binding*/ ctx[2](null);
    			destroy_component(komreviewmaster, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$3.name,
    		type: "if",
    		source: "(1155:1) {#if !mod._ValueDeckSelected }",
    		ctx
    	});

    	return block;
    }

    // (1166:1) {#if mod._ValueDeckSelected && !mod._ValueBrowseVisible && !mod._ValuePlayVisible }
    function create_if_block_6$4(ctx) {
    	let komreviewdetail;
    	let current;

    	let komreviewdetail_props = {
    		KOMReviewDetailDeck: /*mod*/ ctx[0]._ValueDeckSelected,
    		KOMReviewDetailDispatchBack: /*mod*/ ctx[0].KOMReviewDetailDispatchBack,
    		KOMReviewDetailDispatchDiscard: /*mod*/ ctx[0].KOMReviewDetailDispatchDiscard,
    		KOMReviewDetailDispatchUpdate: /*mod*/ ctx[0].KOMReviewDetailDispatchUpdate,
    		KOMReviewDetailDispatchRecount: /*mod*/ ctx[0].KOMReviewDetailDispatchRecount,
    		KOMReviewDetailDispatchBrowse: /*mod*/ ctx[0].KOMReviewDetailDispatchBrowse,
    		KOMReviewDetailDispatchPlay: /*mod*/ ctx[0].KOMReviewDetailDispatchPlay
    	};

    	komreviewdetail = new Main$a({
    			props: komreviewdetail_props,
    			$$inline: true
    		});

    	/*komreviewdetail_binding*/ ctx[3](komreviewdetail);

    	const block = {
    		c: function create() {
    			create_component(komreviewdetail.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(komreviewdetail, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komreviewdetail_changes = {};
    			if (dirty & /*mod*/ 1) komreviewdetail_changes.KOMReviewDetailDeck = /*mod*/ ctx[0]._ValueDeckSelected;
    			if (dirty & /*mod*/ 1) komreviewdetail_changes.KOMReviewDetailDispatchBack = /*mod*/ ctx[0].KOMReviewDetailDispatchBack;
    			if (dirty & /*mod*/ 1) komreviewdetail_changes.KOMReviewDetailDispatchDiscard = /*mod*/ ctx[0].KOMReviewDetailDispatchDiscard;
    			if (dirty & /*mod*/ 1) komreviewdetail_changes.KOMReviewDetailDispatchUpdate = /*mod*/ ctx[0].KOMReviewDetailDispatchUpdate;
    			if (dirty & /*mod*/ 1) komreviewdetail_changes.KOMReviewDetailDispatchRecount = /*mod*/ ctx[0].KOMReviewDetailDispatchRecount;
    			if (dirty & /*mod*/ 1) komreviewdetail_changes.KOMReviewDetailDispatchBrowse = /*mod*/ ctx[0].KOMReviewDetailDispatchBrowse;
    			if (dirty & /*mod*/ 1) komreviewdetail_changes.KOMReviewDetailDispatchPlay = /*mod*/ ctx[0].KOMReviewDetailDispatchPlay;
    			komreviewdetail.$set(komreviewdetail_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komreviewdetail.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komreviewdetail.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*komreviewdetail_binding*/ ctx[3](null);
    			destroy_component(komreviewdetail, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$4.name,
    		type: "if",
    		source: "(1166:1) {#if mod._ValueDeckSelected && !mod._ValueBrowseVisible && !mod._ValuePlayVisible }",
    		ctx
    	});

    	return block;
    }

    // (1179:1) {#if mod._ValueDeckSelected && mod._ValueBrowseVisible && !mod._ValuePlayVisible }
    function create_if_block_5$4(ctx) {
    	let kombrowse;
    	let current;

    	let kombrowse_props = {
    		KOMBrowseStorageClient: /*mod*/ ctx[0]._ValueZDRWrap,
    		KOMBrowseDeckSelected: /*mod*/ ctx[0]._ValueDeckSelected,
    		KOMBrowseDeckCards: /*mod*/ ctx[0]._ValueBrowseCards,
    		KOMBrowseDispatchCreate: /*mod*/ ctx[0].KOMBrowseDispatchCreate,
    		KOMBrowseDispatchDiscard: /*mod*/ ctx[0].KOMBrowseDispatchDiscard,
    		KOMBrowseDispatchClose: /*mod*/ ctx[0].KOMBrowseDispatchClose,
    		KOMBrowseInfoSpeechAvailable: /*mod*/ ctx[0]._ValueSpeechAvailable,
    		KOMBrowseInfoDispatchRead: /*mod*/ ctx[0].KOMBrowseInfoDispatchRead
    	};

    	kombrowse = new Main$k({ props: kombrowse_props, $$inline: true });
    	/*kombrowse_binding*/ ctx[4](kombrowse);

    	const block = {
    		c: function create() {
    			create_component(kombrowse.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(kombrowse, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const kombrowse_changes = {};
    			if (dirty & /*mod*/ 1) kombrowse_changes.KOMBrowseStorageClient = /*mod*/ ctx[0]._ValueZDRWrap;
    			if (dirty & /*mod*/ 1) kombrowse_changes.KOMBrowseDeckSelected = /*mod*/ ctx[0]._ValueDeckSelected;
    			if (dirty & /*mod*/ 1) kombrowse_changes.KOMBrowseDeckCards = /*mod*/ ctx[0]._ValueBrowseCards;
    			if (dirty & /*mod*/ 1) kombrowse_changes.KOMBrowseDispatchCreate = /*mod*/ ctx[0].KOMBrowseDispatchCreate;
    			if (dirty & /*mod*/ 1) kombrowse_changes.KOMBrowseDispatchDiscard = /*mod*/ ctx[0].KOMBrowseDispatchDiscard;
    			if (dirty & /*mod*/ 1) kombrowse_changes.KOMBrowseDispatchClose = /*mod*/ ctx[0].KOMBrowseDispatchClose;
    			if (dirty & /*mod*/ 1) kombrowse_changes.KOMBrowseInfoSpeechAvailable = /*mod*/ ctx[0]._ValueSpeechAvailable;
    			if (dirty & /*mod*/ 1) kombrowse_changes.KOMBrowseInfoDispatchRead = /*mod*/ ctx[0].KOMBrowseInfoDispatchRead;
    			kombrowse.$set(kombrowse_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kombrowse.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kombrowse.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*kombrowse_binding*/ ctx[4](null);
    			destroy_component(kombrowse, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$4.name,
    		type: "if",
    		source: "(1179:1) {#if mod._ValueDeckSelected && mod._ValueBrowseVisible && !mod._ValuePlayVisible }",
    		ctx
    	});

    	return block;
    }

    // (1193:1) {#if mod._ValuePlayVisible}
    function create_if_block_4$5(ctx) {
    	let komplay;
    	let current;

    	komplay = new Main$l({
    			props: {
    				KOMPlaySpacings: /*mod*/ ctx[0]._ValuePlaySpacings,
    				KOMPlayDeck: /*mod*/ ctx[0]._ValueDeckSelected,
    				KOMPlayDispatchDone: /*mod*/ ctx[0].KOMPlayDispatchDone,
    				KOMPlayDispatchUpdate: /*mod*/ ctx[0].KOMPlayDispatchUpdate,
    				KOMPlayDispatchSpeechRead: /*mod*/ ctx[0].KOMPlayDispatchSpeechRead,
    				KOMPlayDispatchSpeechStop: /*mod*/ ctx[0].KOMPlayDispatchSpeechStop,
    				KOMPlayDispatchFetch: /*mod*/ ctx[0].KOMPlayDispatchFetch,
    				KOMPlayExtraResponseButtons: /*mod*/ ctx[0]._ValuePlayExtraResponseButtons
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(komplay.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(komplay, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const komplay_changes = {};
    			if (dirty & /*mod*/ 1) komplay_changes.KOMPlaySpacings = /*mod*/ ctx[0]._ValuePlaySpacings;
    			if (dirty & /*mod*/ 1) komplay_changes.KOMPlayDeck = /*mod*/ ctx[0]._ValueDeckSelected;
    			if (dirty & /*mod*/ 1) komplay_changes.KOMPlayDispatchDone = /*mod*/ ctx[0].KOMPlayDispatchDone;
    			if (dirty & /*mod*/ 1) komplay_changes.KOMPlayDispatchUpdate = /*mod*/ ctx[0].KOMPlayDispatchUpdate;
    			if (dirty & /*mod*/ 1) komplay_changes.KOMPlayDispatchSpeechRead = /*mod*/ ctx[0].KOMPlayDispatchSpeechRead;
    			if (dirty & /*mod*/ 1) komplay_changes.KOMPlayDispatchSpeechStop = /*mod*/ ctx[0].KOMPlayDispatchSpeechStop;
    			if (dirty & /*mod*/ 1) komplay_changes.KOMPlayDispatchFetch = /*mod*/ ctx[0].KOMPlayDispatchFetch;
    			if (dirty & /*mod*/ 1) komplay_changes.KOMPlayExtraResponseButtons = /*mod*/ ctx[0]._ValuePlayExtraResponseButtons;
    			komplay.$set(komplay_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(komplay.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(komplay.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(komplay, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$5.name,
    		type: "if",
    		source: "(1193:1) {#if mod._ValuePlayVisible}",
    		ctx
    	});

    	return block;
    }

    // (1207:0) {#if !mod._ValuePlayVisible }
    function create_if_block_1$e(ctx) {
    	let footer;
    	let t0;
    	let olskapptoolbar;
    	let t1;
    	let olskinstall;
    	let t2;
    	let show_if = !main_1$2();
    	let current;
    	let if_block0 = !/*mod*/ ctx[0]._ValueCloudToolbarHidden && create_if_block_3$6(ctx);

    	olskapptoolbar = new Main$n({
    			props: {
    				OLSKAppToolbarDispatchApropos: /*mod*/ ctx[0].OLSKAppToolbarDispatchApropos,
    				OLSKAppToolbarDispatchTongue: /*mod*/ ctx[0].OLSKAppToolbarDispatchTongue,
    				OLSKAppToolbarGuideURL: window.OLSKCanonical('KOMGuideRoute'),
    				OLSKAppToolbarErrorText: /*mod*/ ctx[0]._OLSKAppToolbarErrorText,
    				OLSKAppToolbarCloudConnected: !!/*mod*/ ctx[0]._ValueCloudIdentity,
    				OLSKAppToolbarCloudOffline: /*mod*/ ctx[0]._ValueCloudIsOffline,
    				OLSKAppToolbarCloudError: !!/*mod*/ ctx[0]._ValueCloudErrorText,
    				OLSKAppToolbarDispatchCloud: /*mod*/ ctx[0].OLSKAppToolbarDispatchCloud,
    				OLSKAppToolbarDispatchLauncher: /*mod*/ ctx[0].OLSKAppToolbarDispatchLauncher
    			},
    			$$inline: true
    		});

    	olskinstall = new Main$p({ $$inline: true });
    	let if_block1 = show_if && create_if_block_2$9(ctx);

    	const block = {
    		c: function create() {
    			footer = element("footer");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			create_component(olskapptoolbar.$$.fragment);
    			t1 = space();
    			create_component(olskinstall.$$.fragment);
    			t2 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(footer, "class", "KOMReviewViewportFooter OLSKMobileViewFooter");
    			add_location(footer, file$y, 1207, 1, 41808);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, footer, anchor);
    			if (if_block0) if_block0.m(footer, null);
    			append_dev(footer, t0);
    			mount_component(olskapptoolbar, footer, null);
    			append_dev(footer, t1);
    			mount_component(olskinstall, footer, null);
    			append_dev(footer, t2);
    			if (if_block1) if_block1.m(footer, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!/*mod*/ ctx[0]._ValueCloudToolbarHidden) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_3$6(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(footer, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			const olskapptoolbar_changes = {};
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarDispatchApropos = /*mod*/ ctx[0].OLSKAppToolbarDispatchApropos;
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarDispatchTongue = /*mod*/ ctx[0].OLSKAppToolbarDispatchTongue;
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarErrorText = /*mod*/ ctx[0]._OLSKAppToolbarErrorText;
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarCloudConnected = !!/*mod*/ ctx[0]._ValueCloudIdentity;
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarCloudOffline = /*mod*/ ctx[0]._ValueCloudIsOffline;
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarCloudError = !!/*mod*/ ctx[0]._ValueCloudErrorText;
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarDispatchCloud = /*mod*/ ctx[0].OLSKAppToolbarDispatchCloud;
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarDispatchLauncher = /*mod*/ ctx[0].OLSKAppToolbarDispatchLauncher;
    			olskapptoolbar.$set(olskapptoolbar_changes);
    			if (show_if) if_block1.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(olskapptoolbar.$$.fragment, local);
    			transition_in(olskinstall.$$.fragment, local);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(olskapptoolbar.$$.fragment, local);
    			transition_out(olskinstall.$$.fragment, local);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(footer);
    			if (if_block0) if_block0.d();
    			destroy_component(olskapptoolbar);
    			destroy_component(olskinstall);
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$e.name,
    		type: "if",
    		source: "(1207:0) {#if !mod._ValuePlayVisible }",
    		ctx
    	});

    	return block;
    }

    // (1210:1) {#if !mod._ValueCloudToolbarHidden }
    function create_if_block_3$6(ctx) {
    	let div2;
    	let div0;
    	let t;
    	let div1;
    	let olskcloud;
    	let current;

    	olskcloud = new Main$s({
    			props: {
    				OLSKCloudErrorText: /*mod*/ ctx[0]._ValueCloudErrorText,
    				OLSKCloudDispatchRenew: /*mod*/ ctx[0].OLSKCloudDispatchRenew,
    				OLSKCloudFormDispatchSubmit: /*mod*/ ctx[0].OLSKCloudFormDispatchSubmit,
    				OLSKCloudStatusIdentityText: /*mod*/ ctx[0]._ValueCloudIdentity,
    				OLSKCloudStatusIsSyncing: /*mod*/ ctx[0]._ValueIsSyncing,
    				OLSKCloudStatusDispatchSyncStart: /*mod*/ ctx[0].OLSKCloudStatusDispatchSyncStart,
    				OLSKCloudStatusDispatchSyncStop: /*mod*/ ctx[0].OLSKCloudStatusDispatchSyncStop,
    				OLSKCloudStatusDispatchDisconnect: /*mod*/ ctx[0].OLSKCloudStatusDispatchDisconnect
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			create_component(olskcloud.$$.fragment);
    			attr_dev(div0, "class", "OLSKToolbarElementGroup");
    			add_location(div0, file$y, 1211, 3, 41999);
    			attr_dev(div1, "class", "OLSKToolbarElementGroup");
    			add_location(div1, file$y, 1213, 3, 42047);
    			attr_dev(div2, "class", "KOMReviewCloudToolbar OLSKToolbar OLSKToolbarJustify OLSKCommonEdgeTop");
    			add_location(div2, file$y, 1210, 2, 41911);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div2, t);
    			append_dev(div2, div1);
    			mount_component(olskcloud, div1, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const olskcloud_changes = {};
    			if (dirty & /*mod*/ 1) olskcloud_changes.OLSKCloudErrorText = /*mod*/ ctx[0]._ValueCloudErrorText;
    			if (dirty & /*mod*/ 1) olskcloud_changes.OLSKCloudDispatchRenew = /*mod*/ ctx[0].OLSKCloudDispatchRenew;
    			if (dirty & /*mod*/ 1) olskcloud_changes.OLSKCloudFormDispatchSubmit = /*mod*/ ctx[0].OLSKCloudFormDispatchSubmit;
    			if (dirty & /*mod*/ 1) olskcloud_changes.OLSKCloudStatusIdentityText = /*mod*/ ctx[0]._ValueCloudIdentity;
    			if (dirty & /*mod*/ 1) olskcloud_changes.OLSKCloudStatusIsSyncing = /*mod*/ ctx[0]._ValueIsSyncing;
    			if (dirty & /*mod*/ 1) olskcloud_changes.OLSKCloudStatusDispatchSyncStart = /*mod*/ ctx[0].OLSKCloudStatusDispatchSyncStart;
    			if (dirty & /*mod*/ 1) olskcloud_changes.OLSKCloudStatusDispatchSyncStop = /*mod*/ ctx[0].OLSKCloudStatusDispatchSyncStop;
    			if (dirty & /*mod*/ 1) olskcloud_changes.OLSKCloudStatusDispatchDisconnect = /*mod*/ ctx[0].OLSKCloudStatusDispatchDisconnect;
    			olskcloud.$set(olskcloud_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskcloud.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskcloud.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(olskcloud);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$6.name,
    		type: "if",
    		source: "(1210:1) {#if !mod._ValueCloudToolbarHidden }",
    		ctx
    	});

    	return block;
    }

    // (1243:1) {#if !OLSK_SPEC_UI()}
    function create_if_block_2$9(ctx) {
    	let olskserviceworkerview;
    	let current;

    	olskserviceworkerview = new Main$o({
    			props: {
    				OLSKServiceWorkerRegistrationRoute: window.OLSKCanonical('KOMServiceWorkerRoute')
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(olskserviceworkerview.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskserviceworkerview, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskserviceworkerview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskserviceworkerview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskserviceworkerview, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$9.name,
    		type: "if",
    		source: "(1243:1) {#if !OLSK_SPEC_UI()}",
    		ctx
    	});

    	return block;
    }

    // (1249:0) <OLSKModalView OLSKModalViewTitleText={ OLSKLocalized('OLSKAproposHeadingText') } bind:this={ mod._OLSKModalView } OLSKModalViewIsCapped={ true }>
    function create_default_slot$4(ctx) {
    	let olskapropos;
    	let current;

    	olskapropos = new Main$x({
    			props: {
    				OLSKAproposFeedbackValue: `javascript:window.location.href = window.atob('${window.btoa(/*OLSKFormatted*/ ctx[1](window.atob('bWFpbHRvOmErJUBAcmNyZWF0aXYuY29t'), 'RP_004'))}')`
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(olskapropos.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskapropos, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskapropos.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskapropos.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskapropos, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(1249:0) <OLSKModalView OLSKModalViewTitleText={ OLSKLocalized('OLSKAproposHeadingText') } bind:this={ mod._OLSKModalView } OLSKModalViewIsCapped={ true }>",
    		ctx
    	});

    	return block;
    }

    // (1257:0) {#if mod._IsRunningDemo }
    function create_if_block$l(ctx) {
    	let olskpointer;
    	let current;
    	olskpointer = new Main$t({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(olskpointer.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskpointer, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskpointer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskpointer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskpointer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$l.name,
    		type: "if",
    		source: "(1257:0) {#if mod._IsRunningDemo }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$y(ctx) {
    	let div1;
    	let div0;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let olskmodalview;
    	let t5;
    	let if_block5_anchor;
    	let current;
    	let if_block0 = !/*mod*/ ctx[0]._ValueDeckSelected && create_if_block_7$3(ctx);
    	let if_block1 = /*mod*/ ctx[0]._ValueDeckSelected && !/*mod*/ ctx[0]._ValueBrowseVisible && !/*mod*/ ctx[0]._ValuePlayVisible && create_if_block_6$4(ctx);
    	let if_block2 = /*mod*/ ctx[0]._ValueDeckSelected && /*mod*/ ctx[0]._ValueBrowseVisible && !/*mod*/ ctx[0]._ValuePlayVisible && create_if_block_5$4(ctx);
    	let if_block3 = /*mod*/ ctx[0]._ValuePlayVisible && create_if_block_4$5(ctx);
    	let if_block4 = !/*mod*/ ctx[0]._ValuePlayVisible && create_if_block_1$e(ctx);

    	let olskmodalview_props = {
    		OLSKModalViewTitleText: main_1('OLSKAproposHeadingText'),
    		OLSKModalViewIsCapped: true,
    		$$slots: { default: [create_default_slot$4] },
    		$$scope: { ctx }
    	};

    	olskmodalview = new Main$v({
    			props: olskmodalview_props,
    			$$inline: true
    		});

    	/*olskmodalview_binding*/ ctx[5](olskmodalview);
    	let if_block5 = /*mod*/ ctx[0]._IsRunningDemo && create_if_block$l(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			create_component(olskmodalview.$$.fragment);
    			t5 = space();
    			if (if_block5) if_block5.c();
    			if_block5_anchor = empty();
    			attr_dev(div0, "class", "OLSKViewportContent");
    			add_location(div0, file$y, 1153, 0, 39498);
    			attr_dev(div1, "class", "KOMReview OLSKViewport svelte-mgec53");
    			toggle_class(div1, "OLSKIsLoading", /*mod*/ ctx[0]._ValueIsLoading);
    			add_location(div1, file$y, 1151, 0, 39416);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t0);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(div0, t1);
    			if (if_block2) if_block2.m(div0, null);
    			append_dev(div0, t2);
    			if (if_block3) if_block3.m(div0, null);
    			append_dev(div1, t3);
    			if (if_block4) if_block4.m(div1, null);
    			append_dev(div1, t4);
    			mount_component(olskmodalview, div1, null);
    			insert_dev(target, t5, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, if_block5_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!/*mod*/ ctx[0]._ValueDeckSelected) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_7$3(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div0, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*mod*/ ctx[0]._ValueDeckSelected && !/*mod*/ ctx[0]._ValueBrowseVisible && !/*mod*/ ctx[0]._ValuePlayVisible) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_6$4(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div0, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*mod*/ ctx[0]._ValueDeckSelected && /*mod*/ ctx[0]._ValueBrowseVisible && !/*mod*/ ctx[0]._ValuePlayVisible) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_5$4(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div0, t2);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*mod*/ ctx[0]._ValuePlayVisible) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_4$5(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div0, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (!/*mod*/ ctx[0]._ValuePlayVisible) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);

    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block4, 1);
    					}
    				} else {
    					if_block4 = create_if_block_1$e(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(div1, t4);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}

    			const olskmodalview_changes = {};

    			if (dirty & /*$$scope*/ 64) {
    				olskmodalview_changes.$$scope = { dirty, ctx };
    			}

    			olskmodalview.$set(olskmodalview_changes);

    			if (!current || dirty & /*mod*/ 1) {
    				toggle_class(div1, "OLSKIsLoading", /*mod*/ ctx[0]._ValueIsLoading);
    			}

    			if (/*mod*/ ctx[0]._IsRunningDemo) {
    				if (if_block5) {
    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block5, 1);
    					}
    				} else {
    					if_block5 = create_if_block$l(ctx);
    					if_block5.c();
    					transition_in(if_block5, 1);
    					if_block5.m(if_block5_anchor.parentNode, if_block5_anchor);
    				}
    			} else if (if_block5) {
    				group_outros();

    				transition_out(if_block5, 1, 1, () => {
    					if_block5 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(if_block4);
    			transition_in(olskmodalview.$$.fragment, local);
    			transition_in(if_block5);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(if_block4);
    			transition_out(olskmodalview.$$.fragment, local);
    			transition_out(if_block5);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			/*olskmodalview_binding*/ ctx[5](null);
    			destroy_component(olskmodalview);
    			if (detaching) detach_dev(t5);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(if_block5_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$y($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	const OLSKFormatted = OLSKString.OLSKStringFormatted;

    	const mod = {
    		// VALUE
    		_ValueIsLoading: true,
    		_ValueDecksAll: [],
    		ValueDecksAll(inputData) {
    			$$invalidate(0, mod._ValueDecksAll = mod$7.KOMReviewDeckSort(inputData), mod);
    		},
    		_ValueDeckSelected: undefined,
    		_ValueDeckSelectedObjectsMap: {},
    		ValueDeckSelected(inputData) {
    			$$invalidate(0, mod._ValueDeckSelected = inputData, mod);

    			if (inputData) {
    				mod.DataDeckSelectedObjects(inputData);
    			}
    		},
    		_ValueBrowseVisible: false,
    		_ValueBrowseCards: [],
    		ValueBrowseCards(inputData) {
    			$$invalidate(0, mod._ValueBrowseCards = inputData, mod);
    		},
    		_ValuePlayVisible: false,
    		_ValuePlaySpacings: [],
    		_ValuePlayExtraResponseButtons: main_1$2(),
    		_ValueHoldCards: [],
    		_ValueHoldSpacings: [],
    		_ValueCloudToolbarHidden: true,
    		_ValueSpacingUpdateThrottleMap: {},
    		_ValueDeckFiguresThrottleMap: {},
    		_ValueDeckCachingEnabled: false,
    		_ValueSpeechAvailable: 'speechSynthesis' in window,
    		_ValueCacheDeckFiguresMap: {},
    		ValueCacheDeckFiguresMap(inputData) {
    			return $$invalidate(
    				0,
    				mod._ValueCacheDeckFiguresMap = main_1$2() || !mod._ValueDeckCachingEnabled
    				? inputData
    				: OLSKLocalStorage.OLKSLocalStorageSet(window.localStorage, 'KOM_REVIEW_CACHE_DeckFiguresMap', inputData),
    				mod
    			);
    		},
    		_IsRunningDemo: false,
    		// DATA
    		DataSetting(inputData) {
    			return mod._ValueSettingsAll[inputData];
    		},
    		async DataSettingValue(inputData) {
    			return ((await mod._ValueZDRWrap.App.KOMSetting.KOMSettingList()).filter(function (e) {
    				return e.KOMSettingKey === inputData;
    			}).pop() || {}).KOMSettingValue;
    		},
    		DataDeckSelectedObjects(inputData) {
    			return main$8.OLSKCacheResultFetchOnceSync(mod._ValueDeckSelectedObjectsMap, inputData.KOMDeckID, async function () {
    				return mod._ValueZDRWrap.App.KOMDeck.KOMDeckObjectsMap(inputData, await mod.DataSettingValue('KOMSettingExcludeTripleQuestionMark') === 'true');
    			});
    		},
    		DataNavigator() {
    			return navigator.serviceWorker
    			? navigator
    			: { serviceWorker: {} };
    		},
    		DataReviewRecipes() {
    			const items = mod._ValueDecksAll.filter(function (e) {
    				return e !== mod._ValueDeckSelected;
    			}).map(function (e) {
    				return {
    					LCHRecipeSignature: 'KOMReviewLauncherItemSelectDeck',
    					LCHRecipeName: OLSKFormatted(main_1('KOMReviewLauncherItemSelectDeckTextFormat'), e.KOMDeckName),
    					LCHRecipeCallback() {
    						return mod.ControlDeckSelect(e);
    					}
    				};
    			}).concat([
    				{
    					LCHRecipeSignature: 'KOMReviewLauncherItemToggleExtraResponseButtons',
    					LCHRecipeName: main_1('KOMReviewLauncherItemToggleExtraResponseButtonsText'),
    					LCHRecipeCallback: async function KOMReviewLauncherItemToggleExtraResponseButtons() {
    						$$invalidate(0, mod._ValuePlayExtraResponseButtons = !mod._ValuePlayExtraResponseButtons, mod);

    						await mod.DataSettingValue('KOMSettingExtraResponseButtons')
    						? await mod._ValueZDRWrap.App.KOMSetting.ZDRModelDeleteObject({
    								KOMSettingKey: 'KOMSettingExtraResponseButtons'
    							})
    						: await mod._ValueZDRWrap.App.KOMSetting.ZDRModelWriteObject({
    								KOMSettingKey: 'KOMSettingExtraResponseButtons',
    								KOMSettingValue: 'true'
    							});
    					}
    				}
    			]);

    			if (mod._ValueDeckSelected) {
    				items.push({
    					LCHRecipeSignature: 'KOMReviewLauncherItemExportSelectedJSON',
    					LCHRecipeName: main_1('KOMReviewLauncherItemExportSelectedJSONText'),
    					LCHRecipeCallback: async function KOMReviewLauncherItemExportSelectedJSON() {
    						return this.api.OLSKTransportLauncherItemExportJSON(await mod._OLSKTransportDispatchExportInput([mod._ValueDeckSelected]));
    					}
    				});

    				items.push({
    					LCHRecipeSignature: 'KOMReviewLauncherItemExportSelectedTXT',
    					LCHRecipeName: main_1('KOMReviewLauncherItemExportSelectedTXTText'),
    					LCHRecipeCallback: async function KOMReviewLauncherItemExportSelectedTXT() {
    						return this.api.LCHSaveFile(await mod._DeckExportTXT(mod._ValueDeckSelected), main$c.OLSKTransportExportBasename() + '.txt');
    					}
    				});
    			}

    			if (!!mod._ValueCloudIdentity && mod._ValueZDRWrap.ZDRStorageProtocol === main$d.ZDRProtocolRemoteStorage()) {
    				items.push(...[
    					{
    						LCHRecipeSignature: 'KOMReviewLauncherItemDebugPlungeData',
    						LCHRecipeName: main_1('KOMReviewLauncherItemDebugPlungeDataText'),
    						LCHRecipeCallback: async function KOMReviewLauncherItemDebugPlungeData() {
    							if (!window.confirm(main_1('OLSKWordingConfirmText'))) {
    								return;
    							}

    							// console.log(Object.keys(await mod._ValueZDRWrap.ZDRStorageClient().kommit.__HOTFIX.__OLSKRemoteStorageHotfixPlungeData()));
    							mod.ControlDeckSelect(null);

    							if (main_1$2()) {
    								window.FakeWindowLocationHref = 'reload';
    								return;
    							}
    						}, // setTimeout(function () {
    						// 	window.location.reload();
    						// }, 1000);
    						
    					}
    				]);
    			}

    			items.push(...main$d.ZDRRecipes({
    				ParamMod: mod,
    				ParamSpecUI: main_1$2()
    			}));

    			items.push(...main$c.OLSKTransportRecipes({
    				OLSKLocalized: main_1,
    				OLSKTransportDispatchImportJSON: mod.OLSKTransportDispatchImportJSON,
    				OLSKTransportDispatchExportInput: mod.OLSKTransportDispatchExportInput,
    				ParamSpecUI: main_1$2()
    			}));

    			if (mod._ValueZDRWrap.ZDRStorageProtocol === main$d.ZDRProtocolRemoteStorage()) {
    				items.push(...main$3.OLSKRemoteStorageRecipes({
    					ParamStorage: mod._ValueZDRWrap.ZDRStorageClient(),
    					OLSKLocalized: main_1,
    					ParamMod: mod,
    					ParamSpecUI: main_1$2()
    				}));
    			}

    			items.push(...main_1$3.OLSKServiceWorkerRecipes(window, mod.DataNavigator(), main_1, main_1$2()));

    			if (mod._KOMReviewMaster) {
    				items.push(...mod._KOMReviewMaster.modPublic.KOMReviewMasterRecipes());
    			}

    			if (mod._KOMReviewDetail) {
    				items.push(...mod._KOMReviewDetail.modPublic.KOMReviewDetailRecipes());
    			}

    			if (mod._KOMBrowse) {
    				items.push(...mod._KOMBrowse.modPublic.KOMBrowseRecipes());
    			}

    			if (main_1$2()) {
    				items.push(...[
    					{
    						LCHRecipeName: 'FakeZDRSchemaDispatchSyncCreateDeck',
    						LCHRecipeCallback: async function FakeZDRSchemaDispatchSyncCreateDeck() {
    							return mod.ZDRSchemaDispatchSyncCreateDeck(await mod._ValueZDRWrap.App.KOMDeck.KOMDeckCreate(mod.FakeDeckObjectValid('FakeZDRSchemaDispatchSyncCreateDeck')));
    						}
    					},
    					{
    						LCHRecipeName: 'FakeZDRSchemaDispatchSyncUpdateDeck',
    						LCHRecipeCallback: async function FakeZDRSchemaDispatchSyncUpdateDeck() {
    							return mod.ZDRSchemaDispatchSyncUpdateDeck(await mod._ValueZDRWrap.App.KOMDeck.KOMDeckUpdate(mod.FakeDeckObjectValid('FakeZDRSchemaDispatchSyncUpdateDeck')));
    						}
    					},
    					{
    						LCHRecipeName: 'FakeZDRSchemaDispatchSyncDeleteDeck',
    						LCHRecipeCallback: async function FakeZDRSchemaDispatchSyncDeleteDeck() {
    							return mod.ZDRSchemaDispatchSyncDeleteDeck(await mod._ValueZDRWrap.App.KOMDeck.KOMDeckDelete(mod.FakeDeckObjectValid()));
    						}
    					},
    					{
    						LCHRecipeName: 'FakeZDRSchemaDispatchSyncCreateCard',
    						LCHRecipeCallback: async function FakeZDRSchemaDispatchSyncCreateCard() {
    							return mod.ZDRSchemaDispatchSyncCreateCard(await mod._ValueZDRWrap.App.KOMCard.KOMCardCreate(mod.FakeCardObjectValid('FakeZDRSchemaDispatchSyncCreateCard'), mod.FakeDeckObjectValid()));
    						}
    					},
    					{
    						LCHRecipeName: 'FakeZDRSchemaDispatchSyncUpdateCard',
    						LCHRecipeCallback: async function FakeZDRSchemaDispatchSyncUpdateCard() {
    							return mod.ZDRSchemaDispatchSyncUpdateCard(await mod._ValueZDRWrap.App.KOMCard.KOMCardUpdate(Object.assign(mod.FakeCardObjectValid('FakeZDRSchemaDispatchSyncUpdateCard'), { KOMCardIsRetired: true })));
    						}
    					},
    					{
    						LCHRecipeName: 'FakeZDRSchemaDispatchSyncDeleteCard',
    						LCHRecipeCallback: async function FakeZDRSchemaDispatchSyncDeleteCard() {
    							return mod.ZDRSchemaDispatchSyncDeleteCard(await mod._ValueZDRWrap.App.KOMCard.KOMCardDelete(mod.FakeCardObjectValid()));
    						}
    					},
    					{
    						LCHRecipeName: 'FakeZDRSchemaDispatchSyncConflictCard',
    						LCHRecipeCallback: async function FakeZDRSchemaDispatchSyncConflictCard() {
    							const item = (await mod._ValueZDRWrap.App.KOMCard.KOMCardList(mod._ValueDeckSelected)).filter(function (e) {
    								return e.KOMCardFrontText.match('FakeZDRSchemaDispatchSyncConflictCard');
    							}).pop();

    							return mod.ZDRSchemaDispatchSyncConflictCard({
    								origin: 'conflict',
    								oldValue: await mod._ValueZDRWrap.App.KOMCard.KOMCardUpdate(Object.assign({}, item, {
    									KOMCardFrontText: item.KOMCardFrontText + '-local'
    								})),
    								newValue: Object.assign({}, item, {
    									KOMCardFrontText: item.KOMCardFrontText + '-remote'
    								})
    							});
    						}
    					},
    					{
    						LCHRecipeName: 'FakeZDRSchemaDispatchSyncCreateSpacing',
    						LCHRecipeCallback: async function FakeZDRSchemaDispatchSyncCreateSpacing() {
    							[false, true].forEach(async function (backward) {
    								const spacing = await mod._ValueZDRWrap.App.KOMSpacing.KOMSpacingWrite(
    									Object.assign(mod.FakeSpacingObjectValid(backward), {
    										KOMSpacingIsLearning: true,
    										KOMSpacingDueDate: new Date()
    									}),
    									mod.FakeCardObjectValid()
    								);

    								if (!backward) {
    									return;
    								}

    								mod.ZDRSchemaDispatchSyncCreateSpacing(spacing);
    							});
    						}
    					},
    					{
    						LCHRecipeName: 'FakeZDRSchemaDispatchSyncUpdateSpacing',
    						LCHRecipeCallback: function FakeZDRSchemaDispatchSyncUpdateSpacing() {
    							[false, true].map(async function (backward) {
    								const spacing = await mod._ValueZDRWrap.App.KOMSpacing.KOMSpacingWrite(
    									Object.assign(mod.FakeSpacingObjectPopulated(new Date(), backward), {
    										KOMSpacingDueDate: new Date(Date.now() + 1000 * 60 * 60 * 24)
    									}),
    									mod.FakeCardObjectValid()
    								);

    								if (!backward) {
    									return;
    								}

    								mod.ZDRSchemaDispatchSyncUpdateSpacing(spacing);
    							});
    						}
    					},
    					{
    						LCHRecipeName: 'FakeZDRSchemaDispatchSyncDeleteSpacing',
    						LCHRecipeCallback: function FakeZDRSchemaDispatchSyncDeleteSpacing() {
    							return mod.ZDRSchemaDispatchSyncDeleteSpacing(mod.FakeSpacingObjectValid());
    						}
    					},
    					{
    						LCHRecipeName: 'KOMReviewLauncherItemDebug_AlertFakeExportSelectedSerialized',
    						LCHRecipeCallback: async function KOMReviewLauncherItemDebug_AlertFakeExportSelectedSerialized() {
    							return this.api.OLSKTransportLauncherFakeItemExportSerialized(await mod._OLSKTransportDispatchExportInput([mod._ValueDeckSelected]));
    						}
    					},
    					{
    						LCHRecipeName: 'KOMReviewLauncherItemDebug_AlertFakeExportSelectedPlaintext',
    						LCHRecipeCallback: async function KOMReviewLauncherItemDebug_AlertFakeExportSelectedPlaintext() {
    							return main$c.OLSKTransportFakeExportPlaintext(await mod._DeckExportTXT(mod._ValueDeckSelected));
    						}
    					},
    					{
    						LCHRecipeName: 'KOMReviewLauncherItemDebug_TestSpeedPopulate',
    						LCHRecipeCallback: async function KOMReviewLauncherItemDebug_TestSpeedPopulate() {
    							const deck = await mod._ValueZDRWrap.App.KOMDeck.KOMDeckCreate({ KOMDeckName: 'alfa' });

    							return Promise.all(Array.from(Array(100)).map(function (e, i) {
    								return mod._ValueZDRWrap.App.KOMCard.KOMCardCreate(
    									Object.assign(mod.FakeCardObjectValid(), {
    										KOMCardID: i.toString(),
    										KOMCardDeckID: deck.KOMDeckID
    									}),
    									deck
    								).then(function (card) {
    									return Promise.all([true, false].map(function (e, i) {
    										return mod._ValueZDRWrap.App.KOMSpacing.KOMSpacingWrite(
    											Object.assign(mod.FakeSpacingObjectPopulated(new Date(Date.now() - 1000 * 60 * 60 * 24)), {
    												KOMSpacingID: card.KOMCardID + '-' + (i ? 'backward' : 'forward')
    											}),
    											card
    										);
    									}));
    								});
    							}));
    						}
    					},
    					{
    						LCHRecipeName: 'KOMReviewLauncherItemDebug_TestSpeedStartup',
    						LCHRecipeCallback: function KOMReviewLauncherItemDebug_TestSpeedStartup() {
    							return mod.SetupValueDecksAll();
    						}
    					},
    					{
    						LCHRecipeName: 'FakeRetireInterval',
    						LCHRecipeCallback: async function FakeRetireInterval() {
    							return (await mod.DataDeckSelectedObjects(mod._ValueDeckSelected)).$KOMDeckSpacings.slice(-2).forEach(function (e) {
    								Object.assign(e, {
    									KOMSpacingChronicles: [
    										{
    											KOMChronicleDrawDate: new Date(),
    											KOMChronicleFlipDate: new Date(),
    											KOMChronicleResponseDate: new Date(),
    											KOMChronicleResponseType: 'RESPONSE_EASY',
    											KOMChronicleInterval: 29,
    											KOMChronicleMultiplier: 1.2,
    											KOMChronicleDueDate: new Date()
    										}
    									],
    									KOMSpacingDrawDate: new Date(),
    									KOMSpacingFlipDate: new Date(),
    									KOMSpacingResponseDate: new Date(),
    									KOMSpacingInterval: 29,
    									KOMSpacingMultiplier: 1.2,
    									KOMSpacingDueDate: new Date()
    								});
    							});
    						}
    					}
    				]);
    			}

    			return items;
    		},
    		FakeDeckObjectValid(inputData = '') {
    			return {
    				KOMDeckID: 'FakeDeckID',
    				KOMDeckName: inputData,
    				KOMDeckCreationDate: new Date(),
    				KOMDeckModificationDate: new Date()
    			};
    		},
    		FakeCardObjectValid(inputData = '') {
    			return {
    				KOMCardID: 'FakeCardID',
    				KOMCardDeckID: 'FakeDeckID',
    				KOMCardFrontText: inputData,
    				KOMCardRearText: '',
    				KOMCardCreationDate: new Date(),
    				KOMCardModificationDate: new Date()
    			};
    		},
    		FakeSpacingObjectValid(inputData) {
    			return {
    				KOMSpacingID: 'FakeCardID-' + (inputData ? 'backward' : 'forward'),
    				KOMSpacingChronicles: [],
    				$KOMSpacingDeckID: 'FakeDeckID'
    			};
    		},
    		FakeSpacingObjectPopulated(inputData, backward) {
    			const drawDate = new Date(inputData - 1000);

    			return Object.assign(mod.FakeSpacingObjectValid(backward), {
    				KOMSpacingDrawDate: drawDate,
    				KOMSpacingFlipDate: inputData,
    				KOMSpacingInterval: 1,
    				KOMSpacingMultiplier: 2.5,
    				KOMSpacingDueDate: new Date(),
    				KOMSpacingChronicles: [
    					{
    						KOMChronicleDrawDate: drawDate,
    						KOMChronicleFlipDate: inputData,
    						KOMChronicleResponseType: 'RESPONSE_EASY',
    						KOMChronicleResponseDate: inputData,
    						KOMChronicleInterval: 1,
    						KOMChronicleMultiplier: 2.5,
    						KOMChronicleDueDate: new Date()
    					}
    				]
    			});
    		},
    		// CONTROL
    		async ControlDeckCreate(inputData) {
    			inputData = inputData || window.prompt(main_1('KOMReviewCreatePromptText'));

    			if (!inputData) {
    				return;
    			}

    			const item = await mod._ValueZDRWrap.App.KOMDeck.KOMDeckCreate({ KOMDeckName: inputData });
    			await mod.ReactDeckFigures(item);
    			mod.ValueDecksAll(mod._ValueDecksAll.concat(item));
    		},
    		async ControlDeckSave(inputData) {
    			await mod._ValueZDRWrap.App.KOMDeck.KOMDeckUpdate(inputData);
    		},
    		async ControlDeckDiscard(inputData) {
    			mod.ValueDecksAll(mod._ValueDecksAll.filter(function (e) {
    				return e !== inputData;
    			}));

    			await mod._ValueZDRWrap.App.KOMDeck.KOMDeckDelete(inputData);
    		},
    		ControlDeckSelect(inputData) {
    			mod.ValueDeckSelected(inputData);
    		},
    		ControlSpacingSave(inputData) {
    			OLSKThrottle.OLSKThrottleMappedTimeout(mod._ValueSpacingUpdateThrottleMap, inputData.KOMSpacingID, {
    				OLSKThrottleDuration: main_1$2() ? 0 : 500,
    				OLSKThrottleCallback() {
    					return mod._ValueZDRWrap.App.KOMSpacing.KOMSpacingWrite(inputData, inputData.$KOMSpacingCard);
    				}
    			});
    		},
    		ControlReadStart(param1, param2) {
    			if (main_1$2()) {
    				mod.DebugAudioLog(`read:${param2}:${param1}`);
    			}

    			if (!mod._ValueSpeechAvailable) {
    				return;
    			}

    			if (speechSynthesis.speaking) {
    				speechSynthesis.cancel();
    			}

    			const item = new SpeechSynthesisUtterance(param1);
    			item.lang = param2;

    			if (param1 === mod._ValueSpeechLastText) {
    				item.rate = 0.5;
    			}

    			item.voice = speechSynthesis.getVoices().filter(function (e) {
    				return e.lang == item.lang;
    			}).pop();

    			speechSynthesis.speak(item);
    			$$invalidate(0, mod._ValueSpeechLastText = param1, mod);
    		},
    		ControlReadStop() {
    			if (!mod._ValueSpeechAvailable) {
    				return;
    			}

    			if (speechSynthesis.speaking) {
    				speechSynthesis.cancel();
    			}
    		},
    		async ControlDemo() {
    			$$invalidate(0, mod._IsRunningDemo = true, mod);

    			// await mod.ControlDeckCreate('alfa');
    			return main$9.OLSKChainGather(Object.assign(
    				{
    					Wait: main$a.OLSKBeaconWait,
    					Point(inputData) {
    						return main$a._OLSKBeaconAnimate(main$a.OLSKBeaconPointFunction('.OLSKPointer', inputData));
    					},
    					Click(inputData) {
    						return main$a._OLSKBeaconAnimate(main$a.OLSKBeaconClickFunction(inputData, '.OLSKPointer', 'OLSKPointerActive'));
    					},
    					Defer(inputData) {
    						return main$a.OLSKBeaconDeferFunction(inputData);
    					},
    					Focus(inputData) {
    						return new Promise(function (resolve) {
    								resolve(document.querySelector(inputData).focus());
    							});
    					},
    					Fill(param1, param2) {
    						return main$a._OLSKBeaconAnimate(main$a.OLSKBeaconFillFunction(param1, param2));
    					},
    					Set(param1, param2) {
    						return main$a._OLSKBeaconAnimate(main$a.OLSKBeaconSetFunction(param1, param2));
    					},
    					Nudge() {
    						return main$a._OLSKBeaconAnimate(main$a.OLSKBeaconNudgeFunction('.OLSKPointer', ...arguments));
    					}
    				},
    				mod
    			)).Point('.KOMReviewMasterCreateButton').Nudge(0, 50).Wait().Point('.KOMReviewMasterCreateButton').Click('.KOMReviewMasterCreateButton').Wait(300).Point('.KOMReviewMasterListItem').Click('.KOMReviewMasterListItem').Point('.KOMReviewDetailToolbarCardsButton').Click('.KOMReviewDetailToolbarCardsButton').Point('.KOMBrowseCreateButton').Click('.KOMBrowseCreateButton').Point('.KOMBrowseInfoFormFrontTextField').Focus('.KOMBrowseInfoFormFrontTextField').Fill('.KOMBrowseInfoFormFrontTextField', 'bonjour').Point('.KOMBrowseInfoFormRearTextField').Focus('.KOMBrowseInfoFormRearTextField').Fill('.KOMBrowseInfoFormRearTextField', 'hello').Point('.KOMBrowseInfoToolbarBackButton').Click('.KOMBrowseInfoToolbarBackButton').Click('.KOMBrowseCloseButton').Point('.KOMReviewDetailFormFrontSpeechIsEnabledField').Click('.KOMReviewDetailFormFrontSpeechIsEnabledFieldLabel').Point('.KOMReviewDetailFormFrontLanguageCode .KOMReviewDetailLanguageCodeField').Focus('.KOMReviewDetailFormFrontLanguageCode .KOMReviewDetailLanguageCodeField').Set('.KOMReviewDetailFormFrontLanguageCode .KOMReviewDetailLanguageCodeField', 'fr-FR').Point('.KOMReviewDetailFormRearSpeechIsEnabledField').Click('.KOMReviewDetailFormRearSpeechIsEnabledFieldLabel').Point('.KOMReviewDetailFormRearLanguageCode .KOMReviewDetailLanguageCodeField').Focus('.KOMReviewDetailFormRearLanguageCode .KOMReviewDetailLanguageCodeField').Set('.KOMReviewDetailFormRearLanguageCode .KOMReviewDetailLanguageCodeField', 'en-US').Point('.KOMReviewDetailPlayButton').Defer('.KOMReviewDetailPlayButton').Wait(1200).Point('.KOMPlayFlipButton').Click('.KOMPlayFlipButton').Wait().Point('.KOMPlayResponseButtonNext').Click('.KOMPlayResponseButtonNext').Wait().Point('.KOMPlayFlipButton').Click('.KOMPlayFlipButton').Wait().Nudge(0, 100).OLSKChainExecute();
    		},
    		// MESSAGE
    		KOMReviewMasterDispatchCreate() {
    			mod.ControlDeckCreate();
    		},
    		KOMReviewMasterDispatchSelect(inputData) {
    			mod.ControlDeckSelect(inputData);
    		},
    		async KOMReviewMasterDispatchToggleExcludeTripleQuestionMark() {
    			await mod.DataSettingValue('KOMSettingExcludeTripleQuestionMark')
    			? await mod._ValueZDRWrap.App.KOMSetting.ZDRModelDeleteObject({
    					KOMSettingKey: 'KOMSettingExcludeTripleQuestionMark'
    				})
    			: await mod._ValueZDRWrap.App.KOMSetting.ZDRModelWriteObject({
    					KOMSettingKey: 'KOMSettingExcludeTripleQuestionMark',
    					KOMSettingValue: 'true'
    				});

    			$$invalidate(0, mod._ValueDeckSelectedObjectsMap = {}, mod);
    			mod._ValueDecksAll.forEach(mod.ReactDeckFigures);
    		},
    		async KOMReviewMasterDispatchToggleDeckFiguresCaching() {
    			await mod.DataSettingValue('KOMSettingDeckCachingEnabled')
    			? await mod._ValueZDRWrap.App.KOMSetting.ZDRModelDeleteObject({
    					KOMSettingKey: 'KOMSettingDeckCachingEnabled'
    				})
    			: await mod._ValueZDRWrap.App.KOMSetting.ZDRModelWriteObject({
    					KOMSettingKey: 'KOMSettingDeckCachingEnabled',
    					KOMSettingValue: 'true'
    				});
    		},
    		KOMReviewDetailDispatchBack() {
    			mod.ControlDeckSelect(null);
    		},
    		KOMReviewDetailDispatchDiscard(inputData) {
    			mod.ControlDeckSelect(null);
    			mod.ControlDeckDiscard(inputData);
    		},
    		KOMReviewDetailDispatchUpdate(inputData) {
    			mod.ControlDeckSave(mod._ValueDeckSelected);
    			$$invalidate(0, mod._ValueDeckSelected = mod._ValueDeckSelected, mod); // #purge-svelte-force-update
    		},
    		KOMReviewDetailDispatchRecount() {
    			return mod.ReactDeckFigures(mod._ValueDeckSelected);
    		},
    		async KOMReviewDetailDispatchBrowse() {
    			mod.ValueBrowseCards((await mod.DataDeckSelectedObjects(mod._ValueDeckSelected)).$KOMDeckCards);
    			$$invalidate(0, mod._ValueBrowseVisible = true, mod);
    		},
    		async KOMReviewDetailDispatchPlay(inputData) {
    			$$invalidate(0, mod._ValuePlaySpacings = mod$4.KOMPlaySort(mod$7.KOMReviewFilter(mod$7.KOMReviewSpacingsToday((await mod.DataDeckSelectedObjects(mod._ValueDeckSelected)).$KOMDeckSpacings), inputData, mod._ValueDeckSelected)), mod);
    			$$invalidate(0, mod._ValuePlayVisible = true, mod);
    		},
    		async KOMBrowseDispatchCreate(inputData) {
    			(await mod.DataDeckSelectedObjects(mod._ValueDeckSelected)).$KOMDeckCards.push(inputData);

    			(await mod.DataDeckSelectedObjects(mod._ValueDeckSelected)).$KOMDeckSpacings.push(...Object.values(await mod._ValueZDRWrap.App.KOMSpacing.KOMSpacingList(inputData)).map(function (e) {
    				return Object.assign(e, { $KOMSpacingCard: inputData });
    			}));
    		},
    		async KOMBrowseDispatchDiscard(inputData) {
    			(await mod.DataDeckSelectedObjects(mod._ValueDeckSelected)).$KOMDeckCards = (await mod.DataDeckSelectedObjects(mod._ValueDeckSelected)).$KOMDeckCards.filter(function (e) {
    				return e !== inputData;
    			});

    			(await mod.DataDeckSelectedObjects(mod._ValueDeckSelected)).$KOMDeckSpacings = (await mod.DataDeckSelectedObjects(mod._ValueDeckSelected)).$KOMDeckSpacings.filter(function (e) {
    				return e.$KOMSpacingCard !== inputData;
    			});
    		},
    		async KOMBrowseDispatchClose() {
    			$$invalidate(0, mod._ValueDeckSelected = await mod.ReactDeckFigures(mod._ValueDeckSelected), mod); // #purge-svelte-force-update
    			$$invalidate(0, mod._ValueBrowseVisible = false, mod);
    			mod.ValueBrowseCards([]);
    		},
    		KOMBrowseInfoDispatchRead() {
    			mod.ControlReadStart(...arguments);
    		},
    		KOMPlayDispatchUpdate(inputData) {
    			mod.ControlSpacingSave(inputData);
    		},
    		KOMPlayDispatchSpeechRead(inputData) {
    			mod.ControlReadStart(inputData.ParamText, inputData.ParamLanguage);
    		},
    		KOMPlayDispatchSpeechStop() {
    			mod.ControlReadStop();
    		},
    		async KOMPlayDispatchFetch(param1, param2) {
    			return await mod._ValueZDRWrap.App.KOMCard.KOMCardAudioFetch(param1, param2);
    		},
    		async KOMPlayDispatchDone() {
    			await Promise.all(Object.keys(mod._ValueSpacingUpdateThrottleMap).map(function (e) {
    				return OLSKThrottle.OLSKThrottleSkip(mod._ValueSpacingUpdateThrottleMap[e]);
    			}));

    			await Promise.all(mod$7.KOMReviewRetireCards(mod._ValueDeckSelected, (await mod.DataDeckSelectedObjects(mod._ValueDeckSelected)).$KOMDeckSpacings).map(function (e) {
    				return mod._ValueZDRWrap.App.KOMCard.KOMCardUpdate(Object.assign(e, { KOMCardIsRetired: true }));
    			}));

    			$$invalidate(0, mod._ValueDeckSelected = await mod.ReactDeckFigures(mod._ValueDeckSelected), mod); // #purge-svelte-force-update
    			$$invalidate(0, mod._ValuePlayVisible = false, mod);
    		},
    		async OLSKTransportDispatchImportJSON(inputData) {
    			await mod._ValueZDRWrap.App.KOMTransport.KOMTransportImport(main$3.OLSKRemoteStoragePostJSONParse(inputData));
    			await mod.SetupValueDecksAll();
    			await mod.SetupSettingsAll();
    		},
    		async _OLSKTransportDispatchExportInput(KOMDeck) {
    			return mod._ValueZDRWrap.App.KOMTransport.KOMTransportExport({
    				KOMDeck,
    				KOMSetting: await mod._ValueZDRWrap.App.KOMSetting.KOMSettingList()
    			});
    		},
    		async _DeckExportTXT(inputData) {
    			return mod$7.KOMReviewDeckTXT(Object.assign(
    				{
    					$KOMDeckCards: (await mod._ValueZDRWrap.App.KOMCard.KOMCardList(inputData)).sort(mod$8.KOMBrowseSortFunction)
    				},
    				inputData
    			));
    		},
    		OLSKTransportDispatchExportInput() {
    			return mod._OLSKTransportDispatchExportInput(mod._ValueDecksAll);
    		},
    		async OLSKCloudFormDispatchSubmit(inputData) {
    			const protocol = main$d.ZDRPreferenceProtocolConnect(inputData);

    			(main$d.ZDRPreferenceProtocolMigrate()
    			? await mod.DataStorageClient(protocol)
    			: mod._ValueZDRWrap).ZDRCloudConnect(inputData);
    		},
    		OLSKCloudDispatchRenew() {
    			mod._ValueZDRWrap.ZDRCloudReconnect(mod._ValueCloudIdentity);
    		},
    		OLSKCloudStatusDispatchDisconnect() {
    			mod._ValueZDRWrap.ZDRCloudDisconnect();
    			$$invalidate(0, mod._ValueCloudIdentity = null, mod);
    			main$d.ZDRPreferenceProtocolClear();
    			localStorage.clear();
    		},
    		ZDRParamDispatchError(error) {
    			$$invalidate(0, mod._ValueCloudErrorText = error.message, mod);
    		},
    		ZDRParamDispatchWriteError(error) {
    			window.alert($$invalidate(0, mod._OLSKAppToolbarErrorText = error.message, mod));
    		},
    		ZDRParamDispatchConnected(identity, token) {
    			$$invalidate(0, mod._ValueCloudIdentity = identity, mod);
    			$$invalidate(0, mod._ValueCloudToken = token, mod);
    		},
    		ZDRParamDispatchOnline() {
    			$$invalidate(0, mod._ValueCloudIsOffline = false, mod);
    		},
    		ZDRParamDispatchOffline() {
    			$$invalidate(0, mod._ValueCloudIsOffline = true, mod);
    		},
    		ZDRParamDispatchSyncDidStart() {
    			$$invalidate(0, mod._ValueIsSyncing = true, mod);
    		},
    		ZDRParamDispatchSyncDidStop() {
    			$$invalidate(0, mod._ValueIsSyncing = false, mod);
    		},
    		OLSKCloudStatusDispatchSyncStart() {
    			if (mod._ValueZDRWrap.ZDRStorageProtocol !== main$d.ZDRProtocolRemoteStorage()) {
    				return;
    			}

    			mod._ValueZDRWrap.ZDRStorageClient().startSync();
    			mod.ZDRParamDispatchSyncDidStart();
    		},
    		OLSKCloudStatusDispatchSyncStop() {
    			if (mod._ValueZDRWrap.ZDRStorageProtocol !== main$d.ZDRProtocolRemoteStorage()) {
    				return;
    			}

    			mod._ValueZDRWrap.ZDRStorageClient().stopSync();
    		},
    		OLSKAppToolbarDispatchApropos() {
    			mod._OLSKModalView.modPublic.OLSKModalViewShow();
    		},
    		OLSKAppToolbarDispatchTongue() {
    			if (window.Launchlet.LCHSingletonExists()) {
    				return window.Launchlet.LCHSingletonDestroy();
    			}

    			// #hotfix launchlet show all items
    			let selected;

    			window.Launchlet.LCHSingletonCreate({
    				LCHOptionRecipes: main$b.OLSKLanguageSwitcherRecipes({
    					ParamLanguageCodes: window.OLSKPublicConstants('OLSKSharedPageLanguagesAvailable'),
    					ParamCurrentLanguage: window.OLSKPublicConstants('OLSKSharedPageCurrentLanguage'),
    					ParamSpecUI: main_1$2(),
    					ParamRouteConstant: window.OLSKPublicConstants('OLSKSharedActiveRouteConstant'),
    					OLSKCanonical: window.OLSKCanonical
    				}).map(function (e) {
    					const item = e.LCHRecipeCallback;

    					return Object.assign(e, {
    						LCHRecipeCallback() {
    							selected = item;
    						}
    					});
    				}),
    				LCHOptionCompletionHandler() {
    					selected && selected();
    				},
    				LCHOptionMode: Launchlet.LCHModePreview,
    				LCHOptionLanguage: window.OLSKPublicConstants('OLSKSharedPageCurrentLanguage')
    			});
    		},
    		OLSKAppToolbarDispatchCloud() {
    			$$invalidate(0, mod._ValueCloudToolbarHidden = !mod._ValueCloudToolbarHidden, mod);
    		},
    		OLSKAppToolbarDispatchLauncher() {
    			if (window.Launchlet.LCHSingletonExists()) {
    				return window.Launchlet.LCHSingletonDestroy();
    			}

    			window.Launchlet.LCHSingletonCreate({
    				LCHOptionRecipes: mod.DataReviewRecipes(),
    				LCHOptionLanguage: window.OLSKPublicConstants('OLSKSharedPageCurrentLanguage')
    			});
    		},
    		ZDRSchemaDispatchSyncCreateDeck(inputData) {
    			mod.SetupValueDecksAll();
    		},
    		async ZDRSchemaDispatchSyncUpdateDeck(inputData) {
    			await mod.SetupValueDecksAll();
    			mod.ReactDeckIfSelected(inputData);
    		},
    		async ZDRSchemaDispatchSyncDeleteDeck(inputData) {
    			await mod.SetupValueDecksAll();

    			if (!mod._ValueDeckSelected) {
    				return;
    			}

    			if (mod._ValueDeckSelected.KOMDeckID === inputData.KOMDeckID) {
    				$$invalidate(0, mod._ValueDeckSelected = null, mod);
    			}
    		},
    		ZDRSchemaDispatchSyncCreateCard(inputData) {
    			if (mod._KOMBrowse && mod._ValueDeckSelected && inputData.KOMCardDeckID === mod._ValueDeckSelected.KOMDeckID) {
    				return mod._KOMBrowse.modPublic.KOMBrowseSyncCreateCard(inputData);
    			}

    			mod.ReactDeckFiguresThrottled(inputData.KOMCardDeckID);
    		},
    		ZDRSchemaDispatchSyncUpdateCard(inputData) {
    			if (mod._KOMBrowse && mod._ValueDeckSelected && inputData.KOMCardDeckID === mod._ValueDeckSelected.KOMDeckID) {
    				return mod._KOMBrowse.modPublic.KOMBrowseSyncUpdateCard(inputData);
    			}

    			mod.ReactDeckFiguresThrottled(inputData.KOMCardDeckID);
    		},
    		ZDRSchemaDispatchSyncDeleteCard(inputData) {
    			if (mod._KOMBrowse && mod._ValueDeckSelected && inputData.KOMCardDeckID === mod._ValueDeckSelected.KOMDeckID) {
    				return mod._KOMBrowse.modPublic.KOMBrowseSyncDeleteCard(inputData);
    			}

    			mod.ReactDeckFiguresThrottled(inputData.KOMCardDeckID);
    		},
    		ZDRSchemaDispatchSyncConflictCard(inputData) {
    			setTimeout(
    				async function () {
    					mod.ZDRSchemaDispatchSyncUpdateCard(await mod._ValueZDRWrap.App.KOMCard.KOMCardUpdate(main$3.OLSKRemoteStoragePostJSONParse(main$3.OLSKRemoteStorageChangeDelegateConflictSelectRecent(inputData))));
    				},
    				main_1$2() ? 0 : 500
    			);
    		},
    		ZDRSchemaDispatchSyncCreateSpacing(inputData) {
    			mod.ReactDeckFiguresThrottled(inputData.$KOMSpacingDeckID);
    		},
    		ZDRSchemaDispatchSyncUpdateSpacing(inputData) {
    			mod.ReactDeckFiguresThrottled(inputData.$KOMSpacingDeckID);
    		},
    		ZDRSchemaDispatchSyncDeleteSpacing(inputData) {
    			
    		},
    		// REACT
    		ReactDeckIfSelected(inputData) {
    			if (!mod._ValueDeckSelected) {
    				return;
    			}

    			if (mod._ValueDeckSelected.KOMDeckID !== inputData.KOMDeckID) {
    				return;
    			}

    			$$invalidate(0, mod._ValueDeckSelected = Object.assign(mod._ValueDeckSelected, inputData), mod); // #purge-svelte-force-update
    		},
    		async ReactDeckFigures(deck) {
    			const activeSpacings = (await mod.DataDeckSelectedObjects(deck)).$KOMDeckSpacings;

    			const todaySpacingsNotStudied = mod$7.KOMReviewSpacingsToday(activeSpacings).reduce(
    				function (coll, item) {
    					coll[KOMSpacing.KOMSpacingIsUnseen(item) || KOMSpacing.KOMSpacingIsFresh(item)
    					? '$KOMDeckTodayNewCount'
    					: '$KOMDeckTodayReviewCount'].push(item);

    					return coll;
    				},
    				{
    					$KOMDeckTodayReviewCount: [],
    					$KOMDeckTodayNewCount: []
    				}
    			);

    			const todaySpacingsStudied = activeSpacings.filter(function (e) {
    				if (!e.KOMSpacingChronicles.length) {
    					return false;
    				}

    				return main$5.OLSKMomentPerceptionDay(e.KOMSpacingChronicles.slice(-1).pop().KOMChronicleResponseDate) === main$5.OLSKMomentPerceptionDay(new Date());
    			});

    			const upcomingGroupings = mod$7.KOMReviewGeneralUpcomingGroupByDate(mod$7.KOMReviewGeneralUpcomingFilter(activeSpacings));
    			const historicalGroupings = mod$7.KOMReviewGeneralHistoricalGroupByDate(mod$7.KOMReviewGeneralHistoricalFilter(activeSpacings));

    			return Object.assign(deck, mod.ValueCacheDeckFiguresMap(Object.assign(mod._ValueCacheDeckFiguresMap, {
    				[deck.KOMDeckID]: {
    					$KOMDeckTodayReviewCount: KOMSpacing.KOMSpacingFilterUnique(todaySpacingsNotStudied.$KOMDeckTodayReviewCount).length,
    					$KOMDeckTodayNewCount: KOMSpacing.KOMSpacingFilterUnique(todaySpacingsNotStudied.$KOMDeckTodayNewCount).length,
    					$KOMDeckTodayStudiedCount: todaySpacingsStudied.length,
    					$KOMDeckGeneralNotUnseenCount: activeSpacings.filter(function (e) {
    						return e.KOMSpacingChronicles.length;
    					}).length,
    					$KOMReviewTodayTotalCards: KOMSpacing.KOMSpacingFilterUnique(todaySpacingsStudied).length,
    					$KOMReviewTodayTimeMinutes: mod$7.KOMReviewTotalMinutes(mod$7.KOMReviewTodayTotalMilliseconds(todaySpacingsStudied)),
    					$KOMReviewTodayReviewAccuracy: mod$7.KOMReviewTodayPercentage(mod$7.KOMReviewTodayReviewAccuracy(todaySpacingsStudied)),
    					$KOMReviewGeneralUpcomingData: mod$7.KOMReviewGeneralUpcomingDates().map(function (e) {
    						return {
    							KOMReviewChartElementDateBarTableRowDataKey: main$5.OLSKMomentPerceptionDay(new Date()) === e
    							? main_1('KOMReviewGeneralTodayText')
    							: e,
    							KOMReviewChartElementDateBarTableRowDataValues: Object.entries(KOMSpacing.KOMSpacingByStatus(upcomingGroupings[e] || [])).reduce(
    								function (coll, item) {
    									if (['KOMSpacingGroupingDeveloping', 'KOMSpacingGroupingMature'].includes(item[0])) {
    										coll.push(KOMSpacing.KOMSpacingFilterUnique(item[1]).length);
    									}

    									return coll;
    								},
    								[]
    							).reverse()
    						};
    					}),
    					$KOMReviewGeneralHistoricalData: mod$7.KOMReviewGeneralHistoricalDates().map(function (e) {
    						return {
    							KOMReviewChartElementDateBarTableRowDataKey: main$5.OLSKMomentPerceptionDay(new Date()) === e
    							? main_1('KOMReviewGeneralTodayText')
    							: e,
    							KOMReviewChartElementDateBarTableRowDataValues: Object.entries(KOMSpacing.KOMSpacingChroniclesByStatus(historicalGroupings[e] || [], e)).reduce(
    								function (coll, item) {
    									return coll.concat(mod$7.KOMReviewTotalMinutes(mod$7.KOMReviewGeneralHistoricalTotalMilliseconds(item[1])));
    								},
    								[]
    							).reverse()
    						};
    					}),
    					$KOMReviewChartCompositionCollectionData: Object.entries(KOMSpacing.KOMSpacingByStatus(activeSpacings)).reduce(
    						function (coll, item) {
    							coll[item[0]] = KOMSpacing.KOMSpacingFilterUnique(item[1]).length;
    							return coll;
    						},
    						{}
    					)
    				}
    			}))[deck.KOMDeckID]);
    		},
    		ReactDeckFiguresThrottled(inputData) {
    			const deck = mod._ValueDecksAll.filter(function (e) {
    				return e.KOMDeckID === inputData;
    			}).pop();

    			if (!deck) {
    				return;
    			}

    			OLSKThrottle.OLSKThrottleMappedTimeout(mod._ValueDeckFiguresThrottleMap, inputData, {
    				OLSKThrottleDuration: main_1$2() ? 0 : 500,
    				async OLSKThrottleCallback() {
    					await mod.ReactDeckFigures(deck); // #purge-svelte-force-update
    				}
    			});
    		},
    		// SETUP
    		async SetupEverything() {
    			await mod.SetupStorageClient(); // mod.ControlDemo();
    			await mod.SetupSettingsAll();
    			mod.SetupValueCacheDeckFiguresMap();
    			await mod.SetupValueDecksAll();
    			await mod.SetupCleanup();
    			$$invalidate(0, mod._ValueIsLoading = false, mod);
    		}, // mod.ControlDemo();
    		DataStorageClient(inputData) {
    			return main$d.ZDRWrap({
    				ZDRParamLibrary: (function () {
    					return RemoteStorage;
    				})(),
    				ZDRParamScopes: [
    					{
    						ZDRScopeKey: 'App',
    						ZDRScopeDirectory: 'kommit',
    						ZDRScopeCreatorDirectory: 'rCreativ',
    						ZDRScopeSchemas: [
    							Object.assign(KOMDeck, {
    								ZDRSchemaDispatchSyncCreate: mod.ZDRSchemaDispatchSyncCreateDeck,
    								ZDRSchemaDispatchSyncUpdate: mod.ZDRSchemaDispatchSyncUpdateDeck,
    								ZDRSchemaDispatchSyncDelete: mod.ZDRSchemaDispatchSyncDeleteDeck
    							}),
    							Object.assign(KOMCard, {
    								ZDRSchemaDispatchSyncCreate: mod.ZDRSchemaDispatchSyncCreateCard,
    								ZDRSchemaDispatchSyncUpdate: mod.ZDRSchemaDispatchSyncUpdateCard,
    								ZDRSchemaDispatchSyncDelete: mod.ZDRSchemaDispatchSyncDeleteCard,
    								ZDRSchemaDispatchSyncConflict: mod.ZDRSchemaDispatchSyncConflictCard
    							}),
    							Object.assign(KOMSpacing, {
    								ZDRSchemaDispatchSyncCreate: mod.ZDRSchemaDispatchSyncCreateSpacing,
    								ZDRSchemaDispatchSyncUpdate: mod.ZDRSchemaDispatchSyncUpdateSpacing,
    								ZDRSchemaDispatchSyncDelete: mod.ZDRSchemaDispatchSyncDeleteSpacing
    							}),
    							KOMSetting,
    							KOMTransport
    						]
    					}
    				],
    				ZDRParamDispatchError: mod.ZDRParamDispatchError,
    				ZDRParamDispatchWriteError: mod.ZDRParamDispatchWriteError,
    				ZDRParamDispatchConnected: mod.ZDRParamDispatchConnected,
    				ZDRParamDispatchOnline: mod.ZDRParamDispatchOnline,
    				ZDRParamDispatchOffline: mod.ZDRParamDispatchOffline,
    				_ZDRParamDispatchJSONPreStringify: OLSKObject.OLSKObjectSafeCopy,
    				_ZDRParamDispatchJSONPostParse: main$3.OLSKRemoteStoragePostJSONParse
    			});
    		},
    		async SetupStorageClient() {
    			$$invalidate(0, mod._ValueZDRWrap = await mod.DataStorageClient(main$d.ZDRPreferenceProtocol(main$d.ZDRProtocolRemoteStorage())), mod);
    		},
    		async SetupSettingsAll() {
    			$$invalidate(
    				0,
    				mod._ValueSettingsAll = Object.fromEntries((await mod._ValueZDRWrap.App.KOMSetting.KOMSettingList()).map(function (e) {
    					return [e.KOMSettingKey, e.KOMSettingValue];
    				})),
    				mod
    			);

    			$$invalidate(0, mod._ValueDeckCachingEnabled = await mod.DataSettingValue('KOMSettingDeckCachingEnabled') === 'true', mod);

    			if (main_1$2()) {
    				return;
    			}

    			$$invalidate(0, mod._ValuePlayExtraResponseButtons = await mod.DataSettingValue('KOMSettingExtraResponseButtons') === 'true', mod);
    		},
    		SetupValueCacheDeckFiguresMap() {
    			if (!mod._ValueDeckCachingEnabled) {
    				return OLSKLocalStorage.OLKSLocalStorageSet(window.localStorage, 'KOM_REVIEW_CACHE_DeckFiguresMap', null);
    			}

    			$$invalidate(0, mod._ValueCacheDeckFiguresMap = OLSKLocalStorage.OLKSLocalStorageGet(window.localStorage, 'KOM_REVIEW_CACHE_DeckFiguresMap') || {}, mod);
    		},
    		async SetupValueDecksAll() {
    			if (main$d.ZDRPreferenceProtocolMigrate()) {
    				const client = await mod.DataStorageClient(main$d.ZDRPreferenceProtocolMigrate());

    				await Promise.all((await client.App.ZDRStoragePathsRecursive('/')).map(async function (e) {
    					const item = await client.App.ZDRStorageReadFile(e);

    					await mod._ValueZDRWrap.App.ZDRStorageWriteFile(e, typeof item !== 'string' ? new Blob([item]) : item, typeof item !== 'string'
    					? 'audio/mpeg'
    					: 'application/json');

    					await client.App.ZDRStorageDeleteFile(e);
    				}));

    				main$d.ZDRPreferenceProtocolMigrateClear();
    				client.ZDRCloudDisconnect();
    			}

    			mod.ValueDecksAll(await Promise.all((await mod._ValueZDRWrap.App.KOMDeck.KOMDeckList()).map(async function (deck) {
    				if (!mod._ValueCacheDeckFiguresMap[deck.KOMDeckID]) {
    					await mod.ReactDeckFigures(deck);
    				}

    				return Object.assign(deck, mod._ValueCacheDeckFiguresMap[deck.KOMDeckID] || {});
    			})));
    		},
    		SetupCleanup() {
    			window.localStorage.removeItem('OLSK_FUND_GRANT_DATA');
    			return mod._ValueSettingsAll.KOMSettingFundClue && mod._ValueZDRWrap.App.KOMSetting.ZDRModelDeleteObject({ KOMSettingKey: 'KOMSettingFundClue' });
    		},
    		// LIFECYCLE
    		async LifecycleModuleWillMount() {
    			try {
    				await mod.SetupEverything();
    			} catch(e) {
    				console.error(e);
    			}
    		}
    	};

    	onMount(mod.LifecycleModuleWillMount);
    	const writable_props = [];

    	Object_1$9.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function komreviewmaster_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			mod._KOMReviewMaster = $$value;
    			$$invalidate(0, mod);
    		});
    	}

    	function komreviewdetail_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			mod._KOMReviewDetail = $$value;
    			$$invalidate(0, mod);
    		});
    	}

    	function kombrowse_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			mod._KOMBrowse = $$value;
    			$$invalidate(0, mod);
    		});
    	}

    	function olskmodalview_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			mod._OLSKModalView = $$value;
    			$$invalidate(0, mod);
    		});
    	}

    	$$self.$capture_state = () => ({
    		OLSKLocalized: main_1,
    		OLSKString,
    		OLSKFormatted,
    		OLSK_SPEC_UI: main_1$2,
    		OLSKRemoteStorage: main$3,
    		OLSKObject,
    		OLSKServiceWorker: main_1$3,
    		RemoteStorage,
    		KOMDeck,
    		KOMCard,
    		KOMSpacing,
    		KOMSetting,
    		KOMTransport,
    		KOMReviewLogic: mod$7,
    		KOMPlayLogic: mod$4,
    		KOMBrowseLogic: mod$8,
    		OLSKThrottle,
    		OLSKLocalStorage,
    		OLSKCache: main$8,
    		OLSKChain: main$9,
    		OLSKBeacon: main$a,
    		OLSKLanguageSwitcher: main$b,
    		OLSKTransport: main$c,
    		OLSKMoment: main$5,
    		zerodatawrap: main$d,
    		mod,
    		onMount,
    		KOMReviewMaster: Main$8,
    		KOMReviewDetail: Main$a,
    		KOMBrowse: Main$k,
    		KOMPlay: Main$l,
    		OLSKAppToolbar: Main$n,
    		OLSKServiceWorkerView: Main$o,
    		OLSKInstall: Main$p,
    		OLSKCloud: Main$s,
    		OLSKPointer: Main$t,
    		OLSKWebView: Main$w,
    		OLSKModalView: Main$v,
    		OLSKApropos: Main$x
    	});

    	return [
    		mod,
    		OLSKFormatted,
    		komreviewmaster_binding,
    		komreviewdetail_binding,
    		kombrowse_binding,
    		olskmodalview_binding
    	];
    }

    class Main$y extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$y, create_fragment$y, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$y.name
    		});
    	}
    }

    const KOMReview = new Main$y({
    	target: document.body,
    });

    return KOMReview;

}());
//# sourceMappingURL=ui-behaviour.js.map
